<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppFullName" xml:space="preserve">
    <value>.NET Run Command</value>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>Command used to run .NET apps</value>
  </data>
  <data name="CommandOptionNoBuildDescription" xml:space="preserve">
    <value>Do not build the project before running. Implies --no-restore.</value>
  </data>
  <data name="CommandOptionFrameworkDescription" xml:space="preserve">
    <value>Build and run the app using the specified framework. The framework has to be specified in the project file. </value>
  </data>
  <data name="CommandOptionProjectDescription" xml:space="preserve">
    <value>The path to the project file to run (defaults to the current directory if there is only one project).</value>
  </data>
  <data name="CommandOptionLaunchProfileDescription" xml:space="preserve">
    <value>The name of the launch profile (if any) to use when launching the application.</value>
  </data>
  <data name="CommandOptionNoLaunchProfileDescription" xml:space="preserve">
    <value>Do not attempt to use launchSettings.json to configure the application.</value>
  </data>
  <data name="ConfigurationOptionDescription" xml:space="preserve">
    <value>The configuration to run for. The default for most projects is 'Debug'.</value>
  </data>
  <data name="FrameworkOptionDescription" xml:space="preserve">
    <value>The target framework to run for. The target framework must also be specified in the project file.</value>
  </data>
  <data name="RuntimeOptionDescription" xml:space="preserve">
    <value>The target runtime to run for.</value>
  </data>
  <data name="RunCommandException" xml:space="preserve">
    <value>The build failed. Fix the build errors and run again.</value>
  </data>
  <data name="RunCommandExceptionUnableToRunSpecifyFramework" xml:space="preserve">
    <value>Unable to run your project
Your project targets multiple frameworks. Specify which framework to run using '{0}'.</value>
  </data>
  <data name="RunCommandExceptionUnableToRun" xml:space="preserve">
    <value>Unable to run your project.
Ensure you have a runnable project type and ensure '{0}' supports this project.
A runnable project should target a runnable TFM (for instance, netcoreapp2.0) and have OutputType 'Exe'.
The current {1} is '{2}'.</value>
  </data>
  <data name="RunCommandExceptionNoProjects" xml:space="preserve">
    <value>Couldn't find a project to run. Ensure a project exists in {0}, or pass the path to the project using {1}.</value>
  </data>
  <data name="RunCommandExceptionMultipleProjects" xml:space="preserve">
    <value>Specify which project file to use because {0} contains more than one project file.</value>
  </data>
  <data name="RunCommandAdditionalArgsHelpText" xml:space="preserve">
    <value>Arguments passed to the application that is being run.</value>
  </data>
  <data name="RunCommandExceptionCouldNotLocateALaunchSettingsFile" xml:space="preserve">
    <value>The specified launch profile could not be located.</value>
  </data>
  <data name="RunCommandExceptionCouldNotApplyLaunchSettings" xml:space="preserve">
    <value>The launch profile "{0}" could not be applied.
{1}</value>
  </data>
  <data name="DefaultLaunchProfileDisplayName" xml:space="preserve">
    <value>(Default)</value>
  </data>
  <data name="UsingLaunchSettingsFromMessage" xml:space="preserve">
    <value>Using launch settings from {0}...</value>
  </data>
  <data name="LaunchProfileIsNotAJsonObject" xml:space="preserve">
    <value>A profile with the specified name could not be found or is not a valid JSON object.</value>
  </data>
  <data name="LaunchProfileHandlerCannotBeLocated" xml:space="preserve">
    <value>The launch profile type '{0}' is not supported.</value>
  </data>
  <data name="UsableLaunchProfileCannotBeLocated" xml:space="preserve">
    <value>A usable launch profile could not be located.</value>
  </data>
  <data name="UnexpectedExceptionProcessingLaunchSettings" xml:space="preserve">
    <value>An unexpected exception occurred while processing launch settings:
{0}</value>
  </data>
  <data name="LaunchProfilesCollectionIsNotAJsonObject" xml:space="preserve">
    <value>The 'profiles' property of the launch settings document is not a JSON object.</value>
  </data>
  <data name="DeserializationExceptionMessage" xml:space="preserve">
    <value>An error was encountered when reading launchSettings.json.
{0}</value>
  </data>
  <data name="RunCommandSpecifiecFileIsNotAValidProject" xml:space="preserve">
    <value>'{0}' is not a valid project file.</value>
  </data>
  <data name="CouldNotConvertToBoolean" xml:space="preserve">
    <value>Could not convert the value of property '{0}' to a boolean.</value>
  </data>
  <data name="CouldNotConvertToString" xml:space="preserve">
    <value>Could not convert the value of property '{0}' to a string.</value>
  </data>
  <data name="ValueMustBeAnObject" xml:space="preserve">
    <value>The property '{0}' must be an object if it is specified.</value>
  </data>
</root>