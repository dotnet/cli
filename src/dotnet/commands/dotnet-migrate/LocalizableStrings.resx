<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppFullName" xml:space="preserve">
    <value>.NET Migrate Command</value>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>Command used to migrate project.json projects to msbuild</value>
  </data>
  <data name="CmdProjectArgument" xml:space="preserve">
    <value>PATH</value>
  </data>
  <data name="CmdProjectArgumentDescription" xml:space="preserve">
    <value>The path to one of the following:
    - a project.json file to migrate.
    - a global.json file, it will migrate the folders specified in global.json.
    - a solution.sln file, it will migrate the projects referenced in the solution.
    - a directory to migrate, it will recursively search for project.json files to migrate.
Defaults to current directory if nothing is specified.</value>
  </data>
  <data name="CmdTemplateDescription" xml:space="preserve">
    <value>The base MSBuild template to use for the migrated project.
The default is the project included in dotnet new.</value>
  </data>
  <data name="CmdVersionDescription" xml:space="preserve">
    <value>The version of the SDK package that will be referenced in the migrated project.
The default is the version of the SDK in dotnet new.</value>
  </data>
  <data name="CmdXprojFileDescription" xml:space="preserve">
    <value>The path to the xproj file to use. Required when there is more than one xproj in a project directory.</value>
  </data>
  <data name="CmdSkipProjectReferencesDescription" xml:space="preserve">
    <value>Skip migrating project references. By default, project references are migrated recursively.</value>
  </data>
  <data name="CmdReportFileDescription" xml:space="preserve">
    <value>Output migration report to the given file in addition to the console.</value>
  </data>
  <data name="CmdReportOutputDescription" xml:space="preserve">
    <value>Output migration report file as json rather than user messages.</value>
  </data>
  <data name="CmdSkipBackupDescription" xml:space="preserve">
    <value>Skip moving project.json, global.json, and *.xproj to a `backup` directory after successful migration.</value>
  </data>
  <data name="MigrationFailedError" xml:space="preserve">
    <value>Migration failed.</value>
  </data>
  <data name="MigrationAdditionalHelp" xml:space="preserve">
    <value>The project migration has finished. Please visit https://aka.ms/coremigration to report any issues you've encountered or ask for help.</value>
  </data>
  <data name="MigrationReportSummary" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="MigrationReportTotalProjects" xml:space="preserve">
    <value>Total Projects: {0}</value>
  </data>
  <data name="MigrationReportSucceededProjects" xml:space="preserve">
    <value>Succeeded Projects: {0}</value>
  </data>
  <data name="MigrationReportFailedProjects" xml:space="preserve">
    <value>Failed Projects: {0}</value>
  </data>
  <data name="ProjectMigrationSucceeded" xml:space="preserve">
    <value>Project {0} migration succeeded ({1}).</value>
  </data>
  <data name="ProjectMigrationFailed" xml:space="preserve">
    <value>Project {0} migration failed ({1}).</value>
  </data>
  <data name="MigrationFailedToFindProjectInGlobalJson" xml:space="preserve">
    <value>Unable to find any projects in global.json.</value>
  </data>
  <data name="MigrationUnableToFindProjects" xml:space="preserve">
    <value>Unable to find any projects in {0}.</value>
  </data>
  <data name="MigrationProjectJsonNotFound" xml:space="preserve">
    <value>No project.json file found in '{0}'.</value>
  </data>
  <data name="MigrationInvalidProjectArgument" xml:space="preserve">
    <value>Invalid project argument - '{0}' is not a project.json, global.json, or solution.sln file and a directory named '{0}' doesn't exist.</value>
  </data>
  <data name="MigratonUnableToFindProjectJson" xml:space="preserve">
    <value>Unable to find project.json file at {0}.</value>
  </data>
  <data name="MigrationUnableToFindGlobalJson" xml:space="preserve">
    <value>Unable to find global settings file at {0}.</value>
  </data>
  <data name="MigrationUnableToFindSolutionFile" xml:space="preserve">
    <value>Unable to find the solution file at {0}.</value>
  </data>
  <data name="MigrateFilesBackupLocation" xml:space="preserve">
    <value>Files backed up to {0}</value>
  </data>
</root>