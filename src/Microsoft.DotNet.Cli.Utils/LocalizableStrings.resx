<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MalformedText" xml:space="preserve">
    <value>Malformed command text '{0}'</value>
  </data>
  <data name="BuildOutputPathDoesNotExist" xml:space="preserve">
    <value>outputpathresolver: {0} does not exist</value>
  </data>
  <data name="AttemptingToFindCommand" xml:space="preserve">
    <value>{0}: attempting to find command {1} in {2}</value>
  </data>
  <data name="FailedToFindToolAssembly" xml:space="preserve">
    <value>{0}: failed to find toolAssembly for {1}</value>
  </data>
  <data name="FailedToFindCommandPath" xml:space="preserve">
    <value>{0}: failed to find commandPath {1}</value>
  </data>
  <data name="UnableToLocateDotnetMultiplexer" xml:space="preserve">
    <value>Unable to locate dotnet multiplexer</value>
  </data>
  <data name="LookingForPreferCliRuntimeFile" xml:space="preserve">
    <value>{0}: Looking for prefercliruntime file at `{1}`</value>
  </data>
  <data name="IgnoringPreferCLIRuntimeFile" xml:space="preserve">
    <value>{0}: Ignoring prefercliruntime file as the tool target framework ({1}) has a different major version than the current CLI runtime ({2})</value>
  </data>
  <data name="CouldNotFindToolRuntimeConfigFile" xml:space="preserve">
    <value>{0}: Could not find runtimeconfig.json file for tool {1}</value>
  </data>
  <data name="AttemptingToResolve" xml:space="preserve">
    <value>{0}: attempting to resolve {1}</value>
  </data>
  <data name="DidNotFindAMatchingProject" xml:space="preserve">
    <value>{0}: Did not find a matching project {1}.</value>
  </data>
  <data name="InvalidCommandResolverArguments" xml:space="preserve">
    <value>{0}: invalid commandResolverArguments</value>
  </data>
  <data name="DoesNotExist" xml:space="preserve">
    <value>{0}: {1} does not exist</value>
  </data>
  <data name="AmbiguousCommandName" xml:space="preserve">
    <value>Ambiguous command name: {0}</value>
  </data>
  <data name="ToolLibraryFound" xml:space="preserve">
    <value>{0}: tool library found {1}</value>
  </data>
  <data name="MSBuildExePath" xml:space="preserve">
    <value>{0}: MSBUILD_EXE_PATH = {1}</value>
  </data>
  <data name="MSBuildProjectPath" xml:space="preserve">
    <value>{0}: MSBuild project path = {1}</value>
  </data>
  <data name="MultipleProjectFilesFound" xml:space="preserve">
    <value>Specify which project file to use because this '{0}' contains more than one project file.</value>
  </data>
  <data name="DidNotFindProject" xml:space="preserve">
    <value>{0}: ProjectFactory did not find Project.</value>
  </data>
  <data name="ResolvingCommandSpec" xml:space="preserve">
    <value>{0}: resolving commandspec from {1} Tool Libraries.</value>
  </data>
  <data name="FailedToResolveCommandSpec" xml:space="preserve">
    <value>{0}: failed to resolve commandspec from library.</value>
  </data>
  <data name="AttemptingToResolveCommandSpec" xml:space="preserve">
    <value>{0}: Attempting to resolve command spec from tool {1}</value>
  </data>
  <data name="NuGetPackagesRoot" xml:space="preserve">
    <value>{0}: nuget packages root:
{1}</value>
  </data>
  <data name="FoundToolLockFile" xml:space="preserve">
    <value>{0}: found tool lockfile at : {1}</value>
  </data>
  <data name="LibraryNotFoundInLockFile" xml:space="preserve">
    <value>{0}: library not found in lock file.</value>
  </data>
  <data name="AttemptingToCreateCommandSpec" xml:space="preserve">
    <value>{0}: attempting to create commandspec</value>
  </data>
  <data name="CommandSpecIsNull" xml:space="preserve">
    <value>{0}: commandSpec is null.</value>
  </data>
  <data name="ExpectDepsJsonAt" xml:space="preserve">
    <value>{0}: expect deps.json at: {1}</value>
  </data>
  <data name="GeneratingDepsJson" xml:space="preserve">
    <value>Generating deps.json at: {0}</value>
  </data>
  <data name="UnableToGenerateDepsJson" xml:space="preserve">
    <value>Unable to generate deps.json, it may have been already generated.  You can specify the "-d" option before the tool name for diagnostic output (for example, "dotnet -d &lt;toolname&gt;": {0}</value>
  </data>
  <data name="DepsJsonGeneratorProjectNotSet" xml:space="preserve">
    <value>Unable to find deps.json generator project.</value>
  </data>
  <data name="UnableToDeleteTemporaryDepsJson" xml:space="preserve">
    <value>unable to delete temporary deps.json file: {0}</value>
  </data>
  <data name="VersionForPackageCouldNotBeResolved" xml:space="preserve">
    <value>Version for package `{0}` could not be resolved.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File not found `{0}`.</value>
  </data>
  <data name="ProjectNotRestoredOrRestoreFailed" xml:space="preserve">
    <value>The project may not have been restored or restore failed - run `dotnet restore`</value>
  </data>
  <data name="NoExecutableFoundMatchingCommand" xml:space="preserve">
    <value>No executable found matching command "{0}"</value>
  </data>
  <data name="CommandAssembliesNotFound" xml:space="preserve">
    <value>The command executable for "{0}" was not found. The project may not have been restored or restore failed - run `dotnet restore`</value>
  </data>
  <data name="WaitingForDebuggerToAttach" xml:space="preserve">
    <value>Waiting for debugger to attach. Press ENTER to continue</value>
  </data>
  <data name="ProcessId" xml:space="preserve">
    <value>Process ID: {0}</value>
  </data>
  <data name="CouldNotAccessAssetsFile" xml:space="preserve">
    <value>Could not access assets file.</value>
  </data>
  <data name="DotNetCommandLineTools" xml:space="preserve">
    <value>.NET Command Line Tools</value>
  </data>
  <data name="DotNetSdkInfoLabel" xml:space="preserve">
    <value>.NET Core SDK (reflecting any global.json):</value>
  </data>
  <data name="DotNetRuntimeInfoLabel" xml:space="preserve">
    <value>Runtime Environment:</value>
  </data>
  <data name="WriteLineForwarderSetPreviously" xml:space="preserve">
    <value>WriteLine forwarder set previously</value>
  </data>
  <data name="AlreadyCapturingStream" xml:space="preserve">
    <value>Already capturing stream!</value>
  </data>
  <data name="RunningFileNameArguments" xml:space="preserve">
    <value>Running {0} {1}</value>
  </data>
  <data name="ProcessExitedWithCode" xml:space="preserve">
    <value>&lt; {0} exited with {1} in {2} ms.</value>
  </data>
  <data name="UnableToInvokeMemberNameAfterCommand" xml:space="preserve">
    <value>Unable to invoke {0} after the command has been run</value>
  </data>
  <data name="MSBuildArgs" xml:space="preserve">
    <value>MSBuild arguments: {0}</value>
  </data>
  <data name="EmbedAppNameInHostAppHostHasBeenModified" xml:space="preserve">
    <value>Unable to use '{0}' as application host executable as it does not contain the expected placeholder byte sequence '{1}' that would mark where the application name would be written.</value>
  </data>
  <data name="EmbedAppNameInHostFileNameIsTooLong" xml:space="preserve">
    <value>Given file name '{0}' is longer than 1024 bytes</value>
  </data>
  <data name="CannotFindCommandAvailableAsTool" xml:space="preserve">
    <value>Cannot find command 'dotnet {0}', please run the following command to install

dotnet tool install --global {1}</value>
  </data>
  <data name="DotnetCliHomeUsed" xml:space="preserve">
    <value>Using home directory '{0}' set by the '{1}' environment variable.</value>
  </data>
</root>
