<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Expressions</name>
  </assembly>
  <members>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>並べ替え操作の結果を表します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>並べ替え操作の結果を表します。</summary>
      <typeparam name="T">データ ソースの内容の型。このパラメーターが共変の型パラメーターです。つまり、その指定した型を使用するか、それよりも強い任意の派生型を使用することができます。共変性と反変性の詳細については、「ジェネリックの共変性と反変性」を参照してください。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>データの型が指定されていない場合に特定のデータ ソースに対するクエリを評価する機能を提供します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> のこのインスタンスに関連付けられた式ツリーが実行されたときに返される要素の型を取得します。</summary>
      <returns>このオブジェクトに関連付けられた式ツリーが実行されたときに返される要素の型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> のインスタンスに関連付けられている式ツリーを取得します。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable" /> のこのインスタンスに関連付けられている <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>このデータ ソースに関連付けられたクエリ プロバイダーを取得します。</summary>
      <returns>このデータ ソースに関連付けられた <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>データの型がわかっている場合に特定のデータ ソースに対するクエリを評価する機能を提供します。</summary>
      <typeparam name="T">データ ソース内のデータの型。このパラメーターが共変の型パラメーターです。つまり、その指定した型を使用するか、それよりも強い任意の派生型を使用することができます。共変性と反変性の詳細については、「ジェネリックの共変性と反変性」を参照してください。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> オブジェクトによって記述されるクエリを作成および実行するメソッドを定義します。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable`1" /> オブジェクトを構築します。</summary>
      <returns>指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="expression">LINQ クエリを表す式ツリー。</param>
      <typeparam name="TElement">返される <see cref="T:System.Linq.IQueryable`1" /> の要素の型。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable" /> オブジェクトを構築します。</summary>
      <returns>指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="expression">LINQ クエリを表す式ツリー。</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>指定した式ツリーによって表される、厳密に型指定されたクエリを実行します。</summary>
      <returns>指定したクエリの実行結果の値。</returns>
      <param name="expression">LINQ クエリを表す式ツリー。</param>
      <typeparam name="TResult">クエリの実行結果の値の型。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>指定した式ツリーによって表されるクエリを実行します。</summary>
      <returns>指定したクエリの実行結果の値。</returns>
      <param name="expression">LINQ クエリを表す式ツリー。</param>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>二項演算子を持つ式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は、<see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns>式ツリー ノードを単純化することができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>合体演算または複合代入演算で使用される型変換関数を取得します。</summary>
      <returns>型変換関数を表す <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>式ツリー ノードが、演算子へのリフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns>ノードがリフトされた呼び出しを表す場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>式ツリー ノードが、戻り値の型が null 許容型にリフトされた演算子へのリフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns>演算子の戻り値の型が null 許容型にリフトされた場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>二項演算の左オペランドを取得します。</summary>
      <returns>二項演算の左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>二項演算の実装メソッドを取得します。</summary>
      <returns>実装メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>二項式ノードをより単純な式へと変形します。</summary>
      <returns>単純化された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>二項演算の右オペランドを取得します。</summary>
      <returns>二項演算の右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="left">結果の <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティ。</param>
      <param name="conversion">結果の <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティ。</param>
      <param name="right">結果の <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>変数を定義できる式のシーケンスを含んでいるブロックを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は、<see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>このブロック内の式を取得します。</summary>
      <returns>このブロック内のすべての式を格納している読み取り専用コレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>このブロックの最後の式を取得します。</summary>
      <returns>このブロックの最後の式を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.BlockExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="variables">結果の <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> プロパティ。</param>
      <param name="expressions">結果の <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> プロパティ。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>このブロックで定義されている変数を取得します。</summary>
      <returns>このブロックで定義されているすべての変数を格納している読み取り専用コレクション。</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>try ブロックの catch ステートメントを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>catch ブロックの本体を取得します。</summary>
      <returns>catch 本体を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> フィルターの本体を取得します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> フィルターの本体を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>このハンドラーによってキャッチされる <see cref="T:System.Exception" /> の型を取得します。</summary>
      <returns>このハンドラーによってキャッチされる <see cref="T:System.Exception" /> の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" /> を返します。</summary>
      <returns>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="variable">結果の <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> プロパティ。</param>
      <param name="filter">結果の <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> プロパティ。</param>
      <param name="body">結果の <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> プロパティ。</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>このハンドラーによってキャッチされる <see cref="T:System.Exception" /> オブジェクトへの参照を取得します。</summary>
      <returns>このハンドラーによってキャッチされる <see cref="T:System.Exception" /> オブジェクトへの参照を表す <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>条件演算子を持つ式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は、<see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>テストで false と評価される場合に実行する式を取得します。</summary>
      <returns>テストが false の場合に実行する式を表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>テストで true と評価される場合に実行する式を取得します。</summary>
      <returns>テストが true の場合に実行する式を表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>条件演算のテストを取得します。</summary>
      <returns>条件演算のテストを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="test">結果の <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティ。</param>
      <param name="ifTrue">結果の <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> プロパティ。</param>
      <param name="ifFalse">結果の <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>定数値を持つ式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は、<see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>定数式の値を取得します。</summary>
      <returns>表された式の値に等しい <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>デバッグ情報のシーケンス ポイントを生成またはクリアします。これにより、デバッガーはデバッグ時に正しいソース コードを強調表示できます。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は、<see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> を取得します。</summary>
      <returns>ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終列を取得します。</summary>
      <returns>ラップされた式の生成に使用されたコードの最終列の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終行を取得します。</summary>
      <returns>ラップされた式の生成に使用されたコードの最終行の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> がシーケンス ポイントをクリアするために使用されるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> がシーケンス ポイントをクリアするために使用される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の先頭列を取得します。</summary>
      <returns>ラップされた式の生成に使用されたコードの先頭列の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の先頭行を取得します。</summary>
      <returns>ラップされた式の生成に使用されたコードの先頭行の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>型または空の式の既定値を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> コレクションの単一要素の初期化子を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> コレクションへの要素の追加に使用されるインスタンス メソッドを取得します。</summary>
      <returns>コレクションに要素を追加するインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> コレクションに要素を追加するメソッドに渡される引数のコレクションを取得します。</summary>
      <returns>コレクションに要素を追加するメソッドの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount"></member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)"></member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトのテキスト表現を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトのテキスト表現。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="arguments">結果の <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>式ツリー ノードを表すクラスの派生元の基底クラスを提供します。さまざまなノード型を作成する static (Visual Basic では Shared) ファクトリ メソッドも含まれています。これは abstract クラスです。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> の新しいインスタンスを構築します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は、<see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">加算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Add" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、加算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">加算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、加算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す AND を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.And" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ビットごとの AND 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す AND を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.And" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、ビットごとの AND 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き AND 演算を表す true を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ビットごとの AND 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。または<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>1 番目のオペランドが true に解決された場合にのみ 2 番目のオペランドを評価する条件付き <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す AND を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、ビットごとの AND 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。または<paramref name="method" /> は null で、<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>多次元配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">多次元配列を表す式。</param>
      <param name="indexes">配列のインデックス化に使用する式を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">インデックス化する配列を表す式。</param>
      <param name="indexes">配列のインデックス化に使用する式を格納している配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>ランクが 1 より大きい配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。</param>
      <param name="indexes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> または <paramref name="indexes" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type は配列型を表しません。または<paramref name="array" />.Type のランクは、<paramref name="indexes" /> の要素の数と一致しません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の 1 つ以上の要素の <paramref name="indexes" /> プロパティは、<see cref="T:System.Int32" /> 型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ランク 1 の配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="index">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> または <paramref name="index" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type は配列型を表しません。または<paramref name="array" />.Type は、ランクが 1 ではない配列型を表します。または<paramref name="index" />.Type は、<see cref="T:System.Int32" /> 型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>多次元配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> のインスタンスの配列 (配列のインデックス操作のインデックス)。</param>
      <param name="indexes">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> または <paramref name="indexes" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type は配列型を表しません。または<paramref name="array" />.Type のランクは、<paramref name="indexes" /> の要素の数と一致しません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の 1 つ以上の要素の <paramref name="indexes" /> プロパティは、<see cref="T:System.Int32" /> 型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>1 次元配列の長さを取得する式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> と等しい <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <paramref name="array" />。</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type は配列型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>フィールドまたはプロパティの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> または <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。または<paramref name="member" /> によって表されるプロパティに set アクセサーが含まれません。または<paramref name="expression" />.Type は、<paramref name="member" /> が表すフィールドまたはプロパティの型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>プロパティ アクセサー メソッドを使用したメンバーの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、<paramref name="propertyAccessor" /> に設定された <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> を含む <paramref name="expression" />。</returns>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> または <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> は、プロパティ アクセサー メソッドを表しません。または<paramref name="propertyAccessor" /> によってアクセスされるプロパティに set アクセサーが含まれません。または<paramref name="expression" />.Type は、<paramref name="member" /> が表すフィールドまたはプロパティの型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定された式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">ブロック内の変数。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">ブロック内の変数。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>2 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">ブロック内の 1 つ目の式。</param>
      <param name="arg1">ブロック内の 2 つ目の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>3 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">ブロック内の 1 つ目の式。</param>
      <param name="arg1">ブロック内の 2 つ目の式。</param>
      <param name="arg2">ブロック内の 3 つ目の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>4 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">ブロック内の 1 つ目の式。</param>
      <param name="arg1">ブロック内の 2 つ目の式。</param>
      <param name="arg2">ブロック内の 3 つ目の式。</param>
      <param name="arg3">ブロック内の 4 つ目の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>5 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">ブロック内の 1 つ目の式。</param>
      <param name="arg1">ブロック内の 2 つ目の式。</param>
      <param name="arg2">ブロック内の 3 つ目の式。</param>
      <param name="arg3">ブロック内の 4 つ目の式。</param>
      <param name="arg4">ブロック内の 5 つ目の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>指定された式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定された式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">ブロックの結果の型。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">ブロックの結果の型。</param>
      <param name="variables">ブロック内の変数。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">ブロックの結果の型。</param>
      <param name="variables">ブロック内の変数。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>指定された式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">ブロックの結果の型。</param>
      <param name="expressions">ブロック内の式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>型を指定して、break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>型を指定して、break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、および <paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <paramref name="type" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>引数を受け取らないメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <param name="instance">インスタンス メソッドの呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。null (Visual Basic では static) メソッドに Shared を渡します。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> は null です。または<paramref name="instance" /> は null で、<paramref name="method" /> はインスタンス メソッドを表します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type は、<paramref name="method" /> によって表されるメソッドの宣言型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> (null (Visual Basic では static) メソッドに Shared を渡します)。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> は null です。または<paramref name="instance" /> は null で、<paramref name="method" /> はインスタンス メソッドを表します。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type は、<paramref name="method" /> によって表されるメソッドの宣言型に代入できません。または<paramref name="arguments" /> 内の要素数が、<paramref name="method" /> によって表されるメソッドのパラメーターの数と等しくありません。または<paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> によって表されるメソッドの対応するパラメーターに代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>2 つの引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <param name="instance">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。static (Visual Basic では Shared) メソッドの場合は null を渡します。</param>
      <param name="method">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>3 つの引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <param name="instance">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。static (Visual Basic では Shared) メソッドの場合は null を渡します。</param>
      <param name="method">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <param name="instance">インスタンス メソッドの呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。null (Visual Basic では static) メソッドに Shared を渡します。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> は null です。または<paramref name="instance" /> は null で、<paramref name="method" /> はインスタンス メソッドを表します。または<paramref name="arguments" /> は null ではなく、その 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type は、<paramref name="method" /> によって表されるメソッドの宣言型に代入できません。または<paramref name="arguments" /> 内の要素数が、<paramref name="method" /> によって表されるメソッドのパラメーターの数と等しくありません。または<paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> によって表されるメソッドの対応するパラメーターに代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>適切なファクトリ メソッドを呼び出すことにより、インスタンス メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティ、指定したインスタンス メソッドを表す <paramref name="instance" /> に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />、および指定した引数に設定された <see cref="T:System.Reflection.MethodInfo" /> を含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <param name="instance">特定のメソッドの <see cref="T:System.Linq.Expressions.Expression" /> プロパティ値が検索される <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="methodName">メソッドの名前。</param>
      <param name="typeArguments">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</param>
      <param name="arguments">メソッドへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> または <paramref name="methodName" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致するメソッドが、<paramref name="instance" />.Type またはその基本型で見つかりません。または名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致する複数のメソッドが、<paramref name="instance" />.Type またはその基本型で見つかりました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>static (Visual Basic では Shared) メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <param name="method">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">呼び出しの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> のコレクション。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>1 つの引数を受け取る <see cref="T:System.Linq.Expressions.MethodCallExpression" /> (Visual Basic では static) メソッドへの呼び出しを表す Shared を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>2 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>3 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>4 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>5 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg4">5 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>引数を持つ <see cref="T:System.Linq.Expressions.MethodCallExpression" /> (Visual Basic では static) メソッドへの呼び出しを表す Shared を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する static (Visual Basic では Shared) メソッドを表す <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 内の要素数が、<paramref name="method" /> によって表されるメソッドのパラメーターの数と等しくありません。または<paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> によって表されるメソッドの対応するパラメーターに代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>適切なファクトリ メソッドを呼び出すことにより、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> (Visual Basic では static) メソッドへの呼び出しを表す Shared を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、指定した <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> (Visual Basic では <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />) メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> に設定された static プロパティ、および指定した引数に設定された Shared プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <param name="type">指定した <see cref="T:System.Type" /> (Visual Basic では static) メソッドを含む型を指定する Shared。</param>
      <param name="methodName">メソッドの名前。</param>
      <param name="typeArguments">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</param>
      <param name="arguments">メソッドへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="methodName" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致するメソッドが、<paramref name="type" /> またはその基本型で見つかりません。または名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致する複数のメソッドが、<paramref name="type" /> またはその基本型で見つかりました。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>ノードをより単純なノードに変形できることを示します。これが true を返す場合、Reduce() を呼び出して単純化された形式を生成できます。</summary>
      <returns>ノードを単純化することができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>ハンドラー本体で使用する、キャッチされた <see cref="T:System.Linq.Expressions.CatchBlock" /> オブジェクトへの参照を指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</param>
      <param name="body">catch ステートメントの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> フィルターおよびキャッチされた <see cref="T:System.Exception" /> オブジェクトへの参照を指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</param>
      <param name="body">catch ステートメントの本体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> フィルターの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body">catch ステートメントの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>キャッチされた <see cref="T:System.Linq.Expressions.CatchBlock" /> オブジェクトへの参照は指定せずに、<see cref="T:System.Exception" /> フィルターを指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body">catch ステートメントの本体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> フィルターの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>シーケンス ポイントをクリアするための <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</summary>
      <returns>シーケンス ポイントをクリアするための <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</returns>
      <param name="document">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> の <paramref name="left" /> プロパティは、参照型または null 許容値型を表しません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type と <paramref name="right" />.Type は、互いに変換できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>変換関数を指定して合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type と <paramref name="right" />.Type は、互いに変換できません。または<paramref name="conversion" /> は null ではなく、<paramref name="conversion" />.Type は受け取る引数が 1 つだけではないデリゲート型です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> の <paramref name="left" /> プロパティは、参照型または null 許容値型を表しません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の <paramref name="left" /> プロパティは、<paramref name="conversion" />.Type デリゲート型のパラメーター型に代入できない型を表します。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の <paramref name="right" /> プロパティは、<paramref name="conversion" />.Type デリゲート型の戻り値の型と等しくありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</returns>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" />、<paramref name="ifTrue" />、または <paramref name="ifFalse" /> は、null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type が <see cref="T:System.Boolean" /> ではありません。または<paramref name="ifTrue" />.Type が、<paramref name="ifFalse" />.Type と等しくありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</returns>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>指定した値に設定された <see cref="T:System.Linq.Expressions.ConstantExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</returns>
      <param name="value">
        <see cref="T:System.Object" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>指定した値に設定された <see cref="T:System.Linq.Expressions.ConstantExpression" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
      <param name="value">
        <see cref="T:System.Object" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が null ではなく、<paramref name="type" /> を <paramref name="value" /> の動的型から代入することができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>型を指定して、continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>型変換操作を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>実装メソッドが指定される変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />、<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、および <see cref="P:System.Linq.Expressions.Expression.Type" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。または<paramref name="expression" />.Type は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。または<paramref name="method" /> によって表されるメソッドの戻り値の型は、<paramref name="type" /> に代入できません。または<paramref name="expression" />.Type または <paramref name="type" /> は null 許容値型で、対応する null 非許容値型は <paramref name="method" /> によって表されるメソッドそれぞれの、引数型または戻り値の型と等しくありません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="method" /> 記述に一致する複数のメソッドが見つかりました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>変換後の型がオーバーフローした場合に例外をスローする変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>変換後の型がオーバーフローした場合に例外をスローし、実装メソッドが指定される変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />、<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、および <see cref="P:System.Linq.Expressions.Expression.Type" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。または<paramref name="expression" />.Type は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。または<paramref name="method" /> によって表されるメソッドの戻り値の型は、<paramref name="type" /> に代入できません。または<paramref name="expression" />.Type または <paramref name="type" /> は null 許容値型で、対応する null 非許容値型は <paramref name="method" /> によって表されるメソッドそれぞれの、引数型または戻り値の型と等しくありません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="method" /> 記述に一致する複数のメソッドが見つかりました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>指定したスパンを使用して、<see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</returns>
      <param name="document">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <param name="startLine">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 先頭行。1 以上であることが必要です。</param>
      <param name="startColumn">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の先頭列。1 以上であることが必要です。</param>
      <param name="endLine">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終行。開始行の値以上である必要があります。</param>
      <param name="endColumn">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終列。最終行が先頭行と同じである場合、これは開始列の値以上である必要があります。どのような場合でも、0 より大きい値である必要があります。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>指定した型に設定された <see cref="T:System.Linq.Expressions.DefaultExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した型に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">除算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、除算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>2 番目の引数として <see cref="T:System.Linq.Expressions.ElementInit" /> を指定して、<see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</summary>
      <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.ElementInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</returns>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> または <paramref name="arguments" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="addMethod" /> が表すメソッドの名前が "Add" (大文字と小文字は区別されません) ではありません。または<paramref name="addMethod" /> が表すメソッドが、インスタンス メソッドではありません。または<paramref name="arguments" /> に、<paramref name="addMethod" /> が表すメソッドのパラメーターの数と同じ数の要素が含まれていません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の 1 つ以上の要素の <paramref name="arguments" /> プロパティを、<paramref name="addMethod" /> が表すメソッドの対応するパラメーターの型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>2 番目の引数として値の配列を指定して、<see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
      <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.ElementInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</returns>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> または <paramref name="arguments" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">addMethod が表すメソッドの名前が "Add" (大文字と小文字は区別されません) ではありません。またはaddMethod が表すメソッドが、インスタンス メソッドではありません。またはarguments に、addMethod が表すメソッドのパラメーターの数と同じ数の要素が含まれていません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の 1 つ以上の要素の <paramref name="arguments" /> プロパティを、<paramref name="addMethod" /> が表すメソッドの対応するパラメーターの型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>
        <see cref="T:System.Void" /> 型の空の式を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、<see cref="F:System.Linq.Expressions.ExpressionType.Default" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">等値演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">true を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は true。false を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は false。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、等値演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ユーザー定義型の <see cref="T:System.Linq.Expressions.BinaryExpression" /> を使用して、ビットごとの XOR 演算を表す op_ExclusiveOr を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">XOR 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ユーザー定義型の <see cref="T:System.Linq.Expressions.BinaryExpression" /> を使用して、ビットごとの XOR 演算を表す op_ExclusiveOr を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、XOR 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ユーザー定義型の <see cref="T:System.Linq.Expressions.BinaryExpression" /> を使用して、ビットごとの XOR 代入演算を表す op_ExclusiveOr を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ユーザー定義型の <see cref="T:System.Linq.Expressions.BinaryExpression" /> を使用して、ビットごとの XOR 代入演算を表す op_ExclusiveOr を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>ユーザー定義型の <see cref="T:System.Linq.Expressions.BinaryExpression" /> を使用して、ビットごとの XOR 代入演算を表す op_ExclusiveOr を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。static (Visual Basic では Shared) の場合、<paramref name="expression" /> は null にする必要があります。</param>
      <param name="field">
        <see cref="T:System.Reflection.FieldInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> は null です。または<paramref name="field" /> によって表されるフィールドが static (Visual Basic では Shared) ではなく、<paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type は、<paramref name="field" /> によって表されるフィールドの宣言型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>フィールドの名前を指定してフィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> により示されるフィールドを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.FieldInfo" /> プロパティを含む <paramref name="fieldName" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のフィールドが含まれている <paramref name="fieldName" />。静的フィールドの場合は null を指定できます。</param>
      <param name="fieldName">アクセスするフィールドの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="fieldName" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" />.Type またはその基本型では <paramref name="expression" /> という名前のフィールドが定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">フィールドの格納オブジェクト。静的フィールドの場合は null を指定できます。</param>
      <param name="type">フィールドを格納している <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="fieldName">アクセスされるフィールド。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>特定の型引数を持つ汎用 <see cref="T:System.Type" /> デリゲート型を表す System.Action オブジェクトを作成します。</summary>
      <returns>指定した型引数を持つ System.Action デリゲートの型。</returns>
      <param name="typeArgs">
        <see cref="T:System.Type" /> デリゲート型の型引数を指定する最大 16 個の System.Action オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> に、16 個を超える要素が格納されています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> は null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>特定の型引数を持つ汎用 <see cref="P:System.Linq.Expressions.Expression.Type" /> デリゲート型または System.Func デリゲート型を表す System.Action オブジェクトを取得します。</summary>
      <returns>デリゲート型。</returns>
      <param name="typeArgs">デリゲートの型引数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>特定の型引数を持つ汎用 <see cref="P:System.Linq.Expressions.Expression.Type" /> デリゲート型を表す System.Func オブジェクトを作成します。最後の型引数で、作成するデリゲートの戻り値の型を指定します。</summary>
      <returns>指定した型引数を持つ System.Func デリゲートの型。</returns>
      <param name="typeArgs">
        <see cref="T:System.Type" /> デリゲート型の型引数を指定する 1 個から 17 個の System.Func オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> には、1 個未満または 17 個を超える要素が格納されます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> は null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="P:System.Linq.Expressions.GotoExpression.Target" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>型を指定して、go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>型を指定して、go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> プロパティ、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">"大なり" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">true を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は true。false を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は false。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、"大なり" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">"以上" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">true を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は true。false を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は false。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、"以上" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> ステートメントを指定して、条件付きブロックを表す if を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。<see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティは既定の式に設定されます。また、このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</returns>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> ステートメントと if ステートメントを指定して、条件付きブロックを表す else を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</returns>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</summary>
      <returns>指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</returns>
      <param name="expression">適用するデリゲートまたはラムダ式を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arguments">デリゲートまたはラムダ式が適用される引数を表す <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトを格納している <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type はデリゲート型または <see cref="T:System.Linq.Expressions.Expression`1" /> を表しません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="arguments" /> プロパティは、<paramref name="expression" /> によって表されるデリゲートの対応するパラメーターの型に代入できません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> に、<paramref name="expression" /> により表されるデリゲートのパラメーターのリストと同じ数の要素が格納されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</summary>
      <returns>指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</returns>
      <param name="expression">適用するデリゲートまたはラムダ式を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arguments">デリゲートまたはラムダ式が適用される引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type はデリゲート型または <see cref="T:System.Linq.Expressions.Expression`1" /> を表しません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="arguments" /> プロパティは、<paramref name="expression" /> によって表されるデリゲートの対応するパラメーターの型に代入できません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> に、<paramref name="expression" /> により表されるデリゲートのパラメーターのリストと同じ数の要素が格納されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>式が false に評価されるかどうかを返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式が false に評価されるかどうかを返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>式が true に評価されるかどうかを返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式が true に評価されるかどうかを返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>void 型で名前なしのラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <returns>新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>既定値のないラベルを表す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</summary>
      <returns>既定値のない <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">この <see cref="T:System.Linq.Expressions.LabelTarget" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>指定された既定値を持つラベルを表す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</summary>
      <returns>指定された既定値を持つ <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">この <see cref="T:System.Linq.Expressions.LabelTarget" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
      <param name="defaultValue">通常の制御フローを経てラベルに到達した場合のこの <see cref="T:System.Linq.Expressions.LabelExpression" /> の値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>指定された名前を持つ void 型のラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <returns>新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="name">ラベルの名前。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>型を指定して、ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <returns>新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="type">ラベルにジャンプするときに渡す値の型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>指定した型および名前を使用して、ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <returns>新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="type">ラベルにジャンプするときに渡す値の型。</param>
      <param name="name">ラベルの名前。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <typeparam name="TDelegate">デリゲート型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</param>
      <typeparam name="TDelegate">デリゲート型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <typeparam name="TDelegate">デリゲート型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> は null です。または<paramref name="parameters" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> がデリゲート型でありません。または<paramref name="body" />.Type は、<paramref name="TDelegate" /> の戻り値の型に代入できない型を表します。または<paramref name="parameters" /> に、<paramref name="TDelegate" /> のパラメーターのリストと同じ数の要素が格納されていません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="parameters" /> プロパティは、<paramref name="TDelegate" /> の対応するパラメーター型から代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</param>
      <typeparam name="TDelegate">デリゲート型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> は null です。または<paramref name="parameters" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> がデリゲート型でありません。または<paramref name="body" />.Type は、<paramref name="TDelegate" /> の戻り値の型に代入できない型を表します。または<paramref name="parameters" /> に、<paramref name="TDelegate" /> のパラメーターのリストと同じ数の要素が格納されていません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="parameters" /> プロパティは、<paramref name="TDelegate" /> の対応するパラメーター型から代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> は null です。または<paramref name="parameters" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> に、16 個を超える要素が格納されています。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">ラムダの名前。デバッグ情報を生成するために使用します。</param>
      <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <typeparam name="TDelegate">デリゲート型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">ラムダの名前。デバッグ情報を出力するために使用します。</param>
      <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">ラムダの名前。デバッグ情報を出力するために使用します。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression`1.Body" />。</param>
      <param name="name">ラムダの名前。デバッグ情報を生成するために使用します。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />。</param>
      <typeparam name="TDelegate">デリゲート型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と等しい <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> または <paramref name="body" /> が null です。または<paramref name="parameters" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> がデリゲート型を表していません。または<paramref name="body" />.Type は、<paramref name="delegateType" /> によって表されるデリゲート型の戻り値の型に代入できない型を表しています。または<paramref name="parameters" /> に、<paramref name="delegateType" /> により表されるデリゲート型のパラメーターのリストと同じ数の要素が格納されていません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="parameters" /> プロパティは、<paramref name="delegateType" /> によって表されるデリゲート型の対応するパラメーター型から代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と等しい <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> または <paramref name="body" /> が null です。または<paramref name="parameters" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> がデリゲート型を表していません。または<paramref name="body" />.Type は、<paramref name="delegateType" /> によって表されるデリゲート型の戻り値の型に代入できない型を表しています。または<paramref name="parameters" /> に、<paramref name="delegateType" /> により表されるデリゲート型のパラメーターのリストと同じ数の要素が格納されていません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="parameters" /> プロパティは、<paramref name="delegateType" /> によって表されるデリゲート型の対応するパラメーター型から代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">ラムダの名前。デバッグ情報を出力するために使用します。</param>
      <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
      <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">ラムダの名前。デバッグ情報を出力するために使用します。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">左シフト演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、左シフト演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">"小なり" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">true を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は true。false を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は false。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、"小なり" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">"以下" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">true を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は true。false を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は false。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、"以下" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> は null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。または<see cref="P:System.Reflection.FieldInfo.FieldType" /> が表すフィールドまたはプロパティの <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> または <paramref name="member" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> は null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。または<see cref="P:System.Reflection.FieldInfo.FieldType" /> が表すフィールドまたはプロパティの <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> または <paramref name="member" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>指定したプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.MemberInfo" /> プロパティ、および <paramref name="propertyAccessor" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <paramref name="initializers" />。</returns>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> は null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> は、プロパティ アクセサー メソッドを表しません。または<see cref="P:System.Reflection.PropertyInfo.PropertyType" /> により表されるメソッドがアクセスするプロパティの <paramref name="propertyAccessor" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>指定したプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> オブジェクトを作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.MemberInfo" /> プロパティ、および <paramref name="propertyAccessor" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <paramref name="initializers" />。</returns>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> は null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> は、プロパティ アクセサー メソッドを表しません。または<see cref="P:System.Reflection.PropertyInfo.PropertyType" /> により表されるメソッドがアクセスするプロパティの <paramref name="propertyAccessor" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>指定した <see cref="T:System.Linq.Expressions.ListInitExpression" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</returns>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newExpression" />.Type またはその基本型で宣言された "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドがありません。または<paramref name="newExpression" />.Type またはその基本型の add メソッドは、受け取る引数が 1 つだけではありません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の最初の要素の <paramref name="initializers" /> プロパティによって表される型は、<paramref name="newExpression" />.Type またはその基本型の add メソッドの引数型に代入できません。または"Add" (大文字と小文字は区別されません) という名前の複数の引数互換メソッドが、<paramref name="newExpression" />.Type またはその基本型に存在します。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>指定した <see cref="T:System.Linq.Expressions.ListInitExpression" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</returns>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newExpression" />.Type またはその基本型で宣言された "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドがありません。または<paramref name="newExpression" />.Type またはその基本型の add メソッドは、受け取る引数が 1 つだけではありません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の最初の要素の <paramref name="initializers" /> プロパティによって表される型は、<paramref name="newExpression" />.Type またはその基本型の add メソッドの引数型に代入できません。または"Add" (大文字と小文字は区別されません) という名前の複数の引数互換メソッドが、<paramref name="newExpression" />.Type またはその基本型に存在します。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定したメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod">コレクションに要素を追加する、"Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。または<paramref name="addMethod" /> は null ではなく、受け取る引数が 1 つだけの "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表しません。または<paramref name="addMethod" /> は null ではなく、<see cref="P:System.Linq.Expressions.Expression.Type" /> の 1 つ以上の要素の <paramref name="initializers" /> プロパティによって表される型を <paramref name="addMethod" /> が表すメソッドの引数型に代入することはできません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> は null で、1 つの型互換の引数を受け取る "Add" という名前のインスタンス メソッドが <paramref name="newExpression" />.Type またはその基本型に存在しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>指定したメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod">1 つの引数を受け取り、コレクションに要素を追加するインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の 1 つ以上の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。または<paramref name="addMethod" /> は null ではなく、受け取る引数が 1 つだけの "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表しません。または<paramref name="addMethod" /> は null ではなく、<see cref="P:System.Linq.Expressions.Expression.Type" /> の 1 つ以上の要素の <paramref name="initializers" /> プロパティによって表される型を <paramref name="addMethod" /> が表すメソッドの引数型に代入することはできません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> は null で、1 つの型互換の引数を受け取る "Add" という名前のインスタンス メソッドが <paramref name="newExpression" />.Type またはその基本型に存在しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>指定した本体を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">ループの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>指定した本体および break の移動先を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">ループの本体。</param>
      <param name="break">ループの本体によって使用される break の移動先。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>指定した本体を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">ループの本体。</param>
      <param name="break">ループの本体によって使用される break の移動先。</param>
      <param name="continue">ループの本体によって使用される continue の移動先。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>適切なファクトリ メソッドを呼び出すことにより、左オペランドと右オペランドを指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> は、二項式ノードには対応していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>適切なファクトリ メソッドを呼び出すことにより、左オペランド、右オペランド、および実装メソッドを指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">true を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は true。false を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は false。</param>
      <param name="method">実装メソッドを指定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> は、二項式ノードには対応していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>適切なファクトリ メソッドを呼び出すことにより、左オペランド、右オペランド、実装メソッド、および型変換関数を指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">true を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は true。false を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は false。</param>
      <param name="method">実装メソッドを指定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">型変換関数を表す <see cref="T:System.Linq.Expressions.LambdaExpression" />。このパラメーターは、<paramref name="binaryType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> または複合代入である場合にのみ使用されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> は、二項式ノードには対応していません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>指定された要素を使用して、catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="variable">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</param>
      <param name="body">catch ステートメントの本体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> フィルターの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>指定した <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプを表す <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> を作成します。ジャンプ時にラベルに渡す値も指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>オブジェクトのインデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">プロパティが属するオブジェクト。プロパティが static (Visual Basic では shared) の場合は、null にします。</param>
      <param name="indexer">インデックス化するプロパティを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arguments">プロパティのインデックス化に使用する引数を格納している IEnumerable&lt;Expression&gt; (Visual Basic では IEnumerable (Of Expression))。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>フィールドまたはプロパティのいずれかへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">メンバーが属するオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。静的メンバーの場合は null を指定できます。</param>
      <param name="member">アクセス先のフィールドまたはプロパティを記述する <see cref="T:System.Reflection.MemberInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>指定された要素を使用して、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="type">try 式の結果の型。null の場合は、本体およびすべてのハンドラーの型が同一である必要があります。</param>
      <param name="body">try ブロックの本体。</param>
      <param name="finally">finally ブロックの本体。try ブロックに関連付けられている finally ブロックがない場合は、null を渡します。</param>
      <param name="fault">fault ブロックの本体。try ブロックに関連付けられている fault ブロックがない場合は、null を渡します。</param>
      <param name="handlers">try ブロックに関連付ける catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> のコレクション。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>適切なファクトリ メソッドを呼び出すことにより、オペランドを指定して、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">単項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">変換後の型を指定する <see cref="T:System.Type" /> (該当しない場合は null を渡します)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> は、単項式ノードには対応していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>適切なファクトリ メソッドを呼び出すことにより、オペランドおよび実装メソッドを指定して、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">単項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">変換後の型を指定する <see cref="T:System.Type" /> (該当しない場合は null を渡します)。</param>
      <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> は、単項式ノードには対応していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。または<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素の <paramref name="bindings" /> プロパティは、<paramref name="member" /> が表すフィールドまたはプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。または<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素の <paramref name="bindings" /> プロパティは、<paramref name="member" /> が表すフィールドまたはプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>プロパティ アクセサー メソッドを使用してアクセスされるメンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、および指定した値に設定された <paramref name="propertyAccessor" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> は、プロパティ アクセサー メソッドを表しません。または<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素の <paramref name="bindings" /> プロパティは、<paramref name="propertyAccessor" /> が表すメソッドによりアクセスされるプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>プロパティ アクセサー メソッドを使用してアクセスされるメンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、および指定した値に設定された <paramref name="propertyAccessor" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> は、プロパティ アクセサー メソッドを表しません。または<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素の <paramref name="bindings" /> プロパティは、<paramref name="propertyAccessor" /> が表すメソッドによりアクセスされるプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>新しいオブジェクトを作成し、そのオブジェクトのプロパティを初期化する式を表します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</returns>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素の <paramref name="bindings" /> プロパティは、<paramref name="newExpression" />.Type が表す型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</returns>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
      <param name="bindings">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> または <paramref name="bindings" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素の <paramref name="bindings" /> プロパティは、<paramref name="newExpression" />.Type が表す型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">剰余演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、剰余演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.InvalidOperationException">単項マイナス演算子は、<paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、単項マイナス演算子は <paramref name="expression" />.Type に対して定義されていません。または<paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.InvalidOperationException">単項マイナス演算子は、<paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、単項マイナス演算子は <paramref name="expression" />.Type に対して定義されていません。または<paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>引数を受け取らない指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</returns>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="constructor" /> が表すコンストラクターには、少なくとも 1 つのパラメーターがあります。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</returns>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> は null です。または<paramref name="arguments" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="arguments" /> プロパティは、<paramref name="constructor" /> が表すコンストラクターの対応するパラメーターの型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。コンストラクターが初期化したフィールドにアクセスするメンバーが指定されます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" />、<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、および <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</returns>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</param>
      <param name="members">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Reflection.MemberInfo" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> は null です。または<paramref name="arguments" /> の要素が null です。または<paramref name="members" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="arguments" /> プロパティは、<paramref name="constructor" /> が表すコンストラクターの対応するパラメーターの型に代入できません。または<paramref name="members" /> パラメーターに、<paramref name="arguments" /> と同じ数の要素がありません。または<paramref name="arguments" /> の要素に、<see cref="P:System.Linq.Expressions.Expression.Type" /> の対応する要素により表されるメンバーの型に代入可能な型を表す <paramref name="members" /> プロパティがあります。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。コンストラクターが初期化したフィールドにアクセスするメンバーが配列として指定されます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" />、<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、および <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</returns>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</param>
      <param name="members">
        <see cref="T:System.Reflection.MemberInfo" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewExpression.Members" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> は null です。または<paramref name="arguments" /> の要素が null です。または<paramref name="members" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="arguments" /> プロパティは、<paramref name="constructor" /> が表すコンストラクターの対応するパラメーターの型に代入できません。または<paramref name="members" /> パラメーターに、<paramref name="arguments" /> と同じ数の要素がありません。または<paramref name="arguments" /> の要素に、<see cref="P:System.Linq.Expressions.Expression.Type" /> の対応する要素により表されるメンバーの型に代入可能な型を表す <paramref name="members" /> プロパティがあります。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</returns>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> は null です。または<paramref name="arguments" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> の長さが、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と一致しません。または<see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="arguments" /> プロパティは、<paramref name="constructor" /> が表すコンストラクターの対応するパラメーターの型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>指定した型のパラメーターなしのコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定された型のパラメーターなしのコンストラクターを表す <see cref="F:System.Linq.Expressions.ExpressionType.New" /> に設定された <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="T:System.Reflection.ConstructorInfo" />。</returns>
      <param name="type">引数を受け取らないコンストラクターを持つ <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> が表す型には、パラメーターなしのコンストラクターがありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
      <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="bounds">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="bounds" /> が null です。または<paramref name="bounds" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="bounds" /> プロパティは、整数型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
      <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="bounds">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="bounds" /> が null です。または<paramref name="bounds" /> の要素が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="bounds" /> プロパティは、整数型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
      <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の要素が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="initializers" /> プロパティは、<paramref name="type" /> が表す型に代入できない型を表します。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
      <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="initializers" /> が null です。または<paramref name="initializers" /> の要素が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素の <paramref name="initializers" /> プロパティは、<paramref name="type" /> 型に代入可能な型を表します。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を取得します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 値のいずれか。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.InvalidOperationException">単項 NOT 演算子は、<paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。実装メソッドを指定できます。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、単項 NOT 演算子は <paramref name="expression" />.Type に対して定義されていません。または<paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">非等値演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">true を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は true。false を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は false。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、非等値演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>1 の補数を表す式を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>1 の補数を表す式を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す OR を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ビットごとの OR 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す OR を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Or" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、ビットごとの OR 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き OR 演算を表す false を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ビットごとの OR 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。または<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き OR 演算を表す false を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、ビットごとの OR 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。または<paramref name="method" /> は null で、<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <returns>指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</returns>
      <param name="type">パラメーターまたは変数の型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />。</returns>
      <param name="type">パラメーターまたは変数の型。</param>
      <param name="name">デバッグまたは印刷の目的でのみ使用されるパラメーターまたは変数の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">指数演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。または<paramref name="left" />.Type や <paramref name="right" />.Type は <see cref="T:System.Double" /> ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Power" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、指数演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。または<paramref name="method" /> は null で、<paramref name="left" />.Type や <paramref name="right" />.Type は <see cref="T:System.Double" /> ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>プロパティ アクセサー メソッドを使用することによるプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、<paramref name="expression" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティを含む <paramref name="propertyAccessor" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。静的プロパティの場合は null を指定できます。</param>
      <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> は null です。または<paramref name="propertyAccessor" /> が表すメソッドは static (Visual Basic では Shared) ではなく、<paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type は、<paramref name="propertyAccessor" /> によって表されるメソッドの宣言型に代入できません。または<paramref name="propertyAccessor" /> が表すメソッドは、プロパティ アクセサー メソッドではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。静的プロパティの場合は null を指定できます。</param>
      <param name="property">
        <see cref="T:System.Reflection.PropertyInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> は null です。または<paramref name="property" /> が表すプロパティは static (Visual Basic では Shared) ではなく、<paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type は、<paramref name="property" /> が表すプロパティの宣言型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">プロパティが属するオブジェクト。プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</param>
      <param name="indexer">インデックス化するプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments">プロパティのインデックス化に使用する <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">プロパティが属するオブジェクト。プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</param>
      <param name="indexer">インデックス化するプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments">プロパティのインデックス化に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> により示されるプロパティを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティを含む <paramref name="propertyName" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のプロパティが含まれている <paramref name="propertyName" />。静的プロパティの場合は null を指定できます。</param>
      <param name="propertyName">アクセスするプロパティの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="propertyName" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" />.Type またはその基本型では <paramref name="expression" /> という名前のプロパティが定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">プロパティが属するオブジェクト。プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</param>
      <param name="propertyName">インデクサーの名前。</param>
      <param name="arguments">プロパティのインデックス化に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>プロパティにアクセスする <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">プロパティの格納オブジェクト。静的プロパティの場合は null を指定できます。</param>
      <param name="type">プロパティを格納する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="propertyName">アクセスするプロパティ。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>プロパティまたはフィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> によって示されるプロパティまたはフィールドを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> または <see cref="T:System.Reflection.PropertyInfo" /> に設定された <see cref="T:System.Reflection.FieldInfo" /> プロパティを含む <paramref name="propertyOrFieldName" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のプロパティまたはフィールドが含まれている <paramref name="propertyOrFieldName" />。静的メンバーの場合は null を指定できます。</param>
      <param name="propertyOrFieldName">アクセスするプロパティまたはフィールドの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="propertyOrFieldName" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyOrFieldName" />.Type またはその基本型では <paramref name="expression" /> という名前のプロパティまたはフィールドが定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 型の定数値を持つ式を表す <see cref="T:System.Linq.Expressions.Expression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> は null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>このノードをより単純な式に変形します。CanReduce が true を返す場合、これは有効な式を返します。このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。</summary>
      <returns>単純化された式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>このノードをより単純な式に変形します。CanReduce が true を返す場合、これは有効な式を返します。このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。</summary>
      <returns>単純化された式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>式を既知のノード型 (拡張ノードではない型) に単純化し、それが既に既知の型である場合は単に式を返します。</summary>
      <returns>単純化された式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>参照が等値であるかどうかの比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>参照が等値でないかどうかの比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>型を指定して、例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="type">式の新しい <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Return と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>型を指定して、return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。ジャンプ時にラベルに渡す値を指定できます。</summary>
      <returns>Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>型を指定して、return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <returns>Return と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">右シフト演算子は <paramref name="left" />.Type と <paramref name="right" />.Type には定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、右シフト演算子は <paramref name="left" />.Type と <paramref name="right" />.Type には定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> プロパティを含む <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> のインスタンス。</returns>
      <param name="variables">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> オブジェクトのコレクション。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> プロパティを含む <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> のインスタンス。</returns>
      <param name="variables">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> が、null ではなくそれが表すメソッドが void を返すか、static (Visual Basic では Shared) ではないか、または受け取る引数が 2 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す switch を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す switch を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</param>
      <param name="comparison">使用する等値比較メソッド。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す switch を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</param>
      <param name="comparison">使用する等値比較メソッド。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>既定のケースのない <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す switch を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す switch を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="type">switch の結果の型。</param>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</param>
      <param name="comparison">使用する等値比較メソッド。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す switch を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="type">switch の結果の型。</param>
      <param name="switchValue">各ケースに対してテストする値。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</param>
      <param name="comparison">使用する等値比較メソッド。</param>
      <param name="cases">この switch 式に対するケースのセット。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトで使用される <see cref="T:System.Linq.Expressions.SwitchExpression" /> オブジェクトを作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
      <param name="body">case の本体。</param>
      <param name="testValues">case のテスト値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> で使用する <see cref="T:System.Linq.Expressions.SwitchExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
      <param name="body">case の本体。</param>
      <param name="testValues">case のテスト値。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</returns>
      <param name="fileName">
        <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> プロパティおよび <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</returns>
      <param name="fileName">
        <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</returns>
      <param name="fileName">
        <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <param name="languageVendor">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</returns>
      <param name="fileName">
        <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <param name="languageVendor">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
      <param name="documentType">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>型を指定して、例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">式の新しい <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> のテキスト表現を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> のテキスト表現。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>任意の数の catch ステートメントを指定し、fault ブロックと finally ブロックを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try ブロックの本体。</param>
      <param name="handlers">try ブロックに関連付ける catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>任意の数の catch ステートメントおよび 1 つの finally ブロックを指定して、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try ブロックの本体。</param>
      <param name="finally">finally ブロックの本体。</param>
      <param name="handlers">try ブロックに関連付ける catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>fault ブロックを指定し、catch ステートメントを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try ブロックの本体。</param>
      <param name="fault">fault ブロックの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>finally ブロックを指定し、catch ステートメントを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try ブロックの本体。</param>
      <param name="finally">finally ブロックの本体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>特定の型引数を持つ汎用 System.Action デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。</summary>
      <returns>特定の <paramref name="typeArgs" /> について汎用 System.Action デリゲート型が作成された場合は true。それ以外の場合は false。</returns>
      <param name="typeArgs">System.Action デリゲート型の型引数を指定する Type オブジェクトの配列。</param>
      <param name="actionType">このメソッドが返されるときに、特定の型引数を持つ汎用 System.Action デリゲート型を格納します。<paramref name="typeArgs" /> に一致する汎用 System.Action デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>特定の型引数を持つ汎用 System.Func デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。最後の型引数で、作成するデリゲートの戻り値の型を指定します。</summary>
      <returns>特定の <paramref name="typeArgs" /> について汎用 System.Func デリゲート型が作成された場合は true。それ以外の場合は false。</returns>
      <param name="typeArgs">System.Func デリゲート型の型引数を指定する Type オブジェクトの配列。</param>
      <param name="funcType">このメソッドが返されるときに、特定の型引数を持つ汎用 System.Func デリゲート型を格納します。<paramref name="typeArgs" /> に一致する汎用 System.Func デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>変換が失敗した場合に <see cref="T:System.Linq.Expressions.UnaryExpression" /> が提供される明示的な参照変換またはボックス化変換を表す null を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>実行時の型 ID を比較する <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> プロパティおよび <see cref="T:System.Linq.Expressions.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> プロパティおよび <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />。</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="type" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.InvalidOperationException">単項プラス演算子は <paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> は null ではなく、それが表すメソッドは void を返し、static (Visual Basic では Shared) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> は null で、単項プラス演算子は <paramref name="expression" />.Type に対して定義されていません。または<paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>明示的なボックス化解除を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
      <param name="expression">ボックス化解除する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">式の新しい <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <returns>指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</returns>
      <param name="type">パラメーターまたは変数の型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <returns>指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</returns>
      <param name="type">パラメーターまたは変数の型。</param>
      <param name="name">パラメーターまたは変数の名前。この名前はデバッグまたは印刷の目的でのみ使用されます。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>ノードを単純化し、単純化された式の visitor デリゲートを呼び出します。ノードを単純化できない場合、このメソッドは例外をスローします。</summary>
      <returns>走査中の式、またはツリー内で走査中の式と置き換える式。</returns>
      <param name="visitor">
        <see cref="T:System.Func`2" /> のインスタンス。</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>厳密に型指定されたラムダ式を、式ツリー形式のデータ構造体として表します。このクラスは継承できません。</summary>
      <typeparam name="TDelegate">
        <see cref="T:System.Linq.Expressions.Expression`1" /> を表すデリゲートの型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>式ツリーによって記述されたラムダ式を実行可能コードにコンパイルし、ラムダ式を表すデリゲートを生成します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> によって記述されたコンパイル済みのラムダ式を表す <paramref name="TDelegate" /> 型のデリゲート。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="body">結果の <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティ。</param>
      <param name="parameters">結果の <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>式ツリー ノードのノード型を記述します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する加算演算 (a + b など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する加算の複合代入演算 ((a += b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する加算の複合代入演算 ((a += b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する加算演算 ((a + b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>論理またはビットごとの AND 演算 (C# の (a &amp; b)、Visual Basic の (a And b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>1 番目のオペランドが true に評価された場合にのみ 2 番目のオペランドを評価する条件 AND 演算。これは C# の (a &amp;&amp; b)、Visual Basic の (a AndAlso b) に対応します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>論理またはビットごとの AND 複合代入演算 (C# の (a &amp;= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>1 次元配列のインデックス演算 (C# の array[index]、Visual Basic の array(index) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>1 次元配列の長さを取得する演算 (array.Length など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>(a = b) などの代入演算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>式のブロック。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>obj.sampleMethod() 式などでのメソッド呼び出し。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>null 合体演算 (C# の (a ?? b)、Visual Basic の If(a, b) など) を表すノード。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>条件演算 (C# の a &gt; b ? a : b、Visual Basic の If(a &gt; b, a, b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>定数値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>キャスト演算または変換演算 (C# の (SampleType)obj、Visual Basic の CType(obj, SampleType) など)。数値変換では、変換された値が変換先の型に対して大きすぎる場合でも、例外はスローされません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>キャスト演算または変換演算 (C# の (SampleType)obj、Visual Basic の CType(obj, SampleType) など)。数値変換では、変換された値が変換先の型に合わない場合は、例外がスローされます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>デバッグ情報。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>単項デクリメント演算 (C# および Visual Basic での (a - 1) など)。a オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>既定値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>数値オペランドに対する除算演算 ((a / b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>数値オペランドに対する除算の複合代入演算 ((a /= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>動的演算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>等価比較 (C# の (a == b)、Visual Basic の (a = b) など) を表すノード。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>論理またはビットごとの XOR 演算 (C# の (a ^ b)、Visual Basic の (a Xor b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>論理またはビットごとの XOR 複合代入演算 (C# の (a ^= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>拡張式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>"go to" 式 (C# の goto Label、Visual Basic の GoTo Label など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>"より大きい" 比較 ((a &gt; b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>"以上" 比較 ((a &gt;= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>単項インクリメント演算 (C# および Visual Basic での (a + 1) など)。a オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>インデックス演算、または引数を受け取るプロパティにアクセスする演算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>デリゲートまたはラムダ式を呼び出す演算 (sampleDelegate.Invoke() など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>false 条件値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>true 条件値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>ラベル。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>ラムダ式 (C# の a =&gt; a + a、Visual Basic の Function(a) a + a など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>ビットごとの左シフト演算 ((a &lt;&lt; b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>ビットごとの左シフトの複合代入 ((a &lt;&lt;= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>"より小さい" 比較 ((a &lt; b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>"以下" 比較 ((a &lt;= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>新しい <see cref="T:System.Collections.IEnumerable" /> オブジェクトを作成し、要素のリストから初期化する演算 (C# の new List&lt;SampleType&gt;(){ a, b, c }、Visual Basic の Dim sampleList = { a, b, c } など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>ループ (for、while など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>フィールドまたはプロパティから読み取る演算 (obj.SampleProperty など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>新しいオブジェクトを作成し、1 つまたは複数のオブジェクト メンバーを初期化する演算 (C# の new Point { X = 1, Y = 2 }、Visual Basic の New Point With {.X = 1, .Y = 2} など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>算術剰余演算 (C# の (a % b)、Visual Basic の (a Mod b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>算術剰余の複合代入演算 (C# の (a %= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する乗算演算 ((a * b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する乗算の複合代入演算 ((a *= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する乗算の複合代入演算 ((a *= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する乗算演算 ((a * b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>算術否定演算 ((-a) など)。a オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>オーバーフロー チェックを行う算術否定演算 ((-a) など)。a オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>新しいオブジェクトを作成するためにコンストラクターを呼び出す演算 (new SampleType() など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>各次元の境界が指定された新しい配列を作成する演算 (C# の new SampleType[dim1, dim2]、Visual Basic の New SampleType(dim1, dim2) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>新しい 1 次元配列を作成し、要素のリストから初期化する演算 (C# の new SampleType[]{a, b, c}、Visual Basic の New SampleType(){a, b, c} など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>ビットごとの補数演算または論理否定演算。C# では、(~a) (整数型の場合) および (!a) (ブール値の場合) に相当します。Visual Basic では (Not a) に相当します。a オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>非等価比較 (C# の (a != b)、Visual Basic の (a &lt;&gt; b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>1 の補数演算 (C# の (~a) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>論理またはビットごとの OR 演算 (C# の (a | b)、Visual Basic の (a Or b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>論理またはビットごとの OR 複合代入 (C# の (a |= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>ショートサーキットの条件付き OR 演算 (C# の (a || b)、Visual Basic の (a OrElse b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>式のコンテキストで定義されているパラメーターまたは変数への参照。詳細については、「<see cref="T:System.Linq.Expressions.ParameterExpression" />」を参照してください。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>単項後置デクリメント ((a--) など)。a オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>単項後置インクリメント ((a++) など)。a オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>数値の累乗を求める数値演算 (Visual Basic の (a ^ b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>数値の累乗を求める複合代入演算 (Visual Basic の (a ^= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>単項前置デクリメント ((--a) など)。a オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>単項前置インクリメント ((++a) など)。a オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> 型の定数値を持つ式。<see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> ノードには、それが表す式のコンテキストで定義されたパラメーターへの参照を格納できます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>ビットごとの右シフト演算 ((a &gt;&gt; b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>ビットごとの右シフトの複合代入演算 ((a &gt;&gt;= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>ランタイム変数のリストです。詳細については、「<see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />」を参照してください。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する減算演算 ((a - b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>オーバーフロー チェックを行わない、数値オペランドに対する減算の複合代入演算 ((a -= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する減算の複合代入演算 ((a -= b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>オーバーフロー チェックを行う、数値オペランドに対する算術減算演算 ((a - b) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>スイッチ演算 (C# の switch、Visual Basic の Select Case など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>例外をスローする演算 (throw new Exception() など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>try-catch 式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>変換が失敗した場合に null が提供される明示的な参照変換またはボックス化変換 (C# の (obj as SampleType)、Visual Basic の TryCast(obj, SampleType) など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>正確な型テスト。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>型テスト (C# の obj is SampleType、Visual Basic の TypeOf obj is SampleType など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>単項プラス演算 ((+a) など)。定義済みの単項プラス演算の結果はオペランドの値ですが、ユーザー定義の実装では予期しない結果となる場合があります。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>値型のアンボックス化演算 (MSIL の unbox 命令、unbox.any 命令など)。</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>式ツリーのビジターまたはリライターを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>このクラス内の、より特化された走査メソッドの 1 つに式のリストをディスパッチします。</summary>
      <returns>いずれかの要素が変更された場合は変更された式リストを返します。それ以外の場合は元の式リストを返します。</returns>
      <param name="nodes">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>指定された要素ビジターを使用して、コレクション内のすべてのノードを走査します。</summary>
      <returns>いずれかの要素が変更された場合は変更されたノード リストを返します。それ以外の場合は元のノード リストを返します。</returns>
      <param name="nodes">走査するノード。</param>
      <param name="elementVisitor">単一の要素を走査し、オプションでそれを新しい要素に置き換えるデリゲート。</param>
      <typeparam name="T">ノードの型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>このクラス内の、より特化された走査メソッドの 1 つに式をディスパッチします。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>式を走査し、結果を元の式の型にキャストします。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="nodes">走査する式。</param>
      <param name="callerName">呼び出し元のメソッドの名前。より正確なエラー メッセージを報告するために使用します。</param>
      <typeparam name="T">式の型です。</typeparam>
      <exception cref="T:System.InvalidOperationException">このノードの走査メソッドから、異なる型が返されました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>式を走査し、結果を元の式の型にキャストします。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
      <param name="callerName">呼び出し元のメソッドの名前。より正確なエラー メッセージを報告するために使用します。</param>
      <typeparam name="T">式の型です。</typeparam>
      <exception cref="T:System.InvalidOperationException">このノードの走査メソッドから、異なる型が返されました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.BlockExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>
        <see cref="T:System.Linq.Expressions.ElementInit" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>拡張式の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.IndexExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.InvocationExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.LabelExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression`1" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
      <typeparam name="T">デリゲートの型です。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.LoopExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.NewExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.TryExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> の子を走査します。</summary>
      <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <param name="node">走査する式。</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>無条件ジャンプを表します。return ステートメント、break と continue ステートメントなど、各種のジャンプがこれに該当します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>"go to" 式の種類。情報提供のみを目的とします。</summary>
      <returns>"go to" 式の種類を表す <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>このノードの移動先のラベル。</summary>
      <returns>このノードの移動先のラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.GotoExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="target">結果の <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ。</param>
      <param name="value">結果の <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> プロパティ。</param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>移動先に渡される値。ターゲットの型が System.Void である場合は null。</summary>
      <returns>移動先に渡される値を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト、または null。</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>この <see cref="T:System.Linq.Expressions.GotoExpression" /> が表すジャンプの種類を指定します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>特定の位置へのジャンプを表す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider"></member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount"></member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)"></member>
    <member name="T:System.Linq.Expressions.IDynamicExpression"></member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite"></member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType"></member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])"></member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>プロパティまたは配列のインデックス化を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>プロパティまたは配列をインデックス化する際に使用される引数を取得します。</summary>
      <returns>プロパティまたは配列をインデックス化する際に使用される引数を格納する読み取り専用コレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>式がインデックス付きプロパティを表している場合は、プロパティの <see cref="T:System.Reflection.PropertyInfo" /> を取得します。それ以外の場合は null を返します。</summary>
      <returns>式がインデックス付きプロパティを表している場合は、プロパティの <see cref="T:System.Reflection.PropertyInfo" />。それ以外の場合は、null。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>インデックス化するオブジェクト。</summary>
      <returns>インデックス化するオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount"></member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)"></member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.IndexExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="object">結果の <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> プロパティ。</param>
      <param name="arguments">結果の <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>引数リストの式にデリゲートまたはラムダ式を適用する式を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>デリゲートまたはラムダ式が適用される引数を取得します。</summary>
      <returns>デリゲートが適用される引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>適用するデリゲートまたはラムダ式を取得します。</summary>
      <returns>適用するデリゲートを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount"></member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)"></member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>この <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="expression">結果の <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> プロパティ。</param>
      <param name="arguments">結果の <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> の任意のコンテキストに置くことができるラベルを表します。ジャンプ ステートメントの結果として、このラベルに制御が到達した場合、このラベルは、対応する <see cref="T:System.Linq.Expressions.GotoExpression" /> の値を受け取ります。それ以外の場合は、<see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> の値が渡されます。<see cref="T:System.Type" /> が System.Void と等しい場合は、いずれの値も渡されません。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>ジャンプ ステートメントではなく通常の制御フローを経てラベルに到達した場合の <see cref="T:System.Linq.Expressions.LabelExpression" /> の値。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelExpression" /> オブジェクトの値を表す式オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>このラベルが関連付けられている <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>このラベルが関連付けられている <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.LabelExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="target">結果の <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> プロパティ。</param>
      <param name="defaultValue">結果の <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" /> の移動先を表す目的で使用されます。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>ラベルの名前を取得します。</summary>
      <returns>ラベルの名前。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" /> を返します。</summary>
      <returns>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>ラベルにジャンプしたときに渡される値の型 (値を渡さない場合は <see cref="T:System.Void" />)。</summary>
      <returns>ラベルにジャンプしたときに渡される値の型を表す <see cref="T:System.Type" /> オブジェクト (値を渡さない場合は <see cref="T:System.Void" />)。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>ラムダ式を記述します。.NET メソッド本体に似たコードのブロックをキャプチャします。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>ラムダ式の本体を取得します。</summary>
      <returns>ラムダ式の本体を表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>ラムダ式を表すデリゲートを作成します。</summary>
      <returns>コンパイルされたバージョンのラムダ式を格納する <see cref="T:System.Delegate" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>ラムダ式の名前を取得します。</summary>
      <returns>ラムダ式の名前。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>ラムダ式のパラメーターを取得します。</summary>
      <returns>ラムダ式のパラメーターを表す <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>ラムダ式の戻り値の型を取得します。</summary>
      <returns>ラムダ式の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>ラムダ式が tail 呼び出し最適化を使用してコンパイルされるかどうかを示す値を取得します。</summary>
      <returns>ラムダ式が tail 呼び出し最適化を使用してコンパイルされる場合は True。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>コレクション初期化子を持つコンストラクター呼び出しを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns>ノードを単純化することができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>コレクションの初期化に使用される要素初期化子を取得します。</summary>
      <returns>コレクションの初期化に使用される要素を表す <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>コレクション型のコンストラクターへの呼び出しを含む式を取得します。</summary>
      <returns>コレクション型のコンストラクターへの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>二項式ノードをより単純な式へと変形します。</summary>
      <returns>単純化された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="newExpression">結果の <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティ。</param>
      <param name="initializers">結果の <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>無限ループを表します。これは "break" を使用して抜けることができます。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>ループの本体である <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns>ループの本体である <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>ループの本体で break ステートメントの移動先として使用されている <see cref="T:System.Linq.Expressions.LabelTarget" /> を取得します。</summary>
      <returns>ループの本体で break ステートメントの移動先として使用されている <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>ループの本体で continue ステートメントの移動先として使用されている <see cref="T:System.Linq.Expressions.LabelTarget" /> を取得します。</summary>
      <returns>ループの本体で continue ステートメントの移動先として使用されている <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.LoopExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="breakLabel">結果の <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> プロパティ。</param>
      <param name="continueLabel">結果の <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> プロパティ。</param>
      <param name="body">結果の <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>オブジェクトのフィールドまたはプロパティの代入演算を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>フィールドまたはプロパティに割り当てる式を取得します。</summary>
      <returns>フィールドまたはプロパティに割り当てる値を表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="expression">結果の <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>新しく作成されたオブジェクトのメンバーの初期化に使用されるバインディングを表すクラスが派生する基本クラスを提供します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>表されるバインディングの型を取得します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> 値のいずれか。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>初期化されるフィールドまたはプロパティを取得します。</summary>
      <returns>初期化されるフィールドまたはプロパティを表す <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> のテキスト表現を返します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> のテキスト表現。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> オブジェクトで使用されるバインディングの型を記述します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>式の値を持つメンバーの初期化を表すバインディング。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>要素のリストからの型が <see cref="T:System.Collections.IList" /> または <see cref="T:System.Collections.Generic.ICollection`1" /> のメンバーの初期化を表すバインディング。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>メンバーのメンバーの初期化を再帰的に表すバインディング。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>フィールドまたはプロパティへのアクセスを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は、<see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>フィールドまたはプロパティのコンテナー オブジェクトを取得します。</summary>
      <returns>フィールドまたはプロパティのコンテナー オブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>アクセスするフィールドまたはプロパティを取得します。</summary>
      <returns>アクセス先のフィールドまたはプロパティを表す <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>この <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="expression">結果の <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>コンストラクターの呼び出しと、新しいオブジェクトの 1 つまたは複数のメンバーの初期化を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>新しく作成されたオブジェクトのメンバーを初期化する方法を記述するバインディングを取得します。</summary>
      <returns>メンバーを初期化する方法を記述する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns>ノードを単純化することができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>コンストラクター呼び出しを表す式を取得します。</summary>
      <returns>コンストラクター呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> をより単純な式へと変形します。</summary>
      <returns>単純化された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="newExpression">結果の <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティ。</param>
      <param name="bindings">結果の <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>新しく作成されたオブジェクトのコレクション メンバーの要素の初期化を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>新しく作成されたオブジェクトのコレクション メンバーを初期化する要素初期化子を取得します。</summary>
      <returns>コレクション メンバーと共に初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="initializers">結果の <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>新しく作成されたオブジェクトのメンバーの初期化メンバーを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>メンバーのメンバーを初期化する方法を記述するバインディングを取得します。</summary>
      <returns>メンバーのメンバーを初期化する方法を記述する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="bindings">結果の <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>静的メソッドまたはインスタンス メソッドへの呼び出しを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は、<see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>呼び出されたメソッドの引数を表す式のコレクションを取得します。</summary>
      <returns>呼び出されたメソッドへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>呼び出されたメソッドの <see cref="T:System.Reflection.MethodInfo" /> を取得します。</summary>
      <returns>呼び出されたメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>インスタンス (インスタンス メソッド呼び出しの場合) または null (静的メソッド呼び出しの場合) を表す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns>メソッドの受け取り側のオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount"></member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)"></member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="object">結果の <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティ。</param>
      <param name="arguments">結果の <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>新しい配列の作成と、場合によっては新しい配列の要素の初期化を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は、<see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティの値が <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> の場合は配列の境界を取得し、<see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティの値が <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> の場合は新しい配列の要素を初期化する値を取得します。</summary>
      <returns>配列の境界または初期化値のどちらかを表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="expressions">結果の <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>コンストラクター呼び出しを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は、<see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>コンストラクターへの引数を取得します。</summary>
      <returns>コンストラクターへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>呼び出されたコンストラクターを取得します。</summary>
      <returns>呼び出されたコンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>コンストラクター引数を使用して初期化されたフィールド値の取得が可能なメンバーを取得します。</summary>
      <returns>コンストラクター引数を使用して初期化されたフィールド値の取得が可能なメンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount"></member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)"></member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.NewExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="arguments">結果の <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>名前付きパラメーター式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>このノード型の特定の Visit メソッドにデスパッチします。たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は、<see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <returns>このノードの走査結果。</returns>
      <param name="visitor">このノードを走査するビジター。</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>この ParameterExpression が ByRef パラメーターとして扱われることを示します。</summary>
      <returns>この ParameterExpression が ByRef パラメーターである場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>パラメーターまたは変数の名前を取得します。</summary>
      <returns>パラメーターの名前を格納する <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>変数に対する実行時の読み取り/書き込みアクセス許可を提供する式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="variables">結果の <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> プロパティ。</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>実行時アクセスを提供する変数またはパラメーター。</summary>
      <returns>実行時アクセスが提供されるパラメーターを格納している読み取り専用コレクション。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" /> の 1 つのケース (case) を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>このケースの本体を取得します。</summary>
      <returns>case ブロックの本体を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>このケースの値を取得します。<see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> がこれらの値のいずれかと一致した場合、実行にはこのケースが選択されます。</summary>
      <returns>この case ブロックの値の読み取り専用コレクション。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" /> を返します。</summary>
      <returns>現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="testValues">結果の <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> プロパティ。</param>
      <param name="body">結果の <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> に制御を渡すことによって複数の選択内容を処理する制御式を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>switch に対応する <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトのコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>等価比較メソッドを取得します (存在する場合)。</summary>
      <returns>等価比較メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>switch のテストを取得します。</summary>
      <returns>switch のテストを表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>switch のテストを取得します。</summary>
      <returns>switch のテストを表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="switchValue">結果の <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> プロパティ。</param>
      <param name="cases">結果の <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> プロパティ。</param>
      <param name="defaultBody">結果の <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>ソース ファイルのデバッグ シンボル情報を生成するのに必要な情報を格納します (特にファイル名や一意の言語識別子)。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>ドキュメントの種類の一意の識別子を返します (存在する場合)。既定値はテキスト ファイルの GUID です。</summary>
      <returns>ドキュメントの種類の一意の識別子。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>ソース ファイル名。</summary>
      <returns>ソース ファイル名を表す文字列。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>言語の一意の識別子を返します (存在する場合)。</summary>
      <returns>言語の一意の識別子。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>言語の販売元の一意の識別子を返します (存在する場合)。</summary>
      <returns>言語の販売元の一意の識別子。</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>try/catch/finally/fault ブロックを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>try ブロックの本体を表す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns>try ブロックの本体を表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>fault ブロックを表す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns>fault ブロックを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>finally ブロックを表す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns>finally ブロックを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>try ブロックに関連付けられている <see cref="T:System.Linq.Expressions.CatchBlock" /> 式のコレクションを取得します。</summary>
      <returns>try ブロックに関連付けられている <see cref="T:System.Linq.Expressions.CatchBlock" /> 式のコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.TryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="body">結果の <see cref="P:System.Linq.Expressions.TryExpression.Body" /> プロパティ。</param>
      <param name="handlers">結果の <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> プロパティ。</param>
      <param name="finally">結果の <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> プロパティ。</param>
      <param name="fault">結果の <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>式と型の間の演算を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>型テスト演算の式オペランドを取得します。</summary>
      <returns>型テスト演算の式オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>この式のノード型を返します。拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns>式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>この <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>型テスト演算の型オペランドを取得します。</summary>
      <returns>型テスト演算の型オペランドを表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="expression">結果の <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> プロパティ。</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>単項演算子を持つ式を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns>ノードを単純化することができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>式ツリー ノードが、演算子へのリフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns>ノードがリフトされた呼び出しを表す場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>式ツリー ノードが、戻り値の型が null 許容型にリフトされた演算子への、リフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns>演算子の戻り値の型が null 許容型にリフトされた場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>単項演算の実装メソッドを取得します。</summary>
      <returns>実装メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns>この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>単項演算のオペランドを取得します。</summary>
      <returns>単項演算のオペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>式ノードをより単純な式へと変形します。</summary>
      <returns>単純化された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns>式の静的な型を表す <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>この式に似た新しい式を作成しますが、指定された子を使用します。すべての子が同じであれば、この式が返されます。</summary>
      <returns>更新された子を使用した式。子が変更されていない場合はこの式。</returns>
      <param name="operand">結果の <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティ。</param>
    </member>
  </members>
</doc>