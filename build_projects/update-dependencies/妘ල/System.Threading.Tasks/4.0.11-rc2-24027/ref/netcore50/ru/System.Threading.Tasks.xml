<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks</name>
  </assembly>
  <members>
    <member name="T:System.AggregateException">
      <summary>Представляет одну или несколько ошибок, происходящих во время выполнения приложения.</summary>
    </member>
    <member name="M:System.AggregateException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.AggregateException" /> системным сообщением, содержащим описание ошибки.</summary>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.AggregateException" /> со ссылками на внутренние исключения, вызвавшие данное исключение.</summary>
      <param name="innerExceptions">Исключения, являющиеся причиной текущего исключения.</param>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="innerExceptions" /> является null.</exception>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="innerExceptions" /> равен null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Exception[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.AggregateException" /> со ссылками на внутренние исключения, вызвавшие данное исключение.</summary>
      <param name="innerExceptions">Исключения, являющиеся причиной текущего исключения.</param>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="innerExceptions" /> является null.</exception>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="innerExceptions" /> равен null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.AggregateException" /> указанным сообщением, содержащим описание ошибки.</summary>
      <param name="message">Сообщение с описанием исключения.Вызывающий оператор этого конструктора необходим, чтобы убедиться, локализована ли данная строка для текущего языка и региональных параметров системы.</param>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.AggregateException" /> с заданным сообщением об ошибке и ссылками на внутренние исключения, вызвавшие данное исключение.</summary>
      <param name="message">Сообщение об ошибке с объяснением причин исключения.</param>
      <param name="innerExceptions">Исключения, являющиеся причиной текущего исключения.</param>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="innerExceptions" /> является null.</exception>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="innerExceptions" /> равен null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.AggregateException" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее это исключение.</summary>
      <param name="message">Сообщение с описанием исключения.Вызывающий оператор этого конструктора необходим, чтобы убедиться, локализована ли данная строка для текущего языка и региональных параметров системы.</param>
      <param name="innerException">Исключение, которое вызвало текущее исключение.Если значение параметра <paramref name="innerException" /> не равно null, текущее исключение сгенерировано в блоке catch, обрабатывающем внутреннее исключение.</param>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="innerException" /> является null.</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.AggregateException" /> с заданным сообщением об ошибке и ссылками на внутренние исключения, вызвавшие данное исключение.</summary>
      <param name="message">Сообщение об ошибке с объяснением причин исключения.</param>
      <param name="innerExceptions">Исключения, являющиеся причиной текущего исключения.</param>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="innerExceptions" /> является null.</exception>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="innerExceptions" /> равен null.</exception>
    </member>
    <member name="M:System.AggregateException.Flatten">
      <summary>Объединяет экземпляры <see cref="T:System.AggregateException" /> в один новый экземпляр.</summary>
      <returns>Новый объединенный объект <see cref="T:System.AggregateException" />.</returns>
    </member>
    <member name="M:System.AggregateException.GetBaseException">
      <summary>Возвращает объект <see cref="T:System.AggregateException" />, являющийся первопричиной данного исключения.</summary>
      <returns>Возвращает объект <see cref="T:System.AggregateException" />, являющийся первопричиной данного исключения.</returns>
    </member>
    <member name="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})">
      <summary>Вызывает обработчик для каждого объекта <see cref="T:System.Exception" />, содержащегося в данном объекте <see cref="T:System.AggregateException" />.</summary>
      <param name="predicate">Предикат, который должен выполняться для каждого исключения.Предикат принимает в качестве аргумента подлежащий обработке объект <see cref="T:System.Exception" /> и возвращает логическое значение, указывающее, было ли обработано исключение.</param>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="predicate" /> является null.</exception>
      <exception cref="T:System.AggregateException">Не обработано исключение, содержащихся в этом <see cref="T:System.AggregateException" />.</exception>
    </member>
    <member name="P:System.AggregateException.InnerExceptions">
      <summary>Получает доступную только для чтения коллекцию экземпляров <see cref="T:System.Exception" />, вызывавших текущее исключение.</summary>
      <returns>Возвращает доступную только для чтения коллекцию экземпляров <see cref="T:System.Exception" />, вызывавших текущее исключение.</returns>
    </member>
    <member name="M:System.AggregateException.ToString">
      <summary>Создает и возвращает строковое представление текущего объекта <see cref="T:System.AggregateException" />.</summary>
      <returns>Строковое представление текущего исключения.</returns>
    </member>
    <member name="T:System.OperationCanceledException">
      <summary>Исключение, которое создается в потоке при отмене операции, которая выполнялась в этом потоке.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> с системным сообщением об ошибке.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> с заданным сообщением об ошибке.</summary>
      <param name="message">Строка <see cref="T:System.String" />, описывающая ошибку.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее это исключение.</summary>
      <param name="message">Сообщение об ошибке с объяснением причин исключения. </param>
      <param name="innerException">Исключение, которое вызвало текущее исключение.Если значение параметра <paramref name="innerException" /> не равно null, текущее исключение сгенерировано в блоке catch, обрабатывающем внутреннее исключение.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> с заданным сообщением об ошибке, ссылкой на внутренней исключение, вызвавшее это исключение, и токен отмены.</summary>
      <param name="message">Сообщение об ошибке с объяснением причин исключения. </param>
      <param name="innerException">Исключение, которое вызвало текущее исключение.Если значение параметра <paramref name="innerException" /> не равно null, текущее исключение сгенерировано в блоке catch, обрабатывающем внутреннее исключение.</param>
      <param name="token">Токен отмены, связанный с отмененной операцией.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> с заданным сообщением об ошибке и токеном отмены.</summary>
      <param name="message">Сообщение об ошибке с объяснением причин исключения.</param>
      <param name="token">Токен отмены, связанный с отмененной операцией.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> с токеном отмены.</summary>
      <param name="token">Токен отмены, связанный с отмененной операцией.</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>Получает токен, связанный с отмененной операцией.</summary>
      <returns>Токен, связанный с отмененной операцией, или токен по умолчанию.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>Представляет построитель для асинхронных методов, которые возвращают задачу.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Планирует конечный автомат для перехода к следующему действию по завершении выполнения указанного объекта типа awaiter.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Планирует конечный автомат для перехода к следующему действию по завершении выполнения указанного объекта типа awaiter.Этот метод может вызываться из частично доверенного кода.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>Создает экземпляр класса <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" />.</summary>
      <returns>Новый экземпляр построителя.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>Помечает задачу как сбойную и привязывает указанное исключение в задаче.</summary>
      <param name="exception">Исключение для привязки к задаче.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="exception" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Задача уже завершена.– или –Построитель не инициализирован.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>Отмечает задачу как успешно завершенную.</summary>
      <exception cref="T:System.InvalidOperationException">Задача уже завершена.– или –Построитель не инициализирован.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Связывает построитель с указанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, связываемый с построителем.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="stateMachine" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Конечный автомат был ранее установлен.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>Начинает выполнение построителя со связанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, переданный ссылкой.</param>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="stateMachine" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>Получает задачу для данного построителя.</summary>
      <returns>Задача для этого построителя.</returns>
      <exception cref="T:System.InvalidOperationException">Построитель не инициализирован.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>Представляет построитель для асинхронных методов, который возвращает задачу и предоставляет параметр для результата.</summary>
      <typeparam name="TResult">Результат, используемый для выполнения задачи.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Планирует конечный автомат для перехода к следующему действию по завершении выполнения указанного объекта типа awaiter.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Планирует конечный автомат для перехода к следующему действию по завершении выполнения указанного объекта типа awaiter.Этот метод может вызываться из частично доверенного кода.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>Создает экземпляр класса <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" />.</summary>
      <returns>Новый экземпляр построителя.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>Помечает задачу как сбойную и привязывает указанное исключение в задаче.</summary>
      <param name="exception">Исключение для привязки к задаче.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="exception" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Задача уже завершена.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>Отмечает задачу как успешно завершенную.</summary>
      <param name="result">Результат, используемый для выполнения задачи.</param>
      <exception cref="T:System.InvalidOperationException">Задача уже завершена.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Связывает построитель с указанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, связываемый с построителем.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="stateMachine" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Конечный автомат был ранее установлен.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>Начинает выполнение построителя со связанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, переданный ссылкой.</param>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="stateMachine" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>Получает задачу для данного построителя.</summary>
      <returns>Задача для этого построителя.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>Представляет построитель для асинхронных методов, которые не возвращают значение.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Планирует конечный автомат для перехода к следующему действию по завершении выполнения указанного объекта типа awaiter.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Планирует конечный автомат для перехода к следующему действию по завершении выполнения указанного объекта типа awaiter.Этот метод может вызываться из частично доверенного кода.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>Создает экземпляр класса <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" />.</summary>
      <returns>Новый экземпляр построителя.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>Привязывает исключение к конструктору метода.</summary>
      <param name="exception">Исключение для привязки.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="exception" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Построитель не инициализирован.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>Помечает метод построения как успешно завершенный.</summary>
      <exception cref="T:System.InvalidOperationException">Построитель не инициализирован.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Связывает построитель с указанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, связываемый с построителем.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="stateMachine" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Конечный автомат был ранее установлен.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>Начинает выполнение построителя со связанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, переданный ссылкой.</param>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="stateMachine" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable">
      <summary>Предоставляет ожидаемый объект, который включает настроенные объекты await для задачи.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.GetAwaiter">
      <summary>возвращает объект типа awaiter для этого объекта awaitable.</summary>
      <returns>Awaiter.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1">
      <summary>Предоставляет ожидаемый объект, который включает настроенные объекты await для задачи.</summary>
      <typeparam name="TResult">Тип результата, созданного данным объектом <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.GetAwaiter">
      <summary>возвращает объект типа awaiter для этого объекта awaitable.</summary>
      <returns>Awaiter.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter">
      <summary>Предоставляет объект типа awaiter для объекта awaitable (<see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1" />).</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult">
      <summary>Завершает ожидание завершенной задачи.</summary>
      <returns>Результат завершенной задачи.</returns>
      <exception cref="T:System.NullReferenceException">Объект типа awaiter не был инициализирован надлежащим образом.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">Задача отменена.</exception>
      <exception cref="T:System.Exception">Задача завершилась в состоянии сбоя.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.IsCompleted">
      <summary>Получает значение, указывающее, завершена ли ожидаемая задача.</summary>
      <returns>Значение true, если задача, выполнение которой ожидается, завершена; в противном случае — значение false.</returns>
      <exception cref="T:System.NullReferenceException">Объект типа awaiter не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>Планирует действие продолжения для задачи, связанной с этим объектом типа awaiter.</summary>
      <param name="continuation">Действие, которое необходимо вызвать после завершения операции ожидания.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="continuation" /> равен пустой ссылке (null).</exception>
      <exception cref="T:System.NullReferenceException">Объект типа awaiter не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Планирует действие продолжения для задачи, связанной с этим объектом типа awaiter. </summary>
      <param name="continuation">Действие, которое необходимо вызвать после завершения операции ожидания.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="continuation" /> равен пустой ссылке (null).</exception>
      <exception cref="T:System.NullReferenceException">Объект типа awaiter не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter">
      <summary>Предоставляет объект типа awaiter для объекта awaitable (<see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable" />).</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult">
      <summary>Завершает ожидание завершенной задачи.</summary>
      <exception cref="T:System.NullReferenceException">Объект типа awaiter не был инициализирован надлежащим образом.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">Задача отменена.</exception>
      <exception cref="T:System.Exception">Задача завершилась в состоянии сбоя.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.IsCompleted">
      <summary>Получает значение, указывающее, завершена ли ожидаемая задача.</summary>
      <returns>Значение true, если задача, выполнение которой ожидается, завершена; в противном случае — значение false.</returns>
      <exception cref="T:System.NullReferenceException">Объект типа awaiter не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>Планирует действие продолжения для задачи, связанной с этим объектом типа awaiter.</summary>
      <param name="continuation">Действие, которое необходимо вызвать после завершения операции ожидания.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="continuation" /> равен пустой ссылке (null).</exception>
      <exception cref="T:System.NullReferenceException">Объект типа awaiter не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Планирует действие продолжения для задачи, связанной с этим объектом типа awaiter. </summary>
      <param name="continuation">Действие, которое необходимо вызвать после завершения операции ожидания.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="continuation" /> равен пустой ссылке (null).</exception>
      <exception cref="T:System.NullReferenceException">Объект типа awaiter не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IAsyncStateMachine">
      <summary>Представляет конечные автоматы, созданные для асинхронных методов.Этот тип предназначен только для использования компилятором.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext">
      <summary>Перемещает конечный автомат в его следующее состояние.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Настраивает конечный автомат с размещенной в куче репликой.</summary>
      <param name="stateMachine">Размещенная в куче реплика.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ICriticalNotifyCompletion">
      <summary>Представляет объект типа awaiter, которая планирует продолжение после завершения операции ожидания.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ICriticalNotifyCompletion.UnsafeOnCompleted(System.Action)">
      <summary>Планирует действие продолжения, которое вызывается, когда завершается экземпляр.</summary>
      <param name="continuation">Действие, вызываемое по завершении операции.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="continuation" /> имеет значение NULL (Nothing в Visual Basic).</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.INotifyCompletion">
      <summary>Представляет операцию, которая планирует продолжение после ее завершения.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(System.Action)">
      <summary>Планирует действие продолжения, которое вызывается, когда завершается экземпляр.</summary>
      <param name="continuation">Действие, вызываемое по завершении операции.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="continuation" /> имеет значение NULL (Nothing в Visual Basic).</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter">
      <summary>Предоставляет объект, который ожидает завершения асинхронной задачи. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.GetResult">
      <summary>Завершает ожидание завершения асинхронной задачи.</summary>
      <exception cref="T:System.NullReferenceException">Объект <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> не был инициализирован надлежащим образом.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">Задача отменена.</exception>
      <exception cref="T:System.Exception">Задача завершилась в состоянии <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter.IsCompleted">
      <summary>Получает значение, показывающее, завершена ли асинхронная задача.</summary>
      <returns>Значение true, если задача была завершена; в противном случае — значение false.</returns>
      <exception cref="T:System.NullReferenceException">Объект <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.OnCompleted(System.Action)">
      <summary>Задает действие, выполняемое, когда объект <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> прекращает ожидать завершения выполнения асинхронной задачи.</summary>
      <param name="continuation">Действие, которое необходимо выполнить после завершения операции ожидания.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="continuation" /> имеет значение null.</exception>
      <exception cref="T:System.NullReferenceException">Объект <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Планирует действие продолжения для асинхронной задачи, связанной с этим объектом типа awaiter.</summary>
      <param name="continuation">Действие, которое необходимо вызвать после завершения операции ожидания.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="continuation" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Объект типа awaiter не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter`1">
      <summary>Представляет объект, который ожидает завершения асинхронной задачи и предоставляет параметр для результата.</summary>
      <typeparam name="TResult">Результат для задачи.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.GetResult">
      <summary>Завершает ожидание завершения асинхронной задачи.</summary>
      <returns>Результат завершенной задачи.</returns>
      <exception cref="T:System.NullReferenceException">Объект <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> не был инициализирован надлежащим образом.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">Задача отменена.</exception>
      <exception cref="T:System.Exception">Задача завершилась в состоянии <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter`1.IsCompleted">
      <summary>Получает значение, показывающее, завершена ли асинхронная задача.</summary>
      <returns>Значение true, если задача была завершена; в противном случае — значение false.</returns>
      <exception cref="T:System.NullReferenceException">Объект <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.OnCompleted(System.Action)">
      <summary>Задает действие, выполняемое, когда объект <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> прекращает ожидать завершения выполнения асинхронной задачи.</summary>
      <param name="continuation">Действие, которое необходимо выполнить после завершения операции ожидания.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="continuation" /> имеет значение null.</exception>
      <exception cref="T:System.NullReferenceException">Объект <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>Планирует действие продолжения для асинхронной задачи, связанной с этим объектом типа awaiter.</summary>
      <param name="continuation">Действие, которое необходимо вызвать после завершения операции ожидания.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="continuation" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Объект типа awaiter не был инициализирован надлежащим образом.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable">
      <summary>Предоставляет контекст для ожидания при асинхронном переключении на целевую среду.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.GetAwaiter">
      <summary>Извлекает объект <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter" /> для данного экземпляра класса.</summary>
      <returns>Объект, который используется для отслеживания завершения асинхронной операции.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter">
      <summary>Предоставляет ожидающий объект для переключения на целевую среду.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.GetResult">
      <summary>Завершает операцию ожидания.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.IsCompleted">
      <summary>Получает значение, указывающее, является ли оператор yield необязательным.</summary>
      <returns>Всегда false, что указывает, что выходные данные всегда требуется для <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.OnCompleted(System.Action)">
      <summary>Задает вызываемое продолжение.</summary>
      <param name="continuation">Действие, вызываемое асинхронно.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="continuation" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Отправляет <paramref name="continuation" /> обратно к текущему контексту.</summary>
      <param name="continuation">Действие, вызываемое асинхронно.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="continuation" /> равен пустой ссылке (null).</exception>
    </member>
    <member name="T:System.Threading.CancellationToken">
      <summary>Распространяет уведомление о том, что операции следует отменить.</summary>
    </member>
    <member name="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
      <summary>Инициализирует объект <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="canceled">Состояние отмены для токена.</param>
    </member>
    <member name="P:System.Threading.CancellationToken.CanBeCanceled">
      <summary>Возвращает значение, указывающее, может ли данный токен находиться в отмененном состоянии.</summary>
      <returns>Значение true, если данный токен может переходить в отмененное состояние; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Object)">
      <summary>Определяет, равен ли текущий экземпляр <see cref="T:System.Threading.CancellationToken" /> заданному объекту <see cref="T:System.Object" />.</summary>
      <returns>Значение true, если <paramref name="other" /> является <see cref="T:System.Threading.CancellationToken" /> и два экземпляра равны; в противном случае — значение false.Два токена равны, если они связаны с одним объектом <see cref="T:System.Threading.CancellationTokenSource" /> или если они оба были созданы открытыми конструкторами CancellationToken и их значения <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> равны.</returns>
      <param name="other">Второй объект, с которым нужно сравнить данный экземпляр.</param>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
      <summary>Определяет, равен ли текущий экземпляр <see cref="T:System.Threading.CancellationToken" /> заданному токену.</summary>
      <returns>Значение true, если экземпляры равны; в противном случае — значение false.Два токена равны, если они связаны с одним объектом <see cref="T:System.Threading.CancellationTokenSource" /> или если они оба были созданы открытыми конструкторами CancellationToken и их значения <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> равны.</returns>
      <param name="other">Второй токен <see cref="T:System.Threading.CancellationToken" />, с которым нужно сравнить данный экземпляр.</param>
    </member>
    <member name="M:System.Threading.CancellationToken.GetHashCode">
      <summary>Служит хэш-функцией для <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>Хэш-код для текущего экземпляра <see cref="T:System.Threading.CancellationToken" />.</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.IsCancellationRequested">
      <summary>Возвращает значение, указывающее, есть ли для данного токена запрос на отмену.</summary>
      <returns>Значение true, если для данного токена создан запрос на отмену; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.None">
      <summary>Возвращает пустое значение <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>Пустой токен отмены. </returns>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Определяет, равны ли два экземпляра <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>Значение true, если экземпляры равны; в противном случае — значение false.</returns>
      <param name="left">Первый экземпляр.</param>
      <param name="right">Второй экземпляр.</param>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Определяет, действительно ли два экземпляра <see cref="T:System.Threading.CancellationToken" /> не равны.</summary>
      <returns>Значение true, если экземпляры не равны; в противном случае — значение false.</returns>
      <param name="left">Первый экземпляр.</param>
      <param name="right">Второй экземпляр.</param>
      <exception cref="T:System.ObjectDisposedException">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action)">
      <summary>Регистрирует делегат, который будет вызываться при отмене данного токена <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>Экземпляр <see cref="T:System.Threading.CancellationTokenRegistration" />, который можно использовать для отмены регистрации обратного вызова.</returns>
      <param name="callback">Делегат, выполняемый при отмене токена <see cref="T:System.Threading.CancellationToken" />.</param>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
      <summary>Регистрирует делегат, который будет вызываться при отмене данного токена <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>Экземпляр <see cref="T:System.Threading.CancellationTokenRegistration" />, который можно использовать для отмены регистрации обратного вызова.</returns>
      <param name="callback">Делегат, выполняемый при отмене токена <see cref="T:System.Threading.CancellationToken" />.</param>
      <param name="useSynchronizationContext">Логическое значение, указывающее, следует ли записывать текущий объект <see cref="T:System.Threading.SynchronizationContext" /> и использовать его при вызове <paramref name="callback" />.</param>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
      <summary>Регистрирует делегат, который будет вызываться при отмене данного токена <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>Экземпляр <see cref="T:System.Threading.CancellationTokenRegistration" />, который можно использовать для отмены регистрации обратного вызова.</returns>
      <param name="callback">Делегат, выполняемый при отмене токена <see cref="T:System.Threading.CancellationToken" />.</param>
      <param name="state">Состояние, передаваемое обратному вызову <paramref name="callback" /> при вызове делегата.Может содержать пустое значение.</param>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
      <summary>Регистрирует делегат, который будет вызываться при отмене данного токена <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>Экземпляр <see cref="T:System.Threading.CancellationTokenRegistration" />, который можно использовать для отмены регистрации обратного вызова.</returns>
      <param name="callback">Делегат, выполняемый при отмене токена <see cref="T:System.Threading.CancellationToken" />.</param>
      <param name="state">Состояние, передаваемое обратному вызову <paramref name="callback" /> при вызове делегата.Может содержать пустое значение.</param>
      <param name="useSynchronizationContext">Логическое значение, указывающее, следует ли записывать текущий объект <see cref="T:System.Threading.SynchronizationContext" /> и использовать его при вызове <paramref name="callback" />.</param>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
      <summary>Создает исключение <see cref="T:System.OperationCanceledException" />, если для данного токена есть запрос на отмену.</summary>
      <exception cref="T:System.OperationCanceledException">The token has had cancellation requested.</exception>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="P:System.Threading.CancellationToken.WaitHandle">
      <summary>Возвращает дескриптор <see cref="T:System.Threading.WaitHandle" />, получающий сигнал при отмене токена.</summary>
      <returns>Дескриптор <see cref="T:System.Threading.WaitHandle" />, получающий сигнал при отмене токена.</returns>
      <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
    </member>
    <member name="T:System.Threading.CancellationTokenRegistration">
      <summary>Представляет делегат обратного вызова, зарегистрированный с объектом <see cref="T:System.Threading.CancellationToken" />. </summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Dispose">
      <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Threading.CancellationTokenRegistration" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Object)">
      <summary>Определяет, равен ли текущий экземпляр <see cref="T:System.Threading.CancellationTokenRegistration" /> заданному объекту <see cref="T:System.Threading.CancellationTokenRegistration" />.</summary>
      <returns>Значение true, если данный параметр и <paramref name="obj" /> равны.В противном случае — значение false.Два экземпляра <see cref="T:System.Threading.CancellationTokenRegistration" /> равны, если они оба ссылаются на вывод одного вызова к одному методу Register объекта <see cref="T:System.Threading.CancellationToken" />.</returns>
      <param name="obj">Второй объект, с которым нужно сравнить данный экземпляр.</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)">
      <summary>Определяет, равен ли текущий экземпляр <see cref="T:System.Threading.CancellationTokenRegistration" /> заданному объекту <see cref="T:System.Threading.CancellationTokenRegistration" />.</summary>
      <returns>Значение true, если данный параметр и <paramref name="other" /> равны.В противном случае — значение false. Два экземпляра <see cref="T:System.Threading.CancellationTokenRegistration" /> равны, если они оба ссылаются на вывод одного вызова к одному методу Register объекта <see cref="T:System.Threading.CancellationToken" />.</returns>
      <param name="other">Второй токен <see cref="T:System.Threading.CancellationTokenRegistration" />, с которым нужно сравнить данный экземпляр.</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.GetHashCode">
      <summary>Служит хэш-функцией для объекта <see cref="T:System.Threading.CancellationTokenRegistration" />.</summary>
      <returns>Хэш-код для текущего экземпляра <see cref="T:System.Threading.CancellationTokenRegistration" />.</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>Определяет, равны ли два экземпляра <see cref="T:System.Threading.CancellationTokenRegistration" />.</summary>
      <returns>Значение true, если экземпляры объектов равны; в противном случае ― значение false.</returns>
      <param name="left">Первый экземпляр.</param>
      <param name="right">Второй экземпляр.</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>Определяет, действительно ли два экземпляра <see cref="T:System.Threading.CancellationTokenRegistration" /> не равны.</summary>
      <returns>Значение true, если экземпляры не равны; в противном случае — значение false.</returns>
      <param name="left">Первый экземпляр.</param>
      <param name="right">Второй экземпляр.</param>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>Отправляет токену <see cref="T:System.Threading.CancellationToken" /> сигнал отмены.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.CancellationTokenSource" />, который будет отменен после указанной задержки (в миллисекундах).</summary>
      <param name="millisecondsDelay">Интервал времени ожидания в миллисекундах перед отменой <see cref="T:System.Threading.CancellationTokenSource" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> is less than -1. </exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.CancellationTokenSource" />, который будет отменен после указанного периода времени.</summary>
      <param name="delay">Интервал времени ожидания в миллисекундах перед отменой <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /> is less than -1 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>Передает запрос на отмену.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>Передает запрос отмены и определяет, будут ли последующие обратные вызовы и отменяемые операции обрабатываться.</summary>
      <param name="throwOnFirstException">Значение true, если исключения нужно распространять немедленно; в противном случае — значение false.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>Планирует операцию отмены для данного объекта <see cref="T:System.Threading.CancellationTokenSource" /> после указанного числа миллисекунд.</summary>
      <param name="millisecondsDelay">Интервал времени ожидания перед отменой этого объекта <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ObjectDisposedException">The exception thrown when this <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception thrown when <paramref name="millisecondsDelay" /> is less than -1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>Планирует операцию отмены для данного объекта <see cref="T:System.Threading.CancellationTokenSource" /> после указанного периода времени.</summary>
      <param name="delay">Интервал времени ожидания перед отменой этого объекта <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ObjectDisposedException">The exception thrown when this <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when <paramref name="delay" /> is less than -1 or greater than Int32.MaxValue.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Создает объект <see cref="T:System.Threading.CancellationTokenSource" />, который будет иметь отмененное состояние, если какой-либо из исходных токенов находится в отмененном состоянии.</summary>
      <returns>Объект <see cref="T:System.Threading.CancellationTokenSource" />, связанный с исходными токенами.</returns>
      <param name="token1">Первый токен отмены, который следует контролировать.</param>
      <param name="token2">Второй токен отмены, который следует контролировать.</param>
      <exception cref="T:System.ObjectDisposedException">A <see cref="T:System.Threading.CancellationTokenSource" /> associated with one of the source tokens has been disposed.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>Создает объект <see cref="T:System.Threading.CancellationTokenSource" />, который будет иметь отмененное состояние, если любой из исходных токенов в заданном массиве находится в отмененном состоянии.</summary>
      <returns>Объект <see cref="T:System.Threading.CancellationTokenSource" />, связанный с исходными токенами.</returns>
      <param name="tokens">Массив, содержащий экземпляры токена отмены для наблюдения.</param>
      <exception cref="T:System.ObjectDisposedException">A <see cref="T:System.Threading.CancellationTokenSource" /> associated with one of the source tokens has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tokens" /> is empty.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые классом <see cref="T:System.Threading.CancellationTokenSource" /> (при необходимости освобождает и управляемые ресурсы).</summary>
      <param name="disposing">Значение true позволяет освободить как управляемые, так и неуправляемые ресурсы; значение false освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>Получает значение, указывающее, есть ли для данного объекта <see cref="T:System.Threading.CancellationTokenSource" /> запрос на отмену.</summary>
      <returns>Значение true, если для данного объекта <see cref="T:System.Threading.CancellationTokenSource" /> есть запрос на отмену; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>Возвращает объект <see cref="T:System.Threading.CancellationToken" />, связанный с этим объектом <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
      <returns>Рабочая область метаданных <see cref="T:System.Threading.CancellationToken" />, связанная с этим соединением <see cref="T:System.Threading.CancellationTokenSource" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The token source has been disposed.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>Предоставляет планировщики задачи, которые координируются для выполнения задач, обеспечивая то, что параллельные задачи могут выполняться одновременно, а эксклюзивные задачи - нет.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />, предназначенный для указанного планировщика.</summary>
      <param name="taskScheduler">Целевой планировщик, на котором должна выполняться эта пара.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />, предназначенный для указанного планировщика с максимальным уровнем параллелизма.</summary>
      <param name="taskScheduler">Целевой планировщик, на котором должна выполняться эта пара.</param>
      <param name="maxConcurrencyLevel">Максимальное количество параллельно выполняемых задач.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />, предназначенный для указанного планировщика с максимальным уровнем параллелизма и максимальным количеством запланированных задач, которые могут обрабатываться как одна единица.</summary>
      <param name="taskScheduler">Целевой планировщик, на котором должна выполняться эта пара.</param>
      <param name="maxConcurrencyLevel">Максимальное количество параллельно выполняемых задач.</param>
      <param name="maxItemsPerTask">Максимальное число задач обработки для каждой базовой запланированной задачи, используемой парой.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>Информирует пару планировщика, что она больше не должна принимать задачи.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>Получает <see cref="T:System.Threading.Tasks.Task" />, который завершится, когда планировщик закончит обработку.</summary>
      <returns>Асинхронная операция, которая завершается при завершении обработки планировщиком.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>Получает <see cref="T:System.Threading.Tasks.TaskScheduler" />, который можно использовать для планирования задач в этой паре, которая может выполняться параллельно с другими задачами на этой паре.</summary>
      <returns>Объект, который может использоваться для параллельного планирования заданий.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>Получает <see cref="T:System.Threading.Tasks.TaskScheduler" />, который можно использовать для планирования задач в этой паре, которая должна выполняться исключительно с учетом других задач в этой паре.</summary>
      <returns>Объект, который можно использовать для планирования задач, не выполняющихся параллельно с другими задачами.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Task">
      <summary>Представляет асинхронную операцию.Исходный код .NET Framework для этого типа см. в указанном источнике.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task" /> с заданным действием.</summary>
      <param name="action">Делегат, который представляет код, выполняемый в рамках задачи.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task" /> с заданным действием и токеном <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="action">Делегат, который представляет код, выполняемый в рамках задачи.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет контролироваться новой задачей.</param>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task" /> с заданными действием и параметрами создания.</summary>
      <param name="action">Делегат, который представляет код, выполняемый в рамках задачи.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет контролироваться новой задачей.</param>
      <param name="creationOptions">Объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" />, который используется для настройки поведения задачи.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task" /> с заданными действием и параметрами создания.</summary>
      <param name="action">Делегат, который представляет код, выполняемый в рамках задачи.</param>
      <param name="creationOptions">Объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" />, который используется для настройки поведения задачи. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task" /> с заданным действием и состоянием.</summary>
      <param name="action">Делегат, который представляет код, выполняемый в рамках задачи.</param>
      <param name="state">Объект, который представляет данные, используемые действием.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task" /> с заданными действием, состоянием и параметрами.</summary>
      <param name="action">Делегат, который представляет код, выполняемый в рамках задачи.</param>
      <param name="state">Объект, который представляет данные, используемые действием.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет контролироваться новой задачей.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task" /> с заданными действием, состоянием и параметрами.</summary>
      <param name="action">Делегат, который представляет код, выполняемый в рамках задачи.</param>
      <param name="state">Объект, который представляет данные, используемые действием.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет контролироваться новой задачей.</param>
      <param name="creationOptions">Объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" />, который используется для настройки поведения задачи.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task" /> с заданными действием, состоянием и параметрами.</summary>
      <param name="action">Делегат, который представляет код, выполняемый в рамках задачи.</param>
      <param name="state">Объект, который представляет данные, используемые действием.</param>
      <param name="creationOptions">Объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" />, который используется для настройки поведения задачи.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.AsyncState">
      <summary>Возвращает объект состояния, предоставленный при создании задачи <see cref="T:System.Threading.Tasks.Task" />, или значение null, если объект не предоставлен.</summary>
      <returns>Объект <see cref="T:System.Object" />, представляющий данные о состоянии, переданные задаче на этапе создания.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CompletedTask">
      <summary>Возвращает задачу, которая уже завершилась успешно. </summary>
      <returns>Успешно завершенная задача. </returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)">
      <summary>Настраивает объект типа awaiter, используемый для данного объекта <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Объект, используемый для ожидания данной задачи.</returns>
      <param name="continueOnCapturedContext">Значение true, чтобы попытаться выполнить маршалинг продолжения обратно в исходный захваченный контекст; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения выполнения целевой задачи <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Создает продолжение, которое получает токен отмены и выполняется асинхронно после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, выполняемое после завершения целевой задачи в соответствии с заданными параметрами <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.Продолжение получает токен отмены и использует указанный планировщик.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие для запуска в соответствии с заданными параметрами <paramref name="continuationOptions" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение, выполняемое после завершения целевой задачи в соответствии с заданными параметрами <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие для запуска в соответствии с заданными параметрами <paramref name="continuationOptions" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения выполнения целевой задачи <see cref="T:System.Threading.Tasks.Task" />.Продолжение использует указанный планировщик.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null. -or-The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
      <summary>Создает продолжение, которое получает предоставленные вызывающей стороной сведения о состоянии и выполняется после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" />. </summary>
      <returns>Новая задача продолжения. </returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения задачи.При запуске делегату передается в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые действием продолжения. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Создает продолжение, которое получает предоставленные вызывающей стороной сведения о состоянии и токен отмены и которое выполняется асинхронно после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые действием продолжения.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое получает предоставленные вызывающей стороной сведения о состоянии и токен отмены и которое выполняется после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" />.Продолжение выполняется на основе набора указанных условий и использует указанный планировщик.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые действием продолжения.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение, которое получает предоставленные вызывающей стороной сведения о состоянии и выполняется после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" />.Продолжение выполняется на основе набора указанных условий.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые действием продолжения.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое получает предоставленные вызывающей стороной сведения о состоянии и выполняется асинхронно после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" />.Продолжение использует указанный планировщик.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые действием продолжения.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task`1" /> и возвращает значение. </summary>
      <returns>Новая задача продолжения. </returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <typeparam name="TResult"> Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" /> и возвращает значение.Продолжение получает токен отмены.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <typeparam name="TResult"> Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, выполняемое в соответствии с заданными параметрами и возвращает значение.Продолжение получает токен отмены и использует указанный планировщик.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция для запуска в соответствии с заданным условием <paramref name="continuationOptions." />. При запуске делегату будет передана завершенная задача в качестве аргумента.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <typeparam name="TResult"> Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение, выполняемое в соответствии с заданными параметрами и возвращает значение. </summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция для запуска в соответствии с условием, заданным в <paramref name="continuationOptions" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <typeparam name="TResult"> Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" /> и возвращает значение.Продолжение использует указанный планировщик.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <typeparam name="TResult"> Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
      <summary>Создает продолжение, которое получает предоставленные вызывающей стороной сведения о состоянии и выполняется асинхронно после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" />, а также возвращает значение. </summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые функцией продолжения.</param>
      <typeparam name="TResult">Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" /> и возвращает значение.Продолжение получает предоставленные вызывающей стороной сведения и токен отмены.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые функцией продолжения.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <typeparam name="TResult">Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое выполняется на основе указанных параметров продолжения токена после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" /> и возвращает значение.Продолжение получает предоставленные вызывающей стороной сведения и токен отмены, а также использует указанный планировщик.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые функцией продолжения.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <typeparam name="TResult">Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение, которое выполняется на основе указанных параметров продолжения токена после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task" />.Продолжение получает предоставленные вызывающей стороной сведения.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые функцией продолжения.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <typeparam name="TResult">Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения выполнения целевой задачи <see cref="T:System.Threading.Tasks.Task" />.Продолжение получает предоставленные вызывающей стороной сведения и использует указанный планировщик.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые функцией продолжения.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <typeparam name="TResult">Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.CreationOptions">
      <summary>Возвращает объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" />, используемый для создания данной задачи.</summary>
      <returns>Объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" />, используемый для создания данной задачи.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CurrentId">
      <summary>Возвращает уникальный идентификатор выполняющейся в настоящее время задачи <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Целое число, присвоенное системой выполняемой в настоящее время задаче.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32)">
      <summary>Создает задачу, которая будет выполнена после некоторой временной задержки. </summary>
      <returns>Задача, представляющая временную задержку. </returns>
      <param name="millisecondsDelay">Число миллисекунд, в течение которого ожидается завершение возвращаемой задачи, или -1 для неограниченного времени ожидания. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsDelay" /> argument is less than -1.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
      <summary>Создает отменяемую задачу, которая будет выполнена после некоторой временной задержки. </summary>
      <returns>Задача, представляющая временную задержку. </returns>
      <param name="millisecondsDelay">Число миллисекунд, в течение которого ожидается завершение возвращаемой задачи, или -1 для неограниченного времени ожидания. </param>
      <param name="cancellationToken">Токен отмены, проверяемый до завершения возвращаемой задачи. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsDelay" /> argument is less than -1. </exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled. </exception>
      <exception cref="T:System.ObjectDisposedException">The provided <paramref name="cancellationToken" /> has already been disposed. </exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
      <summary>Создает задачу, которая завершается через заданное время. </summary>
      <returns>Задача, представляющая временную задержку. </returns>
      <param name="delay">Интервал времени, в течение которого ожидается завершение возвращаемой задачи, или TimeSpan.FromMilliseconds(-1) для неограниченного времени ожидания. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" /> represents a negative time interval other than TimeSpan.FromMillseconds(-1). -or-The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Создает отменяемую задачу, которая завершается через заданное время. </summary>
      <returns>Задача, представляющая временную задержку. </returns>
      <param name="delay">Интервал времени, в течение которого ожидается завершение возвращаемой задачи, или TimeSpan.FromMilliseconds(-1) для неограниченного времени ожидания. </param>
      <param name="cancellationToken">Токен отмены, проверяемый до завершения возвращаемой задачи. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" /> represents a negative time interval other than TimeSpan.FromMillseconds(-1). -or-The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <paramref name="cancellationToken" /> has already been disposed. </exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Exception">
      <summary>Возвращает объект <see cref="T:System.AggregateException" />, который привел к преждевременному завершению задачи <see cref="T:System.Threading.Tasks.Task" />.Если задача <see cref="T:System.Threading.Tasks.Task" /> завершилась успешно или еще не создала ни одного исключения, возвращает значение null.</summary>
      <returns>Объект <see cref="T:System.AggregateException" />, который привел к преждевременному завершению задачи <see cref="T:System.Threading.Tasks.Task" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Factory">
      <summary>Предоставляет доступ к методам фабрики для создания и настройки экземпляров <see cref="T:System.Threading.Tasks.Task" /> и <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Объект фабрики, который может создавать разнообразные объекты <see cref="T:System.Threading.Tasks.Task" /> и <see cref="T:System.Threading.Tasks.Task`1" />. </returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
      <summary>Создает задачу <see cref="T:System.Threading.Tasks.Task" />, которая завершилась из-за отмены с помощью указанного маркера отмены.</summary>
      <returns>Отменяемая задача. </returns>
      <param name="cancellationToken">Маркер отмены, с которым завершается задача. </param>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
      <summary>Создает задачу <see cref="T:System.Threading.Tasks.Task`1" />, которая завершилась из-за отмены с помощью указанного маркера отмены.</summary>
      <returns>Отменяемая задача. </returns>
      <param name="cancellationToken">Маркер отмены, с которым завершается задача. </param>
      <typeparam name="TResult">Тип результата, возвращенного задачей. </typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
      <summary>Создает задачу <see cref="T:System.Threading.Tasks.Task`1" />, которая завершилась с указанным исключением. </summary>
      <returns>Задача, завершившаяся сбоем. </returns>
      <param name="exception">Исключение, с которым завершается задача. </param>
      <typeparam name="TResult">Тип результата, возвращенного задачей. </typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromException(System.Exception)">
      <summary>Создает задачу <see cref="T:System.Threading.Tasks.Task" />, которая завершилась с указанным исключением. </summary>
      <returns>Задача, завершившаяся сбоем. </returns>
      <param name="exception">Исключение, с которым завершается задача. </param>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromResult``1(``0)">
      <summary>Создает задачу <see cref="T:System.Threading.Tasks.Task`1" />, которая завершается удачно с указанным результатом.</summary>
      <returns>Успешно завершенная задача.</returns>
      <param name="result">Результат, сохраняемый в завершенную задачу. </param>
      <typeparam name="TResult">Тип результата, возвращенного задачей. </typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task.GetAwaiter">
      <summary>Возвращает объект типа awaiter, используемый для данного объекта <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Экземпляр объекта типа awaiter.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Id">
      <summary>Возвращает уникальный идентификатор данного экземпляра <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Целое число, присвоенное системой данному экземпляру задачи. </returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCanceled">
      <summary>Возвращает значение, указывающее, завершилось ли выполнение данного экземпляра <see cref="T:System.Threading.Tasks.Task" /> из-за отмены.</summary>
      <returns>Значение true, если задача была завершена из-за отмены; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCompleted">
      <summary>Возвращает значение, которое показывает, завершилась ли задача <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Значение true, если задача была завершена; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsFaulted">
      <summary>Возвращает значение, указывающее, завершилась ли задача <see cref="T:System.Threading.Tasks.Task" /> из-за необработанного исключения.</summary>
      <returns>Значение true, если задача создала необрабатываемое исключение; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action)">
      <summary>Ставит в очередь заданную работу для запуска в ThreadPool и возвращает дескриптор задачи для этой работы.</summary>
      <returns>Задача, которая представляет работу в очереди на выполнение в ThreadPool.</returns>
      <param name="action">Работа для асинхронного выполнения</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter was null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
      <summary>Ставит в очередь заданную работу для запуска в ThreadPool и возвращает дескриптор задачи для этой работы.</summary>
      <returns>Задача, которая представляет работу в очереди на выполнение в ThreadPool.</returns>
      <param name="action">Работа для асинхронного выполнения</param>
      <param name="cancellationToken">Токен отмены, который должен использоваться для отмены работы</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter was null.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>Ставит в очередь заданную работу для запуска в ThreadPool и возвращает прокси для задачи Task(TResult), возвращаемой <paramref name="function" />.</summary>
      <returns>Объект Task(TResult), представляющий прокси для объекта Task(TResult), возвращаемого <paramref name="function" />.</returns>
      <param name="function">Работа для асинхронного выполнения</param>
      <typeparam name="TResult">Тип результата, возвращенного задачей прокси-сервера.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter was null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Ставит в очередь заданную работу для запуска в ThreadPool и возвращает прокси для задачи Task(TResult), возвращаемой <paramref name="function" />.</summary>
      <returns>Объект Task(TResult), представляющий прокси для объекта Task(TResult), возвращаемого <paramref name="function" />.</returns>
      <param name="function">Работа для асинхронного выполнения</param>
      <param name="cancellationToken">Токен отмены, который должен использоваться для отмены работы</param>
      <typeparam name="TResult">Тип результата, возвращенного задачей прокси-сервера.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter was null.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
      <summary>Ставит в очередь заданную работу для запуска в ThreadPool и возвращает прокси для задачи, возвращаемой функцией <paramref name="function" />.</summary>
      <returns>Задача, которая представляет прокси для задачи, возвращаемой <paramref name="function" />.</returns>
      <param name="function">Работа для асинхронного выполнения</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter was null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Ставит в очередь заданную работу для запуска в ThreadPool и возвращает прокси для задачи, возвращаемой функцией <paramref name="function" />.</summary>
      <returns>Задача, которая представляет прокси для задачи, возвращаемой <paramref name="function" />.</returns>
      <param name="function">Работа для асинхронного выполнения. </param>
      <param name="cancellationToken">Токен отмены, который должен использоваться для отмены работы. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter was null.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
      <summary>Ставит в очередь заданную работу для запуска в пуле потоков и возвращает объект <see cref="T:System.Threading.Tasks.Task`1" />, представляющий эту работу. </summary>
      <returns>Объект задачи, представляющий работу в очереди на выполнение в пуле потоков. </returns>
      <param name="function">Работа для асинхронного выполнения. </param>
      <typeparam name="TResult">Возвращаемый тип задачи. </typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter is null. </exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>Ставит в очередь заданную работу для запуска в пуле потоков и возвращает дескриптор Task(TResult) для этой работы.</summary>
      <returns>Задача Task(TResult), которая представляет работу в очереди на выполнение в ThreadPool.</returns>
      <param name="function">Работа для асинхронного выполнения</param>
      <param name="cancellationToken">Токен отмены, который должен использоваться для отмены работы</param>
      <typeparam name="TResult">Тип результата задачи.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> parameter was null.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously">
      <summary>Синхронно выполняет задачу <see cref="T:System.Threading.Tasks.Task" /> в текущем планировщике <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
      <summary>Синхронно выполняет задачу <see cref="T:System.Threading.Tasks.Task" /> в предоставленном планировщике <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <param name="scheduler">Планировщик, в котором следует попытаться выполнить задачу.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start">
      <summary>Запускает задачу <see cref="T:System.Threading.Tasks.Task" />, планируя ее выполнение в текущем планировщике <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
      <summary>Запускает задачу <see cref="T:System.Threading.Tasks.Task" />, планируя ее выполнение в заданном планировщике <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, с которым нужно связать и в котором нужно выполнить данную задачу.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Status">
      <summary>Возвращает состояние <see cref="T:System.Threading.Tasks.TaskStatus" /> данной задачи.</summary>
      <returns>Текущее состояние <see cref="T:System.Threading.Tasks.TaskStatus" /> данного экземпляра задачи.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
      <summary>Возвращает дескриптор <see cref="T:System.Threading.WaitHandle" />, который можно использовать для ожидания завершения задачи.</summary>
      <returns>Дескриптор <see cref="T:System.Threading.WaitHandle" />, который можно использовать для ожидания завершения задачи.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
      <summary>Возвращает значение, указывающее, синхронно ли выполнена операция.</summary>
      <returns>Значение true, если операция завершилась синхронно, в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait">
      <summary>Ожидает завершения выполнения задачи <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.AggregateException">The task was canceled.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.-or-An exception was thrown during the execution of the task.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32)">
      <summary>Ожидает завершения задачи <see cref="T:System.Threading.Tasks.Task" /> в течение указанного числа миллисекунд.</summary>
      <returns>Значение true, если <see cref="T:System.Threading.Tasks.Task" /> завершил выполнение в течение отведенного времени; в противном случае — значение false.</returns>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или <see cref="F:System.Threading.Timeout.Infinite" /> (-1) для неограниченного времени ожидания.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.AggregateException">The task was canceled.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.-or-An exception was thrown during the execution of the task.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>Ожидает завершения выполнения задачи <see cref="T:System.Threading.Tasks.Task" />.Ожидание завершается, если время ожидания истекает или токен отмены отменяется до завершения задачи.</summary>
      <returns>Значение true, если <see cref="T:System.Threading.Tasks.Task" /> завершил выполнение в течение отведенного времени; в противном случае — значение false.</returns>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или <see cref="F:System.Threading.Timeout.Infinite" /> (-1) для неограниченного времени ожидания. </param>
      <param name="cancellationToken">Токен отмены, который нужно контролировать во время ожидания выполнения задачи. </param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.AggregateException">The task was canceled.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.-or-An exception was thrown during the execution of the task.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
      <summary>Ожидает завершения выполнения задачи <see cref="T:System.Threading.Tasks.Task" />.Ожидание завершается, если токен отмены отменяется до завершения задачи.</summary>
      <param name="cancellationToken">Токен отмены, который нужно контролировать во время ожидания выполнения задачи. </param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
      <exception cref="T:System.ObjectDisposedException">The task has been disposed.</exception>
      <exception cref="T:System.AggregateException">The task was canceled.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.-or-An exception was thrown during the execution of the task.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
      <summary>Ожидает завершения выполнения задач <see cref="T:System.Threading.Tasks.Task" /> в течение указанного временного периода.</summary>
      <returns>Значение true, если <see cref="T:System.Threading.Tasks.Task" /> завершил выполнение в течение отведенного времени; в противном случае — значение false.</returns>
      <param name="timeout">Период <see cref="T:System.TimeSpan" />, представляющий время ожидания в миллисекундах, или период <see cref="T:System.TimeSpan" />, представляющий -1 миллисекунду для неограниченного ожидания.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.AggregateException">The task was canceled.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.-or-An exception was thrown during the execution of the task.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
      <summary>Ожидает завершения выполнения всех указанных объектов <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <param name="tasks">Массив экземпляров <see cref="T:System.Threading.Tasks.Task" />, завершения выполнения которых следует дождаться.</param>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.-or-The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.If a task was canceled, the <see cref="T:System.AggregateException" /> exception contains an <see cref="T:System.OperationCanceledException" /> exception in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.-or-An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances. </exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
      <summary>Ожидает завершения выполнения всех указанных объектов <see cref="T:System.Threading.Tasks.Task" /> в течение указанного числа миллисекунд.</summary>
      <returns>true, если все экземпляры <see cref="T:System.Threading.Tasks.Task" /> завершили выполнение в выделенное время; в противном случае — значение false.</returns>
      <param name="tasks">Массив экземпляров <see cref="T:System.Threading.Tasks.Task" />, завершения выполнения которых следует дождаться.</param>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или функция <see cref="F:System.Threading.Timeout.Infinite" /> (-1) в случае неограниченного времени ожидания.</param>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.-or-An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>Ожидает завершения выполнения всех указанных объектов <see cref="T:System.Threading.Tasks.Task" /> в течение указанного числа миллисекунд или до отмены ожидания.</summary>
      <returns>true, если все экземпляры <see cref="T:System.Threading.Tasks.Task" /> завершили выполнение в выделенное время; в противном случае — значение false.</returns>
      <param name="tasks">Массив экземпляров <see cref="T:System.Threading.Tasks.Task" />, завершения выполнения которых следует дождаться.</param>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или функция <see cref="F:System.Threading.Timeout.Infinite" /> (-1) в случае неограниченного времени ожидания.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который нужно контролировать во время ожидания выполнения задач.</param>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.-or-An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled. </exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>Ожидает завершения выполнения всех указанных объектов <see cref="T:System.Threading.Tasks.Task" />, пока ожидание не будет отменено. </summary>
      <param name="tasks">Массив экземпляров <see cref="T:System.Threading.Tasks.Task" />, завершения выполнения которых следует дождаться.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который нужно контролировать во время ожидания выполнения задач.</param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.-or-An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>Ожидает завершения выполнения всех указанных отменяемых объектов <see cref="T:System.Threading.Tasks.Task" /> в течение указанного временного интервала.</summary>
      <returns>true, если все экземпляры <see cref="T:System.Threading.Tasks.Task" /> завершили выполнение в выделенное время; в противном случае — значение false.</returns>
      <param name="tasks">Массив экземпляров <see cref="T:System.Threading.Tasks.Task" />, завершения выполнения которых следует дождаться.</param>
      <param name="timeout">Период <see cref="T:System.TimeSpan" />, представляющий время ожидания в миллисекундах, или период <see cref="T:System.TimeSpan" />, представляющий -1 миллисекунду для неограниченного ожидания.</param>
      <exception cref="T:System.ObjectDisposedException">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null. </exception>
      <exception cref="T:System.AggregateException">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.-or-An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
      <summary>Ожидает завершения выполнения любого из указанных объектов <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Индекс завершенной задачи в аргументе-массиве <paramref name="tasks" />.</returns>
      <param name="tasks">Массив экземпляров <see cref="T:System.Threading.Tasks.Task" />, завершения выполнения которых следует дождаться.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
      <summary>Ожидает завершения выполнения любого из указанных объектов <see cref="T:System.Threading.Tasks.Task" /> в течение указанного числа миллисекунд.</summary>
      <returns>Индекс завершенной задачи в аргументе-массиве <paramref name="tasks" /> или -1, если истекло время ожидания.</returns>
      <param name="tasks">Массив экземпляров <see cref="T:System.Threading.Tasks.Task" />, завершения выполнения которых следует дождаться.</param>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или функция <see cref="F:System.Threading.Timeout.Infinite" /> (-1) в случае неограниченного времени ожидания.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>Ожидает завершения выполнения всех указанных объектов <see cref="T:System.Threading.Tasks.Task" /> в течение указанного числа миллисекунд или до отмены токена отмены.</summary>
      <returns>Индекс завершенной задачи в аргументе-массиве <paramref name="tasks" /> или -1, если истекло время ожидания.</returns>
      <param name="tasks">Массив экземпляров <see cref="T:System.Threading.Tasks.Task" />, завершения выполнения которых следует дождаться. </param>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или функция <see cref="F:System.Threading.Timeout.Infinite" /> (-1) в случае неограниченного времени ожидания. </param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который нужно контролировать во время ожидания выполнения задачи. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled. </exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>Ожидает завершения выполнения всех указанных объектов <see cref="T:System.Threading.Tasks.Task" />, пока ожидание не будет отменено.</summary>
      <returns>Индекс завершенной задачи в аргументе-массиве <paramref name="tasks" />.</returns>
      <param name="tasks">Массив экземпляров <see cref="T:System.Threading.Tasks.Task" />, завершения выполнения которых следует дождаться. </param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который нужно контролировать во время ожидания выполнения задачи. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was canceled.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>Ожидает завершения выполнения любого из указанных отменяемых объектов <see cref="T:System.Threading.Tasks.Task" /> в течение указанного временного интервала.</summary>
      <returns>Индекс завершенной задачи в аргументе-массиве <paramref name="tasks" /> или -1, если истекло время ожидания.</returns>
      <param name="tasks">Массив экземпляров <see cref="T:System.Threading.Tasks.Task" />, завершения выполнения которых следует дождаться.</param>
      <param name="timeout">Период <see cref="T:System.TimeSpan" />, представляющий время ожидания в миллисекундах, или период <see cref="T:System.TimeSpan" />, представляющий -1 миллисекунду для неограниченного ожидания.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> argument contains a null element.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>Создает задачу, которая будет выполнена, когда все <see cref="T:System.Threading.Tasks.Task`1" /> объекты в перечислимой коллекции будут завершены. </summary>
      <returns>Задача, представляющая завершение всех предоставленных задач. </returns>
      <param name="tasks">Задачи, завершение которых требуется подождать. </param>
      <typeparam name="TResult">Тип завершенной задачи. </typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> collection contained a null task. </exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>Создает задачу, которая будет выполнена, когда все <see cref="T:System.Threading.Tasks.Task" /> объекты в перечислимой коллекции будут завершены.</summary>
      <returns>Задача, представляющая завершение всех предоставленных задач. </returns>
      <param name="tasks">Задачи, завершение которых требуется подождать.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> collection contained a null task.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
      <summary>Создает задачу, которая будет выполнена, когда все <see cref="T:System.Threading.Tasks.Task" /> объекты в массиве будут завершены. </summary>
      <returns>Задача, представляющая завершение всех предоставленных задач.</returns>
      <param name="tasks">Задачи, завершение которых требуется подождать.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a null task. </exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
      <summary>Создает задачу, которая будет выполнена, когда все <see cref="T:System.Threading.Tasks.Task`1" /> объекты в массиве будут завершены. </summary>
      <returns>Задача, представляющая завершение всех предоставленных задач.</returns>
      <param name="tasks">Задачи, завершение которых требуется подождать.</param>
      <typeparam name="TResult">Тип завершенной задачи.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a null task.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>Создает задачу, которая будет выполнена после выполнения любой из предоставленных задач.</summary>
      <returns>Задача, представляющая завершение одной из предоставленных задач.Результат возвращенной задачи — задача, которая была завершена.</returns>
      <param name="tasks">Задачи, завершение которых требуется подождать.</param>
      <typeparam name="TResult">Тип завершенной задачи.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>Создает задачу, которая будет выполнена после выполнения любой из предоставленных задач.</summary>
      <returns>Задача, представляющая завершение одной из предоставленных задач.Результат возвращенной задачи — задача, которая была завершена.</returns>
      <param name="tasks">Задачи, завершение которых требуется подождать.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
      <summary>Создает задачу, которая будет выполнена после выполнения любой из предоставленных задач.</summary>
      <returns>Задача, представляющая завершение одной из предоставленных задач.Результат возвращенной задачи — задача, которая была завершена.</returns>
      <param name="tasks">Задачи, завершение которых требуется подождать.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
      <summary>Создает задачу, которая будет выполнена после выполнения любой из предоставленных задач.</summary>
      <returns>Задача, представляющая завершение одной из предоставленных задач.Результат возвращенной задачи — задача, которая была завершена.</returns>
      <param name="tasks">Задачи, завершение которых требуется подождать.</param>
      <typeparam name="TResult">Тип завершенной задачи.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tasks" /> argument was null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tasks" /> array contained a null task, or was empty.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Yield">
      <summary>Создает поддерживающий ожидание объект задачи, который асинхронным образом выдает возврат текущему контексту, когда его ожидают.</summary>
      <returns>Контекст, который при ожидании будет асинхронно переходить назад в текущий контекст во время ожидания.Если текущий <see cref="T:System.Threading.SynchronizationContext" /> отличен от null, он также обрабатывается как текущий контекст.В противном случае планировщик задач, связанный с задачей, выполняющейся в данный момент, рассматривается как текущий контекст.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Task`1">
      <summary>Представляет асинхронную операцию, которая может вернуть значение.</summary>
      <typeparam name="TResult">Тип результата, созданного данной задачей <see cref="T:System.Threading.Tasks.Task`1" />. </typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task`1" /> с указанной функцией.</summary>
      <param name="function">Делегат, который представляет код, выполняемый в рамках задачи.После завершения выполнения функции будет установлено свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> результата задачи для возврата результата выполнения функции.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task`1" /> с указанной функцией.</summary>
      <param name="function">Делегат, который представляет код, выполняемый в рамках задачи.После завершения выполнения функции будет установлено свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> результата задачи для возврата результата выполнения функции.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" /> для назначения данной задаче.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created<paramref name=" cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task`1" /> с указанной функцией и параметрами создания.</summary>
      <param name="function">Делегат, который представляет код, выполняемый в рамках задачи.После завершения выполнения функции будет установлено свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> результата задачи для возврата результата выполнения функции.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче.</param>
      <param name="creationOptions">Объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" />, который используется для настройки поведения задачи.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created<paramref name=" cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task`1" /> с указанной функцией и параметрами создания.</summary>
      <param name="function">Делегат, который представляет код, выполняемый в рамках задачи.После завершения выполнения функции будет установлено свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> результата задачи для возврата результата выполнения функции.</param>
      <param name="creationOptions">Объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" />, который используется для настройки поведения задачи.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task`1" /> с указанными функцией и состоянием.</summary>
      <param name="function">Делегат, который представляет код, выполняемый в рамках задачи.После завершения выполнения функции будет установлено свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> результата задачи для возврата результата выполнения функции.</param>
      <param name="state">Объект, который представляет данные, используемые действием.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task`1" /> с заданными действием, состоянием и параметрами.</summary>
      <param name="function">Делегат, который представляет код, выполняемый в рамках задачи.После завершения выполнения функции будет установлено свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> результата задачи для возврата результата выполнения функции.</param>
      <param name="state">Объект, который представляет данные, используемые функцией.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" /> для назначения новой задаче.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created<paramref name=" cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task`1" /> с заданными действием, состоянием и параметрами.</summary>
      <param name="function">Делегат, который представляет код, выполняемый в рамках задачи.После завершения выполнения функции будет установлено свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> результата задачи для возврата результата выполнения функции.</param>
      <param name="state">Объект, который представляет данные, используемые функцией.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" /> для назначения новой задаче.</param>
      <param name="creationOptions">Объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" />, который используется для настройки поведения задачи.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> that created<paramref name=" cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Инициализирует новую задачу <see cref="T:System.Threading.Tasks.Task`1" /> с заданными действием, состоянием и параметрами.</summary>
      <param name="function">Делегат, который представляет код, выполняемый в рамках задачи.После завершения выполнения функции будет установлено свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> результата задачи для возврата результата выполнения функции.</param>
      <param name="state">Объект, который представляет данные, используемые функцией.</param>
      <param name="creationOptions">Объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" />, который используется для настройки поведения задачи.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="function" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)">
      <summary>Настраивает объект типа awaiter, используемый для данного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Объект, используемый для ожидания данной задачи.</returns>
      <param name="continueOnCapturedContext">Значение true, чтобы попытаться выполнить маршалинг продолжения обратно в исходный захваченный контекст; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения выполнения целевой задачи. </summary>
      <returns>Новая задача продолжения. </returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения предыдущей задачи <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null. </exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
      <summary>Создает отменяемое продолжение, которое выполняется асинхронно после завершения выполнения целевой задачи <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новая задача продолжения. </returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="cancellationToken">Токен отмены, передаваемый новой задаче продолжения. </param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null. </exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, выполняемое в соответствии с условием, заданным в <paramref name="continuationOptions" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие для запуска в соответствии с заданным условием в <paramref name="continuationOptions" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение, выполняемое в соответствии с условием, заданным в <paramref name="continuationOptions" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие в соответствии с условием, заданным в <paramref name="continuationOptions" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения выполнения целевой задачи <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
      <summary>Создает продолжение, которое получает сведения о состоянии и выполняется после завершения целевой задачи <see cref="T:System.Threading.Tasks.Task`1" />. </summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегату передается в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые действием продолжения. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Создает продолжение, которое выполняется после завершения выполнения целевого объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые действием продолжения.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое выполняется после завершения выполнения целевого объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые действием продолжения.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение, которое выполняется после завершения выполнения целевого объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые действием продолжения.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое выполняется после завершения выполнения целевого объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="continuationAction">Действие, которое необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые действием продолжения.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction" /> argument is null. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is null. </exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения выполнения целевой задачи <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <typeparam name="TNewResult"> Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения выполнения целевой задачи <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче.</param>
      <typeparam name="TNewResult"> Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created<paramref name=" cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, выполняемое в соответствии с условием, заданным в <paramref name="continuationOptions" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция для запуска в соответствии с условием, заданным в <paramref name="continuationOptions" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <typeparam name="TNewResult"> Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.-or-The <see cref="T:System.Threading.CancellationTokenSource" /> that created<paramref name=" cancellationToken" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение, выполняемое в соответствии с условием, заданным в <paramref name="continuationOptions" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция для запуска в соответствии с условием, заданным в <paramref name="continuationOptions" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <typeparam name="TNewResult"> Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое выполняется асинхронно после завершения выполнения целевой задачи <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегата завершенная задача будет передана ему в качестве аргумента.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <typeparam name="TNewResult"> Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.-or-The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
      <summary>Создает продолжение, которое выполняется после завершения выполнения целевого объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые функцией продолжения.</param>
      <typeparam name="TNewResult">Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>Создает продолжение, которое выполняется после завершения выполнения целевого объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые функцией продолжения.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче.</param>
      <typeparam name="TNewResult">Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое выполняется после завершения выполнения целевого объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые функцией продолжения.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <typeparam name="TNewResult">Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The  <paramref name="continuationOptions" />  argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение, которое выполняется после завершения выполнения целевого объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые функцией продолжения.</param>
      <param name="continuationOptions">Параметры, определяющие запланированное время продолжения и его поведение.Включаются критерии, такие как <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, а также параметры выполнения, например <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</param>
      <typeparam name="TNewResult">Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение, которое выполняется после завершения выполнения целевого объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="continuationFunction">Функция, которую необходимо выполнить после завершения <see cref="T:System.Threading.Tasks.Task`1" />.При запуске делегату будут переданы в качестве аргументов завершенная задача и предоставленный вызывающей стороной объект состояния.</param>
      <param name="state">Объект, который представляет данные, используемые функцией продолжения.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который следует связать с задачей продолжения и использовать для ее запуска.</param>
      <typeparam name="TNewResult">Тип результата, созданного продолжением.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction" /> argument is null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="scheduler" /> argument is null.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Factory">
      <summary>Предоставляет доступ к методам фабрики для создания и настройки экземпляров <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Объект фабрики, который может создавать разнообразные объекты <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.GetAwaiter">
      <summary>Получает объект типа awaiter, используемый для данного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Экземпляр объекта типа awaiter.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Result">
      <summary>Получает итоговое значение данного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Полученное значение данной задачи <see cref="T:System.Threading.Tasks.Task`1" /> с тем же типом, что и параметр типа данной задачи.</returns>
      <exception cref="T:System.AggregateException">The task was canceled.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.-or-An exception was thrown during the execution of the task.The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>Представляет исключение, используемое для передачи отмены задачи.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskCanceledException" /> системным сообщением, содержащим описание ошибки.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskCanceledException" /> указанным сообщением, содержащим описание ошибки.</summary>
      <param name="message">Сообщение с описанием исключения.Вызывающий оператор этого конструктора необходим, чтобы убедиться, локализована ли данная строка для текущего языка и региональных параметров системы.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskCanceledException" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее это исключение.</summary>
      <param name="message">Сообщение с описанием исключения.Вызывающий оператор этого конструктора необходим, чтобы убедиться, локализована ли данная строка для текущего языка и региональных параметров системы.</param>
      <param name="innerException">Исключение, которое вызвало текущее исключение.Если значение параметра <paramref name="innerException" /> не равно null, текущее исключение сгенерировано в блоке catch, обрабатывающем внутреннее исключение.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskCanceledException" /> со ссылкой на отмененную задачу <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <param name="task">Отмененная задача.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>Получает задачу, связанную с данным исключением.</summary>
      <returns>Ссылка на задачу <see cref="T:System.Threading.Tasks.Task" />, связанную с этим исключением.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>Представляет сторону производителя задач <see cref="T:System.Threading.Tasks.Task`1" />, не привязанных к делегату и предоставляющих доступ к потребительской стороне через свойство <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />.</summary>
      <typeparam name="TResult">Тип значений результата, связанного с данным объектом <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />, используя заданное состояние.</summary>
      <param name="state">Состояние, используемое в качестве состояния AsyncState базового объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />, используя заданное состояние и параметры.</summary>
      <param name="state">Состояние, используемое в качестве состояния AsyncState базового объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="creationOptions">Параметры, используемые при создании базовых задач <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> представляет параметры, недопустимые для использования с <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />, используя заданные параметры.</summary>
      <param name="creationOptions">Параметры, используемые при создании базовых задач <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> представляет параметры, недопустимые для использования с <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>Переводит подлежащий объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</summary>
      <exception cref="T:System.InvalidOperationException">Базовая <see cref="T:System.Threading.Tasks.Task`1" /> уже находится в одном из трех конечных состояний: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,  <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> или <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />, если базовая <see cref="T:System.Threading.Tasks.Task`1" /> уже была удалена.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Переводит подлежащий объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exceptions">Коллекция исключений для привязки к данному объекту <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> была удалена.</exception>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="exceptions" /> является null.</exception>
      <exception cref="T:System.ArgumentException">Имеется один или несколько элементов null в <paramref name="exceptions" />.</exception>
      <exception cref="T:System.InvalidOperationException">Базовая <see cref="T:System.Threading.Tasks.Task`1" /> уже находится в одном из трех конечных состояний: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,  <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> или <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>Переводит подлежащий объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">Выражение для привязки к данному <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> была удалена.</exception>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="exception" /> является null.</exception>
      <exception cref="T:System.InvalidOperationException">Базовая <see cref="T:System.Threading.Tasks.Task`1" /> уже находится в одном из трех конечных состояний: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,  <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> или <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>Переводит подлежащий объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</summary>
      <param name="result">Итоговое значение для привязки к данному <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> была удалена.</exception>
      <exception cref="T:System.InvalidOperationException">Базовая <see cref="T:System.Threading.Tasks.Task`1" /> уже находится в одном из трех конечных состояний: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,  <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> или <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>Получает объект <see cref="T:System.Threading.Tasks.Task`1" />, созданный данным объектом <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
      <returns>Возвращает объект <see cref="T:System.Threading.Tasks.Task`1" />, созданный данным <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>Пытается перевести подлежащий объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</summary>
      <returns>Значение true, если операция завершилась успешно; значение false, если не удалось завершить операцию или объект уже был удален.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
      <summary>Выполняет переход базового <see cref="T:System.Threading.Tasks.Task`1" /> в <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> состояние и включает токен отмены должен храниться в отмененной задачи. </summary>
      <returns>Значение true, если операция выполнена успешно; в противном случае — значение false. </returns>
      <param name="cancellationToken">Токен отмены. </param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Пытается перевести подлежащий объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <returns>Значение true, если операция выполнена успешно; в противном случае — значение false.</returns>
      <param name="exceptions">Коллекция исключений для привязки к данному объекту <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> была удалена.</exception>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="exceptions" /> является null.</exception>
      <exception cref="T:System.ArgumentException">Имеется один или несколько элементов null в <paramref name="exceptions" />.-или-Коллекция <paramref name="exceptions" /> является пустой.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>Пытается перевести подлежащий объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <returns>Значение true, если операция выполнена успешно; в противном случае — значение false.</returns>
      <param name="exception">Выражение для привязки к данному <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> была удалена.</exception>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="exception" /> является null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>Пытается перевести подлежащий объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</summary>
      <returns>Значение true, если операция выполнена успешно; в противном случае — значение false. </returns>
      <param name="result">Итоговое значение для привязки к данному <see cref="T:System.Threading.Tasks.Task`1" />.</param>
    </member>
    <member name="T:System.Threading.Tasks.TaskContinuationOptions">
      <summary>Задает поведение для задачи, созданной с помощью метода <see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /> или <see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" />.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
      <summary>Указывает, что если продолжение является дочерней задачей, оно присоединяется к родительской задаче в иерархии задач.Продолжение может быть дочерней задачей, только если ее предшествующая задача тоже была дочерней.По умолчанию дочерняя задача (это внутренняя задача, создаваемая внешней задачей) выполняется независимо от своей родительской задачи.Вы можете воспользоваться параметром <see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" />, чтобы синхронизировать родительские и дочерние задачи.Обратите внимание, что если родительская задача настроена с параметром <see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" />, параметр <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> в дочерней задаче не действует, и эта дочерняя задача будет выполняться как отсоединенная. Дополнительные сведения см. в разделе Присоединенные и отсоединенные дочерние задачи. </summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
      <summary>Указывает, что любая дочерняя задача (т. е. любая вложенная задача, созданная продолжением), которая создается с параметром <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> и для которой производится попытка выполнения в качестве подключенной дочерней задачи, не сможет подключиться к родительской задаче и будет выполняться как отсоединенная дочерняя задача.Для получения дополнительной информации см. Присоединенные и отсоединенные дочерние задачи.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
      <summary>Указывает, что задача продолжения должна выполняться синхронно.Если этот параметр указан, продолжение выполняется в том же потоке, который приводит к переходу предшествующей задачи в конечное состояние.Если при создании продолжения предшествующая задача уже завершена, продолжение будет выполняться в потоке, создавшем его.Если объект <see cref="T:System.Threading.CancellationTokenSource" /> предшествующей задачи в блоке finally (Finally в Visual Basic) удаляется, продолжение с этим параметром будет запущено в указанном блокеfinally.Только очень короткие продолжения должны выполняться синхронно.Так как задача выполняется синхронно, нет необходимости вызывать, например, метод <see cref="M:System.Threading.Tasks.Task.Wait" />, чтобы убедиться, что вызывающий поток ожидает завершения задачи. </summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler">
      <summary>Указывает, что в задачах, созданных продолжением путем вызова таких методов, как <see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /> или <see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" />, в качестве текущего планировщика отображается планировщик по умолчанию (<see cref="P:System.Threading.Tasks.TaskScheduler.Default" />), а не планировщик, на котором запущено продолжение.  </summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation">
      <summary>В случае отмены продолжения предотвращает завершение продолжения до тех пор, пока не будет завершена предшествующая задача.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
      <summary>Указывает, что продолжение будет длительной подробной операцией.Предоставляет сведения для <see cref="T:System.Threading.Tasks.TaskScheduler" />, что следует ожидать избыточной подписки.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.None">
      <summary>Если параметры продолжения не указаны, указывает поведение по умолчанию, которое следует использовать при выполнении продолжения.После завершения предыдущей задачи продолжение выполняется асинхронно независимо от конечного значения свойства <see cref="P:System.Threading.Tasks.Task.Status" /> предшествующей задачи.Если продолжение является дочерней задачей, оно создается как отсоединенная вложенная задача.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
      <summary>Указывает, что задача продолжения не должна планироваться, если предшествующая задача отменена.Предшествующая задача отменяется, если после завершения ее свойство <see cref="P:System.Threading.Tasks.Task.Status" /> имеет значение <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.Данный параметр не является действительным для продолжений нескольких задач.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
      <summary>Указывает, что задача продолжения не должна планироваться, если предшествующая ей задача создала необработанное исключение.Предшествующая задача вызывает необработанное исключение, если после завершения ее свойство <see cref="P:System.Threading.Tasks.Task.Status" /> имеет значение <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.Данный параметр не является действительным для продолжений нескольких задач.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
      <summary>Указывает, что задача продолжения не должна планироваться, если предшествующая ей задача завершилась.Предшествующая задача выполняется полностью, если после завершения ее свойство <see cref="P:System.Threading.Tasks.Task.Status" /> имеет значение <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.Данный параметр не является действительным для продолжений нескольких задач.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
      <summary>Указывает, что продолжение должно планироваться, только если предшествующая задача отменена.Предшествующая задача отменяется, если после завершения ее свойство <see cref="P:System.Threading.Tasks.Task.Status" /> имеет значение <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.Данный параметр не является действительным для продолжений нескольких задач.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
      <summary>Указывает, что задача продолжения должна планироваться, только если предшествующая ей задача создала необработанное исключение.Предшествующая задача вызывает необработанное исключение, если после завершения ее свойство <see cref="P:System.Threading.Tasks.Task.Status" /> имеет значение <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.Параметр <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /> гарантирует, что свойство <see cref="P:System.Threading.Tasks.Task.Exception" /> в предшествующей задаче не равно null.Это свойство можно использовать для перехвата исключения и определения исключения, вызвавшего сбой задачи.Если не обратиться к свойству <see cref="P:System.Threading.Tasks.Task.Exception" />, исключение обрабатываться не будет.Кроме того, при попытке доступа к свойству <see cref="P:System.Threading.Tasks.Task`1.Result" /> задачи, которая была отменена или завершилась ошибкой, будет вызвано новое исключение.Данный параметр не является действительным для продолжений нескольких задач. </summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
      <summary>Указывает, что продолжение должно планироваться, только если предшествующая задача завершилась.Предшествующая задача выполняется полностью, если после завершения ее свойство <see cref="P:System.Threading.Tasks.Task.Status" /> имеет значение <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.Данный параметр не является действительным для продолжений нескольких задач.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
      <summary>Указание для планирования задач <see cref="T:System.Threading.Tasks.TaskScheduler" /> в том порядке, в котором они были запланированы, т. е. задачи, запланированные ранее, будут выполняться ранее, а более поздние —позже. </summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
      <summary>Указывает, что задача продолжения должна выполняться асинхронно.Этот приоритет имеет приоритет над <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskCreationOptions">
      <summary>Задает флаги, которые управляют необязательным поведением создания и выполнения задач. </summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent">
      <summary>Указывает, что задача присоединена к родительской задаче в иерархии задач.По умолчанию дочерняя задача (это внутренняя задача, создаваемая внешней задачей) выполняется независимо от своей родительской задачи.Вы можете воспользоваться параметром <see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" />, чтобы синхронизировать родительские и дочерние задачи.Обратите внимание, что если родительская задача настроена с параметром <see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" />, параметр <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> в дочерней задаче не действует, и эта дочерняя задача будет выполняться как отсоединенная. Дополнительные сведения см. в разделе Присоединенные и отсоединенные дочерние задачи. </summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach">
      <summary>Указывает, что любая дочерняя задача, для которой выполняется попытка выполнения в качестве подсоединенной дочерней задачи (т. е. она создается с параметром <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" />), не сможет подключиться к родительской задаче и будет выполняться как отсоединенная дочерняя задача.Дополнительные сведения см. в разделе Присоединенные и отсоединенные дочерние задачи.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.HideScheduler">
      <summary>Не позволяет видеть внешний планировщик как текущий планировщик в созданной задаче.Это означает, что такие операции, как StartNew или ContinueWith, которые выполняются в созданной задаче, в качестве текущего планировщика будут видеть свойство <see cref="P:System.Threading.Tasks.TaskScheduler.Default" />.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.LongRunning">
      <summary>Указывает, что задача будет выполняться долго в качестве общей операции, включающей еще несколько компонентов, по размеру превышающих детализированные системы.Предоставляет сведения для <see cref="T:System.Threading.Tasks.TaskScheduler" />, что следует ожидать избыточной подписки.Превышение лимита подписки позволяет создать больше потоков, чем количество доступных аппаратных потоков.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.None">
      <summary>Указывает, что следует использовать поведение по умолчанию.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.PreferFairness">
      <summary>Рекомендация для <see cref="T:System.Threading.Tasks.TaskScheduler" /> для планирования задач максимально прямым способом, то есть задачи, запланированные ранее, будут выполняться ранее, а более поздние — позднее.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously">
      <summary>Принудительное асинхронное выполнение продолжений, добавляемых в текущую задачу. </summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Предоставляет набор статических методов (Shared в Visual Basic) для работы с определенными типами экземпляров <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Создает прокси-объект <see cref="T:System.Threading.Tasks.Task" />, представляющий асинхронную операцию задачи Task&lt;Task&lt;T&gt;&gt; (C#) или Task (Of Task(Of T)) (Visual Basic).</summary>
      <returns>Задача <see cref="T:System.Threading.Tasks.Task" />, представляющая асинхронную операцию предоставленной задачи Task&lt;Task&lt;T&gt;&gt; (C#) или Task (Of Task(Of T)) (Visual Basic).</returns>
      <param name="task">Task&lt;Task&lt;T&gt;&gt; (C#) или Task (Of Task(Of T)) (Visual Basic) для извлечения из оболочки.</param>
      <typeparam name="TResult">Тип результата задачи.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, если аргумент <paramref name="task" /> равен null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Создает прокси-объект <see cref="T:System.Threading.Tasks.Task" />, представляющий асинхронную операцию задачи <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.</summary>
      <returns>Задача, представляющая асинхронную операцию предоставленной задачи System.Threading.Tasks.Task(Of Task).</returns>
      <param name="task">Task&lt;Task&gt; (C#) или Task (Of Task) (Visual Basic) для извлечения из оболочки.</param>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, если аргумент <paramref name="task" /> равен null.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory">
      <summary>Предоставляет поддержку создания и планирования объектов <see cref="T:System.Threading.Tasks.Task" />. </summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor">
      <summary>Инициализирует экземпляр <see cref="T:System.Threading.Tasks.TaskFactory" /> с конфигурацией по умолчанию.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
      <summary>Инициализирует экземпляр <see cref="T:System.Threading.Tasks.TaskFactory" /> с заданной конфигурацией.</summary>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен для задач, созданных данной фабрикой <see cref="T:System.Threading.Tasks.TaskFactory" />, если при вызове фабричных методов не задан явно другой токен CancellationToken.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Инициализирует экземпляр <see cref="T:System.Threading.Tasks.TaskFactory" /> с заданной конфигурацией.</summary>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> по умолчанию, который будет назначен для задач, созданных данной фабрикой <see cref="T:System.Threading.Tasks.TaskFactory" />, если при вызове фабричных методов не задан явно другой токен CancellationToken.</param>
      <param name="creationOptions">Объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> по умолчанию, который нужно использовать при создании задач с помощью данной фабрики TaskFactory.</param>
      <param name="continuationOptions">Объект <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> по умолчанию, который нужно использовать при создании задач продолжения с помощью данной фабрики TaskFactory.</param>
      <param name="scheduler">Объект <see cref="T:System.Threading.Tasks.TaskScheduler" /> по умолчанию, который нужно использовать при планировании задач, созданных с помощью данной фабрики TaskFactory.Значение NULL означает, что следует использовать TaskScheduler.Current.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="creationOptions" /> указывает недопустимое значение <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.Дополнительные сведения см. в разделе Примечания для <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.-или-Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение.  </exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Инициализирует экземпляр <see cref="T:System.Threading.Tasks.TaskFactory" /> с заданной конфигурацией.</summary>
      <param name="creationOptions">Объект <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> по умолчанию, который нужно использовать при создании задач с помощью данной фабрики TaskFactory.</param>
      <param name="continuationOptions">Объект <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> по умолчанию, который нужно использовать при создании задач продолжения с помощью данной фабрики TaskFactory.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="creationOptions" /> указывает недопустимое значение <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.Дополнительные сведения см. в разделе Примечания для <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.-или-Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение.  </exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Инициализирует экземпляр <see cref="T:System.Threading.Tasks.TaskFactory" /> с заданной конфигурацией.</summary>
      <param name="scheduler">Объект <see cref="T:System.Threading.Tasks.TaskScheduler" />, который нужно использовать при планировании задач, созданных с помощью данной фабрики TaskFactory.Значение NULL означает, что следует использовать текущий TaskScheduler.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CancellationToken">
      <summary>Возвращает токен отмены по умолчанию для этой фабрики задач.</summary>
      <returns>Токен отмены задачи по умолчанию для этой фабрики задач.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.ContinuationOptions">
      <summary>Возвращает параметры продолжения задач по умолчанию для этой фабрики задач.</summary>
      <returns>Параметры продолжения задач по умолчанию для этой фабрики задач.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач. </summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationAction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены для присвоения новой задаче продолжения.</param>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-Класс <see cref="T:System.Threading.CancellationTokenSource" />, создавший <paramref name="cancellationToken" />, уже удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationAction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены для присвоения новой задаче продолжения.</param>
      <param name="continuationOptions">Побитовое сочетание значений перечисления, которые управляют поведением новой задачи продолжения.</param>
      <param name="scheduler">Объект, который используется для планирования новой задачи продолжения.</param>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationAction" /> имеет значение null.-или-Аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Побитовое сочетание значений перечисления, которые управляют поведением новой задачи продолжения.Члены NotOn* и OnlyOn* не поддерживаются.</param>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationAction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение. </exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданной задачей.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены для присвоения новой задаче продолжения.</param>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданной задачей.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-Класс <see cref="T:System.Threading.CancellationTokenSource" />, создавший <paramref name="cancellationToken" />, уже удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены для присвоения новой задаче продолжения.</param>
      <param name="continuationOptions">Побитовое сочетание значений перечисления, которые управляют поведением новой задачи продолжения.Члены NotOn* и OnlyOn* не поддерживаются.</param>
      <param name="scheduler">Объект, который используется для планирования новой задачи продолжения.</param>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданной задачей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.-или-Аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Побитовое сочетание значений перечисления, которые управляют поведением новой задачи продолжения.Члены NotOn* и OnlyOn* не поддерживаются.</param>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданной задачей.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение. </exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationAction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены для присвоения новой задаче продолжения.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-Класс <see cref="T:System.Threading.CancellationTokenSource" />, создавший <paramref name="cancellationToken" />, уже удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationAction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены для присвоения новой задаче продолжения.</param>
      <param name="continuationOptions">Побитовое сочетание значений перечисления, которые управляют поведением новой задачи продолжения.Члены NotOn* и OnlyOn* не поддерживаются.</param>
      <param name="scheduler">Объект, который используется для планирования новой задачи продолжения.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationAction" /> имеет значение null.-или-Аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Побитовое сочетание значений перечисления, которые управляют поведением новой задачи продолжения.Члены NotOn* и OnlyOn* не поддерживаются.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationAction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение. </exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданной задачей.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены для присвоения новой задаче продолжения.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданной задачей.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-<see cref="T:System.Threading.CancellationTokenSource" /> Создания<paramref name=" cancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены для присвоения новой задаче продолжения.</param>
      <param name="continuationOptions">Побитовое сочетание значений перечисления, которые управляют поведением новой задачи продолжения.Члены NotOn* и OnlyOn* не поддерживаются.</param>
      <param name="scheduler">Объект, который используется для планирования новой задачи продолжения.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданной задачей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.-или-Аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение. </exception>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-Класс <see cref="T:System.Threading.CancellationTokenSource" />, создавший <paramref name="cancellationToken" />, уже удален.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает задачу продолжения, которая запускается при завершении набора заданных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Побитовое сочетание значений перечисления, которые управляют поведением новой задачи продолжения.Члены NotOn* и OnlyOn* не поддерживаются.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданной задачей.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> является пустым или содержит значение NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален. </exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null. -или-<paramref name="continuationAction" /> Аргумент null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> Массив содержит null значение. -или-<paramref name="tasks" /> Массив пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален. -или-<paramref name="cancellationToken" /> уже был удален. </exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null. -или-Аргумент <paramref name="continuationAction" /> имеет значение null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> Массив содержит null значение. -или-<paramref name="tasks" /> Массив пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Значение <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, которое управляет поведением созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который используется для планирования созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationAction" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Значение <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, которое управляет поведением созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ObjectDisposedException">Исключение, которое возникает, когда один из элементов в массиве <paramref name="tasks" /> был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationAction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="continuationOptions" /> задает недопустимое значение TaskContinuationOptions.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task`1" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданным объектом <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Исключение, которое возникает, когда один из элементов в массиве <paramref name="tasks" /> был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task`1" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданным объектом <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Исключение, которое возникает, когда один из элементов в массиве <paramref name="tasks" /> был удален.-или-Предоставленный объект <see cref="T:System.Threading.CancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task`1" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Значение <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, которое управляет поведением созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который используется для планирования созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданным объектом <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationFunction" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task`1" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Значение <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, которое управляет поведением созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданным объектом <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Исключение, которое возникает, когда один из элементов в массиве <paramref name="tasks" /> был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="continuationOptions" /> задает недопустимое значение TaskContinuationOptions.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Исключение, которое возникает, когда один из элементов в массиве <paramref name="tasks" /> был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationAction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Исключение, которое возникает, когда один из элементов в массиве <paramref name="tasks" /> был удален.-или-Предоставленный объект <see cref="T:System.Threading.CancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationAction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Значение <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, которое управляет поведением созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который используется для планирования созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationAction" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationAction">Делегат действия для выполнения после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Значение <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, которое управляет поведением созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Исключение, которое возникает, когда один из элементов в массиве <paramref name="tasks" /> был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationAction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="continuationOptions" /> задает недопустимое значение TaskContinuationOptions.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task`1" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданным объектом <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Исключение, которое возникает, когда один из элементов в массиве <paramref name="tasks" /> был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task`1" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданным объектом <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Исключение, которое возникает, когда один из элементов в массиве <paramref name="tasks" /> был удален.-или-Предоставленный объект <see cref="T:System.Threading.CancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task`1" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Значение <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, которое управляет поведением созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который используется для планирования созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданным объектом <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationFunction" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает продолжение задачи <see cref="T:System.Threading.Tasks.Task`1" />, которое будет запущено после завершения выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Значение <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />, которое управляет поведением созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <typeparam name="TResult">Тип результата, возвращенного делегатом <paramref name="continuationFunction" /> и связанного с созданным объектом <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Исключение, которое возникает, когда один из элементов в массиве <paramref name="tasks" /> был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда массив <paramref name="tasks" /> равен null.-или-Исключение, которое возникает, когда аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="continuationOptions" /> задает недопустимое значение TaskContinuationOptions.</exception>
      <exception cref="T:System.ArgumentException">Исключение, которое возникает, когда массив <paramref name="tasks" /> содержит значение null.-или-Исключение, которое возникает, когда массив <paramref name="tasks" /> пуст.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CreationOptions">
      <summary>Возвращает параметры создания задач по умолчанию для этой фабрики задач.</summary>
      <returns>Параметры создания задач по умолчанию для этой фабрики задач.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <typeparam name="TArg1">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TArg1">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <typeparam name="TArg1">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TArg1">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg3">Третий аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип третьего аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg3">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg3">Третий аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип третьего аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg3">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg3">Третий аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип третьего аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg3">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет пару методов begin и end, соответствующую шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg3">Третий аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип третьего аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg3">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="beginMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task" />, который выполняет действие метода End по завершении заданного объекта <see cref="T:System.IAsyncResult" />.</summary>
      <returns>Объект <see cref="T:System.Threading.Tasks.Task" />, который представляет асинхронную операцию.</returns>
      <param name="asyncResult">Интерфейс IAsyncResult, завершение выполнения которого инициирует обработку <paramref name="endMethod" />.</param>
      <param name="endMethod">Делегат действия, который обрабатывает завершенный результат <paramref name="asyncResult" />.</param>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="asyncResult" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task" />, который выполняет действие метода End по завершении заданного объекта <see cref="T:System.IAsyncResult" />.</summary>
      <returns>Объект <see cref="T:System.Threading.Tasks.Task" />, который представляет асинхронную операцию.</returns>
      <param name="asyncResult">Интерфейс IAsyncResult, завершение выполнения которого инициирует обработку <paramref name="endMethod" />.</param>
      <param name="endMethod">Делегат действия, который обрабатывает завершенный результат <paramref name="asyncResult" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="asyncResult" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task" />, который выполняет действие метода End по завершении заданного объекта <see cref="T:System.IAsyncResult" />.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task" />, который представляет асинхронную операцию.</returns>
      <param name="asyncResult">Интерфейс IAsyncResult, завершение выполнения которого инициирует обработку <paramref name="endMethod" />.</param>
      <param name="endMethod">Делегат действия, который обрабатывает завершенный результат <paramref name="asyncResult" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который используется для планирования задачи, выполняющей метод end.</param>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="asyncResult" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task`1" />, который выполняет функцию метода End по завершении заданного объекта <see cref="T:System.IAsyncResult" />.</summary>
      <returns>Объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="asyncResult">Интерфейс IAsyncResult, завершение выполнения которого инициирует обработку <paramref name="endMethod" />.</param>
      <param name="endMethod">Делегат функции, который обрабатывает завершенный результат <paramref name="asyncResult" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="asyncResult" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task`1" />, который выполняет функцию метода End по завершении заданного объекта <see cref="T:System.IAsyncResult" />.</summary>
      <returns>Объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="asyncResult">Интерфейс IAsyncResult, завершение выполнения которого инициирует обработку <paramref name="endMethod" />.</param>
      <param name="endMethod">Делегат функции, который обрабатывает завершенный результат <paramref name="asyncResult" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="asyncResult" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.Task`1" />, который выполняет функцию метода End по завершении заданного объекта <see cref="T:System.IAsyncResult" />.</summary>
      <returns>Объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="asyncResult">Интерфейс IAsyncResult, завершение выполнения которого инициирует обработку <paramref name="endMethod" />.</param>
      <param name="endMethod">Делегат функции, который обрабатывает завершенный результат <paramref name="asyncResult" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который используется для планирования задачи, выполняющей метод end.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="asyncResult" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="endMethod" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.Scheduler">
      <summary>Возвращает планировщик задач по умолчанию для этой фабрики задач.</summary>
      <returns>Планировщик задач по умолчанию для этой фабрики задач.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
      <summary>Создает и запускает задачу.</summary>
      <returns>Запущенная задача.</returns>
      <param name="action">Делегат действия для асинхронного выполнения.</param>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="action" /> является null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">Делегат действия для асинхронного выполнения.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче.</param>
      <exception cref="T:System.ObjectDisposedException">Предоставленный объект <see cref="T:System.Threading.CancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="action" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">Делегат действия для асинхронного выполнения.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который используется для планирования созданной задачи <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ObjectDisposedException">Предоставленный объект <see cref="T:System.Threading.CancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="action" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">Делегат действия для асинхронного выполнения.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="action" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task" />. </summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task" />. </returns>
      <param name="action">Делегат действия для асинхронного выполнения. </param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="action" />. </param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="action" /> имеет значение null. </exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">Делегат действия для асинхронного выполнения.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="action" />.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ObjectDisposedException">Предоставленный объект <see cref="T:System.Threading.CancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="action" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">Делегат действия для асинхронного выполнения.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="action" />.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который используется для планирования созданной задачи <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ObjectDisposedException">Предоставленный объект <see cref="T:System.Threading.CancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="action" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="action">Делегат действия для асинхронного выполнения.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="action" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="action" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />. </typeparam>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="function" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Предоставленный объект <see cref="T:System.Threading.CancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="function" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который используется для планирования созданной задачи <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Предоставленный объект <see cref="T:System.Threading.CancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="function" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="function" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="function" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="function" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="function" />.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче <see cref="T:System.Threading.Tasks.Task" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Предоставленный объект <see cref="T:System.Threading.CancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="function" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="function" />.</param>
      <param name="cancellationToken">Токен <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, который будет назначен новой задаче.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который используется для планирования созданной задачи <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Предоставленный объект <see cref="T:System.Threading.CancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="function" /> имеет значение null.-или-Исключение, которое возникает, когда аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает и запускает задачу <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="function" />.</param>
      <param name="creationOptions">Значение TaskCreationOptions, которое управляет поведением созданного объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TResult">Тип результата, доступный с использованием <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, когда аргумент <paramref name="function" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Исключение, которое возникает, когда аргумент <paramref name="creationOptions" /> задает недопустимое значение TaskCreationOptions.Дополнительные сведения см. в примечаниях к описанию <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory`1">
      <summary>Предоставляет поддержку создания и планирования объектов <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <typeparam name="TResult">Возвращаемое значение объектов <see cref="T:System.Threading.Tasks.Task`1" />, созданных методами этого класса. </typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor">
      <summary>Инициализирует экземпляр <see cref="T:System.Threading.Tasks.TaskFactory`1" /> с конфигурацией по умолчанию.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
      <summary>Инициализирует экземпляр <see cref="T:System.Threading.Tasks.TaskFactory`1" /> с конфигурацией по умолчанию.</summary>
      <param name="cancellationToken">Токен отмены по умолчанию, который будет назначен задачам, созданным данной фабрикой <see cref="T:System.Threading.Tasks.TaskFactory" />, если при вызове методов фабрики не задан явно другой токен отмены.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Инициализирует экземпляр <see cref="T:System.Threading.Tasks.TaskFactory`1" /> с заданной конфигурацией.</summary>
      <param name="cancellationToken">Токен отмены по умолчанию, который будет назначен задачам, созданным данной фабрикой <see cref="T:System.Threading.Tasks.TaskFactory" />, если при вызове методов фабрики не задан явно другой токен отмены.</param>
      <param name="creationOptions">Параметры по умолчанию, которые необходимо использовать при создании задач данной фабрикой <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</param>
      <param name="continuationOptions">Параметры по умолчанию, которые необходимо использовать при создании задач продолжения данной фабрикой <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</param>
      <param name="scheduler">Планировщик по умолчанию, который нужно использовать при планировании задач, созданных с помощью данной фабрики <see cref="T:System.Threading.Tasks.TaskFactory`1" />.Значение NULL указывает на то, что должно использоваться <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="creationOptions" /> или <paramref name="continuationOptions" /> имеет недопустимое значение.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Инициализирует экземпляр <see cref="T:System.Threading.Tasks.TaskFactory`1" /> с заданной конфигурацией.</summary>
      <param name="creationOptions">Параметры по умолчанию, которые необходимо использовать при создании задач данной фабрикой <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</param>
      <param name="continuationOptions">Параметры по умолчанию, которые необходимо использовать при создании задач продолжения данной фабрикой <see cref="T:System.Threading.Tasks.TaskFactory`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="creationOptions" /> или <paramref name="continuationOptions" /> имеет недопустимое значение.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Инициализирует экземпляр <see cref="T:System.Threading.Tasks.TaskFactory`1" /> с заданной конфигурацией.</summary>
      <param name="scheduler">Планировщик, который нужно использовать при планировании задач, созданных с помощью данной фабрики <see cref="T:System.Threading.Tasks.TaskFactory`1" />.Значение NULL означает, что следует использовать текущий объект <see cref="T:System.Threading.Tasks.TaskScheduler" />.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
      <summary>Возвращает токен отмены по умолчанию для этой фабрики задач.</summary>
      <returns>Токен отмены по умолчанию для этой фабрики задач.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
      <summary>Возвращает значение перечисления <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> для этой фабрики задач.</summary>
      <returns>Одно из значений перечисления, которое задает параметры продолжения по умолчанию для этой фабрики задач.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения набора указанных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равен null.-или-Значение параметра <paramref name="continuationFunction" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL или является пустым.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения набора указанных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче продолжения.</param>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-<see cref="T:System.Threading.CancellationTokenSource" /> Создания<paramref name=" cancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Свойство <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL или является пустым.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения набора указанных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи продолжения.Значения NotOn* и OnlyOn* являются недопустимыми.</param>
      <param name="scheduler">Планировщик, который используется для планирования созданной задачи продолжения.</param>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.-или-Аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL или является пустым.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="continuationOptions" /> содержит недопустимое значение.</exception>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-<see cref="T:System.Threading.CancellationTokenSource" /> Создания<paramref name=" cancellationToken" /> уже был удален.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения набора указанных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи продолжения.Значения NotOn* и OnlyOn* являются недопустимыми.</param>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL или является пустым.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения набора указанных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL или является пустым.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения набора указанных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче продолжения.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-<see cref="T:System.Threading.CancellationTokenSource" /> Создания<paramref name=" cancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL или является пустым.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения набора указанных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи продолжения.Значения NotOn* и OnlyOn* являются недопустимыми.</param>
      <param name="scheduler">Планировщик, который используется для планирования созданной задачи продолжения.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.-или-Аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL или является пустым.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение.</exception>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-<see cref="T:System.Threading.CancellationTokenSource" /> Создания<paramref name=" cancellationToken" /> уже был удален.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения набора указанных задач.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения всех задач в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи продолжения.Значения NotOn* и OnlyOn* являются недопустимыми.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL или является пустым.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения любой задачи в указанном наборе. </summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL или является пустым.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения любой задачи в указанном наборе.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче продолжения.</param>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-<see cref="T:System.Threading.CancellationTokenSource" /> Создания<paramref name=" cancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется NULL.-или-Аргументом параметра <paramref name="continuationFunction" /> является null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL.-или-<paramref name="tasks" /> Массив пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения любой задачи в указанном наборе.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи продолжения.Значения NotOn* и OnlyOn* являются недопустимыми.</param>
      <param name="scheduler">Планировщик задач, который используется для планирования созданной задачи продолжения.</param>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.-или-Аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL.-или-<paramref name="tasks" /> Массив пуст.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-<see cref="T:System.Threading.CancellationTokenSource" /> Создания<paramref name=" cancellationToken" /> уже был удален. </exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения любой задачи в указанном наборе.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи продолжения.Значения NotOn* и OnlyOn* являются недопустимыми.</param>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение перечисления.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL.-или-<paramref name="tasks" /> Массив пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL.-или-<paramref name="tasks" /> Массив пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения любой задачи в указанном наборе.</summary>
      <returns>Новая задача продолжения.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче продолжения.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-<see cref="T:System.Threading.CancellationTokenSource" /> Создания<paramref name=" cancellationToken" /> уже был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL.-или-<paramref name="tasks" /> Массив пуст.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче продолжения.</param>
      <param name="continuationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи продолжения.Значения NotOn* и OnlyOn* являются недопустимыми.</param>
      <param name="scheduler">Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, который используется для планирования созданной задачи продолжения <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.-или-Аргументом параметра <paramref name="scheduler" /> является null.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL.-или-<paramref name="tasks" /> Массив пуст.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> задает недопустимое значение для TaskContinuationOptions.</exception>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.-или-<see cref="T:System.Threading.CancellationTokenSource" /> Создания<paramref name=" cancellationToken" /> уже был удален. </exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>Создает задачу продолжения, которая будет запущена после выполнения любой задачи в указанном наборе.</summary>
      <returns>Новое продолжение <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="tasks">Массив задач, выполнение которых должно быть продолжено после завершения выполнения одной задачи.</param>
      <param name="continuationFunction">Делегат функции, выполняемый асинхронно после завершения выполнения одной задачи в массиве <paramref name="tasks" />.</param>
      <param name="continuationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи продолжения.Значения NotOn* и OnlyOn* являются недопустимыми.</param>
      <typeparam name="TAntecedentResult">Тип результата предыдущего объекта <paramref name="tasks" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Один из элементов массива <paramref name="tasks" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Массив <paramref name="tasks" /> равняется null.-или-Аргумент <paramref name="continuationFunction" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="continuationOptions" /> указывает недопустимое значение перечисления.</exception>
      <exception cref="T:System.ArgumentException">Массив <paramref name="tasks" /> содержит значение NULL.-или-<paramref name="tasks" /> Массив пуст.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
      <summary>Возвращает значение перечисления <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> для этой фабрики задач.</summary>
      <returns>Одно из значений перечисления, которое задает параметры создания по умолчанию для этой фабрики задач.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
      <summary>Создает задачу, которая представляет пару методов Begin и End, соответствующих шаблону модели асинхронного программирования.</summary>
      <returns>Созданная задача, которая представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="beginMethod" /> имеет значение null.-или-Аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает задачу, которая представляет пару методов Begin и End, соответствующих шаблону модели асинхронного программирования.</summary>
      <returns>Созданный объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="beginMethod" /> имеет значение null.-или-Аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="creationOptions" /> указывает недопустимое значение.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
      <summary>Создает задачу, которая представляет пару методов Begin и End, соответствующих шаблону модели асинхронного программирования.</summary>
      <returns>Созданная задача, которая представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <typeparam name="TArg1">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="beginMethod" /> имеет значение null.-или-Аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает задачу, которая представляет пару методов Begin и End, соответствующих шаблону модели асинхронного программирования.</summary>
      <returns>Созданная задача, которая представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи.</param>
      <typeparam name="TArg1">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="beginMethod" /> имеет значение null.-или-Аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="creationOptions" /> задает недопустимое значение.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
      <summary>Создает задачу, которая представляет пару методов Begin и End, соответствующих шаблону модели асинхронного программирования.</summary>
      <returns>Созданная задача, которая представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="beginMethod" /> имеет значение null.-или-Аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает задачу, которая представляет пару методов Begin и End, соответствующих шаблону модели асинхронного программирования.</summary>
      <returns>Созданная задача, которая представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Объект, который управляет поведением созданной <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="beginMethod" /> имеет значение null.-или-Аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="creationOptions" /> задает недопустимое значение.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
      <summary>Создает задачу, которая представляет пару методов Begin и End, соответствующих шаблону модели асинхронного программирования.</summary>
      <returns>Созданная задача, которая представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg3">Третий аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип третьего аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg3">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="beginMethod" /> имеет значение null.-или-Аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает задачу, которая представляет пару методов Begin и End, соответствующих шаблону модели асинхронного программирования.</summary>
      <returns>Созданная задача, которая представляет асинхронную операцию.</returns>
      <param name="beginMethod">Делегат, который начинает асинхронную операцию.</param>
      <param name="endMethod">Делегат, который заканчивает асинхронную операцию.</param>
      <param name="arg1">Первый аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg2">Второй аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="arg3">Третий аргумент, переданный делегату <paramref name="beginMethod" />.</param>
      <param name="state">Объект, содержащий данные, которые используются делегатом метода <paramref name="beginMethod" />.</param>
      <param name="creationOptions">Объект, который управляет поведением созданной задачи.</param>
      <typeparam name="TArg1">Тип второго аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg2">Тип третьего аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <typeparam name="TArg3">Тип первого аргумента, переданного делегату <paramref name="beginMethod" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="beginMethod" /> имеет значение null.-или-Аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="creationOptions" /> задает недопустимое значение.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
      <summary>Создает задачу, которая выполняет функцию метода End по завершении заданного объекта <see cref="T:System.IAsyncResult" />.</summary>
      <returns>Объект <see cref="T:System.Threading.Tasks.Task`1" />, который представляет асинхронную операцию.</returns>
      <param name="asyncResult">Интерфейс <see cref="T:System.IAsyncResult" />, завершение выполнения которого инициирует обработку <paramref name="endMethod" />.</param>
      <param name="endMethod">Делегат функции, который обрабатывает завершенный результат <paramref name="asyncResult" />.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="asyncResult" /> имеет значение null.-или-Аргумент <paramref name="endMethod" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает задачу, которая выполняет функцию метода End по завершении заданного объекта <see cref="T:System.IAsyncResult" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="asyncResult">Интерфейс <see cref="T:System.IAsyncResult" />, завершение выполнения которого инициирует обработку <paramref name="endMethod" />.</param>
      <param name="endMethod">Делегат функции, который обрабатывает завершенный результат <paramref name="asyncResult" />.</param>
      <param name="creationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="asyncResult" /> имеет значение null.-или-Аргумент <paramref name="endMethod" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Аргумент <paramref name="creationOptions" /> указывает недопустимое значение.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает задачу, которая выполняет функцию метода End по завершении заданного объекта <see cref="T:System.IAsyncResult" />.</summary>
      <returns>Созданная задача, которая представляет асинхронную операцию.</returns>
      <param name="asyncResult">Интерфейс <see cref="T:System.IAsyncResult" />, завершение выполнения которого инициирует обработку <paramref name="endMethod" />.</param>
      <param name="endMethod">Делегат функции, который обрабатывает завершенный результат <paramref name="asyncResult" />.</param>
      <param name="creationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи.</param>
      <param name="scheduler">Планировщик задач, который используется для планирования задачи, выполняющей метод End.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="asyncResult" /> имеет значение null.-или-Аргумент <paramref name="endMethod" /> имеет значение null.-или-Аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="creationOptions" /> задает недопустимое значение.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
      <summary>Возвращает планировщик задач для этой фабрики задач.</summary>
      <returns>Планировщик задач для этой фабрики задач.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
      <summary>Создает и запускает задачу.</summary>
      <returns>Запущенная задача.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием задачи.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="function" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
      <summary>Создает и запускает задачу.</summary>
      <returns>Запущенная задача.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием задачи.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче.</param>
      <exception cref="T:System.ObjectDisposedException">Источник токена отмены, создавший <paramref name="cancellationToken" />, был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="function" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает и запускает задачу.</summary>
      <returns>Запущенная задача.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием задачи.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче.</param>
      <param name="creationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи.</param>
      <param name="scheduler">Планировщик задач, который используется для планирования созданной задачи.</param>
      <exception cref="T:System.ObjectDisposedException">Источник токена отмены, создавший <paramref name="cancellationToken" />, был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="function" /> имеет значение null.-или-Аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="creationOptions" /> задает недопустимое значение.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает и запускает задачу.</summary>
      <returns>Запущенная задача <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием задачи.</param>
      <param name="creationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="function" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="creationOptions" /> задает недопустимое значение.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
      <summary>Создает и запускает задачу.</summary>
      <returns>Запущенная задача.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием задачи.</param>
      <param name="state">Объект, содержащий данные для использования этим делегатом <paramref name="function" />.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="function" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>Создает и запускает задачу.</summary>
      <returns>Запущенная задача.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием задачи.</param>
      <param name="state">Объект, содержащий данные для использования этим делегатом <paramref name="function" />.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче.</param>
      <exception cref="T:System.ObjectDisposedException">Источник токена отмены, создавший <paramref name="cancellationToken" />, был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="function" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>Создает и запускает задачу.</summary>
      <returns>Запущенная задача.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием задачи.</param>
      <param name="state">Объект, содержащий данные для использования этим делегатом <paramref name="function" />.</param>
      <param name="cancellationToken">Токен отмены, который будет назначен новой задаче.</param>
      <param name="creationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи.</param>
      <param name="scheduler">Планировщик задач, который используется для планирования созданной задачи.</param>
      <exception cref="T:System.ObjectDisposedException">Источник токена отмены, создавший <paramref name="cancellationToken" />, был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="function" /> имеет значение null.-или-Аргумент <paramref name="scheduler" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="creationOptions" /> задает недопустимое значение.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает и запускает задачу.</summary>
      <returns>Запущенная задача.</returns>
      <param name="function">Делегат функции, возвращающий будущий результат с использованием задачи.</param>
      <param name="state">Объект, содержащий данные для использования этим делегатом <paramref name="function" />.</param>
      <param name="creationOptions">Одно из значений перечисления, которое управляет поведением созданной задачи.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="function" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="creationOptions" /> задает недопустимое значение.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskScheduler">
      <summary>Представляет объект, обрабатывающий низкоуровневую постановку задач в очередь на потоки.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.#ctor">
      <summary>Инициализирует объект <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Current">
      <summary>Получает объект <see cref="T:System.Threading.Tasks.TaskScheduler" />, связанный с выполняемой в настоящий момент задачей.</summary>
      <returns>Возвращает объект <see cref="T:System.Threading.Tasks.TaskScheduler" />, связанный с выполняемой в настоящий момент задачей.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Default">
      <summary>Получает экземпляр <see cref="T:System.Threading.Tasks.TaskScheduler" /> по умолчанию, предоставляемый платформой .NET Framework.</summary>
      <returns>Возвращает экземпляр <see cref="T:System.Threading.Tasks.TaskScheduler" /> по умолчанию.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.TaskScheduler" />, связанный с текущим объектом <see cref="T:System.Threading.SynchronizationContext" />.</summary>
      <returns>Планировщик <see cref="T:System.Threading.Tasks.TaskScheduler" />, связанный с текущим объектом <see cref="T:System.Threading.SynchronizationContext" />, определенным свойством <see cref="P:System.Threading.SynchronizationContext.Current" />.</returns>
      <exception cref="T:System.InvalidOperationException">Текущий SynchronizationContext нельзя использовать как TaskScheduler.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.GetScheduledTasks">
      <summary>Создает перечисляемый объект экземпляров <see cref="T:System.Threading.Tasks.Task" />, которые в настоящее время находятся в очереди планировщика, ожидая выполнения (только для поддержки отладки).</summary>
      <returns>Перечисляемый объект, позволяющий отладчику перемещаться по задачам, которые находятся в очереди данного планировщика.</returns>
      <exception cref="T:System.NotSupportedException">Этому планировщику не удается создать список находящихся в данный момент в очереди задач.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Id">
      <summary>Получает уникальный идентификатор данного объекта <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <returns>Возвращает уникальный идентификатор для данного объекта <see cref="T:System.Threading.Tasks.TaskScheduler" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">
      <summary>Указывает максимальный уровень параллелизма, который может поддерживаться данным планировщиком <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
      <returns>Возвращает целое число, представляющее максимальный уровень параллелизма.Планировщик по умолчанию возвращает значение свойства <see cref="F:System.Int32.MaxValue" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)">
      <summary>Ставит объект <see cref="T:System.Threading.Tasks.Task" /> в очередь планировщика. </summary>
      <param name="task">Помещаемый в очередь объект <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="task" /> является null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
      <summary>Пытается удалить из очереди задачу <see cref="T:System.Threading.Tasks.Task" />, ранее поставленную в очередь данного планировщика.</summary>
      <returns>Логическое значение, указывающее, был ли аргумент <paramref name="task" /> успешно удален из очереди.</returns>
      <param name="task">Объект <see cref="T:System.Threading.Tasks.Task" /> для удаления из очереди.</param>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="task" /> является null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)">
      <summary>Пытается выполнить предоставленную задачу <see cref="T:System.Threading.Tasks.Task" /> в этом планировщике.</summary>
      <returns>Логическое значение true, если задача <paramref name="task" /> успешно выполнена; в противном случае — значение false.Общая причина ошибки выполнения состоит в том, что задача выполнялась ранее или выполняется другим потоком.</returns>
      <param name="task">Выполняемая задача <see cref="T:System.Threading.Tasks.Task" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="task" /> не связана с данным планировщиком.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>Определяет, можно ли выполнить предоставленную задачу <see cref="T:System.Threading.Tasks.Task" /> в этом вызове синхронно, и если возможно, выполняет ее.</summary>
      <returns>Логическое значение, определяющее, была ли задача выполнена на месте.</returns>
      <param name="task">Объект <see cref="T:System.Threading.Tasks.Task" />, который требуется выполнить.</param>
      <param name="taskWasPreviouslyQueued">Логическое значение, указывающее, была ли задача ранее поставлена в очередь.Если этот параметр имеет значение True, задача могла ранее быть в очереди; если он имеет значение False, задача не была поставлена в очередь, а данный вызов совершается для выполнения задачи на месте без постановки в очередь.</param>
      <exception cref="T:System.ArgumentNullException">Аргументом параметра <paramref name="task" /> является null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="task" /> уже выполнена.</exception>
    </member>
    <member name="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException">
      <summary>Происходит, если непредвиденное исключение задачи со сбоем готово запустить политику эскалации исключений, которая по умолчанию прекратит процесс.</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>Представляет исключение, используемое для передачи недопустимой операции планировщиком <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> системным сообщением, содержащим описание ошибки.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> с сообщением об ошибке по умолчанию и ссылкой на внутреннее исключение, вызвавшее данное исключение.</summary>
      <param name="innerException">Исключение, которое вызвало текущее исключение.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> указанным сообщением, содержащим описание ошибки.</summary>
      <param name="message">Сообщение с описанием исключения.Вызывающий оператор этого конструктора необходим, чтобы убедиться, локализована ли данная строка для текущего языка и региональных параметров системы.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее это исключение.</summary>
      <param name="message">Сообщение с описанием исключения.Вызывающий оператор этого конструктора необходим, чтобы убедиться, локализована ли данная строка для текущего языка и региональных параметров системы.</param>
      <param name="innerException">Исключение, которое вызвало текущее исключение.Если значение параметра <paramref name="innerException" /> не равно null, текущее исключение сгенерировано в блоке catch, обрабатывающем внутреннее исключение.</param>
    </member>
    <member name="T:System.Threading.Tasks.TaskStatus">
      <summary>Представляет текущий этап жизненного цикла задачи <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
      <summary>Задача приняла отмену, создав исключение OperationCanceledException с собственным токеном CancellationToken, пока он находился в состоянии получения сигнала, или токен CancellationToken задачи уже получил сигнал до начала выполнения задачи.Для получения дополнительной информации см. Отмена задач.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Created">
      <summary>Задача инициализирована, но еще не запланирована.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
      <summary>Задача завершилась из-за необработанного исключения.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
      <summary>Задача успешно завершена.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Running">
      <summary>Задача выполняется, но еще не завершилась.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
      <summary>Задача ожидает активации и внутреннего планирования инфраструктурой платформы .NET Framework.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
      <summary>Задача закончила выполнение и неявно ожидает завершения подключенных к ней дочерних задач.</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
      <summary>Задача запланирована для выполнения, но еще не начала выполняться.</summary>
    </member>
    <member name="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs">
      <summary>Предоставляет данные для события, создаваемого, если происходит непредвиденное исключение задачи с ошибкой <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" /> с непредвиденным исключением.</summary>
      <param name="exception">Непредвиденное исключение.</param>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception">
      <summary>Непредвиденное исключение.</summary>
      <returns>Непредвиденное исключение.</returns>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed">
      <summary>Получает значение, указывающее, отмечено ли данное исключение как observed.</summary>
      <returns>Значение true, если исключение помечено как observed, в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved">
      <summary>Присваивает свойству <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" /> значение observed, не давая ему запускать политику роста исключений, которая по умолчанию прерывает процесс.</summary>
    </member>
  </members>
</doc>