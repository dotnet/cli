<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.TypeExtensions</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.AssemblyExtensions"></member>
    <member name="M:System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)"></member>
    <member name="M:System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)"></member>
    <member name="M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)"></member>
    <member name="T:System.Reflection.BindingFlags">
      <summary>バインディング、およびリフレクションによるメンバーと型の検索方法を制御するフラグを指定します。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
      <summary>指定した型の階層のレベルで宣言されたメンバーだけが対象になるように指定します。継承されたメンバーは対象になりません。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
      <summary>階層上位のパブリックおよびプロテクトの静的メンバーを返す場合に指定します。継承クラスのプライベートな静的メンバーは返されません。静的メンバーには、フィールド、メソッド、イベント、プロパティなどがあります。入れ子にされた型は返されません。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreCase">
      <summary>バインディングのときにメンバー名の大文字小文字を区別しないように指定します。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Instance">
      <summary>インスタンス メンバーを検索に含めるように指定します。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.NonPublic">
      <summary>非パブリック メンバーを検索に含めるように指定します。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Public">
      <summary>パブリック メンバーを検索に含めるように指定します。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Static">
      <summary>静的メンバーを検索に含めるように指定します。</summary>
    </member>
    <member name="T:System.Reflection.EventInfoExtensions"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo)"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo,System.Boolean)"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo)"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo,System.Boolean)"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo)"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo,System.Boolean)"></member>
    <member name="T:System.Reflection.MethodInfoExtensions"></member>
    <member name="M:System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)"></member>
    <member name="T:System.Reflection.PropertyInfoExtensions"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)"></member>
    <member name="T:System.Reflection.TypeExtensions"></member>
    <member name="M:System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])"></member>
    <member name="M:System.Reflection.TypeExtensions.GetConstructors(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetEvents(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetField(System.Type,System.String)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetFields(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetGenericArguments(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetInterfaces(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMembers(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMethods(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperties(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])"></member>
    <member name="M:System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)"></member>
  </members>
</doc>