<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.TypeExtensions</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.AssemblyExtensions"></member>
    <member name="M:System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)"></member>
    <member name="M:System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)"></member>
    <member name="M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)"></member>
    <member name="T:System.Reflection.BindingFlags">
      <summary>리플렉션에서 멤버 및 형식 검색이 수행되는 방식과 바인딩을 제어하는 플래그를 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
      <summary>지정된 형식의 계층 구조 수준으로 선언된 멤버만 고려되도록 지정합니다.상속된 멤버는 고려되지 않습니다.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
      <summary>계층 구조 위쪽의 public 및 보호되는 정적 멤버가 반환되도록 지정합니다.상속된 클래스의 전용 정적 멤버는 반환되지 않습니다.정적 멤버에는 필드, 메서드, 이벤트, 속성이 있습니다.중첩된 형식은 반환되지 않습니다.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreCase">
      <summary>바인딩할 때 멤버 이름의 대/소문자를 구분하지 않도록 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Instance">
      <summary>인스턴스 멤버를 검색에 포함시키도록 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.NonPublic">
      <summary>public이 아닌 멤버를 검색에 포함시키도록 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Public">
      <summary>public 멤버를 검색에 포함시키도록 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Static">
      <summary>정적 멤버를 검색에 포함시키도록 지정합니다.</summary>
    </member>
    <member name="T:System.Reflection.EventInfoExtensions"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo)"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo,System.Boolean)"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo)"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo,System.Boolean)"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo)"></member>
    <member name="M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo,System.Boolean)"></member>
    <member name="T:System.Reflection.MethodInfoExtensions"></member>
    <member name="M:System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)"></member>
    <member name="T:System.Reflection.PropertyInfoExtensions"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)"></member>
    <member name="M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)"></member>
    <member name="T:System.Reflection.TypeExtensions"></member>
    <member name="M:System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])"></member>
    <member name="M:System.Reflection.TypeExtensions.GetConstructors(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetEvents(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetField(System.Type,System.String)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetFields(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetGenericArguments(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetInterfaces(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMembers(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMethods(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperties(System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])"></member>
    <member name="M:System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)"></member>
    <member name="M:System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)"></member>
  </members>
</doc>