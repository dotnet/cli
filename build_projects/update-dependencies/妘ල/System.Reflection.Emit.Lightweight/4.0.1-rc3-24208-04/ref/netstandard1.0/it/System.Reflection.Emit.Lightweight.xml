<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>Definisce e rappresenta un metodo dinamico che può essere compilato, eseguito ed eliminato.I metodi scartati sono disponibili per la procedura di Garbage Collection.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Crea un metodo dinamico globale per un modulo, specificando il nome del metodo, gli attributi, la convenzione di chiamata, il tipo restituito, i tipi di parametri e il modulo e indicando se deve essere ignorato il controllo di visibilità JIT per i tipi e i membri a cui accede il linguaggio MSIL (Microsoft Intermediate Language) del metodo dinamico.</summary>
      <param name="name">Nome del metodo dinamico.Può essere una stringa di lunghezza zero, ma non può essere null.</param>
      <param name="attributes">Combinazione bit per bit di valori <see cref="T:System.Reflection.MethodAttributes" /> che specifica gli attributi del metodo dinamico.L'unica combinazione consentita è quella composta da <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Convenzione di chiamata per il metodo dinamico.Deve essere <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Classe <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure null se il metodo non dispone di tipi restituiti. </param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specificano i tipi dei parametri del metodo dinamico oppure null se il metodo non dispone di parametri. </param>
      <param name="m">Classe <see cref="T:System.Reflection.Module" /> che rappresenta il modulo a cui il metodo dinamico deve essere associato dal punto di vista logico. </param>
      <param name="skipVisibility">true per ignorare i controlli di visibilità JIT su tipi e membri a cui accede il linguaggio MSIL del metodo dinamico; in caso contrario, false. </param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è null o <see cref="T:System.Void" />.- oppure -<paramref name="m" /> è un modulo che fornisce hosting anonimo per i metodi dinamici.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è null. - oppure -<paramref name="m" /> è null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> è una combinazione di flag diversa da <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.- oppure -<paramref name="callingConvention" /> non è <see cref="F:System.Reflection.CallingConventions.Standard" />.- oppure -<paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Crea un metodo dinamico, specificando il nome del metodo, gli attributi, la convenzione di chiamata, il tipo restituito, i tipi di parametri, il tipo a cui il metodo dinamico è associato dal punto di vista logico e indicando se è necessario ignorare il controllo di visibilità JIT per i tipi e i membri a cui accede il linguaggio MSIL (Microsoft Intermediate Language) del metodo dinamico.</summary>
      <param name="name">Nome del metodo dinamico.Può essere una stringa di lunghezza zero, ma non può essere null.</param>
      <param name="attributes">Combinazione bit per bit di valori <see cref="T:System.Reflection.MethodAttributes" /> che specifica gli attributi del metodo dinamico.L'unica combinazione consentita è quella composta da <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Convenzione di chiamata per il metodo dinamico.Deve essere <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Classe <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure null se il metodo non dispone di tipi restituiti. </param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specificano i tipi dei parametri del metodo dinamico oppure null se il metodo non dispone di parametri. </param>
      <param name="owner">Classe <see cref="T:System.Type" /> a cui il metodo dinamico è associato dal punto di vista logico.Il metodo dinamico ha accesso a tutti i membri del tipo.</param>
      <param name="skipVisibility">true per ignorare i controlli di visibilità JIT su tipi e membri a cui accede il linguaggio MSIL del metodo dinamico; in caso contrario, false.</param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è null o <see cref="T:System.Void" />. - oppure -<paramref name="owner" /> è un'interfaccia, una matrice, un tipo generico aperto o un parametro di tipo di un tipo o di un metodo generico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è null. - oppure -<paramref name="owner" /> è null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> è una combinazione di flag diversa da <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.- oppure -<paramref name="callingConvention" /> non è <see cref="F:System.Reflection.CallingConventions.Standard" />.- oppure -<paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>Inizializza un metodo dinamico contenuto anonimamente, specificando il nome del metodo, il tipo restituito e tipi di parametro. </summary>
      <param name="name">Nome del metodo dinamico.Può essere una stringa di lunghezza zero, ma non può essere null.</param>
      <param name="returnType">Classe <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure null se il metodo non dispone di tipi restituiti. </param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specificano i tipi dei parametri del metodo dinamico oppure null se il metodo non dispone di parametri. </param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è null o <see cref="T:System.Void" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>Inizializza un metodo dinamico contenuto anonimamente, specificando il nome del metodo, il tipo restituito, i tipi di parametri e il modulo e indicando se deve essere ignorato il controllo di visibilità JIT per i tipi e i membri del metodo dinamico a cui accede MSIL (Microsoft Intermediate Language). </summary>
      <param name="name">Nome del metodo dinamico.Può essere una stringa di lunghezza zero, ma non può essere null.</param>
      <param name="returnType">Classe <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure null se il metodo non dispone di tipi restituiti. </param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specificano i tipi dei parametri del metodo dinamico oppure null se il metodo non dispone di parametri. </param>
      <param name="restrictedSkipVisibility">true per ignorare i controlli di visibilità JIT su tipi e membri a cui accede il linguaggio MSIL del metodo dinamico, con la seguente restrizione: il livello di attendibilità degli assembly che contengono tali tipi e membri deve essere uguale a inferiore al livello di attendibilità dello stack di chiamate che genera il metodo dinamico; in caso contrario, false. </param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è null o <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>Crea un metodo dinamico globale per un modulo, specificando il nome del metodo, il tipo restituito, i tipi di parametri e il modulo.</summary>
      <param name="name">Nome del metodo dinamico.Può essere una stringa di lunghezza zero, ma non può essere null.</param>
      <param name="returnType">Classe <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure null se il metodo non dispone di tipi restituiti. </param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specificano i tipi dei parametri del metodo dinamico oppure null se il metodo non dispone di parametri. </param>
      <param name="m">Classe <see cref="T:System.Reflection.Module" /> che rappresenta il modulo a cui il metodo dinamico deve essere associato dal punto di vista logico. </param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è null o <see cref="T:System.Void" />. - oppure -<paramref name="m" /> è un modulo che fornisce hosting anonimo per i metodi dinamici.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è null. - oppure -<paramref name="m" /> è null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Crea un metodo dinamico globale per un modulo, specificando il nome del metodo, il tipo restituito, i tipi di parametri e il modulo e indicando se deve essere ignorato il controllo di visibilità JIT per i tipi e i membri del metodo dinamico a cui accede MSIL (Microsoft Intermediate Language).</summary>
      <param name="name">Nome del metodo dinamico.Può essere una stringa di lunghezza zero, ma non può essere null.</param>
      <param name="returnType">Classe <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure null se il metodo non dispone di tipi restituiti. </param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specificano i tipi dei parametri del metodo dinamico oppure null se il metodo non dispone di parametri. </param>
      <param name="m">Classe <see cref="T:System.Reflection.Module" /> che rappresenta il modulo a cui il metodo dinamico deve essere associato dal punto di vista logico. </param>
      <param name="skipVisibility">true per ignorare i controlli di visibilità JIT su tipi e membri a cui accede il linguaggio MSIL del metodo dinamico. </param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è null o <see cref="T:System.Void" />. - oppure -<paramref name="m" /> è un modulo che fornisce hosting anonimo per i metodi dinamici.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è null. - oppure -<paramref name="m" /> è null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>Crea un metodo dinamico, specificando il nome del metodo, il tipo restituito, i parametri di tipo e il tipo a cui il metodo dinamico è associato dal punto di vista logico.</summary>
      <param name="name">Nome del metodo dinamico.Può essere una stringa di lunghezza zero, ma non può essere null.</param>
      <param name="returnType">Classe <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure null se il metodo non dispone di tipi restituiti. </param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specificano i tipi dei parametri del metodo dinamico oppure null se il metodo non dispone di parametri. </param>
      <param name="owner">Classe <see cref="T:System.Type" /> a cui il metodo dinamico è associato dal punto di vista logico.Il metodo dinamico ha accesso a tutti i membri del tipo.</param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è null o <see cref="T:System.Void" />.- oppure - <paramref name="owner" /> è un'interfaccia, una matrice, un tipo generico aperto o un parametro di tipo di un tipo o di un metodo generico. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è null. - oppure -<paramref name="owner" /> è null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è null o è un tipo per il quale la proprietà <see cref="P:System.Type.IsByRef" /> restituisce true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Crea un metodo dinamico, specificando il nome del metodo, il tipo restituito, i tipi di parametri, il tipo a cui il metodo dinamico è associato dal punto di vista logico e indicando se è necessario ignorare il controllo di visibilità JIT per i tipi e i membri a cui accede il linguaggio MSIL (Microsoft Intermediate Language) del metodo dinamico.</summary>
      <param name="name">Nome del metodo dinamico.Può essere una stringa di lunghezza zero, ma non può essere null.</param>
      <param name="returnType">Classe <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure null se il metodo non dispone di tipi restituiti. </param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specificano i tipi dei parametri del metodo dinamico oppure null se il metodo non dispone di parametri. </param>
      <param name="owner">Classe <see cref="T:System.Type" /> a cui il metodo dinamico è associato dal punto di vista logico.Il metodo dinamico ha accesso a tutti i membri del tipo.</param>
      <param name="skipVisibility">true per ignorare i controlli di visibilità JIT su tipi e membri a cui accede il linguaggio MSIL del metodo dinamico; in caso contrario, false. </param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è null o <see cref="T:System.Void" />.- oppure - <paramref name="owner" /> è un'interfaccia, una matrice, un tipo generico aperto o un parametro di tipo di un tipo o di un metodo generico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è null. - oppure -<paramref name="owner" /> è null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è null o è un tipo per il quale la proprietà <see cref="P:System.Type.IsByRef" /> restituisce true. </exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>Ottiene gli attributi specificati quando il metodo dinamico è stato creato.</summary>
      <returns>Combinazione bit per bit dei valori <see cref="T:System.Reflection.MethodAttributes" /> che rappresentano gli attributi relativi al metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>Ottiene la convenzione di chiamata specificata quando il metodo dinamico è stato creato.</summary>
      <returns>Uno dei valori <see cref="T:System.Reflection.CallingConventions" /> che indica la convenzione di chiamata del metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>Completa il metodo dinamico e crea un delegato che può essere utilizzato per eseguirlo.</summary>
      <returns>Delegato del tipo specificato, che è possibile utilizzare per eseguire il metodo dinamico.</returns>
      <param name="delegateType">Tipo delegato la cui firma corrisponde a quella del metodo dinamico. </param>
      <exception cref="T:System.InvalidOperationException">Il metodo dinamico non dispone di corpo.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> ha un numero errato di parametri o tipi di parametro non validi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>Completa il metodo dinamico e crea un delegato che può essere utilizzato per eseguirlo, specificando il tipo di delegato e l'oggetto a cui il delegato è associato.</summary>
      <returns>Delegato del tipo specificato, che è possibile utilizzare per eseguire il metodo dinamico con l'oggetto di destinazione specificato.</returns>
      <param name="delegateType">Tipo delegato la cui firma corrisponde a quella del metodo dinamico, meno il primo parametro.</param>
      <param name="target">Oggetto a cui il delegato è associato.Deve essere dello stesso tipo del primo parametro del metodo dinamico.</param>
      <exception cref="T:System.InvalidOperationException">Il metodo dinamico non dispone di corpo.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> non è dello stesso tipo del primo parametro del metodo dinamico e non è assegnabile al tipo.- oppure -<paramref name="delegateType" /> ha un numero errato di parametri o tipi di parametro non validi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>Ottiene il tipo che dichiara il metodo, che è sempre null per i metodi dinamici.</summary>
      <returns>Sempre null.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>Restituisce un generatore in linguaggio MSIL (Microsoft Intermediate Language) per il metodo con una dimensione di flusso MSIL predefinita di 64 byte.</summary>
      <returns>Classe <see cref="T:System.Reflection.Emit.ILGenerator" /> relativa al metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>Restituisce un generatore MSIL (Microsoft Intermediate Language) per il metodo con la dimensione di flusso MSIL specificata.</summary>
      <returns>Classe <see cref="T:System.Reflection.Emit.ILGenerator" /> per il metodo, con la dimensione di flusso MSIL specificata.</returns>
      <param name="streamSize">Dimensione del flusso MSIL in byte. </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>Restituisce i parametri del metodo dinamico.</summary>
      <returns>Matrice di oggetti <see cref="T:System.Reflection.ParameterInfo" /> che rappresentano i parametri del metodo dinamico.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>Ottiene o imposta un valore che indica se le variabili locali all'interno del metodo sono inizializzate su zero. </summary>
      <returns>true se le variabili locali all'interno del metodo sono inizializzate su zero. In caso contrario, false.Il valore predefinito è true.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags"></member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>Ottiene il nome del metodo dinamico.</summary>
      <returns>Il nome semplice del metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>Ottiene il parametro restituito del metodo dinamico.</summary>
      <returns>Sempre null. </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>Ottiene il tipo del valore restituito per il metodo dinamico.</summary>
      <returns>Classe <see cref="T:System.Type" /> che rappresenta il tipo del valore restituito del metodo corrente; <see cref="T:System.Void" /> se il metodo non dispone di tipi restituiti.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>Restituisce la firma del metodo, rappresentata sotto forma di stringa.</summary>
      <returns>Una stringa che rappresenta la firma del metodo.</returns>
    </member>
  </members>
</doc>