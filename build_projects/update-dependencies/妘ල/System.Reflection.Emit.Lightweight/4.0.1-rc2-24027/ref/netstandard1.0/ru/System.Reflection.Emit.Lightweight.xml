<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>Определяет и представляет динамический метод, который может быть скомпилирован, выполнен и удален.Удаленные методы доступны для сборки мусора.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Создает динамический метод, который является глобальным по отношению к модулю, указывая при этом имя метода, атрибуты, соглашение о вызове, возвращаемый тип, типы параметров, модуль, а также необходимость пропуска проверок видимости с помощью JIT-компилятора для типов и элементов, к которым получает доступ язык MSIL динамического метода.</summary>
      <param name="name">Имя динамического метода.Это может быть строка нулевой длины, но не значение null.</param>
      <param name="attributes">Битовая комбинация значений <see cref="T:System.Reflection.MethodAttributes" />, которые указывают атрибуты динамического метода.Единственной разрешенной комбинацией является <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Соглашение о вызовах этого динамического метода.Значением должно быть <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, определяющий тип возвращаемого значения данного динамического метода, или значение null, если метод не возвращает значение. </param>
      <param name="parameterTypes">Массив объектов типа <see cref="T:System.Type" />, определяющих типы параметров динамического метода, или null, если метод не имеет параметров. </param>
      <param name="m">
        <see cref="T:System.Reflection.Module" />, представляющий модуль, с которым следует логически связать динамический метод. </param>
      <param name="skipVisibility">Значение true, чтобы пропустить проверки видимости, выполняемые JIT-компилятором, для типов и членов, доступ к которым имеет язык MSIL динамического метода; в противном случае — значение false. </param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> равен null или <see cref="T:System.Void" />.– или –<paramref name="m" /> — модуль, предоставляющий анонимное размещение для динамических методов.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение null. – или –Параметр <paramref name="m" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> является комбинацией флагов, отличных от <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.– или –Значение <paramref name="callingConvention" /> не <see cref="F:System.Reflection.CallingConventions.Standard" />.– или –<paramref name="returnType" /> является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает значение true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Создает динамический метод, указывая при этом имя метода, атрибуты, соглашение о вызове, возвращаемый тип, типы параметров, тип, с которым логически связан этот динамический метод, а также необходимость пропуска проверок видимости с помощью JIT-компилятора для типов и элементов, к которым получает доступ язык MSIL динамического метода.</summary>
      <param name="name">Имя динамического метода.Это может быть строка нулевой длины, но не значение null.</param>
      <param name="attributes">Битовая комбинация значений <see cref="T:System.Reflection.MethodAttributes" />, которые указывают атрибуты динамического метода.Единственной разрешенной комбинацией является <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Соглашение о вызовах этого динамического метода.Значением должно быть <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, определяющий тип возвращаемого значения данного динамического метода, или значение null, если метод не возвращает значение. </param>
      <param name="parameterTypes">Массив объектов типа <see cref="T:System.Type" />, определяющих типы параметров динамического метода, или null, если метод не имеет параметров. </param>
      <param name="owner">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод.Динамический метод имеет доступ ко всем элементам этого типа.</param>
      <param name="skipVisibility">Значение true, чтобы пропустить проверки видимости, выполняемые JIT-компилятором, для типов и членов, доступ к которым имеет язык MSIL динамического метода; в противном случае — значение false.</param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> равен null или <see cref="T:System.Void" />. – или –<paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром типа универсального типа или метода.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение null. – или –Параметр <paramref name="owner" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> является комбинацией флагов, отличных от <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.– или –Значение <paramref name="callingConvention" /> не <see cref="F:System.Reflection.CallingConventions.Standard" />.– или –<paramref name="returnType" /> является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает значение true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>Инициализирует анонимно размещенный динамический метод, указывая имя метода, возвращаемый тип и типы параметров. </summary>
      <param name="name">Имя динамического метода.Это может быть строка нулевой длины, но не значение null.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, определяющий тип возвращаемого значения данного динамического метода, или значение null, если метод не возвращает значение. </param>
      <param name="parameterTypes">Массив объектов типа <see cref="T:System.Type" />, определяющих типы параметров динамического метода, или null, если метод не имеет параметров. </param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> равен null или <see cref="T:System.Void" />. </exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает значение true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>Инициализирует анонимно размещенный динамический метод, указывая при этом имя метода, возвращаемый тип, типы параметров, модуль, а также необходимость пропуска проверок видимости с помощью JIT-компилятора для типов и элементов, к которым получает доступ язык MSIL динамического метода. </summary>
      <param name="name">Имя динамического метода.Это может быть строка нулевой длины, но не значение null.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, определяющий тип возвращаемого значения данного динамического метода, или значение null, если метод не возвращает значение. </param>
      <param name="parameterTypes">Массив объектов типа <see cref="T:System.Type" />, определяющих типы параметров динамического метода, или null, если метод не имеет параметров. </param>
      <param name="restrictedSkipVisibility">true для пропуска проверок видимости с помощью JIT-компилятора для всех типов и элементом, к которым есть доступ у языка MSIL динамического метода. При таком ограничении уровень доверия сборок, содержащих эти типы и элементы, должен не превышать уровень доверия стека вызовов, который выпустил динамический метод; в противном случае — значение false. </param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> равен null или <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает значение true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>Создает динамический метод, который является глобальным по отношению к модулю, указывая имя метода, возвращаемый тип, типы параметров и модуль.</summary>
      <param name="name">Имя динамического метода.Это может быть строка нулевой длины, но не значение null.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, определяющий тип возвращаемого значения данного динамического метода, или значение null, если метод не возвращает значение. </param>
      <param name="parameterTypes">Массив объектов типа <see cref="T:System.Type" />, определяющих типы параметров динамического метода, или null, если метод не имеет параметров. </param>
      <param name="m">
        <see cref="T:System.Reflection.Module" />, представляющий модуль, с которым следует логически связать динамический метод. </param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> равен null или <see cref="T:System.Void" />. – или –<paramref name="m" /> — модуль, предоставляющий анонимное размещение для динамических методов.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение null. – или –Параметр <paramref name="m" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает значение true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Создает динамический метод, который является глобальным по отношению к модулю, указывая при этом имя метода, возвращаемый тип, типы параметров, модуль, а также необходимость пропуска проверок видимости с помощью JIT-компилятора для типов и элементов, к которым получает доступ язык MSIL динамического метода.</summary>
      <param name="name">Имя динамического метода.Это может быть строка нулевой длины, но не значение null.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, определяющий тип возвращаемого значения данного динамического метода, или значение null, если метод не возвращает значение. </param>
      <param name="parameterTypes">Массив объектов типа <see cref="T:System.Type" />, определяющих типы параметров динамического метода, или null, если метод не имеет параметров. </param>
      <param name="m">
        <see cref="T:System.Reflection.Module" />, представляющий модуль, с которым следует логически связать динамический метод. </param>
      <param name="skipVisibility">Значение true, чтобы пропустить проверки видимости, выполняемые JIT-компилятором, для типов и членов, доступ к которым имеет язык MSIL динамического метода. </param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> равен null или <see cref="T:System.Void" />. – или –<paramref name="m" /> — модуль, предоставляющий анонимное размещение для динамических методов.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение null. – или –Параметр <paramref name="m" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает значение true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>Создает динамический метод, указывая имя метода, возвращаемый тип, типы параметров и тип, с которым логически связан этот динамический метод.</summary>
      <param name="name">Имя динамического метода.Это может быть строка нулевой длины, но не значение null.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, определяющий тип возвращаемого значения данного динамического метода, или значение null, если метод не возвращает значение. </param>
      <param name="parameterTypes">Массив объектов типа <see cref="T:System.Type" />, определяющих типы параметров динамического метода, или null, если метод не имеет параметров. </param>
      <param name="owner">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод.Динамический метод имеет доступ ко всем элементам этого типа.</param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> равен null или <see cref="T:System.Void" />.– или – <paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром типа универсального типа или метода. </exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение null. – или –Параметр <paramref name="owner" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> равен null или является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает значение true. </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Создает динамический метод, указывая при этом имя метода, возвращаемый тип, типы параметров, тип, с которым логически связан этот динамический метод, а также необходимость пропуска проверок видимости с помощью JIT-компилятора для типов и элементов, к которым получает доступ язык MSIL динамического метода.</summary>
      <param name="name">Имя динамического метода.Это может быть строка нулевой длины, но не значение null.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, определяющий тип возвращаемого значения данного динамического метода, или значение null, если метод не возвращает значение. </param>
      <param name="parameterTypes">Массив объектов типа <see cref="T:System.Type" />, определяющих типы параметров динамического метода, или null, если метод не имеет параметров. </param>
      <param name="owner">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод.Динамический метод имеет доступ ко всем элементам этого типа.</param>
      <param name="skipVisibility">Значение true, чтобы пропустить проверки видимости, выполняемые JIT-компилятором, для типов и членов, доступ к которым имеет язык MSIL динамического метода; в противном случае — значение false. </param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> равен null или <see cref="T:System.Void" />.– или – <paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром типа универсального типа или метода.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение null. – или –Параметр <paramref name="owner" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> равен null или является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает значение true. </exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>Возвращает атрибуты, указанные при создании динамического метода.</summary>
      <returns>Битовая комбинация значений <see cref="T:System.Reflection.MethodAttributes" />, представляющих атрибуты этого метода.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>Возвращает соглашение о вызове, указанное при создании динамического метода.</summary>
      <returns>Одно из значений <see cref="T:System.Reflection.CallingConventions" />, указывающее соглашение о вызове для этого метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>Завершает динамический метод и создает делегата, который может быть использован для запуска метода.</summary>
      <returns>Делегат указанного типа, который может использоваться для запуска динамического метода.</returns>
      <param name="delegateType">Тип делегата, сигнатура которого совпадает с сигнатурой динамического метода. </param>
      <exception cref="T:System.InvalidOperationException">Динамический метод не содержит основного текста метода.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> содержит неверное количество параметров или недопустимые типы параметров.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>Завершает динамический метод и создает делегата, который может быть использован для его вызова, указывая при этом тип делегата и объект, к которому привязан этот делегат.</summary>
      <returns>Делегат указанного типа, который может использоваться для запуска динамического метода с указанным объектом назначения.</returns>
      <param name="delegateType">Тип делегата, подпись которого совпадает с сигнатурой динамического метода, за исключением первого параметра.</param>
      <param name="target">Объект, к которому привязан делегат.Должен быть того же типа, что и первый параметр динамического метода.</param>
      <exception cref="T:System.InvalidOperationException">Динамический метод не содержит основного текста метода.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="target" /> не является тем же типом, что и первый параметр динамического метода, и не может быть назначен для этого типа.– или –<paramref name="delegateType" /> содержит неверное количество параметров или недопустимые типы параметров.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>Получает тип, объявляющий метод, который всегда равен null для динамических методов.</summary>
      <returns>Всегда null.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>Возвращает генератор MSIL для этого метода с используемым по умолчанию 64-байтным потоком MSIL.</summary>
      <returns>Объект <see cref="T:System.Reflection.Emit.ILGenerator" /> для этого метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>Возвращает генератор MSIL для метода с указанным размером потока MSIL.</summary>
      <returns>Объект <see cref="T:System.Reflection.Emit.ILGenerator" /> для метода с указанным размером потока MSIL.</returns>
      <param name="streamSize">Размер потока языка MSIL в байтах. </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>Возвращает параметры динамического метода.</summary>
      <returns>Массив объектов <see cref="T:System.Reflection.ParameterInfo" />, предоставляющих параметры данного динамического метода.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>Возвращает или задает значение, указывающее, инициализируются ли локальные переменные в этом методе с нуля. </summary>
      <returns>Значение true, если локальные переменные в методе инициализируются с нуля, в противном случае — false.Значение по умолчанию — true.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags"></member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>Возвращает имя динамического метода.</summary>
      <returns>Простое имя метода.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>Получает возвращаемый параметр динамического метода.</summary>
      <returns>Всегда null. </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>Возвращает тип возвращаемого значения для динамического метода.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий тип возвращаемого значения текущего метода; <see cref="T:System.Void" />, если метод не содержит возвращаемого типа.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>Возвращает сигнатуру метода, представленную строкой.</summary>
      <returns>Строка, представляющая подпись метода.</returns>
    </member>
  </members>
</doc>