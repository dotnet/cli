<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>
        <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />을 호출할 때 등록된 핸들을 나타냅니다.이 클래스는 상속될 수 없습니다.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>
        <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 메서드에서 발생한 등록된 대기 작업을 취소합니다.</summary>
      <returns>작업이 성공적으로 수행되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="waitObject">신호를 받을 <see cref="T:System.Threading.WaitHandle" />입니다. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>작업 실행, 작업 항목 게시, 비동기 I/O 처리, 다른 스레드 대신 기다리기 및 타이머 처리에 사용할 수 있는 스레드 풀을 제공합니다.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary>[보안 중요] <see cref="T:System.Threading.ThreadPool" />에 운영 체제 핸들을 바인딩합니다.</summary>
      <returns>핸들이 바인딩되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="osHandle">운영 체제 핸들을 보유하는 <see cref="T:System.Runtime.InteropServices.SafeHandle" />입니다.핸들은 관리되지 않는 쪽의 겹쳐진 I/O에 열려 있어야 합니다.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>실행을 위해 메서드를 큐에 대기시킵니다.이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</summary>
      <returns>메서드가 성공적으로 큐에 대기되면 true이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 발생합니다.</returns>
      <param name="callBack">실행할 메서드를 나타내는 <see cref="T:System.Threading.WaitCallback" />입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The common language runtime (CLR) is hosted, and the host does not support this action.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>실행을 위해 메서드를 큐에 대기시키고 메서드에서 사용할 데이터가 들어 있는 개체를 지정합니다.이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</summary>
      <returns>메서드가 성공적으로 큐에 대기되면 true이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 발생합니다.</returns>
      <param name="callBack">실행할 메서드를 나타내는 <see cref="T:System.Threading.WaitCallback" />입니다. </param>
      <param name="state">메서드에서 사용할 데이터가 들어 있는 개체입니다. </param>
      <exception cref="T:System.NotSupportedException">The common language runtime (CLR) is hosted, and the host does not support this action.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> is null.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>제한 시간(밀리초)에 부호 있는 32비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</summary>
      <returns>기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.<see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다. </param>
      <param name="state">대리자에 전달되는 개체입니다. </param>
      <param name="millisecondsTimeOutInterval">제한 시간(밀리초)입니다.<paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.<paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">true는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 false는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>제한 시간(밀리초)에 부호 있는 64비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</summary>
      <returns>기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.<see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다. </param>
      <param name="state">대리자에 전달된 개체입니다. </param>
      <param name="millisecondsTimeOutInterval">제한 시간(밀리초)입니다.<paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.<paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">true는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 false는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>제한 시간에 <see cref="T:System.TimeSpan" /> 값을 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</summary>
      <returns>기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.<see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다. </param>
      <param name="state">대리자에 전달된 개체입니다. </param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />으로 나타낸 제한 시간입니다.<paramref name="timeout" />이 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.<paramref name="timeout" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">true는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 false는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeout" /> parameter is less than -1. </exception>
      <exception cref="T:System.NotSupportedException">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>제한 시간(밀리초)에 부호 없는 32비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</summary>
      <returns>등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다.<see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다. </param>
      <param name="state">대리자에 전달된 개체입니다. </param>
      <param name="millisecondsTimeOutInterval">제한 시간(밀리초)입니다.<paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다.<paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">true는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 false는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>스레드 풀 스레드에 의해 실행될 콜백 메서드를 나타냅니다.</summary>
      <param name="state">콜백 메서드에서 사용할 정보가 포함된 개체입니다. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>
        <see cref="T:System.Threading.WaitHandle" />이 신호를 받거나 시간 초과될 때 호출될 메서드를 나타냅니다.</summary>
      <param name="state">콜백 메서드가 실행될 때마다 사용할 정보가 포함된 개체입니다. </param>
      <param name="timedOut">
        <see cref="T:System.Threading.WaitHandle" /> 시간이 초과되면 true이고, 신호를 받으면 false입니다. </param>
      <filterpriority>2</filterpriority>
    </member>
  </members>
</doc>