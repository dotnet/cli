<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime</name>
  </assembly>
  <members>
    <member name="T:System.Action">
      <summary>Encapsula un método que no tiene parámetros y no devuelve un valor.</summary>
    </member>
    <member name="M:System.Action.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action.BeginInvoke(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action.Invoke"></member>
    <member name="T:System.Action`1">
      <summary>Encapsula un método que tiene un solo parámetro y no devuelve un valor.Para examinar el código fuente de .NET Framework para este tipo, vea el origen de referencia.</summary>
      <typeparam name="T">Tipo de parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Action`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`1.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`1.Invoke(`0)"></member>
    <member name="T:System.Action`10">
      <summary>Encapsula un método que tiene 10 parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`10.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`10.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`10.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`10.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)"></member>
    <member name="T:System.Action`11">
      <summary>Encapsula un método que tiene 11 parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`11.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`11.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`11.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`11.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)"></member>
    <member name="T:System.Action`12">
      <summary>Encapsula un método que tiene 12 parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T12">Tipo del duodécimo parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`12.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`12.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`12.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`12.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)"></member>
    <member name="T:System.Action`13">
      <summary>Encapsula un método que tiene 13 parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T12">Tipo del duodécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T13">Tipo del decimotercero parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`13.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`13.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`13.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`13.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)"></member>
    <member name="T:System.Action`14">
      <summary>Encapsula un método que tiene 14 parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T12">Tipo del duodécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T13">Tipo del decimotercero parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T14">Tipo del decimocuarto parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`14.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`14.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`14.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`14.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)"></member>
    <member name="T:System.Action`15">
      <summary>Encapsula un método que tiene 15 parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado. </typeparam>
      <typeparam name="T12">Tipo del duodécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T13">Tipo del decimotercero parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T14">Tipo del decimocuarto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T15">Tipo del decimoquinto parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`15.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`15.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`15.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`15.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)"></member>
    <member name="T:System.Action`16">
      <summary>Encapsula un método que tiene 16 parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T12">Tipo del duodécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T13">Tipo del decimotercero parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T14">Tipo del decimocuarto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T15">Tipo del decimoquinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T16">Tipo del decimosexto parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`16.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`16.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`16.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`16.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)"></member>
    <member name="T:System.Action`2">
      <summary>Encapsula un método que tiene dos parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`2.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`2.BeginInvoke(`0,`1,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`2.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`2.Invoke(`0,`1)"></member>
    <member name="T:System.Action`3">
      <summary>Encapsula un método que tiene tres parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`3.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`3.BeginInvoke(`0,`1,`2,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`3.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`3.Invoke(`0,`1,`2)"></member>
    <member name="T:System.Action`4">
      <summary>Encapsula un método que tiene cuatro parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`4.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`4.BeginInvoke(`0,`1,`2,`3,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`4.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`4.Invoke(`0,`1,`2,`3)"></member>
    <member name="T:System.Action`5">
      <summary>Encapsula un método que tiene cinco parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`5.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`5.BeginInvoke(`0,`1,`2,`3,`4,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`5.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`5.Invoke(`0,`1,`2,`3,`4)"></member>
    <member name="T:System.Action`6">
      <summary>Encapsula un método que tiene seis parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`6.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`6.BeginInvoke(`0,`1,`2,`3,`4,`5,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`6.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`6.Invoke(`0,`1,`2,`3,`4,`5)"></member>
    <member name="T:System.Action`7">
      <summary>Encapsula un método que tiene siete parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`7.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`7.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`7.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`7.Invoke(`0,`1,`2,`3,`4,`5,`6)"></member>
    <member name="T:System.Action`8">
      <summary>Encapsula un método que tiene ocho parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`8.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`8.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`8.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`8.Invoke(`0,`1,`2,`3,`4,`5,`6,`7)"></member>
    <member name="T:System.Action`9">
      <summary>Encapsula un método que tiene nueve parámetros y no devuelve un valor.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`9.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`9.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`9.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`9.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8)"></member>
    <member name="T:System.Activator">
      <summary>Contiene métodos para crear tipos de objetos de forma local o remota, o para obtener referencias a objetos remotos existentes.Esta clase no puede heredarse.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>Crea una instancia del tipo designado por el parámetro de tipo genérico especificado, usando el constructor sin parámetros.</summary>
      <returns>Referencia al objeto recién creado.</returns>
      <typeparam name="T">Tipo que se va a crear.</typeparam>
      <exception cref="T:System.MissingMethodException">En el .NET for Windows Store apps o biblioteca de clases Portable, detecte la excepción de la clase base, <see cref="T:System.MissingMemberException" />, en su lugar.El tipo especificado para <paramref name="T" /> no tiene un constructor sin parámetros. </exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>Crea una instancia del tipo especificado usando el constructor predeterminado de ese tipo.</summary>
      <returns>Referencia al objeto recién creado.</returns>
      <param name="type">Tipo de objeto que se va a crear. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="type" /> es null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> no es un RuntimeType. o bien<paramref name="type" /> es un tipo genérico abierto (es decir, el <see cref="P:System.Type.ContainsGenericParameters" /> devuelve true).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> no puede ser un <see cref="T:System.Reflection.Emit.TypeBuilder" />.o bien Creación de <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, y <see cref="T:System.RuntimeArgumentHandle" /> tipos o matrices de esos tipos, no es compatible.o bienEl ensamblado que contiene <paramref name="type" /> es un ensamblado dinámico que se creó con <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">El constructor al que se está llamando produce una excepción. </exception>
      <exception cref="T:System.MethodAccessException">En el .NET for Windows Store apps o biblioteca de clases Portable, detecte la excepción de la clase base, <see cref="T:System.MemberAccessException" />, en su lugar.El llamador no tiene permiso para llamar a este constructor. </exception>
      <exception cref="T:System.MemberAccessException">No se puede crear una instancia de una clase abstracta o este miembro se invocó mediante un mecanismo en tiempo de ejecución. </exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">El tipo COM no se obtuvo a través de <see cref="Overload:System.Type.GetTypeFromProgID" /> o <see cref="Overload:System.Type.GetTypeFromCLSID" />. </exception>
      <exception cref="T:System.MissingMethodException">En el .NET for Windows Store apps o biblioteca de clases Portable, detecte la excepción de la clase base, <see cref="T:System.MissingMemberException" />, en su lugar.No se encontró ningún constructor público coincidente. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> es un objeto COM, pero el identificador de clase utilizado para obtener el tipo no es válido o la clase identificada no está registrada. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> no es un tipo válido. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>Crea una instancia del tipo especificado usando el constructor que mejor coincida con los parámetros especificados.</summary>
      <returns>Referencia al objeto recién creado.</returns>
      <param name="type">Tipo de objeto que se va a crear. </param>
      <param name="args">Matriz de argumentos que coinciden en número, orden y tipo con los parámetros del constructor al que se llama.Si <paramref name="args" /> es una matriz vacía o null, se llama al constructor que no toma parámetros (constructor predeterminado).</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="type" /> es null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> no es un RuntimeType. o bien<paramref name="type" /> es un tipo genérico abierto (es decir, el <see cref="P:System.Type.ContainsGenericParameters" /> devuelve true).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> no puede ser un <see cref="T:System.Reflection.Emit.TypeBuilder" />.o bien Creación de <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, y <see cref="T:System.RuntimeArgumentHandle" /> tipos o matrices de esos tipos, no es compatible. o bienEl ensamblado que contiene <paramref name="type" /> es un ensamblado dinámico que se creó con <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.o bienEl constructor que mejor se ajuste <paramref name="args" /> tiene varargs argumentos. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">El constructor al que se está llamando produce una excepción. </exception>
      <exception cref="T:System.MethodAccessException">En el .NET for Windows Store apps o biblioteca de clases Portable, detecte la excepción de la clase base, <see cref="T:System.MemberAccessException" />, en su lugar.El llamador no tiene permiso para llamar a este constructor. </exception>
      <exception cref="T:System.MemberAccessException">No se puede crear una instancia de una clase abstracta o este miembro se invocó mediante un mecanismo en tiempo de ejecución. </exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">El tipo COM no se obtuvo a través de <see cref="Overload:System.Type.GetTypeFromProgID" /> o <see cref="Overload:System.Type.GetTypeFromCLSID" />. </exception>
      <exception cref="T:System.MissingMethodException">En el .NET for Windows Store apps o biblioteca de clases Portable, detecte la excepción de la clase base, <see cref="T:System.MissingMemberException" />, en su lugar.No se encontró ningún constructor público coincidente. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> es un objeto COM, pero el identificador de clase utilizado para obtener el tipo no es válido o la clase identificada no está registrada. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> no es un tipo válido. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
      </PermissionSet>
    </member>
    <member name="T:System.ArgumentException">
      <summary>Excepción que se produce cuando no es válido uno de los argumentos proporcionados para un método.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentException" />.</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="innerException">Excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula, se provoca la excepción actual en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentException" /> con un mensaje de error especificado y el nombre del parámetro que causa esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="paramName">Nombre del parámetro que provocó la excepción actual. </param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentException" /> con un mensaje de error especificado, el nombre del parámetro y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="paramName">Nombre del parámetro que provocó la excepción actual. </param>
      <param name="innerException">Excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula, se provoca la excepción actual en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>Obtiene el mensaje de error y el nombre del parámetro. Si no se estableció ningún nombre de parámetro, obtiene solo el mensaje de error.</summary>
      <returns>Cadena de texto que describe los detalles de la excepción.El valor de la propiedad adopta una de estas dos formas:Condición Valor <paramref name="paramName" /> es una referencia nula (Nothing en Visual Basic) o tiene longitud cero. Cadena <paramref name="message" /> pasada al constructor. <paramref name="paramName" /> no es una referencia nula (Nothing en Visual Basic) y su longitud es mayor que cero. Cadena <paramref name="message" /> anexada junto con el nombre del parámetro no válido. </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>Obtiene el nombre del parámetro que causa esta excepción.</summary>
      <returns>Nombre del parámetro.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>Excepción que se produce cuando se pasa una referencia nula (Nothing en Visual Basic) a un método que no la acepta como argumento válido. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentNullException" />.</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentNullException" /> con el nombre del parámetro que causa esta excepción.</summary>
      <param name="paramName">Nombre del parámetro que provocó la excepción. </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentNullException" /> con el mensaje de error especificado y la excepción que causó esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de esta excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual o una referencia nula (Nothing en Visual Basic) si no se especifica ninguna excepción interna. </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentNullException" /> con un mensaje de error especificado y el nombre del parámetro que causa esta excepción.</summary>
      <param name="paramName">Nombre del parámetro que provocó la excepción. </param>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>Excepción que se produce cuando el valor de un argumento se encuentra fuera del intervalo de valores permitido definido por el método invocado.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentOutOfRangeException" />.</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentOutOfRangeException" /> con el nombre del parámetro que causa esta excepción.</summary>
      <param name="paramName">Nombre del parámetro que provoca esta excepción. </param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentOutOfRangeException" /> con el mensaje de error especificado y la excepción que causó esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de esta excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual o una referencia nula (Nothing en Visual Basic) si no se especifica ninguna excepción interna. </param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentOutOfRangeException" /> con el nombre del parámetro, el valor del argumento y el mensaje de error especificados.</summary>
      <param name="paramName">Nombre del parámetro que provocó la excepción. </param>
      <param name="actualValue">Valor del argumento que causa esta excepción. </param>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArgumentOutOfRangeException" /> con el nombre del parámetro que provoca esta excepción y un mensaje de error especificados.</summary>
      <param name="paramName">Nombre del parámetro que provocó la excepción. </param>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>Obtiene el valor del argumento que causa esta excepción.</summary>
      <returns>Object que contiene el valor del parámetro que causó la <see cref="T:System.Exception" /> actual.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>Obtiene el mensaje de error y la representación de cadena del valor del argumento no válido. Si el valor del argumento es nulo, obtiene sólo el mensaje de error.</summary>
      <returns>Mensaje de texto para esta excepción.El valor de la propiedad adopta una de estas dos formas:Condition Valor La propiedad <paramref name="actualValue" /> es null. Cadena <paramref name="message" /> pasada al constructor. <paramref name="actualValue" /> no es null. Cadena <paramref name="message" /> que se anexa junto con la representación de cadena del valor del argumento no válido. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>Excepción producida a causa de los errores de una operación aritmética, de conversión de tipo o de conversión de otra naturaleza.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArithmeticException" />.</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArithmeticException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error. </param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArithmeticException" /> con un mensaje de error especificado y una referencia a la excepción interna que causa esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula, se provoca la excepción actual en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.Array">
      <summary>Proporciona métodos para la creación, manipulación, búsqueda y ordenación de matrices, por lo tanto, sirve como clase base para todas las matrices de Common Language Runtime.Para examinar el código fuente de .NET Framework para este tipo, consulte el fuente de referencia de.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>Busca un valor en un intervalo de elementos de una matriz unidimensional y ordenada, utilizando la interfaz <see cref="T:System.IComparable" /> implementada por cada elemento de la matriz y por el valor especificado.</summary>
      <returns>Índice del objeto <paramref name="value" /> especificado en la matriz <paramref name="array" /> especificada, si se encuentra el objeto <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es menor que uno o varios elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del primer elemento que sea mayor que <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es mayor que cualquiera de los elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del último elemento más uno.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional y ordenada en la que se va a buscar.</param>
      <param name="index">Índice inicial del intervalo en el que se va a buscar.</param>
      <param name="length">Longitud del intervalo en el que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de <paramref name="array" />.o bien<paramref name="value" /> es de un tipo que no es compatible con los elementos de <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IComparable" /> y la búsqueda encuentra un elemento que no implementa la interfaz <see cref="T:System.IComparable" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>Busca un valor en un intervalo de elementos de una matriz unidimensional y ordenada, utilizando la interfaz <see cref="T:System.Collections.IComparer" /> especificada.</summary>
      <returns>Índice del objeto <paramref name="value" /> especificado en la matriz <paramref name="array" /> especificada, si se encuentra el objeto <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es menor que uno o varios elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del primer elemento que sea mayor que <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es mayor que cualquiera de los elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del último elemento más uno.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional y ordenada en la que se va a buscar.</param>
      <param name="index">Índice inicial del intervalo en el que se va a buscar.</param>
      <param name="length">Longitud del intervalo en el que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar.</param>
      <param name="comparer">Implementación de <see cref="T:System.Collections.IComparer" /> que se va a usar al comparar elementos.o bien null para utilizar la implementación de <see cref="T:System.IComparable" /> de cada elemento.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de <paramref name="array" />.o bien<paramref name="comparer" /> es null y <paramref name="value" /> es de un tipo que no es compatible con los elementos de <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es null, <paramref name="value" /> no implementa la interfaz <see cref="T:System.IComparable" /> y la búsqueda encuentra un elemento que no implementa la interfaz <see cref="T:System.IComparable" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>Busca un elemento específico en toda una matriz unidimensional y ordenada, utilizando la interfaz <see cref="T:System.IComparable" /> implementada por cada elemento de la matriz y por el objeto especificado.</summary>
      <returns>Índice del objeto <paramref name="value" /> especificado en la matriz <paramref name="array" /> especificada, si se encuentra el objeto <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es menor que uno o varios elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del primer elemento que sea mayor que <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es mayor que cualquiera de los elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del último elemento más uno.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional y ordenada en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> es de un tipo que no es compatible con los elementos de <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IComparable" /> y la búsqueda encuentra un elemento que no implementa la interfaz <see cref="T:System.IComparable" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>Busca un valor por toda una matriz unidimensional y ordenada, utilizando la interfaz <see cref="T:System.Collections.IComparer" /> especificada.</summary>
      <returns>Índice del objeto <paramref name="value" /> especificado en la matriz <paramref name="array" /> especificada, si se encuentra el objeto <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es menor que uno o varios elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del primer elemento que sea mayor que <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es mayor que cualquiera de los elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del último elemento más uno.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional y ordenada en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar.</param>
      <param name="comparer">Implementación de <see cref="T:System.Collections.IComparer" /> que se va a usar al comparar elementos.o bien null para utilizar la implementación de <see cref="T:System.IComparable" /> de cada elemento.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> es null y <paramref name="value" /> es de un tipo que no es compatible con los elementos de <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es null, <paramref name="value" /> no implementa la interfaz <see cref="T:System.IComparable" /> y la búsqueda encuentra un elemento que no implementa la interfaz <see cref="T:System.IComparable" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>Busca un valor en un intervalo de elementos de una matriz unidimensional y ordenada, utilizando la interfaz genérica <see cref="T:System.IComparable`1" /> implementada por cada elemento de la <see cref="T:System.Array" /> y por el valor especificado.</summary>
      <returns>Índice del objeto <paramref name="value" /> especificado en la matriz <paramref name="array" /> especificada, si se encuentra el objeto <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es menor que uno o varios elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del primer elemento que sea mayor que <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es mayor que cualquiera de los elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del último elemento más uno.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> de base cero, unidimensional y ordenada en la que se va a buscar. </param>
      <param name="index">Índice inicial del intervalo en el que se va a buscar.</param>
      <param name="length">Longitud del intervalo en el que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de <paramref name="array" />.o bien<paramref name="value" /> es de un tipo que no es compatible con los elementos de <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> no implementa la interfaz genérica <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Busca un valor en un intervalo de elementos de una matriz unidimensional y ordenada, utilizando la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" /> especificada.</summary>
      <returns>Índice del objeto <paramref name="value" /> especificado en la matriz <paramref name="array" /> especificada, si se encuentra el objeto <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es menor que uno o varios elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del primer elemento que sea mayor que <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es mayor que cualquiera de los elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del último elemento más uno.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> de base cero, unidimensional y ordenada en la que se va a buscar. </param>
      <param name="index">Índice inicial del intervalo en el que se va a buscar.</param>
      <param name="length">Longitud del intervalo en el que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar.</param>
      <param name="comparer">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a usar al comparar elementos.o bien null para utilizar la implementación de <see cref="T:System.IComparable`1" /> de cada elemento.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de <paramref name="array" />.o bien<paramref name="comparer" /> es null y <paramref name="value" /> es de un tipo que no es compatible con los elementos de <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es null, y <paramref name="T" /> no implementa la interfaz genérica <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>Busca un elemento específico en toda una matriz unidimensional y ordenada, utilizando la interfaz genérica <see cref="T:System.IComparable`1" /> implementada por cada elemento de la <see cref="T:System.Array" /> y por el objeto especificado.</summary>
      <returns>Índice del objeto <paramref name="value" /> especificado en la matriz <paramref name="array" /> especificada, si se encuentra el objeto <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es menor que uno o varios elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del primer elemento que sea mayor que <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es mayor que cualquiera de los elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del último elemento más uno.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> de base cero, unidimensional y ordenada en la que se va a buscar. </param>
      <param name="value">Objeto que se va a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> no implementa la interfaz genérica <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>Busca un valor por toda una matriz unidimensional y ordenada, utilizando la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" /> especificada.</summary>
      <returns>Índice del objeto <paramref name="value" /> especificado en la matriz <paramref name="array" /> especificada, si se encuentra el objeto <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es menor que uno o varios elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del primer elemento que sea mayor que <paramref name="value" />.Si no se encuentra <paramref name="value" /> y <paramref name="value" /> es mayor que cualquiera de los elementos de <paramref name="array" />, un número negativo que es el complemento bit a bit del índice del último elemento más uno.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> de base cero, unidimensional y ordenada en la que se va a buscar.  </param>
      <param name="value">Objeto que se va a buscar.</param>
      <param name="comparer">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a usar al comparar elementos.o bien null para utilizar la implementación de <see cref="T:System.IComparable`1" /> de cada elemento.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> es null y <paramref name="value" /> es de un tipo que no es compatible con los elementos de <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es null, y <paramref name="T" /> no implementa la interfaz genérica <see cref="T:System.IComparable`1" /></exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>Establece un intervalo de elementos de una matriz en el valor predeterminado de cada tipo de elemento.</summary>
      <param name="array">La matriz cuyos elementos deben borrarse.</param>
      <param name="index">Índice inicial del intervalo de elementos que se va a borrar.</param>
      <param name="length">Número de elementos que se van a borrar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.o bien<paramref name="length" /> es menor que cero.o bienLa suma de <paramref name="index" /> y <paramref name="length" /> es mayor que el tamaño de <paramref name="array" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Clone">
      <summary>Crea una copia superficial de la colección <see cref="T:System.Array" />.</summary>
      <returns>Copia superficial de la colección <see cref="T:System.Array" />.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copia un intervalo de elementos de una matriz <see cref="T:System.Array" /> comenzando en el índice de origen especificado y los pega en otra matriz <see cref="T:System.Array" /> comenzando en el índice de destino especificado.Garantiza que se deshacen todos los cambios si la copia no se realiza de forma totalmente correcta.</summary>
      <param name="sourceArray">
        <see cref="T:System.Array" /> que contiene los datos que se van a copiar.</param>
      <param name="sourceIndex">Entero de 32 bits que representa el índice de <paramref name="sourceArray" /> donde comienza la copia.</param>
      <param name="destinationArray">
        <see cref="T:System.Array" /> que recibe los datos.</param>
      <param name="destinationIndex">Entero de 32 bits que representa el índice de <paramref name="destinationArray" /> donde comienza el almacenamiento.</param>
      <param name="length">Entero de 32 bits que representa el número de elementos que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="sourceArray" /> es null.o bienEl valor de <paramref name="destinationArray" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> y <paramref name="destinationArray" /> tienen rangos distintos.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">El tipo <paramref name="sourceArray" /> ni es igual, ni se deriva del tipo <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.InvalidCastException">Al menos un elemento de <paramref name="sourceArray" /> no puede convertirse en el tipo de <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> es menor que el límite inferior de la primera dimensión de <paramref name="sourceArray" />.o bien<paramref name="destinationIndex" /> es menor que el límite inferior de la primera dimensión de <paramref name="destinationArray" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> es mayor que el número de elementos desde <paramref name="sourceIndex" /> hasta el final de <paramref name="sourceArray" />.o bien<paramref name="length" /> es mayor que el número de elementos desde <paramref name="destinationIndex" /> hasta el final de <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>Copia un intervalo de elementos de una matriz <see cref="T:System.Array" /> comenzando en el primer elemento y los pega en otra matriz <see cref="T:System.Array" /> comenzando en el primer elemento.La longitud se especifica como un entero de 32 bits.</summary>
      <param name="sourceArray">
        <see cref="T:System.Array" /> que contiene los datos que se van a copiar.</param>
      <param name="destinationArray">
        <see cref="T:System.Array" /> que recibe los datos.</param>
      <param name="length">Entero de 32 bits que representa el número de elementos que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="sourceArray" /> es null.o bienEl valor de <paramref name="destinationArray" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> y <paramref name="destinationArray" /> tienen rangos distintos.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> y <paramref name="destinationArray" /> son matrices de tipos incompatibles.</exception>
      <exception cref="T:System.InvalidCastException">Al menos un elemento de <paramref name="sourceArray" /> no puede convertirse en el tipo de <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> es mayor que el número de elementos de <paramref name="sourceArray" />.o bien<paramref name="length" /> es mayor que el número de elementos de <paramref name="destinationArray" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copia un intervalo de elementos de una matriz <see cref="T:System.Array" /> comenzando en el índice de origen especificado y los pega en otra matriz <see cref="T:System.Array" /> comenzando en el índice de destino especificado.La longitud y los índices se especifican como enteros de 32 bits.</summary>
      <param name="sourceArray">
        <see cref="T:System.Array" /> que contiene los datos que se van a copiar.</param>
      <param name="sourceIndex">Entero de 32 bits que representa el índice de <paramref name="sourceArray" /> donde comienza la copia.</param>
      <param name="destinationArray">
        <see cref="T:System.Array" /> que recibe los datos.</param>
      <param name="destinationIndex">Entero de 32 bits que representa el índice de <paramref name="destinationArray" /> donde comienza el almacenamiento.</param>
      <param name="length">Entero de 32 bits que representa el número de elementos que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="sourceArray" /> es null.o bienEl valor de <paramref name="destinationArray" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> y <paramref name="destinationArray" /> tienen rangos distintos.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> y <paramref name="destinationArray" /> son matrices de tipos incompatibles.</exception>
      <exception cref="T:System.InvalidCastException">Al menos un elemento de <paramref name="sourceArray" /> no puede convertirse en el tipo de <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> es menor que el límite inferior de la primera dimensión de <paramref name="sourceArray" />.o bien<paramref name="destinationIndex" /> es menor que el límite inferior de la primera dimensión de <paramref name="destinationArray" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> es mayor que el número de elementos desde <paramref name="sourceIndex" /> hasta el final de <paramref name="sourceArray" />.o bien<paramref name="length" /> es mayor que el número de elementos desde <paramref name="destinationIndex" /> hasta el final de <paramref name="destinationArray" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>Copia todos los elementos de la matriz unidimensional actual en la matriz unidimensional especificada, empezando en el índice especificado de la matriz de destino.El índice se especifica como un entero de 32 bits.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la matriz actual.</param>
      <param name="index">Entero de 32 bits que representa el índice de <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.o bienEl número de elementos de la matriz de origen es mayor que el número de elementos disponibles desde el <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">El tipo de la interfaz <see cref="T:System.Array" /> de origen no se puede convertir automáticamente al tipo de la matriz <paramref name="array" /> de destino.</exception>
      <exception cref="T:System.RankException">La matriz de origen es multidimensional.</exception>
      <exception cref="T:System.InvalidCastException">Al menos un elemento del objeto <see cref="T:System.Array" /> de origen no puede convertirse en el tipo del parámetro <paramref name="array" /> de destino.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>Crea una matriz <see cref="T:System.Array" /> unidimensional de la longitud y el tipo <see cref="T:System.Type" /> especificados, con una indización de base cero.</summary>
      <returns>Nueva matriz <see cref="T:System.Array" /> unidimensional de la longitud y el tipo <see cref="T:System.Type" /> especificados, utilizando una indización de base cero.</returns>
      <param name="elementType">
        <see cref="T:System.Type" /> de la matriz <see cref="T:System.Array" /> que se va a crear.</param>
      <param name="length">Tamaño de la matriz <see cref="T:System.Array" /> que se va a crear.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="elementType" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> no es un <see cref="T:System.Type" /> válido.</exception>
      <exception cref="T:System.NotSupportedException">No se admite <paramref name="elementType" />.Por ejemplo, no se admite <see cref="T:System.Void" />.o bien<paramref name="elementType" /> es un tipo genérico abierto.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> es menor que cero.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>Crea una matriz <see cref="T:System.Array" /> multidimensional de las longitudes de dimensión y el tipo <see cref="T:System.Type" /> especificados, con una indización de base cero.Las longitudes de dimensión se especifican en una matriz de enteros de 32 bits.</summary>
      <returns>Nueva matriz <see cref="T:System.Array" /> multidimensional del tipo <see cref="T:System.Type" /> especificado con la longitud especificada para cada dimensión, utilizando una indización de base cero.</returns>
      <param name="elementType">
        <see cref="T:System.Type" /> de la matriz <see cref="T:System.Array" /> que se va a crear.</param>
      <param name="lengths">Matriz de enteros de 32 bits que representa el tamaño de cada una de las dimensiones de <see cref="T:System.Array" /> que se van a crear.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="elementType" /> es null.o bienEl valor de <paramref name="lengths" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> no es un <see cref="T:System.Type" /> válido.o bienLa matriz <paramref name="lengths" /> contiene menos de un elemento.</exception>
      <exception cref="T:System.NotSupportedException">No se admite <paramref name="elementType" />.Por ejemplo, no se admite <see cref="T:System.Void" />.o bien<paramref name="elementType" /> es un tipo genérico abierto.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Cualquier valor de <paramref name="lengths" /> es menor que cero.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>Crea una matriz <see cref="T:System.Array" /> multidimensional de las longitudes de dimensión y el tipo <see cref="T:System.Type" /> especificados, con los límites inferiores especificados.</summary>
      <returns>Nueva matriz <see cref="T:System.Array" /> multidimensional del tipo <see cref="T:System.Type" /> especificado con la longitud y los límites inferiores especificados para cada dimensión.</returns>
      <param name="elementType">
        <see cref="T:System.Type" /> de la matriz <see cref="T:System.Array" /> que se va a crear.</param>
      <param name="lengths">Matriz unidimensional que contiene el tamaño de cada una de las dimensiones de la matriz <see cref="T:System.Array" /> que se va a crear.</param>
      <param name="lowerBounds">Matriz unidimensional que contiene el límite inferior (índice inicial) de cada una de las dimensiones de la matriz <see cref="T:System.Array" /> que se va a crear.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="elementType" /> es null.o bienEl valor de <paramref name="lengths" /> es null.o bienEl valor de <paramref name="lowerBounds" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> no es un <see cref="T:System.Type" /> válido.o bienLa matriz <paramref name="lengths" /> contiene menos de un elemento.o bienLas matrices <paramref name="lengths" /> y <paramref name="lowerBounds" /> no contienen el mismo número de elementos.</exception>
      <exception cref="T:System.NotSupportedException">No se admite <paramref name="elementType" />.Por ejemplo, no se admite <see cref="T:System.Void" />.o bien<paramref name="elementType" /> es un tipo genérico abierto.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Cualquier valor de <paramref name="lengths" /> es menor que cero.o bienCualquier valor de <paramref name="lowerBounds" /> es demasiado grande, tanto que la suma del límite inferior y de la longitud de una dimensión es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Empty``1">
      <summary>Devuelve una matriz vacía.</summary>
      <returns>Devuelve un valor vacío <see cref="T:System.Array" />.</returns>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
    </member>
    <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
      <summary>Determina si la matriz especificada contiene elementos que coinciden con las condiciones definidas por el predicado especificado.</summary>
      <returns>true si <paramref name="array" /> contiene uno o varios elementos que coinciden con las condiciones definidas por el predicado especificado; de lo contrario, false.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="match">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones de los elementos que se van a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="match" /> es null.</exception>
    </member>
    <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la primera aparición en toda la matriz <see cref="T:System.Array" />.</summary>
      <returns>Primer elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
      <param name="array">Matriz unidimensional de base cero en la que se va a buscar.</param>
      <param name="match">Predicado que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="match" /> es null.</exception>
    </member>
    <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
      <summary>Recupera todos los elementos que coinciden con las condiciones definidas por el predicado especificado.</summary>
      <returns>Matriz <see cref="T:System.Array" /> que contiene todos los elementos que coinciden con las condiciones definidas por el predicado especificado, si se encuentra alguno; de lo contrario, una matriz <see cref="T:System.Array" /> vacía.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="match">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones de los elementos que se van a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="match" /> es null.</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la matriz <see cref="T:System.Array" /> que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <returns>Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="match" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.o bien<paramref name="count" /> es menor que cero.o bien<paramref name="startIndex" /> y <paramref name="count" /> no especifican una sección válida de <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la matriz <see cref="T:System.Array" /> que va desde el índice especificado hasta el último elemento.</summary>
      <returns>Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda.</param>
      <param name="match">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="match" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en toda la matriz <see cref="T:System.Array" />.</summary>
      <returns>Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="match">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="match" /> es null.</exception>
    </member>
    <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la última aparición en toda la matriz <see cref="T:System.Array" />.</summary>
      <returns>Último elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="match">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="match" /> es null.</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la matriz <see cref="T:System.Array" /> que contiene el número especificado de elementos y termina en el índice especificado.</summary>
      <returns>Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="match" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.o bien<paramref name="count" /> es menor que cero.o bien<paramref name="startIndex" /> y <paramref name="count" /> no especifican una sección válida de <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la matriz <see cref="T:System.Array" /> que va desde el primer elemento hasta el índice especificado.</summary>
      <returns>Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="match">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="match" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en toda la matriz <see cref="T:System.Array" />.</summary>
      <returns>Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="match">Delegado <see cref="T:System.Predicate`1" /> que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="match" /> es null.</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>Devuelve una interfaz <see cref="T:System.Collections.IEnumerator" /> para la interfaz <see cref="T:System.Array" />.</summary>
      <returns>Estructura <see cref="T:System.Collections.IEnumerator" /> para la colección <see cref="T:System.Array" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>Obtiene un entero de 32 bits que representa el número de elementos de la dimensión especificada de <see cref="T:System.Array" />.</summary>
      <returns>Entero de 32 bits que representa el número de elementos de la dimensión especificada.</returns>
      <param name="dimension">Dimensión de base cero de <see cref="T:System.Array" /> cuya longitud debe determinarse.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> es menor que cero.o bien<paramref name="dimension" /> es igual o mayor que <see cref="P:System.Array.Rank" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>Obtiene el índice del primer elemento de la dimensión especificada en la matriz.</summary>
      <returns>Índice del primer elemento de la dimensión especificada en la matriz.</returns>
      <param name="dimension">Dimensión de base cero de la matriz cuyo índice de inicio debe determinarse.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> es menor que cero.o bien<paramref name="dimension" /> es igual o mayor que <see cref="P:System.Array.Rank" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>Obtiene el índice del último elemento de la dimensión especificada en la matriz.</summary>
      <returns>El índice del último elemento de la dimensión especificada en la matriz o -1 si la dimensión especificada está vacía. </returns>
      <param name="dimension">Dimensión de base cero de la matriz cuyo límite superior debe determinarse.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> es menor que cero.o bien<paramref name="dimension" /> es igual o mayor que <see cref="P:System.Array.Rank" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>Obtiene el valor de la posición especificada de la matriz <see cref="T:System.Array" /> unidimensional.El índice se especifica como un entero de 32 bits.</summary>
      <returns>Valor de la posición especificada de la matriz <see cref="T:System.Array" /> unidimensional.</returns>
      <param name="index">Entero de 32 bits que representa la posición del elemento <see cref="T:System.Array" /> que se va a obtener.</param>
      <exception cref="T:System.ArgumentException">La matriz <see cref="T:System.Array" /> actual no tiene exactamente una dimensión.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> se encuentra fuera del intervalo de índices válidos para la matriz <see cref="T:System.Array" /> actual.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>Obtiene el valor de la posición especificada de la matriz <see cref="T:System.Array" /> multidimensional.Los índices se especifican en forma de una matriz de enteros de 32 bits.</summary>
      <returns>Valor de la posición especificada de la matriz <see cref="T:System.Array" /> multidimensional.</returns>
      <param name="indices">Matriz unidimensional de enteros de 32 bits que representan los índices que especifican la posición del elemento <see cref="T:System.Array" /> que se va a obtener.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="indices" /> es null.</exception>
      <exception cref="T:System.ArgumentException">El número de dimensiones de la matriz <see cref="T:System.Array" /> actual no es igual al número de elementos de <paramref name="indices" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Cualquier elemento de <paramref name="indices" /> se encuentra fuera del intervalo de índices válidos para la dimensión correspondiente de la matriz <see cref="T:System.Array" /> actual.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>Busca el objeto especificado y devuelve el índice de su primera aparición en una matriz unidimensional. </summary>
      <returns>El índice de la primera aparición de <paramref name="value" /> en <paramref name="array" />, si se encuentra; de lo contrario, el límite inferior de la matriz menos 1.</returns>
      <param name="array">Matriz unidimensional en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>Busca el objeto especificado en un intervalo de elementos de la matriz unidimensional y devuelve el índice de su primera aparición.El intervalo se extiende desde un índice especificado hasta el final de la matriz.</summary>
      <returns>El índice de la primera aparición de <paramref name="value" />, si se encuentra dentro del intervalo de elementos de <paramref name="array" /> que se extiende desde <paramref name="startIndex" /> al último elemento; de lo contrario, el límite inferior de la matriz menos 1.</returns>
      <param name="array">Matriz unidimensional en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <param name="startIndex">Índice inicial de la búsqueda.0 (cero) es válido en una matriz vacía.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>Busca el objeto especificado en un intervalo de elementos de una matriz unidimensional y devuelve el índice de su primera aparición.El intervalo se extiende desde un índice especificado durante un número especificado de elementos.</summary>
      <returns>El índice de la primera aparición de <paramref name="value" />, si se encuentra, en la <paramref name="array" /> del índice <paramref name="startIndex" /> a <paramref name="startIndex" /> + <paramref name="count" /> - 1; de lo contrario, el límite inferior de la matriz menos 1.</returns>
      <param name="array">Matriz unidimensional en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <param name="startIndex">Índice inicial de la búsqueda.0 (cero) es válido en una matriz vacía.</param>
      <param name="count">Número de elementos que se van a buscar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.o bien<paramref name="count" /> es menor que cero.o bien<paramref name="startIndex" /> y <paramref name="count" /> no especifican una sección válida de <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>Busca el objeto especificado y devuelve el índice de su primera aparición en una matriz unidimensional.</summary>
      <returns>Índice de base cero de la primera aparición de <paramref name="value" /> en todo el <paramref name="array" />, si se encuentra; en caso contrario, de -1.</returns>
      <param name="array">Matriz unidimensional de base cero en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>Busca el objeto especificado en un intervalo de elementos de la matriz unidimensional y devuelve el índice de su primera aparición.El intervalo se extiende desde un índice especificado hasta el final de la matriz.</summary>
      <returns>Índice de base cero de la primera aparición de <paramref name="value" /> dentro del intervalo de elementos de la matriz <paramref name="array" /> que abarca desde <paramref name="startIndex" /> hasta el último elemento, si se encuentra; de lo contrario, -1.</returns>
      <param name="array">Matriz unidimensional de base cero en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda.0 (cero) es válido en una matriz vacía.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>Busca el objeto especificado en un intervalo de elementos de la matriz unidimensional y devuelve el índice de su primera aparición.El intervalo se extiende desde un índice especificado durante un número especificado de elementos.</summary>
      <returns>Índice de base cero de la primera aparición de <paramref name="value" /> dentro del intervalo de elementos de la matriz <paramref name="array" /> que comienza en <paramref name="startIndex" /> y contiene el número de elementos especificados en <paramref name="count" />, si se encuentra; de lo contrario, -1.</returns>
      <param name="array">Matriz unidimensional de base cero en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda.0 (cero) es válido en una matriz vacía.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.o bien<paramref name="count" /> es menor que cero.o bien<paramref name="startIndex" /> y <paramref name="count" /> no especifican una sección válida de <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>Inicializa todos los elementos de la matriz <see cref="T:System.Array" /> de tipo de valor llamando al constructor predeterminado del tipo de valor.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>Busca el objeto especificado y devuelve el índice de la última aparición en toda la matriz <see cref="T:System.Array" /> unidimensional.</summary>
      <returns>Índice de la última aparición de <paramref name="value" /> en toda la matriz <paramref name="array" />, si se encuentra; en caso contrario, límite inferior de la matriz menos uno.</returns>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de la última aparición en el intervalo de elementos de la matriz <see cref="T:System.Array" /> unidimensional que se extiende desde el primer elemento hasta el índice especificado.</summary>
      <returns>Índice de la última aparición de <paramref name="value" /> en el intervalo de elementos de <paramref name="array" /> que se extiende desde el primer elemento hasta <paramref name="startIndex" />, si se encuentra; en caso contrario, límite inferior de la matriz menos uno.</returns>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <param name="startIndex">Índice inicial de la búsqueda hacia atrás.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de la última aparición en el intervalo de elementos de la matriz <see cref="T:System.Array" /> unidimensional que contiene el número de elementos concretado y termina en el índice especificado.</summary>
      <returns>Índice de la última aparición de <paramref name="value" /> en el intervalo de elementos de <paramref name="array" /> que contiene el número de elementos especificado en <paramref name="count" /> y termina en <paramref name="startIndex" />, si se encuentra; en caso contrario, límite inferior de la matriz menos uno.</returns>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <param name="startIndex">Índice inicial de la búsqueda hacia atrás.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.o bien<paramref name="count" /> es menor que cero.o bien<paramref name="startIndex" /> y <paramref name="count" /> no especifican una sección válida de <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>Busca el objeto especificado y devuelve el índice de la última aparición en toda la matriz <see cref="T:System.Array" />.</summary>
      <returns>Índice de base cero de la última aparición de <paramref name="value" /> en toda la <paramref name="array" />, si se encuentra; en caso contrario, -1.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de la última aparición en el intervalo de elementos de la matriz <see cref="T:System.Array" /> que se extiende desde el primer elemento hasta el índice especificado.</summary>
      <returns>Índice de base cero de la última aparición de <paramref name="value" /> dentro del intervalo de elementos de la matriz <paramref name="array" /> que abarca desde el primer elemento hasta <paramref name="startIndex" />, si se encuentra; de lo contrario, -1.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de la última aparición en el intervalo de elementos de la matriz <see cref="T:System.Array" /> que contiene el número de elementos concretado y termina en el índice especificado.</summary>
      <returns>índice de base cero de la última aparición de <paramref name="value" /> dentro del intervalo de elementos de la matriz <paramref name="array" /> que contiene el número de elementos especificado en <paramref name="count" /> y termina en <paramref name="startIndex" />, si se encuentra; de lo contrario es -1.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar en <paramref name="array" />.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> se encuentra fuera del intervalo de índices válidos para <paramref name="array" />.o bien<paramref name="count" /> es menor que cero.o bien<paramref name="startIndex" /> y <paramref name="count" /> no especifican una sección válida de <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>Obtiene un entero de 32 bits que representa el número total de elementos de todas las dimensiones de <see cref="T:System.Array" />.</summary>
      <returns>Entero de 32 bits que representa el número total de elementos en todas las dimensiones de <see cref="T:System.Array" />; es cero si no hay elementos en la matriz.</returns>
      <exception cref="T:System.OverflowException">La matriz es multidimensional y contiene más de <see cref="F:System.Int32.MaxValue" /> elementos.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Array.Rank">
      <summary>Obtiene el rango (número de dimensiones) de <see cref="T:System.Array" />.Por ejemplo, una matriz unidimensional devuelve 1, una matriz bidimensional devuelve 2, y así sucesivamente.</summary>
      <returns>Rango (número de dimensiones) de <see cref="T:System.Array" />.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>Cambia el número de elementos de una matriz unidimensional al nuevo tamaño especificado.</summary>
      <param name="array">Matriz unidimensional de base cero a la que se va a cambiar el tamaño, o null para crear una nueva matriz con el tamaño especificado.</param>
      <param name="newSize">Tamaño de la nueva matriz.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>Invierte la secuencia de los elementos de toda la matriz <see cref="T:System.Array" /> unidimensional.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que se va a invertir.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null. </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>Invierte la secuencia de los elementos de un intervalo de elementos de la matriz <see cref="T:System.Array" /> unidimensional.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que se va a invertir.</param>
      <param name="index">Índice inicial de la sección que se va a invertir.</param>
      <param name="length">Número de elementos de la sección que se van a invertir.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de <paramref name="array" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>Establece un valor en el elemento situado en la posición especificada de una matriz <see cref="T:System.Array" /> unidimensional.El índice se especifica como un entero de 32 bits.</summary>
      <param name="value">Nuevo valor para el elemento especificado.</param>
      <param name="index">Entero de 32 bits que representa la posición del elemento <see cref="T:System.Array" /> que se va a establecer.</param>
      <exception cref="T:System.ArgumentException">La matriz <see cref="T:System.Array" /> actual no tiene exactamente una dimensión.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no se puede convertir en el tipo de elemento de la actual matriz <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> se encuentra fuera del intervalo de índices válidos para la matriz <see cref="T:System.Array" /> actual.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>Establece un valor en el elemento situado en la posición especificada de una matriz <see cref="T:System.Array" /> multidimensional.Los índices se especifican en forma de una matriz de enteros de 32 bits.</summary>
      <param name="value">Nuevo valor para el elemento especificado.</param>
      <param name="indices">Matriz unidimensional de enteros de 32 bits que representan los índices que especifican la posición del elemento que se va a establecer.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="indices" /> es null.</exception>
      <exception cref="T:System.ArgumentException">El número de dimensiones de la matriz <see cref="T:System.Array" /> actual no es igual al número de elementos de <paramref name="indices" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no se puede convertir en el tipo de elemento de la actual matriz <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Cualquier elemento de <paramref name="indices" /> se encuentra fuera del intervalo de índices válidos para la dimensión correspondiente de la matriz <see cref="T:System.Array" /> actual.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>Ordena los elementos de toda una matriz <see cref="T:System.Array" /> unidimensional utilizando la implementación de <see cref="T:System.IComparable" /> de cada elemento de la matriz <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que se va a ordenar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <exception cref="T:System.InvalidOperationException">Uno o varios elementos de <paramref name="array" /> no implementan la interfaz <see cref="T:System.IComparable" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array)">
      <summary>Ordena un par de objetos <see cref="T:System.Array" /> unidimensionales (uno contiene las claves y el otro contiene los elementos correspondientes) en función de las claves de la primera matriz <see cref="T:System.Array" /> utilizando la implementación de <see cref="T:System.IComparable" /> de cada clave.</summary>
      <param name="keys">
        <see cref="T:System.Array" /> unidimensional que contiene las claves que se van a ordenar.</param>
      <param name="items">Objeto <see cref="T:System.Array" /> unidimensional que contiene los elementos que se corresponden con cada una de las claves del objeto <see cref="T:System.Array" /> de <paramref name="keys" />.o biennull para ordenar solo el objeto <see cref="T:System.Array" /> de <paramref name="keys" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="keys" /> es null.</exception>
      <exception cref="T:System.RankException">La matriz <see cref="T:System.Array" /> de <paramref name="keys" /> es multidimensional.o bienLa matriz <see cref="T:System.Array" /> de <paramref name="items" /> es multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> no es null, y la longitud de <paramref name="keys" /> es mayor que la longitud de <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">Uno o varios elementos de la matriz <see cref="T:System.Array" /> de <paramref name="keys" /> no implementan la interfaz <see cref="T:System.IComparable" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>Ordena un par de objetos <see cref="T:System.Array" /> unidimensionales (uno contiene las claves y el otro contiene los elementos correspondientes) en función de las claves de la primera matriz <see cref="T:System.Array" /> utilizando la interfaz <see cref="T:System.Collections.IComparer" /> especificada.</summary>
      <param name="keys">
        <see cref="T:System.Array" /> unidimensional que contiene las claves que se van a ordenar.</param>
      <param name="items">Objeto <see cref="T:System.Array" /> unidimensional que contiene los elementos que se corresponden con cada una de las claves del objeto <see cref="T:System.Array" /> de <paramref name="keys" />.o biennull para ordenar solo el objeto <see cref="T:System.Array" /> de <paramref name="keys" />.</param>
      <param name="comparer">Implementación de <see cref="T:System.Collections.IComparer" /> que se va a usar al comparar elementos.o biennull para utilizar la implementación de <see cref="T:System.IComparable" /> de cada elemento.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="keys" /> es null.</exception>
      <exception cref="T:System.RankException">La matriz <see cref="T:System.Array" /> de <paramref name="keys" /> es multidimensional.o bienLa matriz <see cref="T:System.Array" /> de <paramref name="items" /> es multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> no es null, y la longitud de <paramref name="keys" /> es mayor que la longitud de <paramref name="items" />. o bienLa implementación de <paramref name="comparer" /> ha producido un error durante la ordenación.Por ejemplo, es posible que <paramref name="comparer" /> no devuelva 0 al comparar un elemento con sigo mismo.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es null, y uno o más elementos de <paramref name="keys" /><see cref="T:System.Array" /> no implementan la interfaz <see cref="T:System.IComparable" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)">
      <summary>Ordena un intervalo de elementos en un par de objetos <see cref="T:System.Array" /> unidimensionales (uno contiene las claves y el otro contiene los elementos correspondientes) en función de las claves de la primera matriz <see cref="T:System.Array" /> utilizando la implementación de <see cref="T:System.IComparable" /> de cada clave.</summary>
      <param name="keys">
        <see cref="T:System.Array" /> unidimensional que contiene las claves que se van a ordenar.</param>
      <param name="items">Objeto <see cref="T:System.Array" /> unidimensional que contiene los elementos que se corresponden con cada una de las claves del objeto <see cref="T:System.Array" /> de <paramref name="keys" />.o biennull para ordenar solo el objeto <see cref="T:System.Array" /> de <paramref name="keys" />.</param>
      <param name="index">Índice inicial del intervalo que se va a ordenar.</param>
      <param name="length">Número de elementos del intervalo que se va a ordenar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="keys" /> es null.</exception>
      <exception cref="T:System.RankException">La matriz <see cref="T:System.Array" /> de <paramref name="keys" /> es multidimensional.o bienLa matriz <see cref="T:System.Array" /> de <paramref name="items" /> es multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="keys" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> no es null, y la longitud de <paramref name="keys" /> es mayor que la longitud de <paramref name="items" />.o bien<paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido en la matriz <see cref="T:System.Array" /> de <paramref name="keys" />.o bien<paramref name="items" /> no es null, e <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de la matriz <see cref="T:System.Array" /> de <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">Uno o varios elementos de la matriz <see cref="T:System.Array" /> de <paramref name="keys" /> no implementan la interfaz <see cref="T:System.IComparable" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Ordena un intervalo de elementos de un par de objetos <see cref="T:System.Array" /> unidimensionales (uno contiene las claves y el otro contiene los elementos correspondientes) en función de las claves de la primera matriz <see cref="T:System.Array" /> utilizando la interfaz <see cref="T:System.Collections.IComparer" /> especificada.</summary>
      <param name="keys">
        <see cref="T:System.Array" /> unidimensional que contiene las claves que se van a ordenar.</param>
      <param name="items">Objeto <see cref="T:System.Array" /> unidimensional que contiene los elementos que se corresponden con cada una de las claves del objeto <see cref="T:System.Array" /> de <paramref name="keys" />.o biennull para ordenar solo el objeto <see cref="T:System.Array" /> de <paramref name="keys" />.</param>
      <param name="index">Índice inicial del intervalo que se va a ordenar.</param>
      <param name="length">Número de elementos del intervalo que se va a ordenar.</param>
      <param name="comparer">Implementación de <see cref="T:System.Collections.IComparer" /> que se va a usar al comparar elementos.o biennull para utilizar la implementación de <see cref="T:System.IComparable" /> de cada elemento.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="keys" /> es null.</exception>
      <exception cref="T:System.RankException">La matriz <see cref="T:System.Array" /> de <paramref name="keys" /> es multidimensional.o bienLa matriz <see cref="T:System.Array" /> de <paramref name="items" /> es multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="keys" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> no es null, y el límite inferior de <paramref name="keys" /> no coincide con el límite inferior de <paramref name="items" />.o bien<paramref name="items" /> no es null, y la longitud de <paramref name="keys" /> es mayor que la longitud de <paramref name="items" />.o bien<paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido en la matriz <see cref="T:System.Array" /> de <paramref name="keys" />.o bien<paramref name="items" /> no es null, e <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de la matriz <see cref="T:System.Array" /> de <paramref name="items" />. o bienLa implementación de <paramref name="comparer" /> ha producido un error durante la ordenación.Por ejemplo, es posible que <paramref name="comparer" /> no devuelva 0 al comparar un elemento con sigo mismo.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es null, y uno o más elementos de <paramref name="keys" /><see cref="T:System.Array" /> no implementan la interfaz <see cref="T:System.IComparable" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>Ordena los elementos de una matriz <see cref="T:System.Array" /> unidimensional utilizando la interfaz <see cref="T:System.Collections.IComparer" /> especificada.</summary>
      <param name="array">Matriz unidimensional que se va a ordenar.</param>
      <param name="comparer">Implementación que se va a usar al comparar elementos.o biennull para utilizar la implementación de <see cref="T:System.IComparable" /> de cada elemento.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <exception cref="T:System.InvalidOperationException">El valor de <paramref name="comparer" /> es null y uno o varios elementos de <paramref name="array" /> no implementan la interfaz <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException">La implementación de <paramref name="comparer" /> ha producido un error durante la ordenación.Por ejemplo, es posible que <paramref name="comparer" /> no devuelva 0 al comparar un elemento con sigo mismo.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>Ordena los elementos de un intervalo de elementos de una matriz <see cref="T:System.Array" /> unidimensional utilizando la implementación de <see cref="T:System.IComparable" /> de cada elemento de la matriz <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que se va a ordenar.</param>
      <param name="index">Índice inicial del intervalo que se va a ordenar.</param>
      <param name="length">Número de elementos del intervalo que se va a ordenar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">Uno o varios elementos de <paramref name="array" /> no implementan la interfaz <see cref="T:System.IComparable" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Ordena los elementos de un intervalo de elementos de una matriz <see cref="T:System.Array" /> unidimensional utilizando la interfaz <see cref="T:System.Collections.IComparer" /> especificada.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que se va a ordenar.</param>
      <param name="index">Índice inicial del intervalo que se va a ordenar.</param>
      <param name="length">Número de elementos del intervalo que se va a ordenar.</param>
      <param name="comparer">Implementación de <see cref="T:System.Collections.IComparer" /> que se va a usar al comparar elementos.o biennull para utilizar la implementación de <see cref="T:System.IComparable" /> de cada elemento.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de <paramref name="array" />. o bienLa implementación de <paramref name="comparer" /> ha producido un error durante la ordenación.Por ejemplo, es posible que <paramref name="comparer" /> no devuelva 0 al comparar un elemento con sigo mismo.</exception>
      <exception cref="T:System.InvalidOperationException">El valor de <paramref name="comparer" /> es null y uno o varios elementos de <paramref name="array" /> no implementan la interfaz <see cref="T:System.IComparable" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>Ordena los elementos de toda una matriz <see cref="T:System.Array" /> utilizando la implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> de cada elemento de <see cref="T:System.Array" />.</summary>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero que se va a ordenar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">Uno o varios elementos de <paramref name="array" /> no implementan la interfaz genérica <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>Ordena los elementos de una matriz <see cref="T:System.Array" /> utilizando la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" /> especificada.</summary>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero que se va a ordenar.</param>
      <param name="comparer">Implementación de la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a utilizar para comparar elementos o null si se va a utilizar la implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> de cada elemento.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">El valor de <paramref name="comparer" /> es null, y uno o varios elementos de <paramref name="array" /> no implementan la interfaz genérica <see cref="T:System.IComparable`1" />.</exception>
      <exception cref="T:System.ArgumentException">La implementación de <paramref name="comparer" /> ha producido un error durante la ordenación.Por ejemplo, es posible que <paramref name="comparer" /> no devuelva 0 al comparar un elemento con sigo mismo.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>Ordena los elementos de una matriz <see cref="T:System.Array" /> utilizando el delegado <see cref="T:System.Comparison`1" /> especificado.</summary>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero que se va a ordenar.</param>
      <param name="comparison">
        <see cref="T:System.Comparison`1" /> que se va a utilizar al comparar elementos.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="comparison" /> es null.</exception>
      <exception cref="T:System.ArgumentException">La implementación de <paramref name="comparison" /> ha producido un error durante la ordenación.Por ejemplo, es posible que <paramref name="comparison" /> no devuelva 0 al comparar un elemento con sigo mismo.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>Ordena los elementos de un intervalo de elementos de una matriz <see cref="T:System.Array" /> utilizando la implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> de cada elemento de <see cref="T:System.Array" />.</summary>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero que se va a ordenar.</param>
      <param name="index">Índice inicial del intervalo que se va a ordenar.</param>
      <param name="length">Número de elementos del intervalo que se va a ordenar.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">Uno o varios elementos de <paramref name="array" /> no implementan la interfaz genérica <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>Ordena los elementos de un intervalo de elementos de una matriz <see cref="T:System.Array" /> utilizando la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero que se va a ordenar.</param>
      <param name="index">Índice inicial del intervalo que se va a ordenar.</param>
      <param name="length">Número de elementos del intervalo que se va a ordenar.</param>
      <param name="comparer">Implementación de la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a utilizar para comparar elementos o null si se va a utilizar la implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> de cada elemento.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de <paramref name="array" />. o bienLa implementación de <paramref name="comparer" /> ha producido un error durante la ordenación.Por ejemplo, es posible que <paramref name="comparer" /> no devuelva 0 al comparar un elemento con sigo mismo.</exception>
      <exception cref="T:System.InvalidOperationException">El valor de <paramref name="comparer" /> es null, y uno o varios elementos de <paramref name="array" /> no implementan la interfaz genérica <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <summary>Ordena un par de objetos <see cref="T:System.Array" /> (uno contiene las claves y el otro contiene los elementos correspondientes) en función de las claves de la primera matriz <see cref="T:System.Array" /> utilizando la implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> de cada clave.</summary>
      <param name="keys">Matriz <see cref="T:System.Array" /> unidimensional de base cero que contiene las claves que se van a ordenar. </param>
      <param name="items">Matriz <see cref="T:System.Array" /> unidimensional de base cero que contiene los elementos que se corresponden con las claves del parámetro <paramref name="keys" />; o null para ordenar solo <paramref name="keys" />.</param>
      <typeparam name="TKey">Tipo de los elementos de la matriz de claves.</typeparam>
      <typeparam name="TValue">Tipo de los elementos de la matriz de elementos.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="keys" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> no es null, y el límite inferior de <paramref name="keys" /> no coincide con el límite inferior de <paramref name="items" />.o bien<paramref name="items" /> no es null, y la longitud de <paramref name="keys" /> es mayor que la longitud de <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">Uno o varios elementos de la matriz <see cref="T:System.Array" /> de <paramref name="keys" /> no implementan la interfaz genérica <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <summary>Ordena un par de objetos <see cref="T:System.Array" /> (uno contiene las claves y el otro contiene los elementos correspondientes) en función de las claves de la primera matriz <see cref="T:System.Array" /> utilizando la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" /> especificada.</summary>
      <param name="keys">Matriz <see cref="T:System.Array" /> unidimensional de base cero que contiene las claves que se van a ordenar. </param>
      <param name="items">Matriz <see cref="T:System.Array" /> unidimensional de base cero que contiene los elementos que se corresponden con las claves del parámetro <paramref name="keys" />; o null para ordenar solo <paramref name="keys" />.</param>
      <param name="comparer">Implementación de la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a utilizar para comparar elementos o null si se va a utilizar la implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> de cada elemento.</param>
      <typeparam name="TKey">Tipo de los elementos de la matriz de claves.</typeparam>
      <typeparam name="TValue">Tipo de los elementos de la matriz de elementos.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="keys" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> no es null, y el límite inferior de <paramref name="keys" /> no coincide con el límite inferior de <paramref name="items" />.o bien<paramref name="items" /> no es null, y la longitud de <paramref name="keys" /> es mayor que la longitud de <paramref name="items" />.o bienLa implementación de <paramref name="comparer" /> ha producido un error durante la ordenación.Por ejemplo, es posible que <paramref name="comparer" /> no devuelva 0 al comparar un elemento con sigo mismo.</exception>
      <exception cref="T:System.InvalidOperationException">El valor de <paramref name="comparer" /> es null, y uno o varios elementos de la matriz <see cref="T:System.Array" /> de <paramref name="keys" /> no implementan la interfaz genérica <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <summary>Ordena un intervalo de elementos en un par de objetos <see cref="T:System.Array" /> (uno contiene las claves y el otro contiene los elementos correspondientes) en función de las claves de la primera matriz <see cref="T:System.Array" /> utilizando la implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> de cada clave.</summary>
      <param name="keys">Matriz <see cref="T:System.Array" /> unidimensional de base cero que contiene las claves que se van a ordenar. </param>
      <param name="items">Matriz <see cref="T:System.Array" /> unidimensional de base cero que contiene los elementos que se corresponden con las claves del parámetro <paramref name="keys" />; o null para ordenar solo <paramref name="keys" />.</param>
      <param name="index">Índice inicial del intervalo que se va a ordenar.</param>
      <param name="length">Número de elementos del intervalo que se va a ordenar.</param>
      <typeparam name="TKey">Tipo de los elementos de la matriz de claves.</typeparam>
      <typeparam name="TValue">Tipo de los elementos de la matriz de elementos.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="keys" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="keys" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> no es null, y el límite inferior de <paramref name="keys" /> no coincide con el límite inferior de <paramref name="items" />.o bien<paramref name="items" /> no es null, y la longitud de <paramref name="keys" /> es mayor que la longitud de <paramref name="items" />.o bien<paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido en la matriz <see cref="T:System.Array" /> de <paramref name="keys" />.o bien<paramref name="items" /> no es null, e <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de la matriz <see cref="T:System.Array" /> de <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">Uno o varios elementos de la matriz <see cref="T:System.Array" /> de <paramref name="keys" /> no implementan la interfaz genérica <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>Ordena un intervalo de elementos de un par de objetos <see cref="T:System.Array" /> (uno contiene las claves y el otro contiene los elementos correspondientes) en función de las claves de la primera matriz <see cref="T:System.Array" /> utilizando la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" /> especificada.</summary>
      <param name="keys">Matriz <see cref="T:System.Array" /> unidimensional de base cero que contiene las claves que se van a ordenar. </param>
      <param name="items">Matriz <see cref="T:System.Array" /> unidimensional de base cero que contiene los elementos que se corresponden con las claves del parámetro <paramref name="keys" />; o null para ordenar solo <paramref name="keys" />.</param>
      <param name="index">Índice inicial del intervalo que se va a ordenar.</param>
      <param name="length">Número de elementos del intervalo que se va a ordenar.</param>
      <param name="comparer">Implementación de la interfaz genérica <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a utilizar para comparar elementos o null si se va a utilizar la implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> de cada elemento.</param>
      <typeparam name="TKey">Tipo de los elementos de la matriz de claves.</typeparam>
      <typeparam name="TValue">Tipo de los elementos de la matriz de elementos.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="keys" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="keys" />.o bien<paramref name="length" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> no es null, y el límite inferior de <paramref name="keys" /> no coincide con el límite inferior de <paramref name="items" />.o bien<paramref name="items" /> no es null, y la longitud de <paramref name="keys" /> es mayor que la longitud de <paramref name="items" />.o bien<paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido en la matriz <see cref="T:System.Array" /> de <paramref name="keys" />.o bien<paramref name="items" /> no es null, e <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido de la matriz <see cref="T:System.Array" /> de <paramref name="items" />. o bienLa implementación de <paramref name="comparer" /> ha producido un error durante la ordenación.Por ejemplo, es posible que <paramref name="comparer" /> no devuelva 0 al comparar un elemento con sigo mismo.</exception>
      <exception cref="T:System.InvalidOperationException">El valor de <paramref name="comparer" /> es null, y uno o varios elementos de la matriz <see cref="T:System.Array" /> de <paramref name="keys" /> no implementan la interfaz genérica <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>Obtiene el número de elementos incluidos en <see cref="T:System.Array" />.</summary>
      <returns>Número de elementos contenidos en la colección.</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Array" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es true si el acceso a <see cref="T:System.Array" /> está sincronizado (es seguro para subprocesos); en caso contrario, es false.</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Array" />.</summary>
      <returns>Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>Llamar a este método siempre produce una <see cref="T:System.NotSupportedException" /> excepción. </summary>
      <returns>No se admite el agregar un valor a una matriz.No se devuelve ningún valor.</returns>
      <param name="value">Objeto que se va a agregar a <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.IList" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>Determina si un elemento se encuentra en <see cref="T:System.Collections.IList" />.</summary>
      <returns>true si <paramref name="value" /> se encuentra en la matriz <see cref="T:System.Collections.IList" />; en caso contrario, false.</returns>
      <param name="value">Objeto que se va a buscar en la lista actual.El elemento que se va a buscar puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina el índice de un elemento específico de <see cref="T:System.Collections.IList" />.</summary>
      <returns>Es el índice del valor si se encuentra en la lista; en caso contrario, es -1.</returns>
      <param name="value">Objeto que se va a buscar en la lista actual.</param>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en la interfaz <see cref="T:System.Collections.IList" />, en el índice especificado.</summary>
      <param name="index">Índice en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">Objeto que se va a insertar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> es de solo lectura.o bien <see cref="T:System.Collections.IList" /> tiene un tamaño fijo. </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> es una referencia null de la interfaz <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Array" /> tiene un tamaño fijo.</summary>
      <returns>Es true si <see cref="T:System.Array" /> tiene un tamaño fijo; en caso contrario, es false.</returns>
    </member>
    <member name="P:System.Array.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Array" /> es de solo lectura.</summary>
      <returns>Es true si <see cref="T:System.Array" /> es de solo lectura; en caso contrario, es false.</returns>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado.</summary>
      <returns>Elemento en el índice especificado.</returns>
      <param name="index">Índice del elemento que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.o bien<paramref name="index" /> es igual o mayor que <see cref="P:System.Collections.ICollection.Count" />.</exception>
      <exception cref="T:System.ArgumentException">La matriz <see cref="T:System.Array" /> actual no tiene exactamente una dimensión.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Objeto que se va a quitar de <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> es de solo lectura.o bien <see cref="T:System.Collections.IList" /> tiene un tamaño fijo. </exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Quita el elemento de la interfaz <see cref="T:System.Collections.IList" /> que se encuentra en el índice especificado.</summary>
      <param name="index">Índice del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">índice no es un índice válido para <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> es de solo lectura.o bien <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determina si el objeto de colección actual precede o sigue a otro objeto en el criterio de ordenación, o aparece en la misma posición que él.</summary>
      <returns>Un entero que indica la relación del objeto de la colección actual con otros, tal y como se muestra en la tabla siguiente.Valor devueltoDescripción -1La instancia actual precede a <paramref name="other" />.0La instancia actual y <paramref name="other" /> son iguales.1La instancia actual se encuentra detrás de <paramref name="other" />.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Un objeto que compara el objeto actual y <paramref name="other" />.</param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determina si un objeto especificado es igual a la instancia actual.</summary>
      <returns>true si los dos objetos son iguales; de lo contrario, false.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Un objeto que determina si la instancia actual y <paramref name="other" /> son iguales. </param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Devuelve un código hash de la instancia actual.</summary>
      <returns>Código hash de la instancia actual.</returns>
      <param name="comparer">Objeto que calcula el código hash del objeto actual.</param>
    </member>
    <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
      <summary>Determina si cada elemento de la matriz cumple las condiciones definidas por el predicado especificado.</summary>
      <returns>true si cada elemento de <paramref name="array" /> cumple las condiciones definidas por el predicado especificado; de lo contrario, false.Si no hay ningún elemento en la matriz, el valor devuelto es true.</returns>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional de base cero en la que se van a comprobar las condiciones.</param>
      <param name="match">El predicado que define las condiciones que se van a comprobar en los elementos.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.o bienEl valor de <paramref name="match" /> es null.</exception>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>Delimita una sección de una matriz unidimensional.</summary>
      <typeparam name="T">Tipo de los elementos del segmento de la matriz.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.ArraySegment`1" /> que delimita todos los elementos de la matriz especificada.</summary>
      <param name="array">Matriz que se va a ajustar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />is null.</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.ArraySegment`1" /> que delimita el intervalo de elementos establecido en la matriz especificada.</summary>
      <param name="array">Matriz que contiene el intervalo de elementos que se va a delimitar.</param>
      <param name="offset">Índice de base cero del primer elemento del intervalo.</param>
      <param name="count">Número de elementos del intervalo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> y <paramref name="count" /> no especifican un intervalo válido de <paramref name="array" />.</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>Obtiene la matriz original que contiene el intervalo de elementos delimitados por el segmento de la matriz.</summary>
      <returns>Matriz original pasada al constructor, que contiene el intervalo delimitado por <see cref="T:System.ArraySegment`1" />.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>Obtiene el número de elementos del intervalo delimitado por el segmento de la matriz.</summary>
      <returns>Número de elementos del intervalo delimitado por <see cref="T:System.ArraySegment`1" />.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>Determina si la estructura <see cref="T:System.ArraySegment`1" /> especificada es igual a la instancia actual.</summary>
      <returns>Es true si la estructura <see cref="T:System.ArraySegment`1" /> especificada es igual a la instancia actual; en caso contrario, es false.</returns>
      <param name="obj">Estructura que se va a comparar con la instancia actual.</param>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual a la instancia actual.</summary>
      <returns>Es true si el objeto especificado es una estructura <see cref="T:System.ArraySegment`1" /> y es igual a la instancia actual; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
    </member>
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>Devuelve el código hash de la instancia actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>Obtiene la posición del primer elemento del intervalo delimitado por el segmento de la matriz, respecto al inicio de la matriz original.</summary>
      <returns>Posición del primer elemento del intervalo delimitado por <see cref="T:System.ArraySegment`1" />, respecto al inicio de la matriz original.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>Indica si dos estructuras de <see cref="T:System.ArraySegment`1" /> son iguales.</summary>
      <returns>true si <paramref name="a" /> es igual a <paramref name="b" />; en caso contrario, false.</returns>
      <param name="a">Estructura situada a la izquierda del operador de igualdad.</param>
      <param name="b">Estructura situada a la derecha del operador de igualdad.</param>
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>Indica si dos estructuras <see cref="T:System.ArraySegment`1" /> no son iguales.</summary>
      <returns>Es true si <paramref name="a" /> no es igual a <paramref name="b" />; en caso contrario, es false.</returns>
      <param name="a">Estructura situada a la izquierda del operador de desigualdad.</param>
      <param name="b">Estructura situada a la derecha del operador de desigualdad.</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Agrega un elemento al segmento de la matriz.</summary>
      <param name="item">Objeto que se agrega al segmento de la matriz.</param>
      <exception cref="T:System.NotSupportedException">El segmento de la matriz es de solo lectura.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Quita todos los elementos del segmento de la matriz.</summary>
      <exception cref="T:System.NotSupportedException">El segmento de la matriz es de solo lectura. </exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>Determina si el segmento de la matriz contiene un valor específico.</summary>
      <returns>true si <paramref name="item" /> se encuentra en el segmento de la matriz; de lo contrario, false.</returns>
      <param name="item">Objeto que se va a buscar en el segmento de la matriz.</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia los elementos del segmento de la matriz en una matriz, comenzando en el índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el segmento de la matriz.La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.o bienEl número de elementos del segmento de la matriz de origen es mayor que el espacio disponible desde el <paramref name="arrayIndex" /> hasta el final de la <paramref name="array" /> de destino.o bienEl tipo <paramref name="T" /> no puede convertirse automáticamente al tipo del parámetro <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si el segmento de matriz es de solo lectura.</summary>
      <returns>Es true si el segmento de matrices es de solo lectura; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Quita del segmento de la matriz la primera aparición de un objeto específico.</summary>
      <returns>Es true si <paramref name="item" /> se quitó correctamente del segmento de la matriz; de lo contrario, es false.Este método también devuelve false si <paramref name="item" /> no se encuentra en el segmento de matrices.</returns>
      <param name="item">Objeto que se va a quitar del segmento de la matriz.</param>
      <exception cref="T:System.NotSupportedException">El segmento de la matriz es de solo lectura.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración el segmento de la matriz.</summary>
      <returns>Un enumerador que se puede usar para iterar por el segmento de la matriz.</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
      <summary>Determina el índice de un elemento específico del segmento de la matriz.</summary>
      <returns>Devuelve el índice de <paramref name="item" /> si se encuentra en la lista; en caso contrario, devuelve -1.</returns>
      <param name="item">Objeto que se va a buscar en el segmento de la matriz.</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Inserta un elemento en el segmento de la matriz en el índice especificado.</summary>
      <param name="index">Índice de base cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item">Objeto que se va a insertar en el segmento de la matriz.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido del segmento de la matriz.</exception>
      <exception cref="T:System.NotSupportedException">El segmento de la matriz es de solo lectura.</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado.</summary>
      <returns>Elemento en el índice especificado.</returns>
      <param name="index">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.ArraySegment`1" />.</exception>
      <exception cref="T:System.NotSupportedException">La propiedad está establecida y el segmento de matrices es de solo lectura.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Quita el elemento del segmento de la matriz situado en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido del segmento de la matriz.</exception>
      <exception cref="T:System.NotSupportedException">El segmento de la matriz es de solo lectura.</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>Obtiene el elemento en el índice especificado del segmento de la matriz.</summary>
      <returns>Elemento en el índice especificado.</returns>
      <param name="index">Índice de base cero del elemento que se va a obtener.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.ArraySegment`1" />.</exception>
      <exception cref="T:System.NotSupportedException">La propiedad está establecida.</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración un segmento de la matriz.</summary>
      <returns>Un enumerador que se puede usar para iterar por el segmento de la matriz.</returns>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>Excepción que se produce cuando se intenta almacenar un elemento de un tipo incorrecto dentro de una matriz. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArrayTypeMismatchException" />.</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArrayTypeMismatchException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error. </param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ArrayTypeMismatchException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula, se provoca la excepción actual en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>Hace referencia a un método que se va a llamar cuando finalice una operación asincrónica correspondiente.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.AsyncCallback.BeginInvoke(System.IAsyncResult,System.AsyncCallback,System.Object)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.EndInvoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.Invoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Attribute">
      <summary>Representa la clase base para los atributos personalizados.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Attribute" />.</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es igual al tipo y valor de esta instancia; de lo contrario, es false.</returns>
      <param name="obj">Objeto <see cref="T:System.Object" /> que se va a comparar con esta instancia o null. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>Especifica los elementos de aplicación a los que se puede aplicar un atributo.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>El atributo puede aplicarse a cualquier elemento de la aplicación.</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>El atributo puede aplicarse a un ensamblado.</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>El atributo puede aplicarse a una clase.</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>El atributo puede aplicarse a un constructor.</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>El atributo puede aplicarse a un delegado.</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>El atributo puede aplicarse a una enumeración.</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>El atributo puede aplicarse a un evento.</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>El atributo puede aplicarse a un campo.</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>El atributo puede aplicarse a un parámetro genérico.</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>El atributo puede aplicarse a una interfaz.</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>El atributo puede aplicarse a un método.</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>El atributo puede aplicarse a un módulo.</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>El atributo puede aplicarse a un parámetro.</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>El atributo puede aplicarse a una propiedad.</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>El atributo puede aplicarse a un valor devuelto.</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>El atributo puede aplicarse a una estructura, es decir, a un tipo de valor.</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>Especifica el uso de otra clase de atributos.Esta clase no puede heredarse.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.AttributeUsageAttribute" /> con la lista especificada de <see cref="T:System.AttributeTargets" />, el valor de la propiedad <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> y el valor de la propiedad <see cref="P:System.AttributeUsageAttribute.Inherited" />.</summary>
      <param name="validOn">Conjunto de valores combinados utilizando una operación OR bit a bit para indicar qué elementos de programa son válidos. </param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>Obtiene o establece un valor Boolean que indica si es posible especificar más de una instancia del atributo indicado para un único elemento del programa.</summary>
      <returns>true si es posible especificar más de una instancia; en caso contrario, false.El valor predeterminado es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>Obtiene o establece un valor Boolean que indica si el atributo especificado lo pueden heredar clases derivadas y miembros de invalidación.</summary>
      <returns>true si el atributo lo pueden heredar clases derivadas o miembros de invalidación; en caso contrario, false.El valor predeterminado es true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>Obtiene un conjunto de valores que identifican los elementos del programa a los que se puede aplicar el atributo especificado.</summary>
      <returns>Uno o varios valores de <see cref="T:System.AttributeTargets" />.El valor predeterminado es All.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>Excepción que se inicia cuando la imagen de archivo de una biblioteca de vínculos dinámicos (DLL) o de un programa ejecutable no es válida. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.BadImageFormatException" />.</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.BadImageFormatException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.BadImageFormatException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="inner">Excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es una referencia nula, se provoca la excepción actual en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.BadImageFormatException" /> con el mensaje de error y el nombre de archivo especificados.</summary>
      <param name="message">Mensaje que describe el error. </param>
      <param name="fileName">Nombre completo del archivo con la imagen no válida. </param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.BadImageFormatException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="fileName">Nombre completo del archivo con la imagen no válida. </param>
      <param name="inner">Excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>Obtiene el nombre del archivo que causa esta excepción.</summary>
      <returns>Nombre del archivo con la imagen no válida o una referencia nula si no se ha pasado ningún nombre de archivo al constructor para la instancia actual.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>Obtiene el mensaje de error y el nombre del archivo que causó esta excepción.</summary>
      <returns>Cadena que contiene el mensaje de error y el nombre del archivo que causó esta excepción.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>Devuelve el nombre completo de esta excepción y, posiblemente, el mensaje de error, el nombre de la excepción interna y el seguimiento de la pila.</summary>
      <returns>Cadena que contiene el nombre completo de esta excepción y, posiblemente, el mensaje de error, el nombre de la excepción interna y el rastro de pila.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.Boolean">
      <summary>Representa un valor booleano (true o false).</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>Compara esta instancia con un objeto <see cref="T:System.Boolean" /> especificado y devuelve un entero que indica la relación entre ambos.</summary>
      <returns>Entero con signo que indica el orden relativo de esta instancia y el valor <paramref name="value" />.Valor devuelto Condición Menor que cero Esta instancia es false y <paramref name="value" /> es true. Cero Esta instancia y <paramref name="value" /> son iguales (ambos son true o false). Mayor que cero Esta instancia es true y <paramref name="value" /> es false. </returns>
      <param name="value">Objeto <see cref="T:System.Boolean" /> que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto <see cref="T:System.Boolean" /> especificado.</summary>
      <returns>true si el valor de <paramref name="obj" /> tiene el mismo valor que esta instancia; en caso contrario, false.</returns>
      <param name="obj">Valor <see cref="T:System.Boolean" /> que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>true si <paramref name="obj" /> es un valor de tipo <see cref="T:System.Boolean" /> con el mismo valor que esta instancia; en caso contrario, false.</returns>
      <param name="obj">Un objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>Representa el valor booleano false como una cadena.Este campo es de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.Boolean" /> actual.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>Convierte la representación de cadena especificada de un valor lógico en su <see cref="T:System.Boolean" /> equivalente o genera una excepción si la cadena no es igual al valor de <see cref="F:System.Boolean.TrueString" /> o <see cref="F:System.Boolean.FalseString" />.</summary>
      <returns>true si <paramref name="value" /> es equivalente al valor del campo <see cref="F:System.Boolean.TrueString" />; false si <paramref name="value" /> es equivalente al valor del campo <see cref="F:System.Boolean.FalseString" />.</returns>
      <param name="value">Cadena que contiene el valor que se va a convertir. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="value" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es igual al valor del campo <see cref="F:System.Boolean.TrueString" /> o <see cref="F:System.Boolean.FalseString" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="obj" />.Valor devuelto Condición Menor que cero Esta instancia es false y <paramref name="obj" /> es true. Cero Esta instancia y <paramref name="obj" /> son iguales (ambos son true o false). Mayor que cero Esta instancia es true y <paramref name="obj" /> es false.o bien El valor de <paramref name="obj" /> es null. </returns>
      <param name="obj">Objeto que se va a comparar con esta instancia o null.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true o false.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>Devuelve 1 si el valor de esta instancia es true; de lo contrario, devuelve 0. </returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">Se intenta convertir un valor de tipo <see cref="T:System.Boolean" /> en un valor de tipo <see cref="T:System.Char" />.No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">Se intenta convertir un valor de tipo <see cref="T:System.Boolean" /> en un valor de tipo <see cref="T:System.DateTime" />.No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para obtener una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <returns>Devuelve 1 si el valor de esta instancia es true; en caso contrario, devuelve 0.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para obtener una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <returns>Devuelve 1 si el valor de esta instancia es true; en caso contrario, devuelve 0.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>Devuelve 1 si el valor de esta instancia es true; en caso contrario, devuelve 0.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>Devuelve 1 si el valor de esta instancia es true; en caso contrario, devuelve 0.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>Devuelve 1 si el valor de esta instancia es true; en caso contrario, devuelve 0.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>Devuelve 1 si el valor de esta instancia es true; en caso contrario, devuelve 0.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para obtener una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <returns>Devuelve 1 si el valor de esta instancia es true; en caso contrario, devuelve 0.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToString(System.IFormatProvider)"></member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>Objeto del tipo especificado, con un valor equivalente al valor de este objeto Boolean.</returns>
      <param name="type">El tipo deseado. </param>
      <param name="provider">Implementación de <see cref="T:System.IFormatProvider" /> que proporciona información específica de la referencia cultural sobre el formato del valor devuelto.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="type" /> es null. </exception>
      <exception cref="T:System.InvalidCastException">No se admite el tipo de conversión solicitada. </exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>Devuelve 1 si el valor de esta instancia es true; en caso contrario, devuelve 0.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>Devuelve 1 si el valor de esta instancia es true; en caso contrario, devuelve 0.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>Devuelve 1 si el valor de esta instancia es true; en caso contrario, devuelve 0.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>Convierte el valor de esta instancia en la representación de cadena equivalente ("True" o "False").</summary>
      <returns>
        <see cref="F:System.Boolean.TrueString" /> si el valor de esta instancia es true, o <see cref="F:System.Boolean.FalseString" /> si el valor de esta instancia es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>Representa el valor booleano true como una cadena.Este campo es de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>Intenta convertir la representación de cadena que se haya especificado para un valor lógico en su valor <see cref="T:System.Boolean" /> equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="value" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="value">Cadena que contiene el valor que se va a convertir. </param>
      <param name="result">Cuando este método devuelve un resultado, si la conversión se realizó correctamente, contiene true si <paramref name="value" /> es igual que <see cref="F:System.Boolean.TrueString" /> o false si <paramref name="value" /> es igual que <see cref="F:System.Boolean.FalseString" />.Si la conversión no tuvo éxito, contiene false.La conversión no tiene éxito si <paramref name="value" /> es null o no es igual al valor del campo <see cref="F:System.Boolean.TrueString" /> o <see cref="F:System.Boolean.FalseString" />.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Buffer">
      <summary>Manipula matrices de tipos primitivos.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copia un número especificado de bytes de una matriz de origen a partir de un desplazamiento determinado a una matriz de destino a partir de un desplazamiento determinado.</summary>
      <param name="src">Búfer de origen. </param>
      <param name="srcOffset">Desplazamiento de bytes de base cero hacia <paramref name="src" />. </param>
      <param name="dst">Búfer de destino. </param>
      <param name="dstOffset">Desplazamiento de bytes de base cero hacia <paramref name="dst" />. </param>
      <param name="count">Número de bytes que se van a copiar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> o <paramref name="dst" /> es null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> o <paramref name="dst" /> no es una matriz de tipos primitivos.o bien El número de bytes en <paramref name="src" /> es menor que <paramref name="srcOffset" /> más <paramref name="count" />.o bien El número de bytes en <paramref name="dst" /> es menor que <paramref name="dstOffset" /> más <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />, <paramref name="dstOffset" />, o <paramref name="count" /> es menor que 0. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>Devuelve el número de bytes de la matriz especificada.</summary>
      <returns>Número de bytes de la matriz.</returns>
      <param name="array">Matriz. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> no es una matriz primitiva. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> es mayor de 2 gigabytes (GB).</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>Recupera el byte que se encuentra en una posición determinada de una matriz especificada.</summary>
      <returns>Devuelve el byte del parámetro <paramref name="index" /> de la matriz.</returns>
      <param name="array">Matriz. </param>
      <param name="index">Una posición en la matriz. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> no es una matriz primitiva. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es negativo o mayor que la longitud de <paramref name="array" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> es mayor de 2 gigabytes (GB).</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
      <summary>Copia un número de bytes especificado como un valor entero largo de una dirección en la memoria. </summary>
      <param name="source">La dirección de los bytes que se va a copiar. </param>
      <param name="destination">La dirección de destino. </param>
      <param name="destinationSizeInBytes">El número de bytes disponibles en el bloque de memoria de destino. </param>
      <param name="sourceBytesToCopy">Número de bytes que se van a copiar.  </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> es mayor que <paramref name="destinationSizeInBytes" />. </exception>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
      <summary>Copia un número de bytes especificado como un valor entero largo sin signo de una dirección de memoria a otro. </summary>
      <param name="source">La dirección de los bytes que se va a copiar. </param>
      <param name="destination">La dirección de destino. </param>
      <param name="destinationSizeInBytes">El número de bytes disponibles en el bloque de memoria de destino. </param>
      <param name="sourceBytesToCopy">Número de bytes que se van a copiar.   </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> es mayor que <paramref name="destinationSizeInBytes" />. </exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>Asigna un valor especificado a un byte en una posición determinada de una matriz especificada.</summary>
      <param name="array">Matriz. </param>
      <param name="index">Una posición en la matriz. </param>
      <param name="value">Valor que se va asignar. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> no es una matriz primitiva. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es negativo o mayor que la longitud de <paramref name="array" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> es mayor de 2 gigabytes (GB).</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Byte">
      <summary>Representa un entero de 8 bits sin signo.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>Compara esta instancia con un entero de 8 bits sin signo y devuelve una indicación de los valores relativos.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">Entero de 8 bits sin signo que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>Devuelve un valor que indica si esta instancia y un objeto <see cref="T:System.Byte" /> especificado representan el mismo valor.</summary>
      <returns>true si <paramref name="obj" /> es igual a esta instancia; en caso contrario, false.</returns>
      <param name="obj">Un objeto que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.Byte" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia o null. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.Byte" /> actual.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>Representa el mayor valor posible de un <see cref="T:System.Byte" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>Representa el menor valor posible de un <see cref="T:System.Byte" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en su <see cref="T:System.Byte" /> equivalente.</summary>
      <returns>Un valor de byte que es equivalente al número contenido en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir.La cadena se interpreta usando el estilo <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación de cadena de un número con un estilo especificado en su <see cref="T:System.Byte" /> equivalente.</summary>
      <returns>Un valor de byte que es equivalente al número contenido en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir.La cadena se interpreta usando el estilo especificado por <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación de cadena de un número con el estilo y el formato específico de la referencia cultural que se hayan especificado en su equivalente de <see cref="T:System.Byte" />.</summary>
      <returns>Un valor de byte que es equivalente al número contenido en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir.La cadena se interpreta usando el estilo especificado por <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que aporta información específica de la referencia cultural acerca del formato de <paramref name="s" />.Si <paramref name="provider" /> es null, se usa la referencia cultural actual del subproceso.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de la cadena de un número en un formato específico de la referencia cultural indicada en su equivalente de <see cref="T:System.Byte" />.</summary>
      <returns>Un valor de byte que es equivalente al número contenido en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir.La cadena se interpreta usando el estilo <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Un objeto que proporciona información de análisis específica de la referencia cultural sobre <paramref name="s" />.Si <paramref name="provider" /> es null, se usa la referencia cultural actual del subproceso.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Description Less than zero This instance precedes <paramref name="value" /> in the sort order. Zero This instance occurs in the same position as <paramref name="value" /> in the sort order. Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Byte" />. </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>Es true si el valor de la instancia actual no es cero; en caso contrario, es false.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Char" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Decimal" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Double" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.SByte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Single" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <paramref name="type" />.</returns>
      <param name="type">Tipo al que se va a convertir este valor <see cref="T:System.Byte" />. </param>
      <param name="provider">Implementación de <see cref="T:System.IFormatProvider" /> que proporciona información sobre el formato del valor devuelto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>Convierte el valor del objeto <see cref="T:System.Byte" /> actual en su representación de cadena equivalente.</summary>
      <returns>Representación en forma de cadena del valor de este objeto, formada por una secuencia de dígitos que van del 0 al 9, sin ceros a la izquierda.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico del objeto <see cref="T:System.Byte" /> actual en su representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>La representación de cadena del valor de este objeto en el formato especificado por el parámetro <paramref name="provider" />.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>Convierte el valor del objeto <see cref="T:System.Byte" /> actual en su representación de cadena equivalente usando el formato especificado.</summary>
      <returns>La representación de cadena del objeto <see cref="T:System.Byte" />, con el formato especificado por el parámetro <paramref name="format" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier.Supported format specifiers are listed in the Remarks section.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor del objeto <see cref="T:System.Byte" /> actual en la representación de cadena equivalente usando el formato y la información de formato específica de la referencia cultural especificados.</summary>
      <returns>La representación de cadena del objeto <see cref="T:System.Byte" /> actual, con el formato especificado por los parámetros <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena de formato numérico estándar o personalizada.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier.Supported format specifiers are listed in the Remarks section.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>Intenta convertir la representación de cadena de un número en si equivalente de <see cref="T:System.Byte" /> y devuelve un valor que indica si la conversión tuvo éxito.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false. </returns>
      <param name="s">Cadena que contiene un número que se va a convertir.La cadena se interpreta usando el estilo <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.Byte" /> equivalente al número incluido en <paramref name="s" /> si la conversión se realizó correctamente o cero si se produce un error en la conversión.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>Convierte la representación de cadena de un número con el estilo y el formato específico de la referencia cultural que se hayan especificado en su equivalente de <see cref="T:System.Byte" />.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir.La cadena se interpreta usando el estilo especificado por <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />.Si <paramref name="provider" /> es null, se usa la referencia cultural actual del subproceso.</param>
      <param name="result">El resultado que devuelve este método contiene el valor entero sin signo de 8 bits equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente o cero si se produce un error en la conversión.La conversión no se realiza correctamente si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" /> no tiene el formato correcto o representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Char">
      <summary>Representa un carácter como unidad de código UTF-16.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>Compara esta instancia con un objeto <see cref="T:System.Char" /> especificado e indica si esta instancia precede o sigue al objeto <see cref="T:System.Char" /> especificado o aparece en la misma posición que él en el criterio de ordenación.</summary>
      <returns>Número con signo que indica la posición de esta instancia en el criterio de ordenación respecto al parámetro <paramref name="value" />.Valor devuelto Descripción Menor que cero Esta instancia precede a <paramref name="value" />. Cero En el criterio de ordenación, esta instancia tiene la misma posición que <paramref name="value" />. Mayor que cero Esta instancia es posterior a <paramref name="value" />. </returns>
      <param name="value">Objeto <see cref="T:System.Char" /> que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.ConvertFromUtf32(System.Int32)">
      <summary>Convierte el punto de código Unicode especificado en una cadena codificada mediante UTF-16.</summary>
      <returns>Cadena que está compuesta de un objeto <see cref="T:System.Char" /> o un par suplente de objetos <see cref="T:System.Char" /> que equivalen al punto de código especificado por el parámetro <paramref name="utf32" />.</returns>
      <param name="utf32">Punto de código Unicode de 21 bits. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="utf32" /> no válido 21 bits punto de código Unicode entre U+0000 y 0 a U+10000 10FFFF, excluyendo el intervalo del par suplente de U+D800 a U+DFFF. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.Char,System.Char)">
      <summary>Convierte el valor de un par suplente codificado mediante UTF-16 en un punto de código Unicode.</summary>
      <returns>Punto de código Unicode de 21 bits que representan los parámetros <paramref name="highSurrogate" /> y <paramref name="lowSurrogate" />.</returns>
      <param name="highSurrogate">Unidad de código suplente alto (es decir, una unidad de código que va de U+D800 a U+DBFF). </param>
      <param name="lowSurrogate">Unidad de código suplente bajo (es decir, una unidad de código que va de U+DC00 a U+DFFF). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> no se encuentra en el intervalo de U+D800 a U+DBFF, o <paramref name="lowSurrogate" /> no está en el intervalo U+DC00 a U+DFFF. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.String,System.Int32)">
      <summary>Convierte el valor de un par suplente o carácter codificado mediante UTF-16 que está situado en una posición concreta de una cadena en un punto de código Unicode.</summary>
      <returns>Punto de código Unicode de 21 bits representado por el carácter o par suplente situado en la posición del parámetro <paramref name="s" /> que especifica el parámetro <paramref name="index" />.</returns>
      <param name="s">Cadena que contiene un carácter o par suplente. </param>
      <param name="index">Posición de índice del carácter o par suplente en <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es una posición dentro de <paramref name="s" />. </exception>
      <exception cref="T:System.ArgumentException">La posición de índice especificada contiene un par suplente, pero el primer carácter del par no es un carácter suplente alto válido o el segundo carácter del par no es un carácter suplente bajo válido. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>Devuelve un valor que indica si esta instancia es igual que el objeto <see cref="T:System.Char" /> especificado.</summary>
      <returns>true si el parámetro <paramref name="obj" /> es igual al valor de esta instancia; en caso contrario, false.</returns>
      <param name="obj">Un objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.Char" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia o null. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>Convierte el carácter Unicode numérico especificado en un número de punto flotante de precisión doble.</summary>
      <returns>Valor numérico de <paramref name="c" /> si dicho carácter representa un número; en caso contrario, -1,0.</returns>
      <param name="c">Carácter Unicode que se va a convertir. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>Convierte el carácter Unicode numérico situado en la posición especificada de una cadena especificada en un número de punto flotante de precisión doble.</summary>
      <returns>Valor numérico del carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> si dicho carácter representa un número; en caso contrario, -1.</returns>
      <param name="s">Objeto <see cref="T:System.String" />. </param>
      <param name="index">Posición de caracteres en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>Indica si el carácter Unicode especificado se clasifica por categorías como un carácter de control.</summary>
      <returns>true si <paramref name="c" /> es un carácter de control; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>Indica si el carácter que ocupa la posición especificada en una cadena especificada se clasifica por categorías como un carácter de control.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es un carácter de control; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>Indica si el carácter Unicode especificado se clasifica por categorías como un dígito decimal.</summary>
      <returns>true si <paramref name="c" /> es un dígito decimal; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>Indica si el carácter que ocupa la posición especificada en una cadena especificada se clasifica por categorías como un dígito decimal.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es un dígito decimal; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.Char)">
      <summary>Indica si el objeto <see cref="T:System.Char" /> especificado es un suplente alto.</summary>
      <returns>true si el valor numérico del parámetro <paramref name="c" /> va de U+D800 a U+DBFF; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.String,System.Int32)">
      <summary>Indica si el objeto <see cref="T:System.Char" /> situado en la posición especificada de una cadena es un suplente alto.</summary>
      <returns>true si el valor numérico del carácter especificado en el parámetro <paramref name="s" /> va de U+D800 a U+DBFF; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es una posición dentro de <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>Indica si el carácter Unicode especificado pertenece a alguna categoría de letras Unicode. </summary>
      <returns>true si <paramref name="c" /> es una letra; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>Indica si el carácter que ocupa la posición especificada en una determinada cadena pertenece a alguna categoría de letras Unicode.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es una letra; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>Indica si el carácter Unicode especificado pertenece a alguna categoría de letras o dígitos decimales.</summary>
      <returns>true si <paramref name="c" /> es una letra o dígito decimal; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>Indica si el carácter que ocupa la posición especificada en una cadena especificada pertenece a alguna categoría de letras o dígitos decimales.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es una letra o dígito decimal; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>Indica si el carácter Unicode especificado se clasifica por categorías como una letra minúscula.</summary>
      <returns>true si <paramref name="c" /> es una letra minúscula; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>Indica si el carácter que ocupa la posición especificada en una cadena especificada se clasifica por categorías como una letra minúscula.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es una letra minúscula; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.Char)">
      <summary>Indica si el objeto <see cref="T:System.Char" /> especificado es un suplente bajo.</summary>
      <returns>true si el valor numérico del parámetro <paramref name="c" /> va de U+DC00 a U+DFFF; en caso contrario, false.</returns>
      <param name="c">Carácter que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.String,System.Int32)">
      <summary>Indica si el objeto <see cref="T:System.Char" /> situado en la posición especificada de una cadena es un suplente bajo.</summary>
      <returns>true si el valor numérico del carácter especificado en el parámetro <paramref name="s" /> va de U+DC00 a U+DFFF; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es una posición dentro de <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>Indica si el carácter Unicode especificado se clasifica por categorías como un número.</summary>
      <returns>true si <paramref name="c" /> es un número; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>Indica si el carácter que ocupa la posición especificada en una cadena especificada se clasifica por categorías como un número.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es un número; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>Indica si el carácter Unicode especificado se clasifica por categorías como un signo de puntuación.</summary>
      <returns>true si <paramref name="c" /> es un signo de puntuación; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>Indica si el carácter que ocupa la posición especificada en una cadena especificada se clasifica por categorías como un signo de puntuación.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es un signo de puntuación; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>Indica si el carácter Unicode especificado se clasifica por categorías como un carácter separador.</summary>
      <returns>true si <paramref name="c" /> es un carácter separador; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>Indica si el carácter que ocupa la posición especificada en una cadena especificada se clasifica por categorías como un carácter separador.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es un carácter separador; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>Indica si el carácter especificado tiene una unidad de código suplente.</summary>
      <returns>true si <paramref name="c" /> es un suplente alto o un suplente bajo; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>Indica si el carácter situado en la posición especificada de la cadena especificada tiene una unidad de código suplente.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es un suplente alto o un suplente bajo; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>Indica si los dos objetos <see cref="T:System.Char" /> especificados forman un par suplente.</summary>
      <returns>true si el valor numérico del parámetro <paramref name="highSurrogate" /> va de U+D800 a U+DBFF, y el valor numérico del parámetro <paramref name="lowSurrogate" /> va de U+DC00 a U+DFFF; en caso contrario, false.</returns>
      <param name="highSurrogate">Carácter que se va a evaluar como suplente alto de un par suplente. </param>
      <param name="lowSurrogate">Carácter que se va a evaluar como suplente bajo de un par suplente. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>Indica si dos objetos <see cref="T:System.Char" /> adyacentes en la posición especificada de una cadena forman un par suplente.</summary>
      <returns>true si el parámetro <paramref name="s" /> incluye caracteres adyacentes en las posiciones <paramref name="index" /> y <paramref name="index" /> + 1, el valor numérico del carácter situado en la posición <paramref name="index" /> va de U+D800 a U+DBFF y el valor numérico del carácter situado en la posición <paramref name="index" /> +1 va de U+DC00 a U+DFFF; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición inicial del par de caracteres que se va a evaluar dentro de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es una posición dentro de <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>Indica si el carácter Unicode especificado se clasifica por categorías como un carácter de símbolo.</summary>
      <returns>true si <paramref name="c" /> es un carácter de símbolo; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>Indica si el carácter que ocupa la posición especificada en una cadena especificada se clasifica por categorías como un carácter de símbolo.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es un carácter de símbolo; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>Indica si el carácter Unicode especificado se clasifica por categorías como una letra mayúscula.</summary>
      <returns>true si <paramref name="c" /> es una letra mayúscula; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>Indica si el carácter que ocupa la posición especificada en una cadena especificada se clasifica por categorías como una letra mayúscula.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es una letra mayúscula; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>Indica si el carácter Unicode especificado se clasifica por categorías como un espacio en blanco.</summary>
      <returns>true si <paramref name="c" /> es un espacio en blanco; en caso contrario, false.</returns>
      <param name="c">Carácter Unicode que se va a evaluar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>Indica si el carácter que ocupa la posición especificada en una cadena especificada se clasifica por categorías como un espacio en blanco.</summary>
      <returns>true si el carácter que ocupa la posición <paramref name="index" /> en <paramref name="s" /> es un espacio en blanco; en caso contrario, false.</returns>
      <param name="s">Una cadena. </param>
      <param name="index">Posición del carácter que se va a evaluar en <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la última posición en <paramref name="s" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>Representa el mayor valor posible de un <see cref="T:System.Char" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>Representa el menor valor posible de un <see cref="T:System.Char" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.Parse(System.String)">
      <summary>Convierte el valor de la cadena especificada en el carácter Unicode equivalente.</summary>
      <returns>Carácter Unicode equivalente al carácter único de <paramref name="s" />.</returns>
      <param name="s">Una cadena que contiene un carácter único, o null. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.FormatException">La longitud de <paramref name="s" /> no es 1. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Valor entero con signo que indica la posición de esta instancia en el criterio de ordenación respecto al parámetro <paramref name="value" />.Valor devuelto Descripción Menor que cero Esta instancia es anterior a <paramref name="value" /> en el criterio de ordenación. Cero En el criterio de ordenación, esta instancia tiene la misma posición que <paramref name="value" />. Mayor que cero Esta instancia sigue a <paramref name="value" /> en el criterio de ordenación.o bien El valor de <paramref name="value" /> es null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> no es un <see cref="T:System.Char" /> objeto. </exception>
    </member>
    <member name="M:System.Char.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Nota   No se admite esta conversión.Si se intenta, se produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.Char" /> actual.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <returns>Valor del objeto actual <see cref="T:System.Char" /> sin modificar.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Nota   No se admite esta conversión.Si se intenta, se produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Nota   No se admite esta conversión.Si se intenta, se produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Nota   No se admite esta conversión.Si se intenta, se produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary> Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.Char" /> actual.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.Char" /> actual.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary> Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.Char" /> actual.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary> Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.Char" /> actual.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Nota   No se admite esta conversión.Si se intenta, se produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToString(System.IFormatProvider)"></member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <returns>Objeto del tipo especificado.</returns>
      <param name="type">Un objeto <see cref="T:System.Type" />. </param>
      <param name="provider">Un objeto <see cref="T:System.IFormatProvider" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="type" /> es null.</exception>
      <exception cref="T:System.InvalidCastException">El valor del actual <see cref="T:System.Char" /> objeto no se puede convertir al tipo especificado por el <paramref name="type" /> parámetro. </exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.Char" /> actual.</returns>
      <param name="provider">Un objeto <see cref="T:System.IFormatProvider" />.(Especifique null, ya que se omite el parámetro <paramref name="provider" />.)</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.Char" /> actual.</returns>
      <param name="provider">Un objeto <see cref="T:System.IFormatProvider" />.(Especifique null, ya que se omite el parámetro <paramref name="provider" />.)</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.Char" /> actual.</returns>
      <param name="provider">Un objeto <see cref="T:System.IFormatProvider" />.(Especifique null, ya que se omite el parámetro <paramref name="provider" />.)</param>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>Convierte el valor de un carácter Unicode en un carácter equivalente, pero en minúsculas.</summary>
      <returns>Equivalente en minúsculas de <paramref name="c" /> o el valor sin modificar de <paramref name="c" /> si <paramref name="c" /> ya está en minúsculas o no es un carácter alfabético.</returns>
      <param name="c">Carácter Unicode que se va a convertir. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
      <summary>Convierte el valor de un carácter Unicode en su equivalente en minúsculas utilizando las reglas sobre mayúsculas y minúsculas de la referencia cultural de todos los idiomas.</summary>
      <returns>Equivalente en minúsculas del parámetro <paramref name="c" /> o el valor sin modificar de <paramref name="c" /> si <paramref name="c" /> ya está en minúsculas o no es un carácter alfabético.</returns>
      <param name="c">Carácter Unicode que se va a convertir. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToString">
      <summary>Convierte el valor de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación de cadena del valor de esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>Convierte el carácter Unicode especificado en la representación de cadena equivalente.</summary>
      <returns>Representación de cadena del valor de <paramref name="c" />.</returns>
      <param name="c">Carácter Unicode que se va a convertir. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>Convierte el valor de un carácter Unicode en un carácter equivalente, pero en mayúsculas.</summary>
      <returns>Equivalente en mayúsculas del parámetro <paramref name="c" /> o el valor sin modificar de <paramref name="c" /> si <paramref name="c" /> ya está en mayúsculas, no tiene equivalente en mayúsculas o no es un carácter alfabético.</returns>
      <param name="c">Carácter Unicode que se va a convertir. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
      <summary>Convierte el valor de un carácter Unicode en su equivalente en mayúsculas utilizando las reglas sobre mayúsculas y minúsculas de la referencia cultural de todos los idiomas.</summary>
      <returns>Equivalente mayúsculas minúsculas del parámetro <paramref name="c" /> o el valor sin modificar de <paramref name="c" /> si <paramref name="c" /> ya está en mayúsculas o no es un carácter alfabético.</returns>
      <param name="c">Carácter Unicode que se va a convertir. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>Convierte el valor de la cadena especificada en el carácter Unicode equivalente.Un código devuelto indica si la conversión fue correcta o no.</summary>
      <returns>true si el parámetro <paramref name="s" /> se convierte correctamente; en caso contrario, false.</returns>
      <param name="s">Una cadena que contiene un carácter único, o null. </param>
      <param name="result">Cuando este método devuelve un valor, si la conversión se ha realizado correctamente, contiene un carácter Unicode equivalente al único carácter de <paramref name="s" />; si se ha producido un error en la conversión, contiene un valor indefinido.Se produce un error en la conversión si el parámetro <paramref name="s" /> es null o la longitud de <paramref name="s" /> no es 1.Este parámetro se pasa sin inicializar.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>Indica si un elemento de programa es conforme a Common Language Specification (CLS).Esta clase no puede heredarse.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una instancia de la clase <see cref="T:System.CLSCompliantAttribute" /> con un valor Boolean que indica si el elemento de programa especificado es conforme a CLS.</summary>
      <param name="isCompliant">true si es conforme a CLS; en caso contrario, false. </param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>Obtiene el valor Boolean que indica si el elemento de programa especificado es conforme a CLS.</summary>
      <returns>true si el elemento de programa es conforme a CLS; en caso contrario, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Comparison`1">
      <summary>Representa el método que compara dos objetos del mismo tipo.</summary>
      <typeparam name="T">Tipo de los objetos que se van a comparar.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Comparison`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Comparison`1.BeginInvoke(`0,`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Comparison`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Comparison`1.Invoke(`0,`0)"></member>
    <member name="T:System.DateTime">
      <summary>Representa un instante de tiempo, normalmente expresado en forma de fecha y hora del día. Para examinar el código fuente de .NET Framework para este tipo, consulte el Reference Source.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes y día especificados.</summary>
      <param name="year">Año (del 1 al 9999). </param>
      <param name="month">Mes (del 1 al 12). </param>
      <param name="day">Día (del 1 al número de días de <paramref name="month" />). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> es menor que 1 o mayor que 9999.o bien <paramref name="month" /> es menor que 1 o mayor que 12.o bien <paramref name="day" /> es menor que 1 o mayor que el número de días de <paramref name="month" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes, día, hora, minuto y segundo especificados.</summary>
      <param name="year">Año (del 1 al 9999). </param>
      <param name="month">Mes (del 1 al 12). </param>
      <param name="day">Día (del 1 al número de días de <paramref name="month" />). </param>
      <param name="hour">Horas (de 0 a 23). </param>
      <param name="minute">Minutos (de 0 a 59). </param>
      <param name="second">Segundos (de 0 a 59). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> es menor que 1 o mayor que 9999. o bien <paramref name="month" /> es menor que 1 o mayor que 12. o bien <paramref name="day" /> es menor que 1 o mayor que el número de días de <paramref name="month" />.o bien <paramref name="hour" /> es menor que 0 o mayor que 23. o bien <paramref name="minute" /> es menor que 0 o mayor que 59. o bien <paramref name="second" /> es menor que 0 o mayor que 59. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes, día, hora, minuto, segundo y hora universal coordinada (UTC) u hora local especificados.</summary>
      <param name="year">Año (del 1 al 9999). </param>
      <param name="month">Mes (del 1 al 12). </param>
      <param name="day">Día (del 1 al número de días de <paramref name="month" />). </param>
      <param name="hour">Horas (de 0 a 23). </param>
      <param name="minute">Minutos (de 0 a 59). </param>
      <param name="second">Segundos (de 0 a 59). </param>
      <param name="kind">Uno de los valores de enumeración que indica si <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> y <paramref name="second" /> especifican una hora local, una hora universal coordinada (UTC) o ninguna de ellas.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> es menor que 1 o mayor que 9999. o bien <paramref name="month" /> es menor que 1 o mayor que 12. o bien <paramref name="day" /> es menor que 1 o mayor que el número de días de <paramref name="month" />.o bien <paramref name="hour" /> es menor que 0 o mayor que 23. o bien <paramref name="minute" /> es menor que 0 o mayor que 59. o bien <paramref name="second" /> es menor que 0 o mayor que 59. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> no es uno de los <see cref="T:System.DateTimeKind" /> valores.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes, día, hora, minuto, segundo y milisegundo especificados.</summary>
      <param name="year">Año (del 1 al 9999). </param>
      <param name="month">Mes (del 1 al 12). </param>
      <param name="day">Día (del 1 al número de días de <paramref name="month" />). </param>
      <param name="hour">Horas (de 0 a 23). </param>
      <param name="minute">Minutos (de 0 a 59). </param>
      <param name="second">Segundos (de 0 a 59). </param>
      <param name="millisecond">Milisegundos (de 0 a 999). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> es menor que 1 o mayor que 9999.o bien <paramref name="month" /> es menor que 1 o mayor que 12.o bien <paramref name="day" /> es menor que 1 o mayor que el número de días de <paramref name="month" />.o bien <paramref name="hour" /> es menor que 0 o mayor que 23.o bien <paramref name="minute" /> es menor que 0 o mayor que 59.o bien <paramref name="second" /> es menor que 0 o mayor que 59.o bien <paramref name="millisecond" /> es menor que 0 o mayor que 999. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes, día, hora, minuto, segundo, milisegundo y hora universal coordinada (UTC) u hora local especificados.</summary>
      <param name="year">Año (del 1 al 9999). </param>
      <param name="month">Mes (del 1 al 12). </param>
      <param name="day">Día (del 1 al número de días de <paramref name="month" />). </param>
      <param name="hour">Horas (de 0 a 23). </param>
      <param name="minute">Minutos (de 0 a 59). </param>
      <param name="second">Segundos (de 0 a 59). </param>
      <param name="millisecond">Milisegundos (de 0 a 999). </param>
      <param name="kind">Uno de los valores de enumeración que indica si <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> y <paramref name="millisecond" /> especifican una hora local, una hora universal coordinada (UTC) o ninguna de ellas.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> es menor que 1 o mayor que 9999.o bien <paramref name="month" /> es menor que 1 o mayor que 12.o bien <paramref name="day" /> es menor que 1 o mayor que el número de días de <paramref name="month" />.o bien <paramref name="hour" /> es menor que 0 o mayor que 23.o bien <paramref name="minute" /> es menor que 0 o mayor que 59.o bien <paramref name="second" /> es menor que 0 o mayor que 59.o bien <paramref name="millisecond" /> es menor que 0 o mayor que 999. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> no es uno de los <see cref="T:System.DateTimeKind" /> valores.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en un número de pasos especificado.</summary>
      <param name="ticks">Fecha y hora expresadas como el número de intervalos de 100 nanosegundos transcurridos desde el 1 de enero, 0001 a las 00:00:00.000, en el calendario gregoriano. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el número de pasos y hora universal coordinada (UTC) u hora local especificados.</summary>
      <param name="ticks">Fecha y hora expresadas como el número de intervalos de 100 nanosegundos transcurridos desde el 1 de enero, 0001 a las 00:00:00.000, en el calendario gregoriano. </param>
      <param name="kind">Uno de los valores de enumeración que indica si <paramref name="ticks" /> especifica una hora local, una hora universal coordinada (UTC) o ninguna de ellas.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> no es uno de los <see cref="T:System.DateTimeKind" /> valores.</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el valor del objeto <see cref="T:System.TimeSpan" /> especificado al valor de esta instancia.</summary>
      <returns>Objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el intervalo de hora representado por <paramref name="value" />.</returns>
      <param name="value">Intervalo de tiempo positivo o negativo. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Resultante <see cref="T:System.DateTime" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de días al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de días representados por <paramref name="value" />.</returns>
      <param name="value">Número de días enteros y fraccionarios.El parámetro <paramref name="value" /> puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Resultante <see cref="T:System.DateTime" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de horas al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de horas representados por <paramref name="value" />.</returns>
      <param name="value">Número de horas enteras y fraccionarias.El parámetro <paramref name="value" /> puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Resultante <see cref="T:System.DateTime" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de milisegundos al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de milisegundos representados por <paramref name="value" />.</returns>
      <param name="value">Número de milisegundos enteros y fraccionarios.El parámetro <paramref name="value" /> puede ser positivo o negativo.Observe que este valor se redondea al entero más próximo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Resultante <see cref="T:System.DateTime" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de minutos al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de minutos representados por <paramref name="value" />.</returns>
      <param name="value">Número de minutos enteros y fraccionarios.El parámetro <paramref name="value" /> puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Resultante <see cref="T:System.DateTime" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de meses al valor de esta instancia.</summary>
      <returns>Objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el tiempo representado por <paramref name="months" />.</returns>
      <param name="months">Número de meses.El parámetro <paramref name="months" /> puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Resultante <see cref="T:System.DateTime" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.o bien <paramref name="months" /> es menor que -120.000 o mayor que 120.000. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de segundos al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de segundos representados por <paramref name="value" />.</returns>
      <param name="value">Número de segundos enteros y fraccionarios.El parámetro <paramref name="value" /> puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Resultante <see cref="T:System.DateTime" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de pasos al valor de esta instancia.</summary>
      <returns>Objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y la hora representada por <paramref name="value" />.</returns>
      <param name="value">Número de pasos de 100 nanosegundos.El parámetro <paramref name="value" /> puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Resultante <see cref="T:System.DateTime" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de años al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de años representados por <paramref name="value" />.</returns>
      <param name="value">Número de años.El parámetro <paramref name="value" /> puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> o resultante <see cref="T:System.DateTime" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>Compara dos instancias de <see cref="T:System.DateTime" /> y devuelve un entero que indica si la primera instancia es anterior, igual o posterior a la segunda instancia.</summary>
      <returns>Número con signo que indica los valores relativos de <paramref name="t1" /> y <paramref name="t2" />.Tipo de valor Condición Menor que cero <paramref name="t1" /> es anterior a <paramref name="t2" />. Cero <paramref name="t1" /> es igual que <paramref name="t2" />. Mayor que cero <paramref name="t1" /> es posterior a <paramref name="t2" />. </returns>
      <param name="t1">Primer objeto que se va a comparar. </param>
      <param name="t2">Segundo objeto que se va a comparar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>Compara el valor de esta instancia con un valor de <see cref="T:System.DateTime" /> especificado y devuelve un entero que indica si esta instancia es anterior, igual o posterior al valor de <see cref="T:System.DateTime" /> especificado.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y del parámetro <paramref name="value" />.Valor Descripción Menor que cero Esta instancia es anterior a <paramref name="value" />. Cero Esta instancia es la misma que <paramref name="value" />. Mayor que cero Esta instancia es posterior a <paramref name="value" />. </returns>
      <param name="value">Objeto que se va a comparar con la actual instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>Obtiene el componente correspondiente a la fecha de esta instancia.</summary>
      <returns>Nuevo objeto con la misma fecha que esta instancia y con el valor de hora establecido en la medianoche (00:00:00).</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>Obtiene el día del mes representado por esta instancia.</summary>
      <returns>El componente de día, expresado como un valor entre 1 y 31.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>Obtiene el día de la semana representado por esta instancia.</summary>
      <returns>Constante enumerada que indica el día de la semana de este valor <see cref="T:System.DateTime" />. </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>Obtiene el día del año representado por esta instancia.</summary>
      <returns>El día del año, expresado como un valor entre 1 y 366.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>Devuelve el número de días del mes y año especificados.</summary>
      <returns>Número de días de <paramref name="month" /> para el <paramref name="year" /> especificado.Por ejemplo, si <paramref name="month" /> es igual a 2 para febrero, el valor devuelto será 28 o 29, en función de que <paramref name="year" /> sea un año bisiesto.</returns>
      <param name="year">Año. </param>
      <param name="month">Mes (número del 1 al 12). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> es menor que 1 o mayor que 12.o bien<paramref name="year" /> es menor que 1 o mayor que 9999.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>Devuelve un valor que indica si el valor de esta instancia equivale al valor de la instancia de <see cref="T:System.DateTime" /> especificada.</summary>
      <returns>true si el parámetro <paramref name="value" /> es igual al valor de esta instancia; en caso contrario, false.</returns>
      <param name="value">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>Devuelve un valor que indica si dos instancias de <see cref="T:System.DateTime" /> tienen el mismo valor de fecha y hora.</summary>
      <returns>true si los dos valores son iguales; en caso contrario, false.</returns>
      <param name="t1">Primer objeto que se va a comparar. </param>
      <param name="t2">Segundo objeto que se va a comparar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="value" /> es una instancia de <see cref="T:System.DateTime" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="value">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
      <summary>Deserializa un valor binario de 64 bits y vuelve a crear un objeto <see cref="T:System.DateTime" /> serializado original.</summary>
      <returns>Objeto que es equivalente al objeto <see cref="T:System.DateTime" /> que se serializó con el método <see cref="M:System.DateTime.ToBinary" />.</returns>
      <param name="dateData">Entero con signo de 64 bits que codifica la propiedad <see cref="P:System.DateTime.Kind" /> en un campo de 2 bits y la propiedad <see cref="P:System.DateTime.Ticks" /> en un campo de 62 bits. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateData" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>Convierte la hora de archivo de Windows especificada en una hora local equivalente.</summary>
      <returns>Objeto que representa la hora local equivalente a la fecha y hora representadas por el parámetro <paramref name="fileTime" />.</returns>
      <param name="fileTime">Hora de un archivo de Windows, expresada en pasos. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> es menor que 0 o representa una hora mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>Convierte la hora de archivo de Windows especificada en una hora UTC equivalente.</summary>
      <returns>Objeto que representa la hora UTC equivalente a la fecha y hora representadas por el parámetro <paramref name="fileTime" />.</returns>
      <param name="fileTime">Hora de un archivo de Windows, expresada en pasos. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> es menor que 0 o representa una hora mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>Convierte el valor de esta instancia en todas las representaciones de cadena admitidas por los especificadores de formato de fecha y hora estándar.</summary>
      <returns>Matriz de cadenas donde cada elemento es la representación del valor de esta instancia con el formato de uno de los especificadores de formato de fecha y hora estándar.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>Convierte el valor de esta instancia en todas las representaciones de cadena admitidas por el especificador de formato de fecha y hora estándar indicado.</summary>
      <returns>Matriz de cadenas donde cada elemento es la representación del valor de esta instancia con el formato del especificador de formato de fecha y hora estándar <paramref name="format" />.</returns>
      <param name="format">Cadena con formato de fecha y hora estándar (vea la sección Comentarios). </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una fecha válida de estándar y carácter especificador de formato de hora.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en todas las representaciones de cadena admitidas por el especificador de formato de fecha y hora estándar y la información de formato específica de la referencia cultural especificados.</summary>
      <returns>Matriz de cadenas donde cada elemento es la representación del valor de esta instancia con el formato de uno de los especificadores de formato de fecha y hora estándar.</returns>
      <param name="format">Cadena con formato de fecha y hora (vea la sección Comentarios). </param>
      <param name="provider">Objeto que aporta información de formato específica de la referencia cultural acerca de esta instancia. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una fecha válida de estándar y carácter especificador de formato de hora.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en todas las representaciones de cadena admitidas por los especificadores de formato de fecha y hora estándar y la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Matriz de cadenas donde cada elemento es la representación del valor de esta instancia con el formato de uno de los especificadores de formato de fecha y hora estándar.</returns>
      <param name="provider">Objeto que aporta información de formato específica de la referencia cultural acerca de esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>Obtiene el componente correspondiente a la hora de la fecha representada por esta instancia.</summary>
      <returns>El componente de hora, expresado como un valor entre 0 y 23.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>Indica si esta instancia de <see cref="T:System.DateTime" /> está dentro del intervalo del horario de verano de la zona horaria actual.</summary>
      <returns>true si el valor de la propiedad <see cref="P:System.DateTime.Kind" /> es <see cref="F:System.DateTimeKind.Local" /> o <see cref="F:System.DateTimeKind.Unspecified" />y el valor de esta instancia de <see cref="T:System.DateTime" /> está dentro del intervalo del horario de verano de la zona horaria actual; false si <see cref="P:System.DateTime.Kind" /> es <see cref="F:System.DateTimeKind.Utc" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>Devuelve una indicación en la que se precisa si el año especificado es bisiesto.</summary>
      <returns>true si <paramref name="year" /> es un año bisiesto; en caso contrario, false.</returns>
      <param name="year">Año de 4 dígitos. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> es menor que 1 o mayor que 9999.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>Obtiene un valor que indica si la hora representada por esta instancia está basada en la hora local, en la hora universal coordinada (UTC), o en ninguna de ellas.</summary>
      <returns>Uno de los valores de enumeración que indica qué representa la hora actual.De manera predeterminada, es <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>Representa el mayor valor posible de <see cref="T:System.DateTime" />.Este campo es de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>Obtiene el componente correspondiente a los milisegundos de la fecha representada por esta instancia.</summary>
      <returns>El componente de milisegundos, expresado como un valor entre 0 y 999.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>Obtiene el componente correspondiente a los minutos de la fecha representada por esta instancia.</summary>
      <returns>El componente de minutos, expresado como un valor entre 0 y 59.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>Representa el menor valor posible de <see cref="T:System.DateTime" />.Este campo es de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>Obtiene el componente correspondiente al mes de la fecha representada por esta instancia.</summary>
      <returns>El componente de mes, expresado como un valor entre 1 y 12.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>Obtiene un objeto <see cref="T:System.DateTime" /> que se establece en la fecha y hora actual de este equipo, expresada como hora local.</summary>
      <returns>Objeto cuyo valor es la fecha y hora local.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>Agrega un intervalo de tiempo especificado a una fecha y hora especificadas, generando una fecha y hora nuevas.</summary>
      <returns>Objeto que es la suma de los valores de <paramref name="d" /> y <paramref name="t" />.</returns>
      <param name="d">Valor de fecha y hora que se va a agregar. </param>
      <param name="t">Intervalo de tiempo que se va a agregar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Resultante <see cref="T:System.DateTime" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>Determina si dos instancias especificadas de <see cref="T:System.DateTime" /> son iguales.</summary>
      <returns>true si <paramref name="d1" /> y <paramref name="d2" /> representan la misma fecha y hora; en caso contrario, false.</returns>
      <param name="d1">Primer objeto que se va a comparar. </param>
      <param name="d2">Segundo objeto que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>Determina si un <see cref="T:System.DateTime" /> especificado es posterior a otro <see cref="T:System.DateTime" /> especificado.</summary>
      <returns>true si <paramref name="t1" /> es posterior a <paramref name="t2" />; en caso contrario, false.</returns>
      <param name="t1">Primer objeto que se va a comparar. </param>
      <param name="t2">Segundo objeto que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>Determina si un <see cref="T:System.DateTime" /> especificado representa una fecha y hora que es el igual o posterior a otro <see cref="T:System.DateTime" /> especificado.</summary>
      <returns>true si <paramref name="t1" /> es igual o posterior a <paramref name="t2" />; de lo contrario, false.</returns>
      <param name="t1">Primer objeto que se va a comparar. </param>
      <param name="t2">Segundo objeto que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>Determina si dos instancias especificadas de <see cref="T:System.DateTime" /> no son iguales.</summary>
      <returns>true si <paramref name="d1" /> y <paramref name="d2" /> no representan la misma fecha y hora; en caso contrario, false.</returns>
      <param name="d1">Primer objeto que se va a comparar. </param>
      <param name="d2">Segundo objeto que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>Determina si un <see cref="T:System.DateTime" /> especificado es anterior a otro <see cref="T:System.DateTime" /> especificado.</summary>
      <returns>true si <paramref name="t1" /> es anterior a <paramref name="t2" />; en caso contrario, false.</returns>
      <param name="t1">Primer objeto que se va a comparar. </param>
      <param name="t2">Segundo objeto que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>Determina si un <see cref="T:System.DateTime" /> especificado representa una fecha y hora que es el igual o anterior a otro <see cref="T:System.DateTime" /> especificado.</summary>
      <returns>true si <paramref name="t1" /> es igual o posterior a <paramref name="t2" />; de lo contrario, false.</returns>
      <param name="t1">Primer objeto que se va a comparar. </param>
      <param name="t2">Segundo objeto que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>Resta una fecha y hora especificadas de otra fecha y hora especificadas y devuelve un intervalo de tiempo.</summary>
      <returns>Intervalo de horas entre <paramref name="d1" /> y <paramref name="d2" />; es decir, <paramref name="d1" /> menos <paramref name="d2" />.</returns>
      <param name="d1">Valor de fecha y hora del que restar (minuendo). </param>
      <param name="d2">Valor de fecha y hora que se resta (sustraendo). </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>Resta un intervalo de tiempo especificado de un valor de fecha y hora especificado y devuelve un nuevo valor de fecha y hora.</summary>
      <returns>Objeto cuyo valor es el valor de <paramref name="d" /> menos el valor de <paramref name="t" />.</returns>
      <param name="d">Valor de fecha y hora del que se va a restar. </param>
      <param name="t">Intervalo de hora que se van a restar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Resultante <see cref="T:System.DateTime" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>Convierte la representación de cadena de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente.</summary>
      <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene una fecha y hora que se van a convertir. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> no contiene una representación de cadena válida de una fecha y hora. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena para una fecha y hora en su <see cref="T:System.DateTime" /> equivalente, usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />, tal como especifica <paramref name="provider" />.</returns>
      <param name="s">Cadena que contiene una fecha y hora que se van a convertir. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> no contiene una representación de cadena válida de una fecha y hora. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Convierte la representación de cadena de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando la información de formato específica de la referencia cultural y el estilo de formato especificados.</summary>
      <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />, tal como especifican <paramref name="provider" /> y <paramref name="styles" />.</returns>
      <param name="s">Cadena que contiene una fecha y hora que se van a convertir. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="styles">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" /> para que la operación de análisis se realice correctamente y que define cómo interpretar la fecha analizada respecto a la zona horaria actual o la fecha actual.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> no contiene una representación de cadena válida de una fecha y hora. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> contiene una combinación no válida de <see cref="T:System.Globalization.DateTimeStyles" /> valores.Por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando la información de formato específica de la referencia cultural y el formato que se hayan especificado.El formato de la representación de cadena debe coincidir exactamente con el formato especificado.</summary>
      <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />, tal como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="s">Cadena que contiene una fecha y hora que se van a convertir. </param>
      <param name="format">Especificador de formato que define el formato requerido de <paramref name="s" />.Para obtener más información, vea la sección Comentarios.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> o <paramref name="format" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> o <paramref name="format" /> es una cadena vacía. o bien <paramref name="s" /> no contiene una fecha y hora que se corresponde con el patrón especificado en <paramref name="format" />. o bienEl componente de hora y el designador AM/PM en <paramref name="s" /> no coinciden.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando el formato, la información de formato específica de la referencia cultural y el estilo especificados.El formato de la representación de cadena debe coincidir exactamente con el formato especificado; de lo contrario, se produce una excepción.</summary>
      <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />, tal y como especifican <paramref name="format" />, <paramref name="provider" /> y <paramref name="style" />.</returns>
      <param name="s">Cadena que contiene una fecha y hora que se van a convertir. </param>
      <param name="format">Especificador de formato que define el formato requerido de <paramref name="s" />.Para obtener más información, vea la sección Comentarios.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="style">Combinación bit a bit de los valores de enumeración que proporciona información adicional sobre <paramref name="s" />, los elementos de estilo que pueden estar presentes en <paramref name="s" /> o sobre la conversión de <paramref name="s" /> en un valor de <see cref="T:System.DateTime" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> o <paramref name="format" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> o <paramref name="format" /> es una cadena vacía. o bien <paramref name="s" /> no contiene una fecha y hora que se corresponde con el patrón especificado en <paramref name="format" />. o bienEl componente de hora y el designador AM/PM en <paramref name="s" /> no coinciden.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contiene una combinación no válida de <see cref="T:System.Globalization.DateTimeStyles" /> valores.Por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando la matriz de formatos, la información de formato específica de la referencia cultural y el estilo especificados.El formato de la representación de cadena debe coincidir exactamente con, al menos, uno de los formatos especificados; de lo contrario se produce una excepción.</summary>
      <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />, tal y como especifican <paramref name="formats" />, <paramref name="provider" /> y <paramref name="style" />.</returns>
      <param name="s">Cadena que contiene una fecha y hora que se van a convertir. </param>
      <param name="formats">Matriz de formatos permitidos de <paramref name="s" />.Para obtener más información, vea la sección Comentarios.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="style">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> o <paramref name="formats" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> es una cadena vacía. o bien un elemento de <paramref name="formats" /> es una cadena vacía. o bien <paramref name="s" /> no contiene una fecha y hora que corresponde a cualquier elemento de <paramref name="formats" />. o bienEl componente de hora y el designador AM/PM en <paramref name="s" /> no coinciden.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contiene una combinación no válida de <see cref="T:System.Globalization.DateTimeStyles" /> valores.Por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>Obtiene el componente correspondiente a los segundos de la fecha representada por esta instancia.</summary>
      <returns>Componente de segundos, expresado como un valor entre 0 y 59.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>Crea un nuevo objeto <see cref="T:System.DateTime" /> que tiene el mismo número de pasos que el objeto <see cref="T:System.DateTime" /> especificado, pero en hora local, en hora universal coordinada (UTC) o en ninguna de ellas, según indique el valor de <see cref="T:System.DateTimeKind" /> especificado.</summary>
      <returns>Nuevo objeto que tiene el mismo número de pasos que el objeto representado por el parámetro <paramref name="value" /> y el valor <see cref="T:System.DateTimeKind" /> especificado por el parámetro <paramref name="kind" />. </returns>
      <param name="value">Fecha y hora. </param>
      <param name="kind">Uno de los valores de enumeración que indica si el nuevo objeto representa la hora local, la hora UTC o ninguna de ellas.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>Resta la fecha y hora especificadas de esta instancia.</summary>
      <returns>Intervalo que es igual a la fecha y hora representadas por esta instancia menos la fecha y hora representadas por <paramref name="value" />.</returns>
      <param name="value">Valor de fecha y hora que se va a restar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">El resultado es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>Resta la duración especificada de esta instancia.</summary>
      <returns>Objeto que es igual a la fecha y hora representadas por esta instancia menos el intervalo de hora representados por <paramref name="value" />.</returns>
      <param name="value">Intervalo de hora que se van a restar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">El resultado es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de esta instancia es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Número con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Valor Descripción Menor que cero Esta instancia es anterior a <paramref name="value" /> en el criterio de ordenación. Cero Esta instancia se produce en la misma posición que <paramref name="value" /> en el criterio de ordenación. Mayor que cero Esta instancia sigue a <paramref name="value" /> en el criterio de ordenación, o <paramref name="value" /> es null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> no es un <see cref="T:System.DateTime" />. </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Devuelve el objeto <see cref="T:System.DateTime" /> actual.</summary>
      <returns>Objeto actual.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos. </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Convierte el objeto <see cref="T:System.DateTime" /> actual en un objeto de un tipo especificado.</summary>
      <returns>Objeto del tipo especificado por el parámetro <paramref name="type" />, con un valor equivalente al objeto <see cref="T:System.DateTime" /> actual.</returns>
      <param name="type">El tipo deseado. </param>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="type" /> es null. </exception>
      <exception cref="T:System.InvalidCastException">Esta conversión no es compatible con la <see cref="T:System.DateTime" /> tipo.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>El valor devuelto para este miembro no se usa.</returns>
      <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />.(Este parámetro no se usa; especifique null).</param>
      <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>Obtiene el número de pasos que representan la fecha y hora de esta instancia.</summary>
      <returns>Número de pasos que representan la fecha y hora de esta instancia.El valor se encuentra comprendido entre DateTime.MinValue.Ticks y DateTime.MaxValue.Ticks.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>Obtiene la hora del día para esta instancia.</summary>
      <returns>Intervalo de tiempo que representa la fracción de día que ha transcurrido desde medianoche.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToBinary">
      <summary>Serializa el objeto <see cref="T:System.DateTime" /> actual a un valor binario de 64 bits que se puede usar después para volver a crear el objeto <see cref="T:System.DateTime" />.</summary>
      <returns>Entero con signo de 64 bits que codifica las propiedades <see cref="P:System.DateTime.Kind" /> y <see cref="P:System.DateTime.Ticks" />. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>Obtiene la fecha actual.</summary>
      <returns>Objeto que se ha establecido en la fecha del día, con el componente de hora establecido en 00:00:00.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en una hora de archivo de Windows.</summary>
      <returns>El valor del objeto <see cref="T:System.DateTime" /> actual expresado como una hora de archivo de Windows.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La hora del archivo resultante representaría una fecha y hora anterior a la medianoche (00:00 horas) del 1 de enero de 1601 d.C. (Era Cristiana),hora UTC.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en una hora de archivo de Windows.</summary>
      <returns>El valor del objeto <see cref="T:System.DateTime" /> actual expresado como una hora de archivo de Windows.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La hora del archivo resultante representaría una fecha y hora anterior a la medianoche (00:00 horas) del 1 de enero de 1601 d.C. (Era Cristiana),hora UTC.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual a la hora local.</summary>
      <returns>Objeto cuya propiedad <see cref="P:System.DateTime.Kind" /> es <see cref="F:System.DateTimeKind.Local" />, y cuyo valor es la hora local equivalente al valor del objeto <see cref="T:System.DateTime" /> actual, o <see cref="F:System.DateTime.MaxValue" /> si el valor convertido es demasiado grande para representarlo mediante un objeto <see cref="T:System.DateTime" />, o <see cref="F:System.DateTime.MinValue" /> si el valor convertido es demasiado pequeño para representarlo mediante un objeto <see cref="T:System.DateTime" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en su representación de cadena equivalente.</summary>
      <returns>La representación de cadena del valor del objeto <see cref="T:System.DateTime" /> actual.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La fecha y la hora están fuera del intervalo de fechas compatible con el calendario utilizado por la referencia cultural actual. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en su representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación de cadena del valor del objeto <see cref="T:System.DateTime" /> actual especificado por el parámetro <paramref name="provider" />.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">La fecha y hora está fuera del intervalo de fechas admitido por el calendario utilizado por <paramref name="provider" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en su representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación de cadena del valor del objeto <see cref="T:System.DateTime" /> actual especificado por el parámetro <paramref name="format" />.</returns>
      <param name="format">Cadena con formato de fecha y hora estándar o personalizado (vea Comentarios). </param>
      <exception cref="T:System.FormatException">La longitud de <paramref name="format" /> es 1, y no es uno de los caracteres del especificador de formato definidos para <see cref="T:System.Globalization.DateTimeFormatInfo" />.o bien <paramref name="format" /> no contiene un modelo de formato personalizado válido. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La fecha y la hora están fuera del intervalo de fechas compatible con el calendario utilizado por la referencia cultural actual.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en la representación de cadena equivalente usando el formato y la información de formato específica de la referencia cultural especificados.</summary>
      <returns>Representación de cadena del valor del objeto <see cref="T:System.DateTime" /> actual, tal como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena con formato de fecha y hora estándar o personalizado. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">La longitud de <paramref name="format" /> es 1, y no es uno de los caracteres del especificador de formato definidos para <see cref="T:System.Globalization.DateTimeFormatInfo" />.o bien <paramref name="format" /> no contiene un modelo de formato personalizado válido. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La fecha y hora está fuera del intervalo de fechas admitido por el calendario utilizado por <paramref name="provider" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual a la hora universal coordinada (UTC).</summary>
      <returns>Objeto cuya propiedad <see cref="P:System.DateTime.Kind" /> es <see cref="F:System.DateTimeKind.Utc" />, y cuyo valor es la hora UTC equivalente al valor del objeto <see cref="T:System.DateTime" /> actual, o <see cref="F:System.DateTime.MaxValue" /> si el valor convertido es demasiado grande para representarlo mediante un objeto <see cref="T:System.DateTime" />, o <see cref="F:System.DateTime.MinValue" /> si el valor convertido es demasiado pequeño para representarlo mediante un objeto <see cref="T:System.DateTime" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente y devuelve un valor que indica si la conversión se realizó correctamente.</summary>
      <returns>true si el parámetro <paramref name="s" /> se convierte correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene una fecha y hora que se van a convertir. </param>
      <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTime" /> equivalente a la fecha y hora incluidas en <paramref name="s" />, si la conversión se realiza correctamente, o <see cref="F:System.DateTime.MinValue" /> cuando se produce un error en la conversión.Se produce un error en la conversión cuando el parámetro <paramref name="s" /> es null, es una cadena vacía ("") o no contiene una representación de cadena válida de una fecha y hora.Este parámetro se pasa sin inicializar.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en su equivalente <see cref="T:System.DateTime" /> usando la información de formato de la referencia cultural y el estilo de formato especificados, y devuelve un valor que indica si la conversión tuvo éxito.</summary>
      <returns>true si el parámetro <paramref name="s" /> se convierte correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene una fecha y hora que se van a convertir. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="styles">Combinación bit a bit de valores de enumeración que define cómo se va a interpretar la fecha analizada respecto a la zona horaria actual o la fecha actual.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTime" /> equivalente a la fecha y hora incluidas en <paramref name="s" />, si la conversión se realiza correctamente, o <see cref="F:System.DateTime.MinValue" /> cuando se produce un error en la conversión.Se produce un error en la conversión cuando el parámetro <paramref name="s" /> es null, es una cadena vacía ("") o no contiene una representación de cadena válida de una fecha y hora.Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> no es válida <see cref="T:System.Globalization.DateTimeStyles" /> valor.o bien<paramref name="styles" /> contiene una combinación no válida de <see cref="T:System.Globalization.DateTimeStyles" /> valores (por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> es una referencia cultural neutra y no se puede utilizar en una operación de análisis.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando el formato, la información de formato específica de la referencia cultural y el estilo especificados.El formato de la representación de cadena debe coincidir exactamente con el formato especificado.El método devuelve un valor que indica si la conversión se realizó correctamente.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene una fecha y hora que se van a convertir. </param>
      <param name="format">Formato requerido de <paramref name="s" />.Vea la sección Comentarios para obtener más información.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="style">Combinación bit a bit de uno o varios valores de enumeración que indica el formato permitido de <paramref name="s" />. </param>
      <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTime" /> equivalente a la fecha y hora incluidas en <paramref name="s" />, si la conversión se realiza correctamente, o <see cref="F:System.DateTime.MinValue" /> cuando se produce un error en la conversión.Se producirá un error en la conversión cuando el parámetro <paramref name="s" /> o <paramref name="format" /> sea null, una cadena vacía o no contenga una fecha y una hora que correspondan al modelo especificado en <paramref name="format" />.Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> no es válida <see cref="T:System.Globalization.DateTimeStyles" /> valor.o bien<paramref name="styles" /> contiene una combinación no válida de <see cref="T:System.Globalization.DateTimeStyles" /> valores (por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando la matriz de formatos, la información de formato específica de la referencia cultural y el estilo especificados.El formato de la representación de cadena debe coincidir exactamente con al menos uno de los formatos especificados.El método devuelve un valor que indica si la conversión se realizó correctamente.</summary>
      <returns>true si el parámetro <paramref name="s" /> se convierte correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene una fecha y hora que se van a convertir. </param>
      <param name="formats">Matriz de formatos permitidos de <paramref name="s" />.Vea la sección Comentarios para obtener más información.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="style">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTime" /> equivalente a la fecha y hora incluidas en <paramref name="s" />, si la conversión se realiza correctamente, o <see cref="F:System.DateTime.MinValue" /> cuando se produce un error en la conversión.Se producirá un error en la conversión cuando <paramref name="s" /> o <paramref name="formats" /> sea null, cuando <paramref name="s" /> o un elemento de <paramref name="formats" /> sea una cadena vacía, o cuando el formato de <paramref name="s" /> no coincida exactamente con al menos uno de los modelos de formato de <paramref name="formats" />.Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> no es válida <see cref="T:System.Globalization.DateTimeStyles" /> valor.o bien<paramref name="styles" /> contiene una combinación no válida de <see cref="T:System.Globalization.DateTimeStyles" /> valores (por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>Obtiene un objeto <see cref="T:System.DateTime" /> que se establece en la fecha y hora actual del equipo, expresada como hora universal coordinada (UTC).</summary>
      <returns>Objeto cuyo valor es la fecha y hora UTC.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>Obtiene el componente correspondiente al año de la fecha representada por esta instancia.</summary>
      <returns>Año, entre 1 y 9999.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>Especifica si un objeto <see cref="T:System.DateTime" /> representa una hora local, una hora universal coordinada (UTC) o no se especifica como hora local ni como UTC.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>La hora representada es la hora local.</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>La hora representada no se especifica ni como hora local ni como hora universal coordinada (UTC).</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>La hora representada es UTC.</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>Representa un momento en el tiempo, normalmente expresado como una fecha y hora del día, relativo a la hora universal coordinada (UTC).</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTimeOffset" /> utilizando el valor <see cref="T:System.DateTime" /> especificado.</summary>
      <param name="dateTime">Fecha y hora.   </param>
      <exception cref="T:System.ArgumentOutOfRangeException">La fecha y hora de la hora universal coordinada (UTC) resultantes de aplicar el desplazamiento son anteriores a <see cref="F:System.DateTimeOffset.MinValue" />.o bienLa fecha y hora de la hora UTC resultantes de aplicar el desplazamiento son posteriores a <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTimeOffset" /> utilizando el valor <see cref="T:System.DateTime" /> y el desplazamiento especificados.</summary>
      <param name="dateTime">Fecha y hora.   </param>
      <param name="offset">Desplazamiento de hora a partir de la hora universal coordinada (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> es igual a <see cref="F:System.DateTimeKind.Utc" /> y <paramref name="offset" /> no es igual a cero.o bien<paramref name="dateTime.Kind" /> es igual a <see cref="F:System.DateTimeKind.Local" /> y <paramref name="offset" /> no es igual al desplazamiento de la zona horaria local del sistema.o bien<paramref name="offset" /> no se especifica en minutos enteros.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> es menor que -14 horas o mayor que 14 horas.o bien<see cref="P:System.DateTimeOffset.UtcDateTime" /> es menor que <see cref="F:System.DateTimeOffset.MinValue" /> o mayor que <see cref="F:System.DateTimeOffset.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTimeOffset" /> usando el año, mes, día, hora, minuto, segundo, milisegundo y desplazamiento especificados.</summary>
      <param name="year">Año (del 1 al 9999).</param>
      <param name="month">Mes (del 1 al 12).</param>
      <param name="day">Día (del 1 al número de días de <paramref name="month" />).</param>
      <param name="hour">Horas (de 0 a 23).   </param>
      <param name="minute">Minutos (de 0 a 59).</param>
      <param name="second">Segundos (de 0 a 59).</param>
      <param name="millisecond">Milisegundos (de 0 a 999).</param>
      <param name="offset">Desplazamiento de hora a partir de la hora universal coordinada (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> no representa minutos enteros.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> es menor que uno o mayor que 9999.o bien<paramref name="month" /> es menor que uno o mayor que 12.o bien<paramref name="day" /> es menor que uno o mayor que el número de días de <paramref name="month" />.o bien<paramref name="hour" /> es menor que cero o mayor que 23.o bien<paramref name="minute" /> es menor que 0 o mayor que 59.o bien<paramref name="second" /> es menor que 0 o mayor que 59.o bien<paramref name="millisecond" /> es menor que 0 o mayor que 999.o bien<paramref name="offset" /> es menor que -14 o mayor que 14.o bienEl valor de la propiedad <see cref="P:System.DateTimeOffset.UtcDateTime" /> es anterior a <see cref="F:System.DateTimeOffset.MinValue" /> o posterior a <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTimeOffset" /> usando el año, mes, día, hora, minuto, segundo y desplazamiento especificados.</summary>
      <param name="year">Año (del 1 al 9999).</param>
      <param name="month">Mes (del 1 al 12).</param>
      <param name="day">Día (del 1 al número de días de <paramref name="month" />).</param>
      <param name="hour">Horas (de 0 a 23).   </param>
      <param name="minute">Minutos (de 0 a 59).</param>
      <param name="second">Segundos (de 0 a 59).</param>
      <param name="offset">Desplazamiento de hora a partir de la hora universal coordinada (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> no representa minutos enteros.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> es menor que uno o mayor que 9999.o bien<paramref name="month" /> es menor que uno o mayor que 12.o bien<paramref name="day" /> es menor que uno o mayor que el número de días de <paramref name="month" />.o bien<paramref name="hour" /> es menor que cero o mayor que 23.o bien<paramref name="minute" /> es menor que 0 o mayor que 59.o bien<paramref name="second" /> es menor que 0 o mayor que 59.o bien<paramref name="offset" /> es menor que -14 horas o mayor que 14 horas.o bienEl valor de la propiedad <see cref="P:System.DateTimeOffset.UtcDateTime" /> es anterior a <see cref="F:System.DateTimeOffset.MinValue" /> o posterior a <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTimeOffset" /> utilizando el número de pasos y el desplazamiento especificados.</summary>
      <param name="ticks">Fecha y hora expresadas como el número de intervalos de 100 nanosegundos transcurridos desde la medianoche (00:00:00) del 1 de enero de 0001.</param>
      <param name="offset">Desplazamiento de hora a partir de la hora universal coordinada (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> no se especifica en minutos enteros.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de la propiedad <see cref="P:System.DateTimeOffset.UtcDateTime" /> es anterior a <see cref="F:System.DateTimeOffset.MinValue" /> o posterior a <see cref="F:System.DateTimeOffset.MaxValue" />.o bien<paramref name="ticks" /> es menor que DateTimeOffset.MinValue.Ticks o mayor que DateTimeOffset.MaxValue.Ticks.o bien<paramref name="Offset" /> es menor que -14 horas o mayor que 14 horas.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>Devuelve un nuevo <see cref="T:System.DateTimeOffset" /> que agrega un intervalo de tiempo especificado en el valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representada por el objeto <see cref="T:System.DateTimeOffset" /> actual y el intervalo de tiempo representado por <paramref name="timeSpan" />.</returns>
      <param name="timeSpan">Objeto <see cref="T:System.TimeSpan" /> que representa un intervalo de tiempo positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" />.o bien El valor de <see cref="T:System.DateTimeOffset" /> resultante es mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>Devuelve un nuevo <see cref="T:System.DateTimeOffset" /> objeto que agrega un número especificado de días completos y fraccionarios al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por el objeto <see cref="T:System.DateTimeOffset" /> actual y el número de días representados por <paramref name="days" />.</returns>
      <param name="days">Número de días enteros y fraccionarios.El número puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" />.o bien El valor de <see cref="T:System.DateTimeOffset" /> resultante es mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>Devuelve un nuevo <see cref="T:System.DateTimeOffset" /> objeto que agrega un número especificado de horas enteras y fraccionarias al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por el objeto <see cref="T:System.DateTimeOffset" /> actual y el número de horas representadas por <paramref name="hours" />.</returns>
      <param name="hours">Número de horas enteras y fraccionarias.El número puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" />.o bien El valor de <see cref="T:System.DateTimeOffset" /> resultante es mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>Devuelve un nuevo <see cref="T:System.DateTimeOffset" /> objeto que agrega un número especificado de milisegundos al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y la hora representadas por el objeto <see cref="T:System.DateTimeOffset" /> actual y el número de milisegundos completos representados por <paramref name="milliseconds" />.</returns>
      <param name="milliseconds">Número de milisegundos enteros y fraccionarios.El número puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" />.o bien El valor de <see cref="T:System.DateTimeOffset" /> resultante es mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>Devuelve un nuevo <see cref="T:System.DateTimeOffset" /> objeto que agrega un número especificado de minutos completos y fraccionarios al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por el objeto <see cref="T:System.DateTimeOffset" /> actual y el número de minutos representados por <paramref name="minutes" />.</returns>
      <param name="minutes">Número de minutos enteros y fraccionarios.El número puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" />.o bien El valor de <see cref="T:System.DateTimeOffset" /> resultante es mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>Devuelve un nuevo <see cref="T:System.DateTimeOffset" /> objeto que agrega un número especificado de meses al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por el objeto <see cref="T:System.DateTimeOffset" /> actual y el número de meses representados por <paramref name="months" />.</returns>
      <param name="months">Número de meses completos.El número puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" />.o bien El valor de <see cref="T:System.DateTimeOffset" /> resultante es mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>Devuelve un nuevo <see cref="T:System.DateTimeOffset" /> objeto que agrega un número especificado de segundos completos y fraccionarios al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por el objeto <see cref="T:System.DateTimeOffset" /> actual y el número de segundos representados por <paramref name="seconds" />.</returns>
      <param name="seconds">Número de segundos enteros y fraccionarios.El número puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" />.o bien El valor de <see cref="T:System.DateTimeOffset" /> resultante es mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>Devuelve un nuevo <see cref="T:System.DateTimeOffset" /> objeto que agrega un número de pasos especificado al valor de esta instancia.</summary>
      <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por el objeto <see cref="T:System.DateTimeOffset" /> actual y el número de pasos representados por <paramref name="ticks" />.</returns>
      <param name="ticks">Número de pasos de 100 nanosegundos.El número puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" />.o bien El valor de <see cref="T:System.DateTimeOffset" /> resultante es mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>Devuelve un nuevo <see cref="T:System.DateTimeOffset" /> objeto que agrega un número especificado de años al valor de esta instancia.</summary>
      <returns>Objeto cuyo valor es la suma de la fecha y hora representadas por el objeto <see cref="T:System.DateTimeOffset" /> actual y el número de años representados por <paramref name="years" />.</returns>
      <param name="years">Número de años.El número puede ser positivo o negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" />.o bien El valor de <see cref="T:System.DateTimeOffset" /> resultante es mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Compara dos objetos <see cref="T:System.DateTimeOffset" /> e indica si el primero es anterior, igual o posterior al segundo.</summary>
      <returns>Entero con signo que indica si el valor del parámetro <paramref name="first" /> es anterior, posterior o igual a la hora que el valor del parámetro <paramref name="second" />, como se muestra en la tabla siguiente.Valor devueltoSignificadoMenor que cero<paramref name="first" /> es anterior a <paramref name="second" />.Cero<paramref name="first" /> es igual a <paramref name="second" />.Mayor que cero<paramref name="first" /> es posterior a <paramref name="second" />.</returns>
      <param name="first">Primer objeto que se va a comparar.</param>
      <param name="second">Segundo objeto que se va a comparar.</param>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>Compara el objeto <see cref="T:System.DateTimeOffset" /> actual con un objeto <see cref="T:System.DateTimeOffset" /> especificado e indica si el objeto actual es anterior, igual o posterior al segundo objeto <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Entero con signo que indica la relación entre el objeto <see cref="T:System.DateTimeOffset" /> actual y <paramref name="other" />, como se muestra en la tabla siguiente.Valor devueltoDescripciónMenor que ceroEl objeto <see cref="T:System.DateTimeOffset" /> actual es anterior a <paramref name="other" />.CeroEl objeto <see cref="T:System.DateTimeOffset" /> actual es igual a <paramref name="other" />.Mayor que cero.El objeto <see cref="T:System.DateTimeOffset" /> actual es posterior a <paramref name="other" />.</returns>
      <param name="other">Objeto que se va a comparar con el objeto <see cref="T:System.DateTimeOffset" /> actual.</param>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>Obtiene un valor <see cref="T:System.DateTime" /> que representa el componente de fecha del objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Valor <see cref="T:System.DateTime" /> que representa el componente de fecha del objeto <see cref="T:System.DateTimeOffset" /> actual.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>Obtiene un valor <see cref="T:System.DateTime" /> que representa la fecha y hora del objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Fecha y hora del objeto <see cref="T:System.DateTimeOffset" /> actual.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>Obtiene el día del mes representado por el objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Componente de día del objeto <see cref="T:System.DateTimeOffset" /> actual, expresado como un valor entre 1 y 31.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>Obtiene el día de la semana representado por el objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Uno de los valores de enumeración que indica el día de la semana del objeto <see cref="T:System.DateTimeOffset" /> actual.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>Obtiene el día del año representado por el objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Día del año del objeto <see cref="T:System.DateTimeOffset" /> actual, expresado como un valor entre 1 y 366.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>Determina si el objeto <see cref="T:System.DateTimeOffset" /> actual representa el mismo momento en el tiempo que el objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
      <returns>true si los dos objetos <see cref="T:System.DateTimeOffset" /> tienen el mismo valor <see cref="P:System.DateTimeOffset.UtcDateTime" />; en caso contrario, false.</returns>
      <param name="other">Objeto que se va a comparar con el objeto <see cref="T:System.DateTimeOffset" /> actual.   </param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determina si dos objetos <see cref="T:System.DateTimeOffset" /> especificados representan el mismo momento en el tiempo.</summary>
      <returns>true si los dos objetos <see cref="T:System.DateTimeOffset" /> tienen el mismo valor <see cref="P:System.DateTimeOffset.UtcDateTime" />; en caso contrario, false.</returns>
      <param name="first">Primer objeto que se va a comparar.</param>
      <param name="second">Segundo objeto que se va a comparar.</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>Determina si un objeto <see cref="T:System.DateTimeOffset" /> representa el mismo momento en el tiempo que un objeto especificado.</summary>
      <returns>true si el parámetro <paramref name="obj" /> es un objeto <see cref="T:System.DateTimeOffset" /> y representa el mismo momento en el tiempo que el objeto <see cref="T:System.DateTimeOffset" /> actual; en caso contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto <see cref="T:System.DateTimeOffset" /> actual.</param>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>Determina si el objeto <see cref="T:System.DateTimeOffset" /> actual representa la misma hora y tiene el mismo desplazamiento que un objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
      <returns>true si el objeto <see cref="T:System.DateTimeOffset" /> actual y <paramref name="other" /> tienen el mismo valor de fecha y hora y el mismo valor <see cref="P:System.DateTimeOffset.Offset" />; en caso contrario, false.</returns>
      <param name="other">Objeto que se va a comparar con el objeto <see cref="T:System.DateTimeOffset" /> actual. </param>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>Convierte la hora de archivo de Windows especificada en una hora local equivalente.</summary>
      <returns>Un objeto que representa la fecha y hora de <paramref name="fileTime" /> con el desplazamiento establecido como el desplazamiento de la hora local.</returns>
      <param name="fileTime">Hora de un archivo de Windows, expresada en pasos.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> es menor que cero.o bien<paramref name="filetime" /> es mayor que DateTimeOffset.MaxValue.Ticks.</exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)">
      <summary>Convierte una hora de Unix que se expresa como el número de milisegundos que han transcurrido desde 1970-01-01T00:00:00Z a una <see cref="T:System.DateTimeOffset" /> valor.</summary>
      <returns>Valor de fecha y hora que representa el mismo momento en el tiempo que el tiempo de Unix. </returns>
      <param name="milliseconds">Uno de Unix, expresado como el número de milisegundos que han transcurrido desde 1970-01-01T00:00:00Z (1de de enero de 1970, en UTC de 12:00 A.M.).En ocasiones Unix antes de esta fecha, su valor es negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> es menor que -62.135.596.800.000. o bien<paramref name="milliseconds" /> es mayor que 253.402.300.799.999. </exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)">
      <summary>Convierte una hora de Unix que se expresa como el número de segundos que han transcurrido desde 1970-01-01T00:00:00Z a una <see cref="T:System.DateTimeOffset" /> valor. </summary>
      <returns>Valor de fecha y hora que representa el mismo momento en el tiempo que el tiempo de Unix. </returns>
      <param name="seconds">Uno de Unix, expresado como el número de segundos que han transcurrido desde 1970-01-01T00:00:00Z (1de de enero de 1970, en UTC de 12:00 A.M.).En ocasiones Unix antes de esta fecha, su valor es negativo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> es menor que -62.135.596.800. o bien<paramref name="seconds" /> es mayor que 253.402.300.799. </exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>Devuelve el código hash del objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>Obtiene el componente de hora de la hora representada por el objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Componente de hora del objeto <see cref="T:System.DateTimeOffset" /> actual.Esta propiedad usa un reloj de 24 horas; el valor va de 0 a 23.</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>Obtiene un valor <see cref="T:System.DateTime" /> que representa la fecha y hora local del objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Fecha y hora local del objeto <see cref="T:System.DateTimeOffset" /> actual.</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>Representa el mayor valor posible de <see cref="T:System.DateTimeOffset" />.Este campo es de solo lectura.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> está fuera del intervalo del calendario predeterminado de la referencia cultural, actual o especificado.</exception>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>Obtiene el componente de milisegundos de la hora representada por el objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Componente de milisegundos del objeto <see cref="T:System.DateTimeOffset" /> actual, expresado como un entero entre 0 y 999.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>Obtiene el componente de minuto de la hora representada por el objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Componente de minuto del objeto <see cref="T:System.DateTimeOffset" /> actual, expresado como un entero entre 0 y 59.</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>Representa el menor valor posible de <see cref="T:System.DateTimeOffset" />.Este campo es de solo lectura.</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>Obtiene el componente de mes de la fecha representada por el objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Componente de mes del objeto <see cref="T:System.DateTimeOffset" /> actual, expresado como un entero entre 1 y 12.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>Obtiene un objeto <see cref="T:System.DateTimeOffset" /> que se establece en la fecha y hora actual del equipo actual, con el desplazamiento establecido como desplazamiento de la hora local respecto de la hora universal coordinada (UTC).</summary>
      <returns>Objeto <see cref="T:System.DateTimeOffset" /> cuya fecha y hora es la hora local actual y cuyo desplazamiento es el de la zona horaria local respecto de la hora universal coordinada (UTC).</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>Obtiene el desplazamiento de la hora respecto de la hora universal coordinada (UTC). </summary>
      <returns>Diferencia entre el valor de hora del objeto <see cref="T:System.DateTimeOffset" /> actual y la hora universal coordinada (UTC).</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>Agrega un intervalo de tiempo especificado a un objeto <see cref="T:System.DateTimeOffset" /> que tiene una fecha y hora especificadas y produce un objeto <see cref="T:System.DateTimeOffset" /> que tiene una fecha y hora nuevas.</summary>
      <returns>Objeto cuyo valor es la suma de los valores de <paramref name="dateTimeTz" /> y <paramref name="timeSpan" />.</returns>
      <param name="dateTimeOffset">Objeto al que se va a agregar el intervalo de tiempo.</param>
      <param name="timeSpan">Intervalo de tiempo que se va a agregar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" />.o bien El valor de <see cref="T:System.DateTimeOffset" /> resultante es mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determina si dos objetos <see cref="T:System.DateTimeOffset" /> especificados representan el mismo momento en el tiempo.</summary>
      <returns>true si los dos objetos <see cref="T:System.DateTimeOffset" /> tienen el mismo valor <see cref="P:System.DateTimeOffset.UtcDateTime" />; en caso contrario, false.</returns>
      <param name="left">Primer objeto que se va a comparar.</param>
      <param name="right">Segundo objeto que se va a comparar.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determina si un objeto <see cref="T:System.DateTimeOffset" /> especificado es mayor que (o posterior a) el segundo objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
      <returns>true si el valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="left" /> es posterior al valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="right" />; en caso contrario, false.</returns>
      <param name="left">Primer objeto que se va a comparar.</param>
      <param name="right">Segundo objeto que se va a comparar.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determina si un objeto <see cref="T:System.DateTimeOffset" /> especificado es mayor o igual que un segundo objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
      <returns>true si el valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="left" /> es igual o posterior al valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="right" />; en caso contrario, false.</returns>
      <param name="left">Primer objeto que se va a comparar.</param>
      <param name="right">Segundo objeto que se va a comparar.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>Define una conversión implícita de un objeto <see cref="T:System.DateTime" /> en un objeto <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>El objeto convertido.</returns>
      <param name="dateTime">Objeto que se va a convertir. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">La fecha y hora de la hora universal coordinada (UTC) resultantes de aplicar el desplazamiento son anteriores a <see cref="F:System.DateTimeOffset.MinValue" />.o bienLa fecha y hora de la hora UTC resultantes de aplicar el desplazamiento son posteriores a <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determina si dos objetos <see cref="T:System.DateTimeOffset" /> especificados hacen referencia a diferentes momentos en el tiempo.</summary>
      <returns>true si <paramref name="left" /> y <paramref name="right" /> no tienen el mismo valor <see cref="P:System.DateTimeOffset.UtcDateTime" />; en caso contrario, false.</returns>
      <param name="left">Primer objeto que se va a comparar.</param>
      <param name="right">Segundo objeto que se va a comparar.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determina si un objeto <see cref="T:System.DateTimeOffset" /> especificado es menor que un segundo objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
      <returns>true si el valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="left" /> es anterior al valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="right" />; en caso contrario, false.</returns>
      <param name="left">Primer objeto que se va a comparar.</param>
      <param name="right">Segundo objeto que se va a comparar.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determina si un objeto <see cref="T:System.DateTimeOffset" /> especificado es menor que un segundo objeto <see cref="T:System.DateTimeOffset" /> especificado.</summary>
      <returns>true si el valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="left" /> es anterior al valor <see cref="P:System.DateTimeOffset.UtcDateTime" /> de <paramref name="right" />; en caso contrario, false.</returns>
      <param name="left">Primer objeto que se va a comparar.</param>
      <param name="right">Segundo objeto que se va a comparar.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Resta un objeto <see cref="T:System.DateTimeOffset" /> de otro y produce un intervalo de tiempo.</summary>
      <returns>Objeto que representa la diferencia entre <paramref name="left" /> y <paramref name="right" />.</returns>
      <param name="left">Minuendo.   </param>
      <param name="right">Sustraendo.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>Resta un intervalo de tiempo especificado de una fecha y hora especificadas y produce una fecha y hora nuevas.</summary>
      <returns>Objeto que es igual al valor de <paramref name="dateTimeOffset" /> menos <paramref name="timeSpan" />.</returns>
      <param name="dateTimeOffset">Objeto de fecha y hora del que se resta.</param>
      <param name="timeSpan">Intervalo de hora que se van a restar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" /> o mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>Convierte la representación de cadena especificada de una fecha, hora y desplazamiento en su equivalente de <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Un objeto equivalente a la fecha y hora contenidas en <paramref name="input" />.</returns>
      <param name="input">Cadena que contiene una fecha y hora que se van a convertir.</param>
      <exception cref="T:System.ArgumentException">El desplazamiento es mayor que 14 horas o menor que -14 horas.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> no contiene una representación de cadena válida de una fecha y hora.o bien<paramref name="input" /> contiene la representación de cadena de un valor de desplazamiento sin una fecha u hora.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena que se haya especificado para una fecha y hora en su <see cref="T:System.DateTimeOffset" /> equivalente, utilizando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Un objeto equivalente a la fecha y hora contenidas en <paramref name="input" />, tal como especifica <paramref name="formatProvider" />.</returns>
      <param name="input">Cadena que contiene una fecha y hora que se van a convertir.   </param>
      <param name="formatProvider">Un objeto que proporciona información de formato específica de la referencia cultural sobre <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">El desplazamiento es mayor que 14 horas o menor que -14 horas.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> no contiene una representación de cadena válida de una fecha y hora.o bien<paramref name="input" /> contiene la representación de cadena de un valor de desplazamiento sin una fecha u hora.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTimeOffset" /> equivalente, utilizando la información de formato específica de la referencia cultural y el estilo de formato que se hayan especificado.</summary>
      <returns>Un objeto equivalente a la fecha y hora contenidas en <paramref name="input" />, tal como especifican <paramref name="formatProvider" /> y <paramref name="styles" />.</returns>
      <param name="input">Cadena que contiene una fecha y hora que se van a convertir.   </param>
      <param name="formatProvider">Un objeto que proporciona información de formato específica de la referencia cultural sobre <paramref name="input" />.</param>
      <param name="styles">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="input" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentException">El desplazamiento es mayor que 14 horas o menor que -14 horas.o bien<paramref name="styles" /> no es un valor válido de <see cref="T:System.Globalization.DateTimeStyles" />.o bien<paramref name="styles" /> incluye un valor <see cref="T:System.Globalization.DateTimeStyles" /> no compatible.o bien<paramref name="styles" /> incluye valores <see cref="T:System.Globalization.DateTimeStyles" /> que no se pueden usar juntos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> no contiene una representación de cadena válida de una fecha y hora.o bien<paramref name="input" /> contiene la representación de cadena de un valor de desplazamiento sin una fecha u hora.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTimeOffset" /> equivalente, utilizando la información de formato específica de la referencia cultural y el formato que se hayan especificado.El formato de la representación de cadena debe coincidir exactamente con el formato especificado.</summary>
      <returns>Un objeto equivalente a la fecha y hora contenidas en <paramref name="input" />, tal como especifican <paramref name="format" /> y <paramref name="formatProvider" />.</returns>
      <param name="input">Cadena que contiene una fecha y hora que se van a convertir.</param>
      <param name="format">Especificador de formato que define el formato esperado de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">El desplazamiento es mayor que 14 horas o menor que -14 horas.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />is null.o bien<paramref name="format" />is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> es una cadena vacía ("").o bien<paramref name="input" /> no contiene una representación de cadena válida de una fecha y hora.o bien<paramref name="format" /> es una cadena vacía.o bienEl componente de hora y el designador AM/PM en <paramref name="input" /> no coinciden.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTimeOffset" /> equivalente, utilizando el formato, la información de formato específica de la referencia cultural y el estilo especificados.El formato de la representación de cadena debe coincidir exactamente con el formato especificado.</summary>
      <returns>Un objeto equivalente a la fecha y hora contenidas en el parámetro <paramref name="input" />, tal como especifican los parámetros <paramref name="format" />, <paramref name="formatProvider" /> y <paramref name="styles" />.</returns>
      <param name="input">Cadena que contiene una fecha y hora que se van a convertir.</param>
      <param name="format">Especificador de formato que define el formato esperado de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="input" />.</param>
      <param name="styles">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">El desplazamiento es mayor que 14 horas o menor que -14 horas.o bienEl parámetro <paramref name="styles" /> incluye un valor no compatible.o bienEl parámetro <paramref name="styles" /> contiene valores <see cref="T:System.Globalization.DateTimeStyles" /> que no se pueden usar juntos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />is null.o bien<paramref name="format" />is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> es una cadena vacía ("").o bien<paramref name="input" /> no contiene una representación de cadena válida de una fecha y hora.o bien<paramref name="format" /> es una cadena vacía.o bienEl componente de hora y el designador AM/PM en <paramref name="input" /> no coinciden. </exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Convierte la representación de cadena especificada para una fecha y hora en su equivalente de <see cref="T:System.DateTimeOffset" />, usando los formatos, la información de formato específica de la referencia cultural y el estilo especificados.El formato de la representación de cadena debe coincidir exactamente con uno de los formatos especificados.</summary>
      <returns>Un objeto equivalente a la fecha y hora contenidas en el parámetro <paramref name="input" />, tal como especifican los parámetros <paramref name="formats" />, <paramref name="formatProvider" /> y <paramref name="styles" />.</returns>
      <param name="input">Cadena que contiene una fecha y hora que se van a convertir.</param>
      <param name="formats">Matriz de especificadores de formato que definen los formatos esperados de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="input" />.</param>
      <param name="styles">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">El desplazamiento es mayor que 14 horas o menor que -14 horas.o bien<paramref name="styles" /> incluye un valor no compatible.o bienEl parámetro <paramref name="styles" /> contiene valores <see cref="T:System.Globalization.DateTimeStyles" /> que no se pueden usar juntos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> es una cadena vacía ("").o bien<paramref name="input" /> no contiene una representación de cadena válida de una fecha y hora.o bienNingún elemento de <paramref name="formats" /> contiene un especificador de formato válido.o bienEl componente de hora y el designador AM/PM en <paramref name="input" /> no coinciden. </exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>Obtiene el componente de milisegundos de la hora representada por el objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Componente de segundos del objeto <see cref="T:System.DateTimeOffset" />, expresado como un valor entero entre 0 y 59.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>Resta un valor <see cref="T:System.DateTimeOffset" /> que representa una fecha y hora concreta del objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Objeto que especifica el intervalo entre los dos objetos <see cref="T:System.DateTimeOffset" />.</returns>
      <param name="value">Un objeto que representa el valor que se va a restar. </param>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>Resta un intervalo de tiempo especificado del objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Un objeto que es igual a la fecha y hora representadas por el objeto <see cref="T:System.DateTimeOffset" /> actual, menos el intervalo de tiempo representado por <paramref name="value" />.</returns>
      <param name="value">Intervalo de hora que se van a restar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <see cref="T:System.DateTimeOffset" /> resultante es menor que <see cref="F:System.DateTimeOffset.MinValue" />.o bien El valor de <see cref="T:System.DateTimeOffset" /> resultante es mayor que <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>Compara el valor del objeto <see cref="T:System.DateTimeOffset" /> actual con otro objeto del mismo tipo.</summary>
      <returns>Entero con signo de 32 bits que indica si el objeto <see cref="T:System.DateTimeOffset" /> actual es menor, iguale o mayor que <paramref name="obj" />.Los valores devueltos del método se interpretan como sigue:Valor devueltoDescripciónMenor que ceroEl objeto <see cref="T:System.DateTimeOffset" /> actual es menor que (o anterior a) <paramref name="obj" />.CeroEl objeto <see cref="T:System.DateTimeOffset" /> actual especificado es igual (es el mismo momento en el tiempo) que <paramref name="obj" />.Mayor que ceroEl objeto <see cref="T:System.DateTimeOffset" /> actual es mayor que (posterior a) <paramref name="obj" />.</returns>
      <param name="obj">El objeto que se compara con el objeto <see cref="T:System.DateTimeOffset" /> actual.</param>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>Obtiene el número de pasos que representa la fecha y hora del objeto <see cref="T:System.DateTimeOffset" /> actual en la hora.</summary>
      <returns>Número de pasos en la hora del reloj del objeto <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>Obtiene la hora del día del objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Intervalo de tiempo de la fecha actual que ha transcurrido desde la medianoche.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTimeOffset" /> actual en una hora de archivo de Windows.</summary>
      <returns>El valor del objeto <see cref="T:System.DateTimeOffset" /> actual, expresado como una hora de archivo de Windows.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La hora de archivo resultante representaría una fecha y una hora anteriores a la medianoche del 1 de enero de 1601 d.C.Hora universal coordinada (UTC).</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>Convierte el objeto <see cref="T:System.DateTimeOffset" /> actual con un objeto <see cref="T:System.DateTimeOffset" /> que representa la hora local.</summary>
      <returns>Un objeto que representa la fecha y hora del objeto <see cref="T:System.DateTimeOffset" /> actual convertidas en la hora local.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTimeOffset" /> actual en la fecha y hora especificadas por un valor de desplazamiento.</summary>
      <returns>Un objeto que es igual al objeto <see cref="T:System.DateTimeOffset" /> original (es decir, sus métodos <see cref="M:System.DateTimeOffset.ToUniversalTime" /> devuelven momentos de tiempo idénticos), pero cuya propiedad <see cref="P:System.DateTimeOffset.Offset" /> está establecida en <paramref name="offset" />.</returns>
      <param name="offset">Desplazamiento al que se convierte el valor <see cref="T:System.DateTimeOffset" />.   </param>
      <exception cref="T:System.ArgumentException">El objeto <see cref="T:System.DateTimeOffset" /> resultante tiene un valor <see cref="P:System.DateTimeOffset.DateTime" /> anterior a <see cref="F:System.DateTimeOffset.MinValue" />.o bienEl objeto <see cref="T:System.DateTimeOffset" /> resultante tiene un valor <see cref="P:System.DateTimeOffset.DateTime" /> posterior a <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> es menor que -14 horas.o bien<paramref name="offset" /> es mayor que 14 horas.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTimeOffset" /> actual en su representación de cadena equivalente.</summary>
      <returns>Representación de cadena de un objeto <see cref="T:System.DateTimeOffset" /> que incluye el desplazamiento anexado al final de la cadena.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La fecha y la hora están fuera del intervalo de fechas compatible con el calendario utilizado por la referencia cultural actual. </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTimeOffset" /> actual en su representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación de cadena del valor del objeto <see cref="T:System.DateTimeOffset" /> actual, tal como especifica <paramref name="formatProvider" />.</returns>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">La fecha y la hora están fuera del intervalo de fechas compatible con el calendario utilizado por <paramref name="formatProvider" />. </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTimeOffset" /> actual en su representación de cadena equivalente utilizando el formato especificado.</summary>
      <returns>Representación de cadena del valor del objeto <see cref="T:System.DateTimeOffset" /> actual, tal como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato.</param>
      <exception cref="T:System.FormatException">La longitud de <paramref name="format" /> es uno, en vez de ser uno de los caracteres especificadores de formato estándar definidos para <see cref="T:System.Globalization.DateTimeFormatInfo" />. o bien<paramref name="format" /> no contiene un modelo de formato personalizado válido.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La fecha y la hora están fuera del intervalo de fechas compatible con el calendario utilizado por la referencia cultural actual. </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor del objeto <see cref="T:System.DateTimeOffset" /> actual en la representación de cadena equivalente utilizando el formato y la información de formato específica de la referencia cultural especificados.</summary>
      <returns>Representación de cadena del valor del objeto <see cref="T:System.DateTimeOffset" /> actual, tal como especifican los parámetros <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena de formato.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.FormatException">La longitud de <paramref name="format" /> es uno, en vez de ser uno de los caracteres especificadores de formato estándar definidos para <see cref="T:System.Globalization.DateTimeFormatInfo" />.o bien<paramref name="format" /> no contiene un modelo de formato personalizado válido. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La fecha y la hora están fuera del intervalo de fechas compatible con el calendario utilizado por <paramref name="formatProvider" />. </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>Convierte el objeto <see cref="T:System.DateTimeOffset" /> actual en un valor <see cref="T:System.DateTimeOffset" /> que representa la hora universal coordinada (UTC).</summary>
      <returns>Un objeto que representa la fecha y hora del objeto <see cref="T:System.DateTimeOffset" /> convertidas en la hora universal coordinada (UTC).</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeMilliseconds">
      <summary>Devuelve el número de milisegundos que han transcurrido desde 1970-01-01T00:00:00.000Z. </summary>
      <returns>El número de milisegundos que han transcurrido desde 1970-01-01T00:00:00.000Z. </returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeSeconds">
      <summary>Devuelve el número de segundos que han transcurrido desde 1970-01-01T00:00:00Z. </summary>
      <returns>El número de segundos que han transcurrido desde 1970-01-01T00:00:00Z. </returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>Intenta convertir una representación de cadena especificada de una fecha y hora en su <see cref="T:System.DateTimeOffset" /> equivalente y devuelve un valor que indica si la conversión tuvo éxito.</summary>
      <returns>true si el parámetro <paramref name="input" /> se convierte correctamente; de lo contrario, false.</returns>
      <param name="input">Cadena que contiene una fecha y hora que se van a convertir.</param>
      <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTimeOffset" /> equivalente a la fecha y hora de <paramref name="input" />, si la conversión se realiza correctamente, o <see cref="F:System.DateTimeOffset.MinValue" /> si se produce un error en la conversión.Se produce un error en la conversión cuando el parámetro <paramref name="input" /> es null o no contiene ninguna representación de cadena válida de una fecha y hora.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Intenta convertir una representación de cadena especificada de una fecha y hora en su <see cref="T:System.DateTimeOffset" /> equivalente y devuelve un valor que indica si la conversión tuvo éxito.</summary>
      <returns>true si el parámetro <paramref name="input" /> se convierte correctamente; de lo contrario, false.</returns>
      <param name="input">Cadena que contiene una fecha y hora que se van a convertir.</param>
      <param name="formatProvider">Un objeto que proporciona información de formato específica de la referencia cultural sobre <paramref name="input" />.</param>
      <param name="styles">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="input" />. </param>
      <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTimeOffset" /> equivalente a la fecha y hora de <paramref name="input" />, si la conversión se realiza correctamente, o <see cref="F:System.DateTimeOffset.MinValue" /> si se produce un error en la conversión.Se produce un error en la conversión cuando el parámetro <paramref name="input" /> es null o no contiene ninguna representación de cadena válida de una fecha y hora.Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> incluye un valor <see cref="T:System.Globalization.DateTimeStyles" /> sin definir.o bienNo se admite <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />.o bien<paramref name="styles" /> incluye valores <see cref="T:System.Globalization.DateTimeStyles" /> que se excluyen mutuamente.</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTimeOffset" /> equivalente, utilizando el formato, la información de formato específica de la referencia cultural y el estilo especificados.El formato de la representación de cadena debe coincidir exactamente con el formato especificado.</summary>
      <returns>true si el parámetro <paramref name="input" /> se convierte correctamente; de lo contrario, false.</returns>
      <param name="input">Cadena que contiene una fecha y hora que se van a convertir.</param>
      <param name="format">Especificador de formato que define el formato requerido de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="input" />.</param>
      <param name="styles">Combinación bit a bit de valores de enumeración que indica el formato permitido de input.Un valor que se especifica de forma habitual es None.</param>
      <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTimeOffset" /> equivalente a la fecha y hora de <paramref name="input" />, si la conversión se realiza correctamente, o <see cref="F:System.DateTimeOffset.MinValue" /> si se produce un error en la conversión.Se produce un error en la conversión si el parámetro <paramref name="input" /> es null o no contiene una representación de cadena válida de una fecha y hora en el formato esperado definido por <paramref name="format" /> y <paramref name="provider" />.Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> incluye un valor <see cref="T:System.Globalization.DateTimeStyles" /> sin definir.o bienNo se admite <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />.o bien<paramref name="styles" /> incluye valores <see cref="T:System.Globalization.DateTimeStyles" /> que se excluyen mutuamente.</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTimeOffset" /> equivalente, utilizando la matriz de formatos, la información de formato específica de la referencia cultural y el estilo especificados.El formato de la representación de cadena debe coincidir exactamente con uno de los formatos especificados.</summary>
      <returns>true si el parámetro <paramref name="input" /> se convierte correctamente; de lo contrario, false.</returns>
      <param name="input">Cadena que contiene una fecha y hora que se van a convertir.</param>
      <param name="formats">Matriz que define los formatos esperados de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="input" />.</param>
      <param name="styles">Combinación bit a bit de valores de enumeración que indica el formato permitido de input.Un valor que se especifica de forma habitual es None.</param>
      <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTimeOffset" /> equivalente a la fecha y hora de <paramref name="input" />, si la conversión se realiza correctamente, o <see cref="F:System.DateTimeOffset.MinValue" /> si se produce un error en la conversión.Se produce un error en la conversión si <paramref name="input" /> no contiene una representación de cadena válida de una fecha y hora o no contiene la fecha y hora en el formato esperado definido por <paramref name="format" /> o si <paramref name="formats" /> es null.Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> incluye un valor <see cref="T:System.Globalization.DateTimeStyles" /> sin definir.o bienNo se admite <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />.o bien<paramref name="styles" /> incluye valores <see cref="T:System.Globalization.DateTimeStyles" /> que se excluyen mutuamente.</exception>
    </member>
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>Obtiene un valor <see cref="T:System.DateTime" /> que representa la fecha y hora de la hora universal coordinada (UTC) del objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Fecha y hora en hora universal coordinada (UTC) del objeto <see cref="T:System.DateTimeOffset" /> actual.</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>Obtiene un objeto <see cref="T:System.DateTimeOffset" /> cuya fecha y hora está establecida en la fecha y hora actual de la hora universal coordinada (UTC) y cuyo desplazamiento es <see cref="F:System.TimeSpan.Zero" />.</summary>
      <returns>Un objeto cuya fecha y hora es la hora universal coordinada (UTC) actual y cuyo desplazamiento es <see cref="F:System.TimeSpan.Zero" />.</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>Obtiene el número de pasos que representan la fecha y hora del objeto <see cref="T:System.DateTimeOffset" /> en la hora universal coordinada (UTC).</summary>
      <returns>Número de pasos en la hora universal coordinada (hora UTC) del objeto <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>Obtiene el componente de año de la fecha representada por el objeto <see cref="T:System.DateTimeOffset" /> actual.</summary>
      <returns>Componente de año del objeto <see cref="T:System.DateTimeOffset" /> actual, expresado como un valor entero entre 0 y 9999.</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>Indica el día de la semana.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>Indica viernes.</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>Indica lunes.</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>Indica sábado.</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>Indica domingo.</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>Indica jueves.</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>Indica martes.</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>Indica miércoles.</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>Representa un número decimal.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Decimal" /> en el valor del número de punto flotante de precisión doble especificado.</summary>
      <param name="value">Valor que se va a representar como <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.-or- <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Decimal" /> en el valor del entero de 32 bits con signo especificado.</summary>
      <param name="value">Valor que se va a representar como <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Decimal" /> a partir de los parámetros que especifican las partes constituyentes de la instancia.</summary>
      <param name="lo">32 bits inferiores de un entero de 96 bits. </param>
      <param name="mid">32 bits intermedios de un entero de 96 bits. </param>
      <param name="hi">32 bits superiores de un entero de 96 bits. </param>
      <param name="isNegative">true para indicar un número negativo; false para indicar un número positivo. </param>
      <param name="scale">Potencia de 10 comprendida entre el 0 y el 28. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> is greater than 28. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Decimal" /> en un valor decimal representado en binario e incluido en una matriz especificada.</summary>
      <param name="bits">Matriz de enteros de 32 bits con signo que contiene una representación de un valor decimal. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="bits" /> is not 4.-or- The representation of the decimal value in <paramref name="bits" /> is not valid. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Decimal" /> en el valor del entero de 64 bits con signo especificado.</summary>
      <param name="value">Valor que se va a representar como <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Decimal" /> en el valor del número de punto flotante de precisión sencilla especificado.</summary>
      <param name="value">Valor que se va a representar como <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.-or- <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Decimal" /> en el valor del entero de 32 bits sin signo especificado.</summary>
      <param name="value">Valor que se va a representar como <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Decimal" /> en el valor del entero de 64 bits sin signo especificado.</summary>
      <param name="value">Valor que se va a representar como <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>Suma dos valores <see cref="T:System.Decimal" /> especificados.</summary>
      <returns>La suma de <paramref name="d1" /> y <paramref name="d2" />.</returns>
      <param name="d1">Primer valor que se va a sumar. </param>
      <param name="d2">Segundo valor que se va a sumar. </param>
      <exception cref="T:System.OverflowException">The sum of <paramref name="d1" /> and <paramref name="d2" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>Devuelve el valor integral más pequeño que es mayor o igual que el número decimal especificado.</summary>
      <returns>Valor integral más pequeño que es mayor o igual que el parámetro <paramref name="d" />.Tenga en cuenta que este método devuelve un valor <see cref="T:System.Decimal" /> en lugar de un tipo entero.</returns>
      <param name="d">Número decimal. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>Compara dos valores <see cref="T:System.Decimal" /> especificados.</summary>
      <returns>Número con signo que indica los valores relativos de <paramref name="d1" /> y <paramref name="d2" />.Return value Meaning Less than zero <paramref name="d1" /> is less than <paramref name="d2" />. Zero <paramref name="d1" /> and <paramref name="d2" /> are equal. Greater than zero <paramref name="d1" /> is greater than <paramref name="d2" />. </returns>
      <param name="d1">Primer valor que se va a comparar. </param>
      <param name="d2">Segundo valor que se va a comparar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>Compara esta instancia con un objeto <see cref="T:System.Decimal" /> especificado y devuelve una comparación de los valores relativos.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>Divide dos valores <see cref="T:System.Decimal" /> especificados.</summary>
      <returns>Resultado de dividir <paramref name="d1" /> entre <paramref name="d2" />.</returns>
      <param name="d1">Dividendo. </param>
      <param name="d2">Divisor. </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value (that is, the quotient) is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>Devuelve un valor que indica si esta instancia y un objeto <see cref="T:System.Decimal" /> especificado representan el mismo valor.</summary>
      <returns>true si <paramref name="value" /> es igual a esta instancia; en caso contrario, false.</returns>
      <param name="value">Un objeto que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>Devuelve un valor que indica si dos instancias especificadas de <see cref="T:System.Decimal" /> representan el mismo valor.</summary>
      <returns>Es true si <paramref name="d1" /> y <paramref name="d2" /> son iguales; en caso contrario, es false.</returns>
      <param name="d1">Primer valor que se va a comparar. </param>
      <param name="d2">Segundo valor que se va a comparar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia y un <see cref="T:System.Object" /> especificado representan el mismo tipo y valor.</summary>
      <returns>Es true si <paramref name="value" /> es <see cref="T:System.Decimal" /> y es igual a esta instancia; en caso contrario, es false.</returns>
      <param name="value">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>Redondea un número <see cref="T:System.Decimal" /> especificado al entero más próximo a infinito negativo.</summary>
      <returns>Si <paramref name="d" /> tiene una parte fraccionaria, el siguiente número entero <see cref="T:System.Decimal" /> que tiende a infinito negativo y que es menor que <paramref name="d" />.O bien Si <paramref name="d" /> no tiene una parte fraccionaria, <paramref name="d" /> se devuelve sin modificar.Tenga en cuenta que el método devuelve un valor entero de tipo <see cref="T:System.Decimal" />.</returns>
      <param name="d">El valor que se va a redondear. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>Convierte el valor de una instancia de <see cref="T:System.Decimal" /> especificada en la representación binaria equivalente.</summary>
      <returns>Matriz de enteros de 32 bits con signo con cuatro elementos que contiene la representación binaria de <paramref name="d" />.</returns>
      <param name="d">Valor que se va a convertir. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>Representa el mayor valor posible de <see cref="T:System.Decimal" />.Este campo es constante y de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>Representa el número menos uno (-1).</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>Representa el menor valor posible de <see cref="T:System.Decimal" />.Este campo es constante y de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>Multiplica dos valores <see cref="T:System.Decimal" /> especificados.</summary>
      <returns>Resultado de multiplicar <paramref name="d1" /> y <paramref name="d2" />.</returns>
      <param name="d1">Multiplicando. </param>
      <param name="d2">Multiplicador. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>Devuelve el resultado de multiplicar el valor <see cref="T:System.Decimal" /> especificado por menos uno.</summary>
      <returns>Número decimal con el valor de <paramref name="d" /> pero con signo opuesto.O bien Cero, si <paramref name="d" /> es cero.</returns>
      <param name="d">Valor que se va a negar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.One">
      <summary>Representa el número uno (1).</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>Suma dos valores <see cref="T:System.Decimal" /> especificados.</summary>
      <returns>Resultado de sumar <paramref name="d1" /> y <paramref name="d2" />.</returns>
      <param name="d1">Primer valor que se va a sumar. </param>
      <param name="d2">Segundo valor que se va a sumar. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>Reduce en uno el operando <see cref="T:System.Decimal" />.</summary>
      <returns>Valor de <paramref name="d" /> reducido en 1.</returns>
      <param name="d">Valor que se va a disminuir. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>Divide dos valores <see cref="T:System.Decimal" /> especificados.</summary>
      <returns>Resultado de dividir <paramref name="d1" /> entre <paramref name="d2" />.</returns>
      <param name="d1">Dividendo. </param>
      <param name="d2">Divisor. </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>Devuelve un valor que indica si dos valores <see cref="T:System.Decimal" /> son iguales.</summary>
      <returns>Es true si <paramref name="d1" /> y <paramref name="d2" /> son iguales; en caso contrario, es false.</returns>
      <param name="d1">Primer valor que se va a comparar. </param>
      <param name="d2">Segundo valor que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Decimal" /> en un entero de 8 bits con signo.</summary>
      <returns>Entero de 8 bits con signo que representa el <see cref="T:System.Decimal" /> convertido.</returns>
      <param name="value">Valor que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>Define una conversión explícita de un <see cref="T:System.Decimal" /> en un entero de 64 bits con signo.</summary>
      <returns>Entero de 64 bits con signo que representa el <see cref="T:System.Decimal" /> convertido.</returns>
      <param name="value">Valor que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>Define una conversión explícita de un <see cref="T:System.Decimal" /> en un entero de 16 bits sin signo.</summary>
      <returns>Entero de 16 bits sin signo que representa el <see cref="T:System.Decimal" /> convertido.</returns>
      <param name="value">Valor que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>Define una conversión explícita de un <see cref="T:System.Decimal" /> en un entero de 64 bits sin signo.</summary>
      <returns>Entero de 64 bits sin signo que representa el <see cref="T:System.Decimal" /> convertido.</returns>
      <param name="value">Valor que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>Define una conversión explícita de un <see cref="T:System.Decimal" /> en un entero de 32 bits sin signo.</summary>
      <returns>Entero de 32 bits sin signo que representa el <see cref="T:System.Decimal" /> convertido.</returns>
      <param name="value">Valor que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>Define una conversión explícita de un <see cref="T:System.Decimal" /> en un entero de 32 bits con signo.</summary>
      <returns>Entero de 32 bits con signo que representa el <see cref="T:System.Decimal" /> convertido.</returns>
      <param name="value">Valor que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Decimal" /> en un carácter Unicode.</summary>
      <returns>Carácter Unicode que representa el <see cref="T:System.Decimal" /> convertido.</returns>
      <param name="value">Valor que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Decimal" /> en un entero de 8 bits sin signo.</summary>
      <returns>Entero de 8 bits sin signo que representa el <see cref="T:System.Decimal" /> convertido.</returns>
      <param name="value">Valor que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>Define una conversión explícita de un <see cref="T:System.Decimal" /> en un número de punto flotante de precisión sencillo.</summary>
      <returns>Número de punto flotante de precisión sencilla que representa el <see cref="T:System.Decimal" /> convertido.</returns>
      <param name="value">Valor que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>Define una conversión explícita de un <see cref="T:System.Decimal" /> en un entero de 16 bits con signo.</summary>
      <returns>Entero de 16 bits con signo que representa el <see cref="T:System.Decimal" /> convertido.</returns>
      <param name="value">Valor que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>Define una conversión explícita de un <see cref="T:System.Decimal" /> en un número de punto flotante de precisión doble.</summary>
      <returns>Número de punto flotante de precisión doble que representa el <see cref="T:System.Decimal" /> convertido.</returns>
      <param name="value">Valor que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>Define una conversión explícita de un número de punto flotante de precisión doble en un <see cref="T:System.Decimal" />.</summary>
      <returns>Número de punto flotante de precisión doble que se ha convertido.</returns>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.-or- <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>Define una conversión explícita de un número de punto flotante de precisión sencilla en un <see cref="T:System.Decimal" />.</summary>
      <returns>Número de punto flotante de precisión sencilla que se ha convertido.</returns>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.-or- <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>Devuelve un valor que indica si un <see cref="T:System.Decimal" /> especificado es mayor que otro <see cref="T:System.Decimal" /> especificado.</summary>
      <returns>Es true si <paramref name="d1" /> es mayor que <paramref name="d2" />; en caso contrario, es false.</returns>
      <param name="d1">Primer valor que se va a comparar. </param>
      <param name="d2">Segundo valor que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>Devuelve un valor que indica si un <see cref="T:System.Decimal" /> especificado es mayor o igual que otro <see cref="T:System.Decimal" /> especificado.</summary>
      <returns>Es true si <paramref name="d1" /> es mayor o igual que <paramref name="d2" />; en caso contrario, es false.</returns>
      <param name="d1">Primer valor que se va a comparar. </param>
      <param name="d2">Segundo valor que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>Define una conversión explícita de un entero de 8 bits sin signo en un <see cref="T:System.Decimal" />.</summary>
      <returns>Entero de 8 bits sin signo que se ha convertido.</returns>
      <param name="value">Entero de 8 bits sin signo que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>Define una conversión explícita de un carácter Unicode en un <see cref="T:System.Decimal" />.</summary>
      <returns>Carácter Unicode convertido.</returns>
      <param name="value">Carácter Unicode que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>Define una conversión explícita de un entero de 16 bits con signo en un <see cref="T:System.Decimal" />.</summary>
      <returns>Entero de 16 bits con signo convertido.</returns>
      <param name="value">Entero de 16 bits con signo que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>Define una conversión explícita de un entero de 32 bits con signo en un <see cref="T:System.Decimal" />.</summary>
      <returns>Entero de 32 bits con signo convertido.</returns>
      <param name="value">Entero de 32 bits con signo que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>Define una conversión explícita de un entero de 64 bits con signo en un <see cref="T:System.Decimal" />.</summary>
      <returns>Entero de 64 bits con signo convertido.</returns>
      <param name="value">Entero de 64 bits con signo que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>Define una conversión explícita de un entero de 8 bits con signo en un <see cref="T:System.Decimal" />.</summary>
      <returns>Entero de 8 bits con signo convertido.</returns>
      <param name="value">Entero de 8 bits con signo que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>Define una conversión explícita de un entero de 16 bits sin signo en un <see cref="T:System.Decimal" />.</summary>
      <returns>Entero de 16 bits sin signo que se ha convertido.</returns>
      <param name="value">Entero de 16 bits sin signo que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>Define una conversión explícita de un entero de 32 bits sin signo en un <see cref="T:System.Decimal" />.</summary>
      <returns>Entero de 32 bits sin signo que se ha convertido.</returns>
      <param name="value">Entero de 32 bits sin signo que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>Define una conversión explícita de un entero de 64 bits sin signo en un <see cref="T:System.Decimal" />.</summary>
      <returns>Entero de 64 bits sin signo que se ha convertido.</returns>
      <param name="value">Entero de 64 bits sin signo que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>Incrementa en 1 el operando <see cref="T:System.Decimal" />.</summary>
      <returns>Valor de <paramref name="d" /> incrementado en 1.</returns>
      <param name="d">Valor que se va a aumentar. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>Devuelve un valor que indica si dos objetos <see cref="T:System.Decimal" /> tienen valores diferentes.</summary>
      <returns>true si <paramref name="d1" /> y <paramref name="d2" /> no son iguales; en caso contrario, false.</returns>
      <param name="d1">Primer valor que se va a comparar. </param>
      <param name="d2">Segundo valor que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>Devuelve un valor que indica si un <see cref="T:System.Decimal" /> especificado es menor que otro <see cref="T:System.Decimal" /> especificado.</summary>
      <returns>Es true si <paramref name="d1" /> es menor que <paramref name="d2" />; en caso contrario, es false.</returns>
      <param name="d1">Primer valor que se va a comparar. </param>
      <param name="d2">Segundo valor que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>Devuelve un valor que indica si un <see cref="T:System.Decimal" /> especificado es menor o igual que otro <see cref="T:System.Decimal" /> especificado.</summary>
      <returns>Es true si <paramref name="d1" /> es menor o igual que <paramref name="d2" />; en caso contrario, es false.</returns>
      <param name="d1">Primer valor que se va a comparar. </param>
      <param name="d2">Segundo valor que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>Devuelve el resto que se obtiene como resultado de dividir dos valores <see cref="T:System.Decimal" /> especificados.</summary>
      <returns>Resto que resulta de dividir <paramref name="d1" /> por <paramref name="d2" />.</returns>
      <param name="d1">Dividendo. </param>
      <param name="d2">Divisor. </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>Multiplica dos valores <see cref="T:System.Decimal" /> especificados.</summary>
      <returns>Resultado de multiplicar <paramref name="d1" /> por <paramref name="d2" />.</returns>
      <param name="d1">Primer valor que se va a multiplicar. </param>
      <param name="d2">Segundo valor que se va a multiplicar. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>Resta dos valores <see cref="T:System.Decimal" /> especificados.</summary>
      <returns>Resultado de restar <paramref name="d2" /> de <paramref name="d1" />.</returns>
      <param name="d1">Minuendo. </param>
      <param name="d2">Sustraendo. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>Convierte en negativo el valor del operando <see cref="T:System.Decimal" /> especificado.</summary>
      <returns>Resultado de multiplicar <paramref name="d" /> por menos uno (-1).</returns>
      <param name="d">Valor que se va a negar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>Devuelve el valor del operando <see cref="T:System.Decimal" /> (el signo del operando no se modifica).</summary>
      <returns>Valor del operando, <paramref name="d" />.</returns>
      <param name="d">El operando para devolver.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en su <see cref="T:System.Decimal" /> equivalente.</summary>
      <returns>Equivalente al número que se incluye en <paramref name="s" />.</returns>
      <param name="s">Representación de cadena del número que va a convertirse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación de cadena de un número con un estilo especificado en su <see cref="T:System.Decimal" /> equivalente.</summary>
      <returns>Número <see cref="T:System.Decimal" /> equivalente al número contenido en <paramref name="s" />, tal y como especifica <paramref name="style" />.</returns>
      <param name="s">Representación de cadena del número que va a convertirse. </param>
      <param name="style">Combinación bit a bit de valores <see cref="T:System.Globalization.NumberStyles" /> que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación de cadena de un número en su <see cref="T:System.Decimal" /> equivalente utilizando el estilo y el formato específico de la referencia cultural que se hayan especificado.</summary>
      <returns>Número <see cref="T:System.Decimal" /> equivalente al número contenido en <paramref name="s" />, tal y como especifican <paramref name="style" /> y <paramref name="provider" />.</returns>
      <param name="s">Representación de cadena del número que va a convertirse. </param>
      <param name="style">Combinación bit a bit de valores <see cref="T:System.Globalization.NumberStyles" /> que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">Objeto <see cref="T:System.IFormatProvider" /> que aporta información específica de la referencia cultural acerca del formato de <paramref name="s" />. </param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena de un número en su <see cref="T:System.Decimal" /> equivalente utilizando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Número <see cref="T:System.Decimal" /> equivalente al número contenido en <paramref name="s" />, tal y como especifica <paramref name="provider" />.</returns>
      <param name="s">Representación de cadena del número que va a convertirse. </param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> que aporta información de análisis específica de la referencia cultural sobre <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>Calcula el resto de la división de dos valores <see cref="T:System.Decimal" />.</summary>
      <returns>Resto después de dividir <paramref name="d1" /> por <paramref name="d2" />.</returns>
      <param name="d1">Dividendo. </param>
      <param name="d2">Divisor. </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>Resta un valor <see cref="T:System.Decimal" /> especificado de otro.</summary>
      <returns>Resultado de restar <paramref name="d2" /> de <paramref name="d1" />.</returns>
      <param name="d1">Minuendo. </param>
      <param name="d2">Sustraendo. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Decimal" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <returns>Es true si el valor de la instancia actual no es cero; en caso contrario, es false.</returns>
      <param name="provider">Este parámetro se ignora. </param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Byte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>Ninguno.No se admite esta conversión.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>Ninguno.No se admite esta conversión.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Double" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int32" />.</returns>
      <param name="provider">Se omite el parámetro.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.SByte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Single" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <paramref name="type" />.</returns>
      <param name="type">Tipo al que se va a convertir el valor de esta instancia de <see cref="T:System.Decimal" />. </param>
      <param name="provider">Implementación de <see cref="T:System.IFormatProvider" /> que proporciona información específica de la referencia cultural sobre el formato del valor devuelto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>Convierte el valor del <see cref="T:System.Decimal" /> especificado en el entero de 8 bits sin signo equivalente.</summary>
      <returns>Entero de 8 bits sin signo equivalente a <paramref name="value" />.</returns>
      <param name="value">Número decimal que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>Convierte el valor del <see cref="T:System.Decimal" /> especificado en el número de punto flotante de precisión doble equivalente.</summary>
      <returns>Número de punto flotante de precisión doble equivalente a <paramref name="d" />.</returns>
      <param name="d">Número decimal que se va a convertir. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>Convierte el valor del <see cref="T:System.Decimal" /> especificado en el entero de 16 bits con signo equivalente.</summary>
      <returns>Entero de 16 bits con signo que equivale a <paramref name="value" />.</returns>
      <param name="value">Número decimal que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>Convierte el valor del <see cref="T:System.Decimal" /> especificado en el entero de 32 bits con signo equivalente.</summary>
      <returns>Entero de 32 bits con signo que equivale al valor de <paramref name="d" />.</returns>
      <param name="d">Número decimal que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>Convierte el valor del <see cref="T:System.Decimal" /> especificado en el entero de 64 bits con signo equivalente.</summary>
      <returns>Entero de 64 bits con signo que equivale al valor de <paramref name="d" />.</returns>
      <param name="d">Número decimal que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>Convierte el valor del <see cref="T:System.Decimal" /> especificado en el entero de 8 bits con signo equivalente.</summary>
      <returns>Entero de 8 bits con signo que equivale a <paramref name="value" />.</returns>
      <param name="value">Número decimal que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>Convierte el valor del <see cref="T:System.Decimal" /> especificado en el número de punto flotante de precisión sencilla equivalente.</summary>
      <returns>Número de punto flotante de precisión sencilla que equivale al valor de <paramref name="d" />.</returns>
      <param name="d">Número decimal que se va a convertir. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Cadena que representa el valor de esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="provider" />.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato numérico estándar o personalizado (vea la sección Comentarios).</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en su representación de cadena equivalente mediante el formato y la información de formato específica de la referencia cultural que se especificaran.</summary>
      <returns>Representación de cadena del valor de esta instancia, tal y como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Una cadena de formato numérico (vea la sección Comentarios).</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>Convierte el valor del <see cref="T:System.Decimal" /> especificado en el entero de 16 bits sin signo equivalente.</summary>
      <returns>Entero de 16 bits sin signo que equivale al valor de <paramref name="value" />.</returns>
      <param name="value">Número decimal que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>Convierte el valor del <see cref="T:System.Decimal" /> especificado en el entero de 32 bits sin signo equivalente.</summary>
      <returns>Entero de 32 bits sin signo que equivale al valor de <paramref name="d" />.</returns>
      <param name="d">Número decimal que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>Convierte el valor del <see cref="T:System.Decimal" /> especificado en el entero de 64 bits sin signo equivalente.</summary>
      <returns>Entero de 64 bits sin signo que equivale al valor de <paramref name="d" />.</returns>
      <param name="d">Número decimal que se va a convertir. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>Devuelve los dígitos integrales del <see cref="T:System.Decimal" /> especificado; los dígitos fraccionarios se descartan.</summary>
      <returns>Resultado de redondear <paramref name="d" /> al número entero más próximo, hacia cero.</returns>
      <param name="d">Número decimal que se va a truncar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>Convierte la representación en forma de cadena de un número en su <see cref="T:System.Decimal" /> equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Representación de cadena del número que va a convertirse.</param>
      <param name="result">El resultado de este método contiene el número <see cref="T:System.Decimal" /> equivalente al valor numérico que <paramref name="s" /> contiene si la conversión se realizó correctamente, o bien, es cero si no se realizó correctamente.La conversión no finaliza correctamente si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" />, no es un número con formato válido o representa un número menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>Convierte la representación de cadena de un número en su <see cref="T:System.Decimal" /> equivalente utilizando el estilo y el formato específico de la referencia cultural que se hayan especificado.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Representación de cadena del número que va a convertirse.</param>
      <param name="style">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">Un objeto que proporciona información de análisis específica de la referencia cultural sobre <paramref name="s" />. </param>
      <param name="result">El resultado de este método contiene el número <see cref="T:System.Decimal" /> equivalente al valor numérico que <paramref name="s" /> contiene si la conversión se realizó correctamente, o bien, es cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro es <paramref name="s" />null o <see cref="F:System.String.Empty" />, no tiene un formato compatible con <paramref name="style" /> o representa un número menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>Representa el número cero (0).</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Delegate">
      <summary>Representa un delegado, que es una estructura de datos que hace referencia a un método estático o a una instancia de clase y a un método de instancia de dicha clase.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>Concatena las listas de invocaciones de dos delegados.</summary>
      <returns>Nuevo delegado con una lista de invocaciones que concatena las listas de invocaciones de <paramref name="a" /> y <paramref name="b" />, en ese orden.Devuelve <paramref name="a" /> cuando <paramref name="b" /> es null, devuelve <paramref name="b" /> cuando <paramref name="a" /> es una referencia nula y devuelve una referencia nula cuando tanto <paramref name="a" /> como <paramref name="b" /> son referencias nulas.</returns>
      <param name="a">Delegado cuya lista de invocaciones viene primero. </param>
      <param name="b">Delegado cuya lista de invocaciones viene en último lugar. </param>
      <exception cref="T:System.ArgumentException">Both <paramref name="a" /> and <paramref name="b" /> are not null, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>Concatena las listas de invocaciones de una matriz de delegados.</summary>
      <returns>Nuevo delegado con una lista de invocaciones que concatena las listas de invocaciones de los delegados de la matriz de <paramref name="delegates" />.Devuelve null si <paramref name="delegates" /> es null, si <paramref name="delegates" /> no contiene ningún elemento o si todas las entradas de <paramref name="delegates" /> son null.</returns>
      <param name="delegates">Matriz de delegados que se va a combinar. </param>
      <exception cref="T:System.ArgumentException">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>Invoca dinámicamente (en tiempo de ejecución) al método representado por el delegado actual.</summary>
      <returns>Objeto devuelto por el método representado por el delegado.</returns>
      <param name="args">Matriz de objetos que son los argumentos que se van a pasar al método representado por el delegado actual.O bien null, si el método representado por el delegado actual no requiere argumentos. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).-or- The number, order, or type of parameters listed in <paramref name="args" /> is invalid. </exception>
      <exception cref="T:System.ArgumentException">The method represented by the delegate is invoked on an object or a class that does not support it. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The method represented by the delegate is an instance method and the target object is null.-or- One of the encapsulated methods throws an exception. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>Determina si el objeto especificado y el delegado actual son del mismo tipo y comparten los mismos destinos, métodos y listas de invocaciones.</summary>
      <returns>true si <paramref name="obj" /> y el delegado actual tienen los mismos destinos, métodos y listas de invocaciones; en caso contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con el delegado actual. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>Devuelve un código hash para el delegado.</summary>
      <returns>Código hash para el delegado.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>Devuelve la lista de invocaciones del delegado.</summary>
      <returns>Matriz de delegados que representa la lista de invocaciones del delegado actual.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>Determina si los delegados especificados son iguales.</summary>
      <returns>true si <paramref name="d1" /> es igual a <paramref name="d2" />; en caso contrario, false.</returns>
      <param name="d1">Primer delegado que se va a comparar. </param>
      <param name="d2">Segundo delegado que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>Determina si los delegados especificados no son iguales.</summary>
      <returns>Es true si <paramref name="d1" /> no es igual a <paramref name="d2" />; en caso contrario, es false.</returns>
      <param name="d1">Primer delegado que se va a comparar. </param>
      <param name="d2">Segundo delegado que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>Quita la última aparición de la lista de invocaciones de un delegado de la lista de invocaciones de otro delegado.</summary>
      <returns>Nuevo delegado con una lista de invocaciones creada tomando la lista de invocaciones de <paramref name="source" /> y quitando la última aparición de la lista de invocaciones de <paramref name="value" />, si la lista de invocaciones de <paramref name="value" /> se encuentra dentro de la lista de invocaciones de <paramref name="source" />.Devuelve <paramref name="source" /> si <paramref name="value" /> es null o si la lista de invocaciones de <paramref name="value" /> no se encuentra dentro de la lista de invocaciones de <paramref name="source" />.Devuelve una referencia nula si la lista de invocaciones de <paramref name="value" /> es igual a la lista de invocaciones de <paramref name="source" /> o si <paramref name="source" /> es una referencia nula.</returns>
      <param name="source">Delegado del que se va a quitar la lista de invocaciones de <paramref name="value" />. </param>
      <param name="value">Delegado que proporciona la lista de invocaciones que se va a quitar de la lista de invocaciones de <paramref name="source" />. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
      <summary>Quita todas las apariciones de la lista de invocaciones de un delegado de la lista de invocaciones de otro delegado.</summary>
      <returns>Nuevo delegado con una lista de invocaciones creada tomando la lista de invocaciones de <paramref name="source" /> y quitando todas las apariciones de la lista de invocaciones de <paramref name="value" />, si la lista de invocaciones de <paramref name="value" /> se encuentra dentro de la lista de invocaciones de <paramref name="source" />.Devuelve <paramref name="source" /> si <paramref name="value" /> es null o si la lista de invocaciones de <paramref name="value" /> no se encuentra dentro de la lista de invocaciones de <paramref name="source" />.Devuelve una referencia nula si la lista de invocaciones de <paramref name="value" /> es igual a la de <paramref name="source" />, si <paramref name="source" /> contiene solo una serie de listas de invocaciones que son iguales a la lista de invocaciones de <paramref name="value" />, o bien si <paramref name="source" /> es una referencia nula.</returns>
      <param name="source">Delegado del que se va a quitar la lista de invocaciones de <paramref name="value" />. </param>
      <param name="value">Delegado que proporciona la lista de invocaciones que se va a quitar de la lista de invocaciones de <paramref name="source" />. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>Obtiene la instancia de clase donde el delegado actual invoca al método de instancia.</summary>
      <returns>Objeto en el que el delegado actual invoca al método de instancia, en el caso de que el delegado represente un método de instancia; null si el delegado representa un método estático.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>Excepción que se produce cuando se intenta dividir un valor entero o decimal entre cero.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.DivideByZeroException" />.</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.DivideByZeroException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error. </param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.DivideByZeroException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.Double">
      <summary>Representa un número de punto flotante de precisión doble.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>Compara esta instancia con un número de punto flotante de precisión doble especificado y devuelve un entero que indica si el valor de esta instancia es mayor, menor o igual que el valor del número de punto flotante de precisión doble especificado.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />). </returns>
      <param name="value">Número de punto flotante de precisión doble que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>Representa el menor valor <see cref="T:System.Double" /> positivo mayor que cero.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>Devuelve un valor que indica si esta instancia y un objeto <see cref="T:System.Double" /> especificado representan el mismo valor.</summary>
      <returns>true si <paramref name="obj" /> es igual a esta instancia; en caso contrario, false.</returns>
      <param name="obj">Objeto <see cref="T:System.Double" /> que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.Double" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>Devuelve un valor que indica si el número especificado se evalúa como infinito negativo o positivo. </summary>
      <returns>Es true si <paramref name="d" /> se evalúa en <see cref="F:System.Double.PositiveInfinity" /> o <see cref="F:System.Double.NegativeInfinity" />; en caso contrario, es false.</returns>
      <param name="d">Número de punto flotante de precisión doble. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>Devuelve un valor que indica si el valor especificado no es un número (<see cref="F:System.Double.NaN" />).</summary>
      <returns>Es true si <paramref name="d" /> se evalúa en <see cref="F:System.Double.NaN" />; en caso contrario, es false.</returns>
      <param name="d">Número de punto flotante de precisión doble. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>Devuelve un valor que indica si el número especificado se evalúa como infinito negativo.</summary>
      <returns>Es true si <paramref name="d" /> se evalúa en <see cref="F:System.Double.NegativeInfinity" />; en caso contrario, es false.</returns>
      <param name="d">Número de punto flotante de precisión doble. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>Devuelve un valor que indica si el número especificado se evalúa como infinito positivo.</summary>
      <returns>Es true si <paramref name="d" /> se evalúa en <see cref="F:System.Double.PositiveInfinity" />; en caso contrario, es false.</returns>
      <param name="d">Número de punto flotante de precisión doble. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>Representa el mayor valor posible de un <see cref="T:System.Double" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>Representa el menor valor posible de un <see cref="T:System.Double" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.NaN">
      <summary>Representa un valor no numérico (NaN).Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>Representa infinito negativo.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.op_Equality(System.Double,System.Double)">
      <summary>Devuelve un valor que indica si dos valores <see cref="T:System.Double" /> especificados son iguales.</summary>
      <returns>Es true si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, es false.</returns>
      <param name="left">Primer valor que se va a comparar. </param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Double.op_GreaterThan(System.Double,System.Double)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Double" /> especificado es mayor que otro valor <see cref="T:System.Double" /> especificado.</summary>
      <returns>Es true si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Double" /> especificado es mayor o igual que otro valor <see cref="T:System.Double" /> especificado.</summary>
      <returns>Es true si <paramref name="left" /> es mayor o igual que <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Double.op_Inequality(System.Double,System.Double)">
      <summary>Devuelve un valor que indica si dos valores <see cref="T:System.Double" /> especificados no son iguales.</summary>
      <returns>true si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, false.</returns>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Double.op_LessThan(System.Double,System.Double)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Double" /> especificado es menor que otro valor <see cref="T:System.Double" /> especificado.</summary>
      <returns>Es true si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Double" /> especificado es menor o igual que otro valor <see cref="T:System.Double" /> especificado.</summary>
      <returns>Es true si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en el número de punto flotante de precisión doble equivalente.</summary>
      <returns>Número de punto flotante de precisión doble equivalente al valor numérico o símbolo especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación en forma de cadena de un número con un estilo especificado en el número de punto flotante de precisión doble equivalente.</summary>
      <returns>Número de punto flotante de precisión doble equivalente al valor numérico o símbolo especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es una combinación de <see cref="F:System.Globalization.NumberStyles.Float" /> combinado con <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con un estilo y un formato específico de la referencia cultural especificados en el número de punto flotante de precisión doble equivalente.</summary>
      <returns>Número de punto flotante de precisión doble equivalente al valor numérico o símbolo especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Float" /> combinado con <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con un formato específico de la referencia cultural especificado en el número de punto flotante de precisión doble equivalente.</summary>
      <returns>Número de punto flotante de precisión doble equivalente al valor numérico o símbolo especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>Representa infinito positivo.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Double" />. </exception>
    </member>
    <member name="M:System.Double.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>Es true si el valor de la instancia actual no es cero; en caso contrario, es false.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Byte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Decimal" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.SByte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Single" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <paramref name="type" />.</returns>
      <param name="type">Tipo al que se va a convertir este valor <see cref="T:System.Double" />.</param>
      <param name="provider">Implementación de <see cref="T:System.IFormatProvider" /> que proporciona información específica de la referencia cultural sobre el formato del valor devuelto.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt16" />.</returns>
      <param name="provider">Este parámetro se ignora. </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt32" />.</returns>
      <param name="provider">Este parámetro se ignora.   </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Double.ToString">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación de cadena del valor de esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="provider" />.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en su representación de cadena equivalente mediante el formato y la información de formato específica de la referencia cultural que se especificaran.</summary>
      <returns>Representación de cadena del valor de esta instancia, tal y como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>Convierte la representación en forma de cadena de un número en el número de punto flotante de precisión doble equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="result">Cuando el resultado que devuelve este método contiene el número de punto flotante de precisión doble equivalente al parámetro <paramref name="s" />, si la conversión tuvo éxito o cero si falló.La conversión no finaliza correctamente si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" />, no es un número con formato válido o representa un número menor que <see cref="F:System.Double.MinValue" /> o mayor que <see cref="F:System.Double.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>Convierte la representación en forma de cadena de un número con un estilo y un formato específico de la referencia cultural especificados en el número de punto flotante de precisión doble equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de valores <see cref="T:System.Globalization.NumberStyles" /> que indica el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Float" /> combinado con <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">Un <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="result">Cuando el resultado que devuelve este método contiene el número de punto flotante de precisión doble equivalente al valor numérico o al símbolo contenido en <paramref name="s" />, si la conversión tuvo éxito o cero si falló.Se produce un error en la conversión si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" />, no está en un formato compatible con <paramref name="style" />, representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />, o bien si <paramref name="style" /> no es una combinación válida de constantes enumeradas de <see cref="T:System.Globalization.NumberStyles" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Enum">
      <summary>Proporciona la clase base para las enumeraciones.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Enum" />. </summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>Compara esta instancia con un objeto especificado y devuelve una indicación de los valores relativos.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="target" />.Valor Significado Menor que cero El valor de esta instancia es menor que el valor de <paramref name="target" />. Cero El valor de esta instancia es igual al valor de <paramref name="target" />. Mayor que cero El valor de esta instancia es mayor que el valor de <paramref name="target" />.O bien 
                  El valor de <paramref name="target" /> es null. </returns>
      <param name="target">Objeto que se va a comparar o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> and this instance are not the same type. </exception>
      <exception cref="T:System.InvalidOperationException">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>true si <paramref name="obj" /> es un valor de enumeración del mismo tipo y con el mismo valor subyacente que esta instancia; de lo contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia o null. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>Convierte el valor especificado de un tipo enumerado especificado en la representación de cadena equivalente de acuerdo con el formato especificado.</summary>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
      <param name="enumType">Tipo de enumeración del valor que se va a convertir. </param>
      <param name="value">Valor que se va a convertir. </param>
      <param name="format">Formato de resultados que se va a usar. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.-or- The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.-or- The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />. </exception>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter contains an invalid value. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>Devuelve el código hash del valor de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>Recupera el nombre de la constante de la enumeración especificada que tiene el valor especificado.</summary>
      <returns>Una cadena que contiene el nombre de la constante enumerada en <paramref name="enumType" /> cuyo valor es <paramref name="value" />; o bien, null si no se encuentra tal constante.</returns>
      <param name="enumType">Tipo de enumeración. </param>
      <param name="value">Valor de una constante enumerada concreta en términos del tipo subyacente. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>Recupera una matriz con los nombres de las constantes de una enumeración especificada.</summary>
      <returns>Matriz de cadenas con los nombres de las constantes de <paramref name="enumType" />. </returns>
      <param name="enumType">Tipo de enumeración. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>Devuelve el tipo subyacente de la enumeración especificada.</summary>
      <returns>Tipo subyacente de <paramref name="enumType" />.</returns>
      <param name="enumType">Enumeración cuyo tipo subyacente se recuperará.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>Recupera una matriz con los valores de las constantes de una enumeración especificada.</summary>
      <returns>Matriz que contiene los valores de las constantes de <paramref name="enumType" />. </returns>
      <param name="enumType">Tipo de enumeración. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />. </exception>
      <exception cref="T:System.InvalidOperationException">The method is invoked by reflection in a reflection-only context, -or-<paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
      <summary>Determina si hay uno o varios campos de bits establecidos en la instancia actual.</summary>
      <returns>Es true si los campos de bits establecidos en <paramref name="flag" /> también están establecidos en la instancia actual; de lo contrario, es false.</returns>
      <param name="flag">Valor de enumeración.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> is a different type than the current instance.</exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>Devuelve una indicación en la que se precisa si existe una constante con un valor especificado en una enumeración especificada.</summary>
      <returns>true si una constante de <paramref name="enumType" /> tiene un valor igual a <paramref name="value" />; en caso contrario, false.</returns>
      <param name="enumType">Tipo de enumeración. </param>
      <param name="value">Valor o nombre de una constante de <paramref name="enumType" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an Enum.-or- The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.-or- The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>Convierte la representación de cadena del nombre o valor numérico de una o varias constantes enumeradas en un objeto enumerado equivalente.</summary>
      <returns>Objeto de tipo <paramref name="enumType" /> cuyo valor está representado por <paramref name="value" />.</returns>
      <param name="enumType">Tipo de enumeración. </param>
      <param name="value">Cadena que contiene el nombre o valor que se va a convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is either an empty string or only contains white space.-or- <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>Convierte la representación de cadena del nombre o valor numérico de una o varias constantes enumeradas en un objeto enumerado equivalente.Un parámetro especifica si la operación no distingue mayúsculas de minúsculas.</summary>
      <returns>Objeto de tipo <paramref name="enumType" /> cuyo valor está representado por <paramref name="value" />.</returns>
      <param name="enumType">Tipo de enumeración. </param>
      <param name="value">Cadena que contiene el nombre o valor que se va a convertir. </param>
      <param name="ignoreCase">true para no distinguir entre mayúsculas y minúsculas; false para tener en cuenta la distinción entre mayúsculas y minúsculas. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is either an empty string ("") or only contains white space.-or- <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Convierte el valor actual en un valor booleano basado en el tipo subyacente.</summary>
      <returns>Este miembro siempre produce una excepción.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Convierte el valor actual en un entero de 8 bits sin signo basado en el tipo subyacente.</summary>
      <returns>El valor convertido.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Convierte el valor actual en un carácter Unicode basado en el tipo subyacente.</summary>
      <returns>Este miembro siempre produce una excepción.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Convierte el valor actual en <see cref="T:System.DateTime" /> basado en el tipo subyacente.</summary>
      <returns>Este miembro siempre produce una excepción.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Convierte el valor actual en <see cref="T:System.Decimal" /> basado en el tipo subyacente.</summary>
      <returns>Este miembro siempre produce una excepción.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Convierte el valor actual en número de punto flotante de precisión doble basado en el tipo subyacente.</summary>
      <returns>Este miembro siempre produce una excepción.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Convierte el valor actual en un entero de 16 bits con signo basado en el tipo subyacente.</summary>
      <returns>El valor convertido.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Convierte el valor actual en un entero de 32 bits con signo basado en el tipo subyacente.</summary>
      <returns>El valor convertido.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Convierte el valor actual en un entero de 64 bits con signo basado en el tipo subyacente.</summary>
      <returns>El valor convertido.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Convierte el valor actual en un entero de 8 bits con signo basado en el tipo subyacente.</summary>
      <returns>El valor convertido.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Convierte el valor actual en un número de punto flotante de precisión sencilla basándose en el tipo subyacente.</summary>
      <returns>Este miembro siempre produce una excepción.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>Convierte el valor actual en una cadena basándose en el tipo subyacente.</summary>
      <returns>El valor convertido.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Convierte el valor actual en un tipo especificado basado en el tipo subyacente.</summary>
      <returns>El valor convertido.</returns>
      <param name="type">Tipo en el que se va a convertir. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Convierte el valor actual en un entero de 16 bits sin signo basado en el tipo subyacente.</summary>
      <returns>El valor convertido.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Convierte el valor actual en un entero de 32 bits sin signo basado en el tipo subyacente.</summary>
      <returns>El valor convertido.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Convierte el valor actual en un entero de 64 bits sin signo basado en el tipo subyacente.</summary>
      <returns>El valor convertido.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
    </member>
    <member name="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Esta sobrecarga del método está en desuso; use <see cref="M:System.Enum.ToString(System.String)" />.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Especificación de formato.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> does not contain a valid format specification. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>Convierte el objeto especificado con un valor entero en un miembro de enumeración.</summary>
      <returns>Objeto de enumeración cuyo valor es <paramref name="value" />.</returns>
      <param name="enumType">Tipo de enumeración que se va a devolver. </param>
      <param name="value">Valor que se va a convertir en un miembro de enumeración. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>Convierte el valor de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación de cadena del valor de esta instancia.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>Convierte el valor de esta instancia en la representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> contains an invalid specification. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>Convierte la representación de cadena del nombre o valor numérico de una o varias constantes enumeradas en un objeto enumerado equivalente.Un parámetro especifica si la operación distingue mayúsculas de minúsculas.El valor devuelto indica si la conversión se realizó correctamente.</summary>
      <returns>true si el parámetro <paramref name="value" /> se convierte correctamente; en caso contrario, false.</returns>
      <param name="value">Representación de cadena del nombre de enumeración o valor subyacente que se va a convertir.</param>
      <param name="ignoreCase">Es true para no distinguir entre mayúsculas y minúsculas; es false para tener en cuenta la distinción entre mayúsculas y minúsculas.</param>
      <param name="result">Cuando este método vuelve, <paramref name="result" /> contiene un objeto de tipo <paramref name="TEnum" /> cuyo valor está representado por <paramref name="value" /> si la operación de análisis es correcta.Si se produce un error en la operación de análisis, <paramref name="result" /> contiene el valor predeterminado del tipo subyacente de <paramref name="TEnum" />.Observe que este valor no tiene que ser un miembro de la enumeración <paramref name="TEnum" />.Este parámetro se pasa sin inicializar.</param>
      <typeparam name="TEnum">Tipo de enumeración al que se va a convertir <paramref name="value" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
      <summary>Convierte la representación de cadena del nombre o valor numérico de una o varias constantes enumeradas en un objeto enumerado equivalente.El valor devuelto indica si la conversión se realizó correctamente.</summary>
      <returns>true si el parámetro <paramref name="value" /> se convierte correctamente; en caso contrario, false.</returns>
      <param name="value">Representación de cadena del nombre de enumeración o valor subyacente que se va a convertir.</param>
      <param name="result">Cuando este método vuelve, <paramref name="result" /> contiene un objeto de tipo <paramref name="TEnum" /> cuyo valor está representado por <paramref name="value" /> si la operación de análisis es correcta.Si se produce un error en la operación de análisis, <paramref name="result" /> contiene el valor predeterminado del tipo subyacente de <paramref name="TEnum" />.Observe que este valor no tiene que ser un miembro de la enumeración <paramref name="TEnum" />.Este parámetro se pasa sin inicializar.</param>
      <typeparam name="TEnum">Tipo de enumeración al que se va a convertir <paramref name="value" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
    </member>
    <member name="T:System.EventArgs">
      <summary>Representa la clase base para las clases que contienen datos de eventos y proporciona un valor para utilizar en los eventos que no incluyen datos de evento. </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.EventArgs" />.</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>Proporciona un valor para utilizar con los eventos que no tienen datos de eventos.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.EventHandler">
      <summary>Representa el método que controlará eventos que no tienen datos de evento.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventHandler.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.EventHandler.BeginInvoke(System.Object,System.EventArgs,System.AsyncCallback,System.Object)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.EventHandler.EndInvoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.EventHandler.Invoke(System.Object,System.EventArgs)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>Representa el método que controlará eventos cuando el evento proporcione datos. </summary>
      <typeparam name="TEventArgs">Tipo de los datos de evento generados por el evento.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventHandler`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.EventHandler`1.BeginInvoke(System.Object,`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.EventHandler`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.EventHandler`1.Invoke(System.Object,`0)"></member>
    <member name="T:System.Exception">
      <summary>Representa los errores que se producen durante la ejecución de una aplicación.Para examinar el código fuente de .NET Framework de este tipo, consulte el origen de referencia.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Exception" />.</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Exception" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Exception" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual o una referencia nula (Nothing en Visual Basic) si no se especifica ninguna excepción interna. </param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>Obtiene una colección de pares clave-valor que proporcionan más información definida por el usuario sobre la excepción.</summary>
      <returns>Objeto que implementa la interfaz de <see cref="T:System.Collections.IDictionary" /> y contiene una colección de pares clave-valor definidos por el usuario.El valor predeterminado es una colección vacía.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>Cuando se invalida en una clase derivada, devuelve la clase <see cref="T:System.Exception" /> que representa la causa principal de una o más excepciones posteriores.</summary>
      <returns>Primera excepción que se produce en una cadena de excepciones.Si la propiedad <see cref="P:System.Exception.InnerException" /> de la excepción actual es una referencia nula (Nothing en Visual Basic), esta propiedad devuelve la excepción actual.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>Obtiene o establece un vínculo al archivo de ayuda asociado a esta excepción.</summary>
      <returns>Nombre de recursos uniforme (URN) o Identificador uniforme de recursos (URL).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>Obtiene o establece HRESULT, un valor numérico codificado que se asigna a una excepción específica.</summary>
      <returns>Valor HRESULT.</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>Obtiene la instancia <see cref="T:System.Exception" /> que produjo la excepción actual.</summary>
      <returns>Objeto que describe el error que causó la excepción actual.La propiedad <see cref="P:System.Exception.InnerException" /> devuelve el mismo valor que se pasó al constructor <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> o null si no se suministró el valor de la excepción interna al constructor.Esta propiedad es de sólo lectura.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Exception.Message">
      <summary>Obtiene un mensaje que describe la excepción actual.</summary>
      <returns>Mensaje de error que explica el motivo de la excepción o una cadena vacía ("").</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Exception.Source">
      <summary>Devuelve o establece el nombre de la aplicación o del objeto que generó el error.</summary>
      <returns>Nombre de la aplicación o del objeto que generó el error.</returns>
      <exception cref="T:System.ArgumentException">The object must be a runtime <see cref="N:System.Reflection" /> object</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>Obtiene una representación de cadena de los marcos inmediatos en la pila de llamadas.</summary>
      <returns>Cadena que describe los marcos inmediatos de la pila de llamadas.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>Crea y devuelve una representación de cadena de la excepción actual.</summary>
      <returns>Representación de cadena de la excepción actual.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>Excepción que se produce cuando se intenta de forma no válida obtener acceso a un campo privado o protegido dentro de una clase.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.FieldAccessException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FieldAccessException" />.</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FieldAccessException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción.</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FieldAccessException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción.</param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>Indica que una enumeración puede considerarse como un campo de bits, es decir, un conjunto de marcas.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FlagsAttribute" />.</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>Excepción que se produce cuando el formato de un argumento no es válido o cuando una cadena de formato compuesto no tiene el formato correcto. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FormatException" />.</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FormatException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FormatException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="innerException">Excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se inicia en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.FormattableString">
      <summary>Representa una cadena de formato compuesto, junto con los argumentos que se va a dar formato. </summary>
    </member>
    <member name="M:System.FormattableString.#ctor">
      <summary>Crea una nueva instancia de la clase <see cref="T:System.FormattableString" />. </summary>
    </member>
    <member name="P:System.FormattableString.ArgumentCount">
      <summary>Obtiene el número de argumentos para dar formato. </summary>
      <returns>El número de argumentos para dar formato. </returns>
    </member>
    <member name="P:System.FormattableString.Format">
      <summary>Devuelve la cadena de formato compuesto. </summary>
      <returns>La cadena de formato compuesto. </returns>
    </member>
    <member name="M:System.FormattableString.GetArgument(System.Int32)">
      <summary>Devuelve el argumento en la posición de índice especificada. </summary>
      <returns>Argumento. </returns>
      <param name="index">Índice del argumento.Su valor puede oscilar entre cero a uno menos que el valor de <see cref="P:System.FormattableString.ArgumentCount" />.</param>
    </member>
    <member name="M:System.FormattableString.GetArguments">
      <summary>Devuelve una matriz de objetos que contiene uno o más objetos para dar formato. </summary>
      <returns>Una matriz de objetos que contiene uno o más objetos para dar formato. </returns>
    </member>
    <member name="M:System.FormattableString.Invariant(System.FormattableString)">
      <summary>Devuelve una cadena de resultado en el que se formatean argumentos utilizando las convenciones de la referencia cultural invariable. </summary>
      <returns>La cadena que es el resultado de dar formato a la instancia actual con las convenciones de la referencia cultural invariable. </returns>
      <param name="formattable">Objeto que se va a convertir en una cadena de resultado. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="formattable" /> es null. </exception>
    </member>
    <member name="M:System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Devuelve la cadena resultante de aplicar formato a la cadena de formato, junto con sus argumentos usando las convenciones de formato de una referencia cultural especificada. </summary>
      <returns>Una cadena con formato usando las convenciones de la <paramref name="formatProvider" /> parámetro. </returns>
      <param name="ignored">Una cadena.Este argumento se pasa por alto.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
    </member>
    <member name="M:System.FormattableString.ToString">
      <summary>Devuelve la cadena resultante de aplicar formato a la cadena de formato compuesto junto con sus argumentos usando las convenciones de formato de la referencia cultural actual. </summary>
      <returns>Una cadena de resultado con formato usando las convenciones de la referencia cultural actual. </returns>
    </member>
    <member name="M:System.FormattableString.ToString(System.IFormatProvider)">
      <summary>Devuelve la cadena resultante de aplicar formato a la cadena de formato compuesto junto con sus argumentos usando las convenciones de formato de una referencia cultural especificada. </summary>
      <returns>Una cadena de resultado con formato usando las convenciones de <paramref name="formatProvider" />. </returns>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
    </member>
    <member name="T:System.Func`1">
      <summary>Encapsula un método que no tiene parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Func`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`1.BeginInvoke(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`1.Invoke"></member>
    <member name="T:System.Func`10">
      <summary>Encapsula un método que tiene nueve parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`10.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`10.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`10.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`10.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8)"></member>
    <member name="T:System.Func`11">
      <summary>Encapsula un método que tiene 10 parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`11.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`11.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`11.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`11.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)"></member>
    <member name="T:System.Func`12">
      <summary>Encapsula un método que tiene 11 parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`12.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`12.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`12.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`12.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)"></member>
    <member name="T:System.Func`13">
      <summary>Encapsula un método que tiene 12 parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T12">Tipo del duodécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`13.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`13.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`13.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`13.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)"></member>
    <member name="T:System.Func`14">
      <summary>Encapsula un método que tiene 13 parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T12">Tipo del duodécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T13">Tipo del decimotercero parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`14.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`14.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`14.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`14.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)"></member>
    <member name="T:System.Func`15">
      <summary>Encapsula un método que tiene 14 parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T12">Tipo del duodécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T13">Tipo del decimotercero parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T14">Tipo del decimocuarto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`15.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`15.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`15.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`15.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)"></member>
    <member name="T:System.Func`16">
      <summary>Encapsula un método que tiene 15 parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T12">Tipo del duodécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T13">Tipo del decimotercero parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T14">Tipo del decimocuarto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T15">Tipo del decimoquinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`16.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`16.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`16.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`16.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)"></member>
    <member name="T:System.Func`17">
      <summary>Encapsula un método que tiene 16 parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T9">Tipo del noveno parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T10">Tipo del décimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T11">Tipo del undécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T12">Tipo del duodécimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T13">Tipo del decimotercero parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T14">Tipo del decimocuarto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T15">Tipo del decimoquinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T16">Tipo del decimosexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`17.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`17.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`17.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`17.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)"></member>
    <member name="T:System.Func`2">
      <summary>Encapsula un método que tiene un parámetro y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.Para examinar el código fuente de .NET Framework para este tipo, vea el origen de referencia.</summary>
      <typeparam name="T">Tipo de parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`2.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`2.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`2.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`2.Invoke(`0)"></member>
    <member name="T:System.Func`3">
      <summary>Encapsula un método que tiene dos parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`3.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`3.BeginInvoke(`0,`1,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`3.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`3.Invoke(`0,`1)"></member>
    <member name="T:System.Func`4">
      <summary>Encapsula un método que tiene tres parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`4.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`4.BeginInvoke(`0,`1,`2,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`4.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`4.Invoke(`0,`1,`2)"></member>
    <member name="T:System.Func`5">
      <summary>Encapsula un método que tiene cuatro parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`5.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`5.BeginInvoke(`0,`1,`2,`3,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`5.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`5.Invoke(`0,`1,`2,`3)"></member>
    <member name="T:System.Func`6">
      <summary>Encapsula un método que tiene cinco parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`6.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`6.BeginInvoke(`0,`1,`2,`3,`4,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`6.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`6.Invoke(`0,`1,`2,`3,`4)"></member>
    <member name="T:System.Func`7">
      <summary>Encapsula un método que tiene seis parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`7.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`7.BeginInvoke(`0,`1,`2,`3,`4,`5,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`7.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`7.Invoke(`0,`1,`2,`3,`4,`5)"></member>
    <member name="T:System.Func`8">
      <summary>Encapsula un método que tiene siete parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`8.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`8.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`8.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`8.Invoke(`0,`1,`2,`3,`4,`5,`6)"></member>
    <member name="T:System.Func`9">
      <summary>Encapsula un método que tiene ocho parámetros y devuelve un valor del tipo especificado por el parámetro <paramref name="TResult" />.</summary>
      <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
      <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T6">Tipo del sexto parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T7">Tipo del séptimo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="T8">Tipo del octavo parámetro del método encapsulado por el delegado.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`9.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`9.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`9.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`9.Invoke(`0,`1,`2,`3,`4,`5,`6,`7)"></member>
    <member name="T:System.GC">
      <summary>Controla el recolector de elementos no utilizados del sistema, un servicio que recupera de forma automática la memoria que no se utiliza.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.GC.AddMemoryPressure(System.Int64)">
      <summary>Informa al tiempo de ejecución de una asignación grande de memoria no administrada que se debe tener en cuenta al programar la recolección de elementos no utilizados.</summary>
      <param name="bytesAllocated">Cantidad incremental de memoria no administrada que se ha asignado. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> es menor o igual que 0.o bienEn un equipo de 32 bits, <paramref name="bytesAllocated" /> es mayor que <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.GC.Collect">
      <summary>Fuerza a que se lleve a cabo una recolección de elementos no utilizados de todas las generaciones. </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>Fuerza a que se lleve a cabo inmediatamente la recolección de elementos no utilizados desde la generación 0 hasta la generación especificada.</summary>
      <param name="generation">El número de la generación más antigua de elementos no usados para recolectar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> no es válido. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode)">
      <summary>Fuerza una recolección de elementos no utilizados desde la generación 0 hasta la generación especificada, en el momento especificado por el valor <see cref="T:System.GCCollectionMode" />.</summary>
      <param name="generation">El número de la generación más antigua de elementos no usados para recolectar. </param>
      <param name="mode">Un valor de enumeración que especifica si se fuerza la recolección de elementos (<see cref="F:System.GCCollectionMode.Default" /> o <see cref="F:System.GCCollectionMode.Forced" />) o si será optimizada (<see cref="F:System.GCCollectionMode.Optimized" />). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> no es válido.o bien<paramref name="mode" /> no es uno de los <see cref="T:System.GCCollectionMode" /> valores.</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
      <summary>Fuerza una recolección de elementos no utilizados de generación 0 en una generación especificada, en un momento especificado por un valor de <see cref="T:System.GCCollectionMode" />, con un valor que especifica si la recolección debe ser de bloqueo.</summary>
      <param name="generation">El número de la generación más antigua de elementos no usados para recolectar. </param>
      <param name="mode">Un valor de enumeración que especifica si se fuerza la recolección de elementos (<see cref="F:System.GCCollectionMode.Default" /> o <see cref="F:System.GCCollectionMode.Forced" />) o si será optimizada (<see cref="F:System.GCCollectionMode.Optimized" />). </param>
      <param name="blocking">true para realizar una recolección de elementos no utilizados de bloqueo; false para realizar una recolección de elementos no utilizados en segundo plano cuando sea posible.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> no es válido.o bien<paramref name="mode" /> no es uno de los <see cref="T:System.GCCollectionMode" /> valores.</exception>
    </member>
    <member name="M:System.GC.CollectionCount(System.Int32)">
      <summary>Devuelve el número de veces que se ha producido la recolección de elementos no utilizados para la generación de objetos especificada.</summary>
      <returns>El número de veces que se ha realizado la recolección de elementos no utilizados para la generación especificada desde que se inició el proceso.</returns>
      <param name="generation">La generación de objetos para la que se va a determinar el número de recolecciones de elementos no utilizados. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> es menor que 0. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.GetGeneration(System.Object)">
      <summary>Devuelve el número de generación actual del objeto especificado.</summary>
      <returns>El número de generación actual de <paramref name="obj" />.</returns>
      <param name="obj">El objeto cuya información sobre generación se recupera. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>Recupera el número de bytes que se considera que están asignados en la actualidad.Un parámetro indica si este método puede esperar un breve intervalo de tiempo antes de regresar, para permitir que el sistema recoja los elementos no utilizados y finalice los objetos.</summary>
      <returns>Número que representa la aproximación más exacta disponible del número de bytes actualmente asignados en la memoria administrada.</returns>
      <param name="forceFullCollection">true para indicar que este método puede esperar a que se produzca la recolección de elementos no utilizados antes de regresar; en caso contrario, false.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>Hace referencia al objeto especificado, convirtiéndolo en un objeto no válido para la recolección de elementos no utilizados desde el principio de la rutina actual hasta el momento en que se llamó a este método.</summary>
      <param name="obj">El objeto al que se va a hacer referencia. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>Obtiene el número máximo de generaciones que el sistema admite en la actualidad.</summary>
      <returns>Un valor comprendido entre cero y el número máximo de generaciones admitidas.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.RemoveMemoryPressure(System.Int64)">
      <summary>Informa al tiempo de ejecución de que se ha liberado la memoria no administrada y ya no se necesita tener en cuenta al programar la recolección de elementos no utilizados.</summary>
      <param name="bytesAllocated">Cantidad de memoria no administrada que se ha liberado. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> es menor o igual que 0. o bien En un equipo de 32 bits, <paramref name="bytesAllocated" /> es mayor que <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>Solicita que el sistema llame al finalizador del objeto especificado, para el que previamente se ha llamado a <see cref="M:System.GC.SuppressFinalize(System.Object)" />.</summary>
      <param name="obj">El objeto cuyo finalizador debe llamarse. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="obj" /> es null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>Solicita que Common Language Runtime no llame al finalizador del objeto especificado. </summary>
      <param name="obj">El objeto cuyo finalizador no debe ejecutarse. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="obj" /> es null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>Suspende el subproceso actual hasta que el subproceso que está procesando la cola de finalizadores vacíe dicha cola.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.GCCollectionMode">
      <summary>Especifica el comportamiento para una recolección de elementos no utilizados forzada.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.GCCollectionMode.Default">
      <summary>Configuración predeterminada para esta enumeración, que es actualmente <see cref="F:System.GCCollectionMode.Forced" />. </summary>
    </member>
    <member name="F:System.GCCollectionMode.Forced">
      <summary>Obliga a que la recolección de elementos no utilizados se produzca inmediatamente.</summary>
    </member>
    <member name="F:System.GCCollectionMode.Optimized">
      <summary>Permite al recolector de elementos no utilizados determinar si la hora actual es la adecuada para reclamar objetos. </summary>
    </member>
    <member name="T:System.Guid">
      <summary>Representa un identificador único global (GUID).Para examinar el código fuente de .NET Framework para este tipo, vea el origen de referencia.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Guid" /> usando la matriz de bytes especificada.</summary>
      <param name="b">Matriz de bytes de 16 elementos que contiene valores con los que se va a inicializar el GUID. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="b" /> es null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> no tiene una longitud de 16 bytes. </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Guid" /> usando los enteros y bytes especificados.</summary>
      <param name="a">Cuatro primeros bytes del identificador único global (GUID). </param>
      <param name="b">Dos bytes siguientes del identificador único global (GUID). </param>
      <param name="c">Dos bytes siguientes del identificador único global (GUID). </param>
      <param name="d">Siguiente byte del identificador único global (GUID). </param>
      <param name="e">Siguiente byte del identificador único global (GUID). </param>
      <param name="f">Siguiente byte del identificador único global (GUID). </param>
      <param name="g">Siguiente byte del identificador único global (GUID). </param>
      <param name="h">Siguiente byte del identificador único global (GUID). </param>
      <param name="i">Siguiente byte del identificador único global (GUID). </param>
      <param name="j">Siguiente byte del identificador único global (GUID). </param>
      <param name="k">Siguiente byte del identificador único global (GUID). </param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Guid" /> usando los enteros y la matriz de bytes especificados.</summary>
      <param name="a">Cuatro primeros bytes del identificador único global (GUID). </param>
      <param name="b">Dos bytes siguientes del identificador único global (GUID). </param>
      <param name="c">Dos bytes siguientes del identificador único global (GUID). </param>
      <param name="d">Los ocho bytes restantes del identificador único global (GUID). </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="d" /> es null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> no tiene una longitud de 8 bytes. </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Guid" /> usando el valor representado por la cadena especificada.</summary>
      <param name="g">Cadena que contiene un identificador GUID en uno de los siguientes formatos ("d" representa un dígito hexadecimal sin distinción de mayúsculas y minúsculas): 32 dígitos contiguos: dddddddddddddddddddddddddddddddd o bien Grupos de 8, 4, 4, 4 y 12 dígitos con guiones entre los grupos.Todo el identificador GUID puede encerrarse de forma opcional entre llaves o paréntesis:dddddddd-dddd-dddd-dddd-dddddddddddd o bien {dddddddd-dddd-dddd-dddd-dddddddddddd} o bien (dddddddd-dddd-dddd-dddd-dddddddddddd) o bien Grupos de 8, 4 y 4 dígitos y un subconjunto de ocho grupos de 2 dígitos, cada grupo con un prefijo "0x" ó "0X" y separados por comas.Todo el identificador GUID, así como el subconjunto, se incluyen entre llaves:{0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}} Todas las llaves, las comas y los prefijos "0x" son necesarios.Todos los espacios incrustados se pasan por alto.Se omiten todos los ceros iniciales de un grupo.Los dígitos que se muestran en un grupo constituyen el número máximo de dígitos significativos que pueden aparecer en dicho grupo.Es posible especificar de 1 al número de dígitos que se muestran en un grupo.Los dígitos especificados se consideran dígitos de orden inferior del grupo.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="g" /> es null. </exception>
      <exception cref="T:System.FormatException">El formato de <paramref name="g" /> no es válido. </exception>
      <exception cref="T:System.OverflowException">El formato de <paramref name="g" /> no es válido. </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Guid" /> usando los enteros sin signo y bytes especificados.</summary>
      <param name="a">Cuatro primeros bytes del identificador único global (GUID). </param>
      <param name="b">Dos bytes siguientes del identificador único global (GUID). </param>
      <param name="c">Dos bytes siguientes del identificador único global (GUID). </param>
      <param name="d">Siguiente byte del identificador único global (GUID). </param>
      <param name="e">Siguiente byte del identificador único global (GUID). </param>
      <param name="f">Siguiente byte del identificador único global (GUID). </param>
      <param name="g">Siguiente byte del identificador único global (GUID). </param>
      <param name="h">Siguiente byte del identificador único global (GUID). </param>
      <param name="i">Siguiente byte del identificador único global (GUID). </param>
      <param name="j">Siguiente byte del identificador único global (GUID). </param>
      <param name="k">Siguiente byte del identificador único global (GUID). </param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>Compara esta instancia con un objeto <see cref="T:System.Guid" /> especificado y devuelve una indicación de los valores relativos.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Valor devuelto Descripción  Un entero negativo Esta instancia es menor que <paramref name="value" />. Cero Esta instancia es igual a <paramref name="value" />. Un entero positivo. Esta instancia es mayor que <paramref name="value" />. </returns>
      <param name="value">Un objeto que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>Instancia de solo lectura de la estructura <see cref="T:System.Guid" /> cuyo valor es todo ceros.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>Devuelve un valor que indica si esta instancia y un objeto <see cref="T:System.Guid" /> especificado representan el mismo valor.</summary>
      <returns>Es true si <paramref name="g" /> es igual a esta instancia; en caso contrario, es false.</returns>
      <param name="g">Un objeto que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <returns>true si <paramref name="o" /> es un <see cref="T:System.Guid" /> con el mismo valor que esta instancia; en caso contrario, false.</returns>
      <param name="o">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de esta instancia.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Guid" />.</summary>
      <returns>Nuevo objeto de identificador GUID.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>Indica si los valores de los dos objetos <see cref="T:System.Guid" /> especificados son iguales.</summary>
      <returns>Es true si <paramref name="a" /> y <paramref name="b" /> son iguales; en caso contrario, es false.</returns>
      <param name="a">Primer objeto que se va a comparar. </param>
      <param name="b">Segundo objeto que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>Indica si los valores de los dos objetos <see cref="T:System.Guid" /> especificados no son iguales.</summary>
      <returns>true si <paramref name="a" /> y <paramref name="b" /> no son iguales; en caso contrario, false.</returns>
      <param name="a">Primer objeto que se va a comparar. </param>
      <param name="b">Segundo objeto que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Guid.Parse(System.String)">
      <summary>Convierte la representación de cadena de un identificador GUID en la estructura <see cref="T:System.Guid" /> equivalente.</summary>
      <returns>Estructura que contiene el valor que se analizó.</returns>
      <param name="input">Cadena que se va a convertir.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> es null.</exception>
      <exception cref="T:System.FormatException">El parámetro <paramref name="input" /> no tiene un formato reconocido.</exception>
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
      <summary>Convierte la representación de cadena de un identificador GUID en la estructura <see cref="T:System.Guid" /> equivalente, siempre y cuando la cadena tenga el formato especificado.</summary>
      <returns>Estructura que contiene el valor que se analizó.</returns>
      <param name="input">Hora GUID que se va a convertir.</param>
      <param name="format">Uno de los siguientes especificadores que indica el formato exacto que se va a usar al interpretar <paramref name="input" />: "N", "D", "B", "P" o "X".</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="format" /> es null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" />no está en el formato especificado por <paramref name="format" />.</exception>
    </member>
    <member name="M:System.Guid.System#IComparable#CompareTo(System.Object)">
      <summary>Compara esta instancia con un objeto especificado y devuelve una indicación de los valores relativos. </summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Valor devuelto Descripción  Un entero negativo Esta instancia es menor que <paramref name="value" />. Cero Esta instancia es igual a <paramref name="value" />. Un entero positivo. Esta instancia es mayor que <paramref name="value" /> o bien <paramref name="value" /> es null. </returns>
      <param name="value">Objeto que se va a comparar o null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> no es un <see cref="T:System.Guid" />. </exception>
    </member>
    <member name="M:System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Devuelve una representación de cadena del valor de esta instancia, de acuerdo con el especificador de formato proporcionado.</summary>
      <returns>Valor de este objeto <see cref="T:System.Guid" />, representado como una serie de dígitos hexadecimales en minúscula con el formato especificado.</returns>
      <param name="format">Especificador de formato único que indica la forma de aplicar formato al valor del <see cref="T:System.Guid" />.El parámetro <paramref name="format" /> puede ser "N", "D", "B", "P" o "X".Si el valor de <paramref name="format" /> es null o una cadena vacía (""), se usará "D".</param>
      <param name="provider">(Reservado) Un objeto que aporta información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.FormatException">El valor de <paramref name="format" /> no es null, una cadena vacía (""), o uno de los especificadores de formato siguientes: "N", "D", "B", "P" o "X".</exception>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>Devuelve una matriz de bytes de 16 elementos que contiene el valor de esta instancia.</summary>
      <returns>Matriz de bytes de 16 elementos.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>Devuelve una representación de cadena del valor de esta instancia con formato del Registro.</summary>
      <returns>El valor de este <see cref="T:System.Guid" />, con el especificador de formato “D” como sigue:  xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx donde el valor del identificador GUID se representa como una serie de dígitos hexadecimales en minúscula en grupos de 8, 4, 4, 4 y 12 dígitos separados por guiones.Un ejemplo de un valor devuelto es "382c74c3-721d-4f34-80e5-57657b6cbc27".Para convertir los dígitos hexadecimales usando las mayúsculas desde la a hasta la f, llame al método <see cref="M:System.String.ToUpper" /> en la cadena devuelta.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>Devuelve una representación de cadena del valor de esta instancia <see cref="T:System.Guid" />, de acuerdo con el especificador de formato proporcionado.</summary>
      <returns>Valor de este objeto <see cref="T:System.Guid" />, representado como una serie de dígitos hexadecimales en minúscula con el formato especificado. </returns>
      <param name="format">Especificador de formato único que indica la forma de aplicar formato al valor de este <see cref="T:System.Guid" />.El parámetro <paramref name="format" /> puede ser "N", "D", "B", "P" o "X".Si el valor de <paramref name="format" /> es null o una cadena vacía (""), se usará "D".</param>
      <exception cref="T:System.FormatException">El valor de <paramref name="format" /> no es null, una cadena vacía (""), "N", "D", "B", "P" o "X". </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
      <summary>Convierte la representación de cadena de un identificador GUID en la estructura <see cref="T:System.Guid" /> equivalente. </summary>
      <returns>Es true si la operación de análisis se realizó correctamente; de lo contrario, es false.</returns>
      <param name="input">Hora GUID que se va a convertir.</param>
      <param name="result">Estructura que va a contener el valor analizado.Si el método devuelve true, <paramref name="result" /> contiene un <see cref="T:System.Guid" /> válido.Si el método devuelve false, <paramref name="result" /> es igual a <see cref="F:System.Guid.Empty" />.</param>
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
      <summary>Convierte la representación de cadena de un identificador GUID en la estructura <see cref="T:System.Guid" /> equivalente, siempre y cuando la cadena tenga el formato especificado.</summary>
      <returns>Es true si la operación de análisis se realizó correctamente; de lo contrario, es false.</returns>
      <param name="input">Hora GUID que se va a convertir.</param>
      <param name="format">Uno de los siguientes especificadores que indica el formato exacto que se va a usar al interpretar <paramref name="input" />: "N", "D", "B", "P" o "X".</param>
      <param name="result">Estructura que va a contener el valor analizado.Si el método devuelve true, <paramref name="result" /> contiene un <see cref="T:System.Guid" /> válido.Si el método devuelve false, <paramref name="result" /> es igual a <see cref="F:System.Guid.Empty" />.</param>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>Representa el estado de una operación asincrónica. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>Obtiene un objeto definido por el usuario que califica una operación asincrónica o que contiene información sobre una operación asincrónica.</summary>
      <returns>Objeto definido por el usuario que califica una operación asincrónica o que contiene información sobre una operación asincrónica.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>Obtiene un <see cref="T:System.Threading.WaitHandle" /> que se utiliza para esperar a que se complete una operación asincrónica.</summary>
      <returns>
        <see cref="T:System.Threading.WaitHandle" /> que se utiliza para esperar a que finalice una operación asincrónica.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>Obtiene un valor que indica si la operación asincrónica se completó sincrónicamente.</summary>
      <returns>true si la operación asincrónica se completó sincrónicamente; en caso contrario, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>Obtiene un valor que indica si se ha completado la operación asincrónica.</summary>
      <returns>true si la operación se ha completado; en caso contrario, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IComparable">
      <summary>Define un método de comparación generalizado y específico del tipo que un tipo de valor o una clase implementa para ordenar sus instancias.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un valor que indica el orden relativo de los objetos que se están comparando.El valor devuelto tiene los siguientes significados:Valor Significado Menor que cero Esta instancia es anterior a <paramref name="obj" /> en el criterio de ordenación. Zero Esta instancia se produce en la misma posición del criterio de ordenación que <paramref name="obj" />. Mayor que cero Esta instancia sigue a <paramref name="obj" /> en el criterio de ordenación. </returns>
      <param name="obj">Objeto que se va a comparar con esta instancia. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> no es del mismo tipo que esta instancia. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IComparable`1">
      <summary>Define un método de comparación generalizado que implementa un tipo de valor o una clase para crear un método de comparación específico del tipo de ordenación o clasificación de sus instancias.</summary>
      <typeparam name="T">El tipo de objeto a comparar. Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación. </summary>
      <returns>Un valor que indica el orden relativo de los objetos que se están comparando.El valor devuelto tiene los siguientes significados:Valor Significado Menor que cero Esta instancia es anterior a <paramref name="other" /> en el criterio de ordenación.  Cero Esta instancia se produce en la misma posición del criterio de ordenación que <paramref name="other" />. Mayor que cero Esta instancia sigue a <paramref name="other" /> en el criterio de ordenación. </returns>
      <param name="other">Objeto que se va a comparar con esta instancia. </param>
    </member>
    <member name="T:System.IConvertible">
      <summary>Define métodos que convierten el valor de la referencia o tipo de valor de implementación en un tipo de Common Language Runtime con un valor equivalente.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>Devuelve el <see cref="T:System.TypeCode" /> para esta instancia.</summary>
      <returns>Constante enumerada que es el <see cref="T:System.TypeCode" /> de la clase o del tipo de valor que implementa esta interfaz.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un valor booleano equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Valor booleano equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un entero de 8 bits sin signo equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Entero de 8 bits sin signo equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un carácter Unicode equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Carácter Unicode que equivale al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un tipo <see cref="T:System.DateTime" /> equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Instancia de <see cref="T:System.DateTime" /> equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un número <see cref="T:System.Decimal" /> equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Número <see cref="T:System.Decimal" /> equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un número de punto flotante de precisión doble equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Número de punto flotante de precisión doble equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un entero de 16 bits con signo equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Entero de 16 bits con signo equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un entero de 32 bits con signo equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Entero de 32 bits con signo equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un entero de 64 bits con signo equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Entero de 64 bits con signo equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un entero de 8 bits con signo equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Entero de 8 bits con signo equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un número de punto flotante de precisión sencilla equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Número de punto flotante de precisión sencilla equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un tipo <see cref="T:System.String" /> equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Instancia de <see cref="T:System.String" /> equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un <see cref="T:System.Object" /> del <see cref="T:System.Type" /> especificado con un valor equivalente, utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Instancia de <see cref="T:System.Object" /> de tipo <paramref name="conversionType" /> cuyo valor es equivalente al valor de esta instancia.</returns>
      <param name="conversionType">
        <see cref="T:System.Type" /> al que se ha convertido el valor de esta instancia. </param>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un entero de 16 bits sin signo equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Entero de 16 bits sin signo equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un entero de 32 bits sin signo equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Entero de 32 bits sin signo equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>Convierte el valor de esta instancia en un entero de 64 bits sin signo equivalente utilizando la información de formato específica de la referencia cultural establecida.</summary>
      <returns>Entero de 64 bits sin signo equivalente al valor de esta instancia.</returns>
      <param name="provider">Implementación de la interfaz <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>Define un método que admite formatos personalizados del valor de un objeto.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>Convierte el valor de un objeto especificado en una representación en forma de cadena equivalente, utilizando el formato especificado y la información de formato específica de la referencia cultural.</summary>
      <returns>Representación en forma de cadena del valor de <paramref name="arg" />, con el formato especificado por <paramref name="format" /> y <paramref name="formatProvider" />.</returns>
      <param name="format">Cadena de formato que contiene las especificaciones de formato. </param>
      <param name="arg">Objeto al que se va a aplicar el formato. </param>
      <param name="formatProvider">Un objeto que suministra información de formato sobre la instancia actual. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IDisposable">
      <summary>Proporciona un mecanismo para liberar recursos no administrados.Para examinar el código fuente de .NET Framework para este tipo, vea el origen de referencia.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>Realiza tareas definidas por la aplicación asociadas a la liberación o al restablecimiento de recursos no administrados.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>Define un método generalizado, que implementa una clase o tipo de valor con el fin de crear un método específico del tipo para determinar la igualdad de instancias.</summary>
      <typeparam name="T">Tipo de objetos que se van a comparar.</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>Indica si el objeto actual es igual a otro objeto del mismo tipo.</summary>
      <returns>true si el objeto actual es igual al parámetro <paramref name="other" />; en caso contrario, false.</returns>
      <param name="other">Objeto que se va a comparar con este objeto.</param>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>Proporciona un mecanismo para recuperar un objeto con el fin de controlar el formato.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>Devuelve un objeto que proporciona servicios de formato para el tipo especificado.</summary>
      <returns>Instancia del objeto especificado por <paramref name="formatType" /> si la implementación de <see cref="T:System.IFormatProvider" /> puede proporcionar ese tipo de objeto; de lo contrario, devuelve null.</returns>
      <param name="formatType">Objeto que especifica el tipo de objeto de formato que se va a devolver. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IFormattable">
      <summary>Proporciona funcionalidad para dar formato al valor de un objeto en una representación de cadena.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>Aplica formato al valor de la instancia actual utilizando el formato especificado.</summary>
      <returns>Valor de la instancia actual en el formato especificado.</returns>
      <param name="format">Formato que se va a usar.O bien Una referencia nula (Nothing en Visual Basic) para usar el formato predeterminado definido para el tipo de la implementación de <see cref="T:System.IFormattable" />. </param>
      <param name="formatProvider">Proveedor que se va a usar para formatear el valor.O bien Una referencia nula (Nothing en Visual Basic) para obtener la información de formato numérico de la configuración regional actual del sistema operativo. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>Excepción que se produce cuando se intenta tener acceso a un elemento de una matriz o a una colección con un índice que está fuera de los límites. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IndexOutOfRangeException" />.</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IndexOutOfRangeException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IndexOutOfRangeException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="innerException">Excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se inicia en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.InsufficientExecutionStackException">
      <summary>Excepción que se inicia cuando la pila de ejecución disponible no es suficiente para permitir la ejecución de la mayoría de los métodos.</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InsufficientExecutionStackException" />. </summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InsufficientExecutionStackException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InsufficientExecutionStackException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.Int16">
      <summary>Representa un entero de 16 bits con signo.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>Compara esta instancia con un entero con signo de 16 bits especificado y devuelve un entero que indica si el valor de esta instancia es menor, igual o mayor que el valor del entero con signo de 16 bits especificado.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">Entero que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un valor de <see cref="T:System.Int16" /> especificado.</summary>
      <returns>true si el valor de <paramref name="obj" /> tiene el mismo valor que esta instancia; en caso contrario, false.</returns>
      <param name="obj">Valor <see cref="T:System.Int16" /> que se comparará con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.Int16" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Un objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>Representa el mayor valor posible de un <see cref="T:System.Int16" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>Representa el menor valor posible de <see cref="T:System.Int16" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en el entero de 16 bits con signo equivalente.</summary>
      <returns>Entero con signo de 16 bits equivalente al número incluido en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo especificado en el entero de 16 bits con signo equivalente.</summary>
      <returns>Entero con signo de 16 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo y el formato específico de la referencia cultural que se hayan especificado en el entero de 16 bits con signo equivalente.</summary>
      <returns>Entero con signo de 16 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Un <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número en el formato específico de la referencia cultural que se haya especificado en el entero de 16 bits con signo equivalente.</summary>
      <returns>Entero con signo de 16 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="provider">Un <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Int16" />. </exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>Es true si el valor de la instancia actual no es cero; en caso contrario, es false.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Byte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Char" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Decimal" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Double" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.SByte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Single" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <paramref name="type" />.</returns>
      <param name="type">Tipo al que se va a convertir este valor <see cref="T:System.Int16" />.</param>
      <param name="provider">Implementación de <see cref="T:System.IFormatProvider" /> que proporciona información sobre el formato del valor devuelto.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, que consta de un signo menos si el valor es negativo y una secuencia de dígitos que comprende del 0 al 9 sin ceros a la izquierda.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="provider" />.</returns>
      <param name="provider">Un <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente utilizando el formato y la información de formato específica de la referencia cultural especificados.</summary>
      <returns>Representación de cadena del valor de esta instancia, tal y como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo y el formato específico de la referencia cultural que se hayan especificado en el entero de 16 bits con signo equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir.La cadena se interpreta usando el estilo especificado por <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero con signo de 16 bits equivalente al número contenido en <paramref name="s" />, si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro es <paramref name="s" />null o <see cref="F:System.String.Empty" />, no tiene un formato compatible con <paramref name="style" /> o representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>Convierte la representación en forma de cadena de un número en el entero de 16 bits con signo equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero con signo de 16 bits equivalente al número contenido en <paramref name="s" />, si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" /> no tiene el formato correcto o representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Int32">
      <summary>Representa un entero de 32 bits con signo.Para examinar el código fuente de .NET Framework de este tipo, consulte el origen de referencia.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>Compara esta instancia con un entero de 32 bits con signo y devuelve una indicación de los valores relativos.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">Entero que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un valor de <see cref="T:System.Int32" /> especificado. </summary>
      <returns>true si el valor de <paramref name="obj" /> tiene el mismo valor que esta instancia; en caso contrario, false.</returns>
      <param name="obj">Valor <see cref="T:System.Int32" /> que se comparará con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.Int32" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>Representa el mayor valor posible de un <see cref="T:System.Int32" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>Representa el menor valor posible de <see cref="T:System.Int32" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en el entero de 32 bits con signo equivalente.</summary>
      <returns>Entero con signo de 32 bits equivalente al número incluido en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo especificado en el entero de 32 bits con signo equivalente.</summary>
      <returns>Entero con signo de 32 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo y el formato específico de la referencia cultural que se hayan especificado en el entero de 32 bits con signo equivalente.</summary>
      <returns>Entero con signo de 32 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que aporta información específica de la referencia cultural acerca del formato de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número en el formato específico de la referencia cultural que se haya especificado en el entero de 32 bits con signo equivalente.</summary>
      <returns>Entero con signo de 32 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int32" />. </exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>Es true si el valor de la instancia actual no es cero; en caso contrario, es false.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Byte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Char" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Decimal" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Double" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.SByte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Single" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <paramref name="type" />.</returns>
      <param name="type">Tipo al que se va a convertir este valor <see cref="T:System.Int32" />.</param>
      <param name="provider">Un objeto que proporciona información sobre el formato del valor devuelto.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, que consta de un signo menos si el valor es negativo y una secuencia de dígitos que comprende del 0 al 9 sin ceros a la izquierda.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="provider" />.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato numérico estándar o personalizada.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en su representación de cadena equivalente mediante el formato y la información de formato específica de la referencia cultural que se especificaran.</summary>
      <returns>Representación de cadena del valor de esta instancia, tal y como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena de formato numérico estándar o personalizada.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo y el formato específico de la referencia cultural que se hayan especificado en el entero de 32 bits con signo equivalente.Un valor devuelto indica si la conversión tuvo éxito.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir.La cadena se interpreta usando el estilo especificado por <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero con signo de 32 bits equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro es <paramref name="s" />null o <see cref="F:System.String.Empty" />, no tiene un formato compatible con <paramref name="style" /> o representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>Convierte la representación en forma de cadena de un número en el entero de 32 bits con signo equivalente.Un valor devuelto indica si la conversión tuvo éxito.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero con signo de 32 bits equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" /> no tiene el formato correcto o representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Int64">
      <summary>Representa un entero de 64 bits con signo.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>Compara esta instancia con un entero de 64 bits con signo y devuelve una indicación de los valores relativos.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">Entero que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un valor de <see cref="T:System.Int64" /> especificado.</summary>
      <returns>true si el valor de <paramref name="obj" /> tiene el mismo valor que esta instancia; en caso contrario, false.</returns>
      <param name="obj">Valor <see cref="T:System.Int64" /> que se comparará con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.Int64" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>Representa el mayor valor posible de un Int64.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>Representa el menor valor posible de Int64.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en el entero de 64 bits con signo equivalente.</summary>
      <returns>Entero con signo de 64 bits equivalente al número incluido en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo especificado en el entero de 64 bits con signo equivalente.</summary>
      <returns>Entero con signo de 64 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de valores <see cref="T:System.Globalization.NumberStyles" /> que indica el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.-or-<paramref name="style" /> supports fractional digits but <paramref name="s" /> includes non-zero fractional digits. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo y el formato específico de la referencia cultural que se hayan especificado en el entero de 64 bits con signo equivalente.</summary>
      <returns>Entero con signo de 64 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Un <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. -or-<paramref name="style" /> supports fractional digits, but <paramref name="s" /> includes non-zero fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número en el formato específico de la referencia cultural que se haya especificado en el entero de 64 bits con signo equivalente.</summary>
      <returns>Entero con signo de 64 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int64" />. </exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>Es true si el valor de la instancia actual no es cero; en caso contrario, es false.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Byte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Char" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Decimal" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Double" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.SByte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Single" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <paramref name="type" />.</returns>
      <param name="type">Tipo al que se va a convertir este valor <see cref="T:System.Int64" />.</param>
      <param name="provider">Implementación de <see cref="T:System.IFormatProvider" /> que proporciona información sobre el formato del valor devuelto.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, que consta de un signo menos si el valor es negativo y una secuencia de dígitos que comprende del 0 al 9 sin ceros a la izquierda.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="provider" />.</returns>
      <param name="provider">Un <see cref="T:System.IFormatProvider" /> que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en su representación de cadena equivalente mediante el formato y la información de formato específica de la referencia cultural que se especificaran.</summary>
      <returns>Representación de cadena del valor de esta instancia, tal y como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <param name="provider">Objeto que aporta información de formato específica de la referencia cultural acerca de esta instancia. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo y el formato específico de la referencia cultural que se hayan especificado en el entero de 64 bits con signo equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir.La cadena se interpreta usando el estilo especificado por <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero con signo de 64 bits equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro es <paramref name="s" />null o <see cref="F:System.String.Empty" />, no tiene un formato compatible con <paramref name="style" /> o representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>Convierte la representación en forma de cadena de un número en el entero de 64 bits con signo equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero con signo de 64 bits equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" /> no tiene el formato correcto o representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IntPtr">
      <summary>Tipo específico de plataforma que se utiliza para representar un puntero o un identificador.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.IntPtr" /> utilizando el puntero o identificador de 32 bits especificado.</summary>
      <param name="value">Puntero o identificador contenido en un entero de 32 bits con signo. </param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.IntPtr" /> utilizando el puntero de 64 bits especificado.</summary>
      <param name="value">Puntero o identificador contenido en un entero de 64 bits con signo. </param>
      <exception cref="T:System.OverflowException">En una plataforma de 32 bits, <paramref name="value" /> es demasiado grande para representarse como un <see cref="T:System.IntPtr" />. </exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.IntPtr" /> utilizando el puntero especificado a un tipo no especificado.</summary>
      <param name="value">Puntero a un tipo no especificado. </param>
    </member>
    <member name="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
      <summary>Suma un desplazamiento al valor de un puntero.</summary>
      <returns>Nuevo puntero que es el resultado de sumar <paramref name="offset" /> a <paramref name="pointer" />.</returns>
      <param name="pointer">Puntero al que se va a sumar el desplazamiento.</param>
      <param name="offset">Desplazamiento que se va a sumar.</param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.IntPtr" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia o null. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
      <summary>Suma un desplazamiento al valor de un puntero.</summary>
      <returns>Nuevo puntero que es el resultado de sumar <paramref name="offset" /> a <paramref name="pointer" />.</returns>
      <param name="pointer">Puntero al que se va a sumar el desplazamiento.</param>
      <param name="offset">Desplazamiento que se va a sumar.</param>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>Determina si dos instancias especificadas de <see cref="T:System.IntPtr" /> son iguales.</summary>
      <returns>true si <paramref name="value1" /> es igual a <paramref name="value2" />; en caso contrario, false.</returns>
      <param name="value1">Primer puntero o controlador que se va a comparar.</param>
      <param name="value2">Segundo puntero o controlador que se va a comparar.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>Convierte el valor de un entero de 32 bits con signo en un <see cref="T:System.IntPtr" />.</summary>
      <returns>Nueva instancia de <see cref="T:System.IntPtr" /> inicializada en <paramref name="value" />.</returns>
      <param name="value">Entero de 32 bits con signo. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>Convierte el valor de un entero de 64 bits con signo en un <see cref="T:System.IntPtr" />.</summary>
      <returns>Nueva instancia de <see cref="T:System.IntPtr" /> inicializada en <paramref name="value" />.</returns>
      <param name="value">Entero de 64 bits con signo. </param>
      <exception cref="T:System.OverflowException">En una plataforma de 32 bits, <paramref name="value" /> es demasiado grande para representarse como <see cref="T:System.IntPtr" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>Convierte el valor del <see cref="T:System.IntPtr" /> especificado en un entero de 64 bits con signo.</summary>
      <returns>El contenido de <paramref name="value" />.</returns>
      <param name="value">Puntero o controlador que se va a convertir.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>Convierte el valor del <see cref="T:System.IntPtr" /> especificado en un puntero a un tipo no especificado.</summary>
      <returns>El contenido de <paramref name="value" />.</returns>
      <param name="value">Puntero o controlador que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>Convierte el valor del <see cref="T:System.IntPtr" /> especificado en un entero de 32 bits con signo.</summary>
      <returns>El contenido de <paramref name="value" />.</returns>
      <param name="value">Puntero o controlador que se va a convertir.</param>
      <exception cref="T:System.OverflowException">En una plataforma de 64 bits, el valor de <paramref name="value" /> es demasiado grande para representarse como un entero de 32 bits con signo. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>Convierte el puntero especificado a un tipo no especificado en un <see cref="T:System.IntPtr" />.</summary>
      <returns>Nueva instancia de <see cref="T:System.IntPtr" /> inicializada en <paramref name="value" />.</returns>
      <param name="value">Puntero a un tipo no especificado. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>Determina si dos instancias especificadas de <see cref="T:System.IntPtr" /> no son iguales.</summary>
      <returns>true si <paramref name="value1" /> no es igual a <paramref name="value2" />; en caso contrario, false.</returns>
      <param name="value1">Primer puntero o controlador que se va a comparar. </param>
      <param name="value2">Segundo puntero o controlador que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
      <summary>Resta un desplazamiento del valor de un puntero.</summary>
      <returns>Nuevo puntero que es el resultado de restar <paramref name="offset" /> de <paramref name="pointer" />.</returns>
      <param name="pointer">Puntero del que se va a restar el desplazamiento.</param>
      <param name="offset">Desplazamiento que se va a restar.</param>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>Obtiene el tamaño de esta instancia.</summary>
      <returns>Tamaño de un puntero o identificador en este proceso, medido en bytes.El valor de esta propiedad es 4 en un proceso de 32 bits y 8 en un proceso de 64 bits.Puede definir el tipo de proceso estableciendo el modificador /platform cuando se compila el código con los compiladores de C# y Visual Basic.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
      <summary>Resta un desplazamiento del valor de un puntero.</summary>
      <returns>Nuevo puntero que es el resultado de restar <paramref name="offset" /> de <paramref name="pointer" />.</returns>
      <param name="pointer">Puntero del que se va a restar el desplazamiento.</param>
      <param name="offset">Desplazamiento que se va a restar.</param>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>Convierte el valor de esta instancia a un entero de 32 bits con signo.</summary>
      <returns>Entero de 32 bits con signo igual al valor de esta instancia.</returns>
      <exception cref="T:System.OverflowException">En una plataforma de 64 bits, el valor de esta instancia es demasiado grande para representarse como un entero de 32 bits con signo. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>Convierte el valor de esta instancia a un entero de 64 bits con signo.</summary>
      <returns>Entero de 64 bits con signo igual al valor de esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>Convierte el valor de esta instancia a un puntero en un tipo no especificado.</summary>
      <returns>Puntero a <see cref="T:System.Void" />; es decir, puntero a memoria que contiene datos de un tipo no especificado.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>Convierte el valor numérico del objeto <see cref="T:System.IntPtr" /> actual en su representación de cadena equivalente.</summary>
      <returns>Representación de cadena del valor de esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToString(System.String)">
      <summary>Convierte el valor numérico del objeto <see cref="T:System.IntPtr" /> actual en su representación de cadena equivalente.</summary>
      <returns>La representación de cadena del valor del objeto <see cref="T:System.IntPtr" /> actual.</returns>
      <param name="format">Especificación de formato que rige la conversión del objeto <see cref="T:System.IntPtr" /> actual. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>Campo de solo lectura que representa un puntero o identificador que se ha inicializado en cero.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>Excepción que se produce para una conversión de tipo o una conversión explícita de otra naturaleza que no es válida.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidCastException" />.</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidCastException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidCastException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidCastException" /> con un mensaje y un código de error especificados.</summary>
      <param name="message">El mensaje que indica la causa de que se haya producido la excepción.</param>
      <param name="errorCode">Valor del código de error (HRESULT) asociado a la excepción.</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>Excepción que se produce cuando una llamada a un método no es válida para el estado actual del objeto.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidOperationException" />.</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidOperationException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidOperationException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="innerException">Excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se inicia en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>Excepción que se produce cuando un programa contiene lenguaje intermedio de Microsoft (MSIL) no válido o metadatos.Generalmente, esto indica un error en el compilador que generó el programa.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidProgramException" /> con las propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidProgramException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidProgramException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se inicia en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>Excepción que se produce cuando la información de zona horaria no es válida.</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidTimeZoneException" /> con un mensaje proporcionado por el sistema.</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidTimeZoneException" /> con la cadena de mensaje especificada.</summary>
      <param name="message">Cadena que describe la excepción.</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidTimeZoneException" /> con el mensaje de error especificado y una referencia a la excepción interna que es la causa de esta excepción.</summary>
      <param name="message">Cadena que describe la excepción.    </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.  </param>
    </member>
    <member name="T:System.IObservable`1">
      <summary>Define un proveedor para la notificación mediante inserción.</summary>
      <typeparam name="T">Objeto que proporciona información sobre la notificación.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
    </member>
    <member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
      <summary>Notifica al proveedor que un observador va a recibir las notificaciones.</summary>
      <returns>Una referencia a una interfaz que permite a los observadores dejar de recibir notificaciones antes de que el proveedor haya terminado de enviarlas.</returns>
      <param name="observer">Objeto que va a recibir las notificaciones.</param>
    </member>
    <member name="T:System.IObserver`1">
      <summary>Proporciona un mecanismo para recibir notificaciones basadas en la inserción.</summary>
      <typeparam name="T">Objeto que proporciona información sobre la notificación.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
    </member>
    <member name="M:System.IObserver`1.OnCompleted">
      <summary>Notifica al observador que el proveedor ha terminado de enviar las notificaciones basadas en la inserción.</summary>
    </member>
    <member name="M:System.IObserver`1.OnError(System.Exception)">
      <summary>Notifica al observador que el proveedor ha experimentado una condición de error.</summary>
      <param name="error">Objeto que proporciona información adicional sobre el error.</param>
    </member>
    <member name="M:System.IObserver`1.OnNext(`0)">
      <summary>Proporciona nuevos datos al observador.</summary>
      <param name="value">Información sobre la notificación actual.</param>
    </member>
    <member name="T:System.IProgress`1">
      <summary>Define un proveedor para las actualizaciones de progreso.</summary>
      <typeparam name="T">El tipo de valor de actualización de progreso.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
    </member>
    <member name="M:System.IProgress`1.Report(`0)">
      <summary>Notifica una actualización de progreso.</summary>
      <param name="value">Valor del progreso actualizado.</param>
    </member>
    <member name="T:System.Lazy`1">
      <summary>Proporciona compatibilidad con la inicialización diferida.</summary>
      <typeparam name="T">El tipo de objeto que se inicializa de forma diferida.</typeparam>
    </member>
    <member name="M:System.Lazy`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" />.Cuando se produce la inicialización diferida, se usa el constructor predeterminado del tipo de destino.</summary>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" />.Cuando se produce la inicialización diferida, se usan el constructor predeterminado del tipo de destino y el modo de inicialización especificado.</summary>
      <param name="isThreadSafe">Se establece en true para hacer que esta instancia se pueda usar en varios subprocesos al mismo tiempo; se establece en false para impedir que la instancia se pueda usar en más de un subproceso a la vez. </param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" />.Cuando se produce la inicialización diferida, se usa la función de inicialización especificada.</summary>
      <param name="valueFactory">Delegado que se invoca para generar el valor inicializado de forma diferida cuando sea necesario.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> es null. </exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" />.Cuando se produce la inicialización diferida, se usan la función de inicialización y el modo de inicialización especificados.</summary>
      <param name="valueFactory">Delegado que se invoca para generar el valor inicializado de forma diferida cuando sea necesario.</param>
      <param name="isThreadSafe">Se establece en true para hacer que esta instancia se pueda usar en varios subprocesos al mismo tiempo; se establece en false para impedir que esta instancia se pueda usar en más de un subproceso a la vez.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> es null. </exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" /> que utiliza la función de inicialización y el modo de seguridad para subprocesos especificados.</summary>
      <param name="valueFactory">Delegado que se invoca para generar el valor inicializado de forma diferida cuando sea necesario.</param>
      <param name="mode">Uno de los valores de enumeración que especifica el modo de seguridad para subprocesos. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contiene un valor no válido. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> es null. </exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" /> que usa el constructor predeterminado de <paramref name="T" /> y el modo de seguridad para subprocesos especificado.</summary>
      <param name="mode">Uno de los valores de enumeración que especifica el modo de seguridad para subprocesos. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> contiene un valor no válido. </exception>
    </member>
    <member name="P:System.Lazy`1.IsValueCreated">
      <summary>Obtiene un valor que indica si se ha creado un valor para esta instancia de <see cref="T:System.Lazy`1" />.</summary>
      <returns>Es true si se ha creado un valor para esta instancia de <see cref="T:System.Lazy`1" />; en caso contrario, es false.</returns>
    </member>
    <member name="M:System.Lazy`1.ToString">
      <summary>Crea y devuelve una representación de cadena de la propiedad <see cref="P:System.Lazy`1.Value" /> de esta instancia.</summary>
      <returns>El resultado de llamar al método <see cref="M:System.Object.ToString" /> en la propiedad <see cref="P:System.Lazy`1.Value" /> de esta instancia, si el valor se ha creado (es decir, si la propiedad <see cref="P:System.Lazy`1.IsValueCreated" /> devuelve true).De lo contrario, una cadena que indica que el valor no se ha creado.</returns>
      <exception cref="T:System.NullReferenceException">La propiedad <see cref="P:System.Lazy`1.Value" /> es null.</exception>
    </member>
    <member name="P:System.Lazy`1.Value">
      <summary>Obtiene el valor inicializado de forma diferida de la instancia actual de <see cref="T:System.Lazy`1" />.</summary>
      <returns>Valor inicializado de forma diferida de la instancia actual de <see cref="T:System.Lazy`1" />.</returns>
      <exception cref="T:System.MemberAccessException">La instancia de <see cref="T:System.Lazy`1" /> se inicializa para utilizar el constructor predeterminado del tipo que se inicializa de forma diferida, y faltan los permisos para tener acceso al constructor. </exception>
      <exception cref="T:System.MissingMemberException">La instancia de <see cref="T:System.Lazy`1" /> se inicializa para utilizar el constructor predeterminado del tipo que se inicializa de forma diferida, y ese tipo no tiene un constructor público sin parámetros. </exception>
      <exception cref="T:System.InvalidOperationException">La función de inicialización intenta tener acceso a <see cref="P:System.Lazy`1.Value" /> en esta instancia. </exception>
    </member>
    <member name="T:System.Lazy`2">
      <summary>Proporciona una referencia indirecta diferida a un objeto y a sus metadatos asociados para que la utilice Managed Extensibility Framework.</summary>
      <typeparam name="T">Tipo del objeto al que se hace referencia.</typeparam>
      <typeparam name="TMetadata">Tipo de metadatos.</typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`2" /> con los metadatos especificados que usa la función especificada para obtener el objeto al que se hace referencia.</summary>
      <param name="valueFactory">Función que devuelve el objeto al que se hace referencia.</param>
      <param name="metadata">Metadatos asociados al objeto al que se hace referencia.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`2" /> con los metadatos y el valor de seguridad para subprocesos especificados que usa la función especificada para obtener el objeto al que se hace referencia.</summary>
      <param name="valueFactory">Función que devuelve el objeto al que se hace referencia.</param>
      <param name="metadata">Metadatos asociados al objeto al que se hace referencia.</param>
      <param name="isThreadSafe">Indica si el objeto <see cref="T:System.Lazy`2" /> que se crea será seguro para subprocesos.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`2" /> con los metadatos y el modo de sincronización de subprocesos especificados que usa la función indicada para obtener el objeto al que se hace referencia.</summary>
      <param name="valueFactory">Función que devuelve el objeto al que se hace referencia.</param>
      <param name="metadata">Metadatos asociados al objeto al que se hace referencia.</param>
      <param name="mode">Modo de sincronización de subprocesos.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`2" /> con los metadatos especificados.</summary>
      <param name="metadata">Metadatos asociados al objeto al que se hace referencia.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`2" /> con los metadatos y el valor de seguridad para subprocesos especificados.</summary>
      <param name="metadata">Metadatos asociados al objeto al que se hace referencia.</param>
      <param name="isThreadSafe">Indica si el objeto <see cref="T:System.Lazy`2" /> que se crea será seguro para subprocesos.</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`2" /> con los metadatos y el modo de sincronización de subprocesos especificados.</summary>
      <param name="metadata">Metadatos asociados al objeto al que se hace referencia.</param>
      <param name="mode">Modo de sincronización de subprocesos.</param>
    </member>
    <member name="P:System.Lazy`2.Metadata">
      <summary>Obtiene los metadatos asociados al objeto al que se hace referencia.</summary>
      <returns>Metadatos asociados al objeto al que se hace referencia.</returns>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>Excepción que se produce cuando se produce un error al intentar obtener acceso a un miembro de una clase.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MemberAccessException" />.</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MemberAccessException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MemberAccessException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se inicia en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>La excepción que se produce cuando hay un intento no válido para tener acceso a un método, como tener acceso a un método privado del código de confianza parcial.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MethodAccessException" />, estableciendo la propiedad <see cref="P:System.Exception.Message" /> de una nueva instancia en un mensaje proporcionado por el sistema que describe el error, como "Se ha intentado obtener acceso a un método que genera error". Este mensaje tiene en cuenta la referencia cultural del sistema actual.</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MethodAccessException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error. </param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MethodAccessException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se inicia en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>Excepción que se produce cuando se intenta tener acceso dinámicamente a un campo que no existe.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MissingFieldException" />.</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MissingFieldException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error. </param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MissingFieldException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se inicia en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>Obtiene la cadena de texto que muestra la firma del campo que no se encuentra, el nombre de la clase y el nombre del campo.Esta propiedad es de sólo lectura.</summary>
      <returns>Cadena con el mensaje de error.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>Excepción que se produce cuando se intenta tener acceso dinámicamente a un miembro de la clase que no existe.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MissingMemberException" />.</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MissingMemberException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MissingMemberException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa principal de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="inner">Instancia de <see cref="T:System.Exception" /> que es la causa de la Exception actual.Si <paramref name="inner" />  no es una referencia nula (Nothing en Visual Basic), la excepción Exception actual se produce en un bloque catch que controla <paramref name="inner" />.</param>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>Obtiene la cadena de texto donde se muestran el nombre de la clase, el nombre del miembro y la firma del miembro que falta.</summary>
      <returns>Cadena con el mensaje de error.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>Excepción que se produce cuando se intenta tener acceso dinámicamente a un método que no existe.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MissingMethodException" />.</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MissingMethodException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error. </param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MissingMethodException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se inicia en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>Obtiene la cadena de texto que muestra el nombre de la clase, el nombre del método y la firma del método que no se encuentra.Esta propiedad es de sólo lectura.</summary>
      <returns>Cadena con el mensaje de error.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.MTAThreadAttribute">
      <summary>Indica que el modelo de subprocesos de COM de una aplicación es un apartamento multiproceso (MTA). </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.MTAThreadAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.MTAThreadAttribute" />.</summary>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>Representa un delegado multidifusión; es decir, un delegado que puede tener más de un elemento en su lista de invocación.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>Determina si este delegado multidifusión y el objeto especificado son iguales.</summary>
      <returns>true si <paramref name="obj" /> y la instancia tienen la mismas listas de invocación; en caso contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>Devuelve la lista de invocación de este delegado multidifusión, en el orden de invocación.</summary>
      <returns>Matriz de delegados cuyas listas de invocación se corresponden colectivamente con las listas de invocación de esta instancia.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>Determina si los dos objetos <see cref="T:System.MulticastDelegate" /> son iguales.</summary>
      <returns>Es true si <paramref name="d1" /> y <paramref name="d2" /> tienen las mismas listas de invocación; en caso contrario, es false.</returns>
      <param name="d1">Operando izquierdo. </param>
      <param name="d2">Operando derecho. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>Determina si los dos objetos <see cref="T:System.MulticastDelegate" /> no son iguales.</summary>
      <returns>Es true si <paramref name="d1" /> y <paramref name="d2" /> no tienen las mismas listas de invocación; en caso contrario, es false.</returns>
      <param name="d1">Operando izquierdo. </param>
      <param name="d2">Operando derecho. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>Excepción que se produce cuando no se ha implementado un método u operación que se haya solicitado.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NotImplementedException" /> con propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NotImplementedException" /> con un mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NotImplementedException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>Excepción que se produce cuando no se admite un método invocado o cuando se intenta leer, buscar o escribir en una secuencia que no admite la funcionalidad invocada.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NotSupportedException" />, estableciendo la propiedad <see cref="P:System.Exception.Message" /> de una nueva instancia en un mensaje proporcionado por el sistema que describe el error.Este mensaje tiene en cuenta la referencia cultural del sistema actual.</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NotSupportedException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NotSupportedException" /> con el mensaje de error especificado y una referencia a la excepción interna que causó esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula, se provoca la excepción actual en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.Nullable">
      <summary>Admite un tipo de valor que se puede asignar como null.Esta clase no puede heredarse.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>Compara los valores relativos de dos objetos <see cref="T:System.Nullable`1" />.</summary>
      <returns>Entero que indica los valores relativos de los parámetros <paramref name="n1" /> y <paramref name="n2" />.Valor devueltoDescripciónMenor que ceroLa propiedad <see cref="P:System.Nullable`1.HasValue" /> de <paramref name="n1" /> es false y la propiedad <see cref="P:System.Nullable`1.HasValue" /> de <paramref name="n2" /> es true.O bienLas propiedades <see cref="P:System.Nullable`1.HasValue" /> de <paramref name="n1" /> y <paramref name="n2" /> son true, y el valor de la propiedad <see cref="P:System.Nullable`1.Value" /> de <paramref name="n1" /> es menor que el valor de la propiedad <see cref="P:System.Nullable`1.Value" /> de <paramref name="n2" />.ZeroLas propiedades <see cref="P:System.Nullable`1.HasValue" /> de <paramref name="n1" /> y <paramref name="n2" /> son false.O bienLas propiedades <see cref="P:System.Nullable`1.HasValue" /> de <paramref name="n1" /> y <paramref name="n2" /> son true y el valor de la propiedad <see cref="P:System.Nullable`1.Value" /> de <paramref name="n1" /> es igual al valor de la propiedad <see cref="P:System.Nullable`1.Value" /> de <paramref name="n2" />.Mayor que ceroLa propiedad <see cref="P:System.Nullable`1.HasValue" /> de <paramref name="n1" /> es true y la propiedad <see cref="P:System.Nullable`1.HasValue" /> de <paramref name="n2" /> es false.O bienLas propiedades <see cref="P:System.Nullable`1.HasValue" /> de <paramref name="n1" /> y <paramref name="n2" /> son true, y el valor de la propiedad <see cref="P:System.Nullable`1.Value" /> de <paramref name="n1" /> es mayor que el valor de la propiedad <see cref="P:System.Nullable`1.Value" /> de <paramref name="n2" />.</returns>
      <param name="n1">Un objeto <see cref="T:System.Nullable`1" />.</param>
      <param name="n2">Un objeto <see cref="T:System.Nullable`1" />.</param>
      <typeparam name="T">Tipo de valor subyacente de los parámetros <paramref name="n1" /> y <paramref name="n2" />.</typeparam>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>Indica si dos objetos <see cref="T:System.Nullable`1" /> especificados son iguales.</summary>
      <returns>Es true si el parámetro <paramref name="n1" /> es igual al parámetro <paramref name="n2" />; en caso contrario, es false. El valor devuelto depende de las propiedades <see cref="P:System.Nullable`1.HasValue" /> y <see cref="P:System.Nullable`1.Value" /> de los dos parámetros que se comparan.Valor devueltoDescripcióntrueLas propiedades <see cref="P:System.Nullable`1.HasValue" /> de <paramref name="n1" /> y <paramref name="n2" /> son false. O bienLas propiedades <see cref="P:System.Nullable`1.HasValue" /> de <paramref name="n1" /> y <paramref name="n2" /> son true, y las propiedades <see cref="P:System.Nullable`1.Value" /> de los parámetros son iguales.falseLa propiedad <see cref="P:System.Nullable`1.HasValue" /> es true para un parámetro y false para el otro.O bienLas propiedades <see cref="P:System.Nullable`1.HasValue" /> de <paramref name="n1" /> y <paramref name="n2" /> son true, y las propiedades <see cref="P:System.Nullable`1.Value" /> de los parámetros no son iguales.</returns>
      <param name="n1">Un objeto <see cref="T:System.Nullable`1" />.</param>
      <param name="n2">Un objeto <see cref="T:System.Nullable`1" />.</param>
      <typeparam name="T">Tipo de valor subyacente de los parámetros <paramref name="n1" /> y <paramref name="n2" />.</typeparam>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>Devuelve el argumento de tipo subyacente del tipo que acepta valores NULL especificado.</summary>
      <returns>Argumento de tipo del parámetro <paramref name="nullableType" />, si el parámetro <paramref name="nullableType" /> es un tipo genérico cerrado que acepta valores NULL; de lo contrario, es null. </returns>
      <param name="nullableType">Objeto <see cref="T:System.Type" /> que describe un tipo genérico cerrado que acepta valores NULL. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> es null.</exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>Representa un tipo de valor que se puede asignar como null.</summary>
      <typeparam name="T">Tipo de valor subyacente del tipo genérico <see cref="T:System.Nullable`1" />.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Nullable`1" /> en el valor especificado. </summary>
      <param name="value">Tipo de valor.</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>Indica si el objeto <see cref="T:System.Nullable`1" /> actual es igual a un objeto especificado.</summary>
      <returns>true si el parámetro <paramref name="other" /> es igual al objeto <see cref="T:System.Nullable`1" /> actual; de lo contrario, false. En esta tabla se describe cómo se define la igualdad para los valores comparados: Valor devueltoDescripcióntrueEl <see cref="P:System.Nullable`1.HasValue" /> propiedad es false, y el <paramref name="other" /> parámetro es null.Es decir, dos valores null son iguales por definición.o bienEl <see cref="P:System.Nullable`1.HasValue" /> propiedad es true, y el valor devuelto por la <see cref="P:System.Nullable`1.Value" /> propiedad es igual a la <paramref name="other" /> parámetro.falseEl <see cref="P:System.Nullable`1.HasValue" /> propiedad actual <see cref="T:System.Nullable`1" /> estructura es true, y el <paramref name="other" /> parámetro es null.o bienEl <see cref="P:System.Nullable`1.HasValue" /> propiedad actual <see cref="T:System.Nullable`1" /> estructura es false, y <paramref name="other" /> el parámetro no es null.o bienEl <see cref="P:System.Nullable`1.HasValue" /> propiedad actual <see cref="T:System.Nullable`1" /> estructura es true, y el valor devuelto por la <see cref="P:System.Nullable`1.Value" /> propiedad no es igual a la <paramref name="other" /> parámetro.</returns>
      <param name="other">Objeto.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>Recupera el código hash del objeto devuelto por la propiedad <see cref="P:System.Nullable`1.Value" />.</summary>
      <returns>Código hash del objeto devuelto por la propiedad <see cref="P:System.Nullable`1.Value" /> si la propiedad <see cref="P:System.Nullable`1.HasValue" /> es true, o cero si la propiedad <see cref="P:System.Nullable`1.HasValue" /> es false. </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>Recupera el valor del objeto <see cref="T:System.Nullable`1" /> actual o el valor predeterminado del objeto.</summary>
      <returns>Valor de la propiedad <see cref="P:System.Nullable`1.Value" /> si la propiedad <see cref="P:System.Nullable`1.HasValue" /> es true; de lo contrario, valor predeterminado del objeto <see cref="T:System.Nullable`1" /> actual.El tipo del valor predeterminado es el argumento de tipo del objeto <see cref="T:System.Nullable`1" /> actual y el valor del valor predeterminado consiste únicamente en ceros binarios.</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>Recupera el valor del objeto <see cref="T:System.Nullable`1" /> actual o el valor predeterminado especificado.</summary>
      <returns>Valor de la propiedad <see cref="P:System.Nullable`1.Value" /> si la propiedad <see cref="P:System.Nullable`1.HasValue" /> es true; de lo contrario, el parámetro <paramref name="defaultValue" />.</returns>
      <param name="defaultValue">Valor que se devuelve si la propiedad <see cref="P:System.Nullable`1.HasValue" /> es false.</param>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Nullable`1" /> actual tiene un valor válido de su tipo subyacente. </summary>
      <returns>Es true si el objeto <see cref="T:System.Nullable`1" /> actual tiene un valor; es false si el objeto <see cref="T:System.Nullable`1" /> actual no tiene ningún valor.</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0">
      <summary>Define una conversión explícita de una instancia <see cref="T:System.Nullable`1" /> a su valor subyacente. </summary>
      <returns>Valor de la propiedad <see cref="P:System.Nullable`1.Value" /> para el parámetro <paramref name="value" />.</returns>
      <param name="value">Valor que acepta valores NULL.</param>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}">
      <summary>Crea un nuevo objeto <see cref="T:System.Nullable`1" /> inicializado en un valor especificado. </summary>
      <returns>Objeto <see cref="T:System.Nullable`1" /> cuya propiedad <see cref="P:System.Nullable`1.Value" /> se inicializa con el parámetro <paramref name="value" />.</returns>
      <param name="value">Tipo de valor.</param>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>Devuelve la representación de texto del valor del objeto <see cref="T:System.Nullable`1" /> actual.</summary>
      <returns>Representación de texto del valor del objeto <see cref="T:System.Nullable`1" /> actual si la propiedad <see cref="P:System.Nullable`1.HasValue" /> es true, o una cadena vacía ("") si la propiedad <see cref="P:System.Nullable`1.HasValue" /> es false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>Obtiene el valor del objeto <see cref="T:System.Nullable`1" /> actual si se asignó un valor subyacente válido.</summary>
      <returns>Valor del objeto <see cref="T:System.Nullable`1" /> actual si la propiedad <see cref="P:System.Nullable`1.HasValue" /> es true.Si la propiedad <see cref="P:System.Nullable`1.HasValue" /> es false, se produce una excepción.</returns>
      <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.Nullable`1.HasValue" /> es false.</exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>Excepción que se produce cuando se intenta desreferenciar un objeto null.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NullReferenceException" />, estableciendo la propiedad <see cref="P:System.Exception.Message" /> de una nueva instancia en un mensaje proporcionado por el sistema que describe el error, como "Se ha encontrado el valor 'null' en el lugar donde era necesaria una instancia de un objeto". Este mensaje tiene en cuenta la referencia cultural del sistema actual.</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NullReferenceException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NullReferenceException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="innerException">Excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.Object">
      <summary>Admite todas las clases de la jerarquía de clases de .NET Framework y proporciona servicios de bajo nivel a las clases derivadas.Se trata de la clase base fundamental de todas las clases de .NET Framework; es la raíz de la jerarquía de tipos.Para examinar el código fuente de .NET Framework para este tipo, vea el origen de referencia.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Object" />.</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>true si el objeto especificado es igual al objeto actual; de lo contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>Determina si las instancias del objeto especificado se consideran iguales.</summary>
      <returns>true si los dos objetos se consideran iguales; en caso contrario, false.Si tanto <paramref name="objA" /> como <paramref name="objB" /> son null, el método devuelve true.</returns>
      <param name="objA">Primer objeto que se va a comparar. </param>
      <param name="objB">Segundo objeto que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>Permite que un objeto intente liberar recursos y realizar otras operaciones de limpieza antes de que sea reclamado por la recolección de elementos no utilizados.</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>Sirve como la función hash predeterminada. </summary>
      <returns>Código hash para el objeto actual.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.GetType">
      <summary>Obtiene el objeto <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>El tipo en tiempo de ejecución exacto de la instancia actual.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>Crea una copia superficial del <see cref="T:System.Object" /> actual.</summary>
      <returns>Copia superficial del <see cref="T:System.Object" /> actual.</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>Determina si las instancias de <see cref="T:System.Object" /> especificadas son la misma instancia.</summary>
      <returns>Es true si <paramref name="objA" /> es la misma instancia que <paramref name="objB" />, o si ambos parámetros son referencias null; en caso contrario, es false.</returns>
      <param name="objA">Primer objeto que se va a comparar. </param>
      <param name="objB">Segundo objeto que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>Excepción que se produce cuando se realiza una operación en un objeto desechado.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ObjectDisposedException" /> con una cadena que contiene el nombre del objeto desechado.</summary>
      <param name="objectName">Cadena que contiene el nombre del objeto desechado. </param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ObjectDisposedException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual.Si <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ObjectDisposedException" /> con el mensaje y el nombre del objeto especificado.</summary>
      <param name="objectName">Nombre del objeto desechado. </param>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>Obtiene el mensaje que describe el error.</summary>
      <returns>Cadena que describe el error.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>Obtiene el nombre del objeto desechado.</summary>
      <returns>Cadena que contiene el nombre del objeto desechado.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>Marca los elementos del programa que ya no se utilizan.Esta clase no puede heredarse.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ObsoleteAttribute" /> con propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ObsoleteAttribute" /> con el mensaje de solución especificado.</summary>
      <param name="message">Cadena de texto que describe soluciones alternativas. </param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ObsoleteAttribute" /> con un mensaje de solución y un valor Boolean que indica si el uso del elemento obsoleto se considera un error.</summary>
      <param name="message">Cadena de texto que describe soluciones alternativas. </param>
      <param name="error">Valor Boolean que indica si el uso del elemento obsoleto se considera un error. </param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>Obtiene un valor Boolean que indica si el compilador tratará el uso del elemento de programa obsoleto como un error.</summary>
      <returns>true si el uso del elemento obsoleto se considera un error; en caso contrario, false.El valor predeterminado es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>Obtiene el mensaje de solución en el que se incluye una descripción de los elementos de programa alternativos.</summary>
      <returns>Cadena de texto de la solución.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>Excepción que se produce cuando no hay suficiente memoria para continuar con la ejecución de un programa.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OutOfMemoryException" />.</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OutOfMemoryException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OutOfMemoryException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="innerException">Excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se inicia en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.OverflowException">
      <summary>Excepción que se produce cuando una operación aritmética, de conversión de tipo o de conversión de otra naturaleza en un contexto comprobado, da como resultado una sobrecarga.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OverflowException" />.</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OverflowException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OverflowException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>Indica que un método va a permitir un número variable de argumentos cuando se invoque.Esta clase no puede heredarse.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ParamArrayAttribute" /> con propiedades predeterminadas.</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>Excepción que se produce cuando una característica no se ejecuta en una plataforma concreta.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.PlatformNotSupportedException" /> con las propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.PlatformNotSupportedException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de texto que explica la razón de la excepción. </param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.PlatformNotSupportedException" /> con el mensaje de error especificado y una referencia a la excepción interna que causó esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>Representa el método que define un conjunto de criterios y determina si el objeto especificado cumple esos criterios.</summary>
      <typeparam name="T">Tipo del objeto que se va a comparar.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Predicate`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Predicate`1.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Predicate`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Predicate`1.Invoke(`0)"></member>
    <member name="T:System.RankException">
      <summary>Excepción que se produce cuando se pasa a un método una matriz con el número de dimensiones incorrecto.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.RankException" />.</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.RankException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error. </param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.RankException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>Representa un campo utilizando un símbolo (token) de metadatos interno.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>Indica si la instancia actual es igual al objeto especificado.</summary>
      <returns>true si <paramref name="obj" /> es <see cref="T:System.RuntimeFieldHandle" /> y es igual al valor de la instancia actual; en caso contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con la actual instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>Indica si la instancia actual es igual al objeto <see cref="T:System.RuntimeFieldHandle" /> especificado.</summary>
      <returns>Es true si el valor de <paramref name="handle" /> es igual al de la instancia actual; en caso contrario, es false.</returns>
      <param name="handle">
        <see cref="T:System.RuntimeFieldHandle" /> que se va a comparar con la instancia actual.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>Indica si dos estructuras de <see cref="T:System.RuntimeFieldHandle" /> son iguales.</summary>
      <returns>true si <paramref name="left" /> es igual a <paramref name="right" />; en caso contrario, false.</returns>
      <param name="left">
        <see cref="T:System.RuntimeFieldHandle" /> que se compara con <paramref name="right" />.</param>
      <param name="right">
        <see cref="T:System.RuntimeFieldHandle" /> que se compara con <paramref name="left" />.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>Indica si dos estructuras de <see cref="T:System.RuntimeFieldHandle" /> son iguales.</summary>
      <returns>Es true si <paramref name="left" /> no es igual a <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">
        <see cref="T:System.RuntimeFieldHandle" /> que se compara con <paramref name="right" />.</param>
      <param name="right">
        <see cref="T:System.RuntimeFieldHandle" /> que se compara con <paramref name="left" />.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> es un identificador para la representación interna de los metadatos de un método.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>Indica si esta instancia es igual a un objeto especificado.</summary>
      <returns>true si <paramref name="obj" /> es <see cref="T:System.RuntimeMethodHandle" /> y es igual al valor de esta instancia; en caso contrario, false.</returns>
      <param name="obj">Un <see cref="T:System.Object" /> que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>Indica si esta instancia es igual a un <see cref="T:System.RuntimeMethodHandle" /> especificado.</summary>
      <returns>true si <paramref name="handle" /> es igual al valor de esta instancia; en caso contrario, false.</returns>
      <param name="handle">
        <see cref="T:System.RuntimeMethodHandle" /> que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>Indica si dos instancias de <see cref="T:System.RuntimeMethodHandle" /> son iguales.</summary>
      <returns>Es true si el valor de <paramref name="left" /> es igual al de <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">
        <see cref="T:System.RuntimeMethodHandle" /> que se va a comparar con <paramref name="right" />.</param>
      <param name="right">
        <see cref="T:System.RuntimeMethodHandle" /> que se va comparar con <paramref name="left" />.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>Indica si dos instancias de <see cref="T:System.RuntimeMethodHandle" /> no son iguales.</summary>
      <returns>Es true si el valor de <paramref name="left" /> no es igual al de <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">
        <see cref="T:System.RuntimeMethodHandle" /> que se va a comparar con <paramref name="right" />.</param>
      <param name="right">
        <see cref="T:System.RuntimeMethodHandle" /> que se va comparar con <paramref name="left" />.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>Representa un tipo utilizando un símbolo (token) de metadatos interno.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>Indica si el objeto especificado es igual a la estructura <see cref="T:System.RuntimeTypeHandle" /> actual.</summary>
      <returns>Es true si <paramref name="obj" /> es una estructura <see cref="T:System.RuntimeTypeHandle" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>Indica si la estructura <see cref="T:System.RuntimeTypeHandle" /> especificada es igual a la estructura <see cref="T:System.RuntimeTypeHandle" /> actual.</summary>
      <returns>Es true si el valor de <paramref name="handle" /> es igual al de esta instancia; en caso contrario, es false.</returns>
      <param name="handle">Estructura <see cref="T:System.RuntimeTypeHandle" /> que se va a comparar con la instancia actual.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>Devuelve el código hash de la instancia actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)">
      <summary>Indica si un objeto y una estructura <see cref="T:System.RuntimeTypeHandle" /> son iguales.</summary>
      <returns>Es true si <paramref name="left" /> es una estructura <see cref="T:System.RuntimeTypeHandle" /> y es igual a <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">Objeto que se va comparar con <paramref name="right" />.</param>
      <param name="right">Estructura <see cref="T:System.RuntimeTypeHandle" /> que se va comparar con <paramref name="left" />.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>Indica si una estructura <see cref="T:System.RuntimeTypeHandle" /> es igual a un objeto.</summary>
      <returns>Es true si <paramref name="right" /> es <see cref="T:System.RuntimeTypeHandle" /> y es igual a <paramref name="left" />; en caso contrario, es false.</returns>
      <param name="left">Estructura <see cref="T:System.RuntimeTypeHandle" /> que se va comparar con <paramref name="right" />.</param>
      <param name="right">Objeto que se va comparar con <paramref name="left" />.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)">
      <summary>Indica si un objeto y una estructura <see cref="T:System.RuntimeTypeHandle" /> no son iguales.</summary>
      <returns>Es true si <paramref name="left" /> es <see cref="T:System.RuntimeTypeHandle" /> y no es igual a <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">Objeto que se va comparar con <paramref name="right" />.</param>
      <param name="right">Estructura <see cref="T:System.RuntimeTypeHandle" /> que se va comparar con <paramref name="left" />.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>Indica si una estructura <see cref="T:System.RuntimeTypeHandle" /> no es igual a un objeto.</summary>
      <returns>Es true si <paramref name="right" /> es una estructura <see cref="T:System.RuntimeTypeHandle" /> y no es igual a <paramref name="left" />; en caso contrario, es false.</returns>
      <param name="left">Estructura <see cref="T:System.RuntimeTypeHandle" /> que se va comparar con <paramref name="right" />.</param>
      <param name="right">Objeto que se va comparar con <paramref name="left" />.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.SByte">
      <summary>Representa un entero con signo de 8 bits.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>Compara esta instancia con un entero de 8 bits con signo y devuelve una indicación de los valores relativos.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">Entero de 8 bits con signo que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.SByte" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un valor de <see cref="T:System.SByte" /> especificado.</summary>
      <returns>true si el valor de <paramref name="obj" /> tiene el mismo valor que esta instancia; en caso contrario, false.</returns>
      <param name="obj">Valor <see cref="T:System.SByte" /> que se comparará con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>Representa el mayor valor posible de <see cref="T:System.SByte" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>Representa el menor valor posible de <see cref="T:System.SByte" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en el entero de 8 bits con signo equivalente.</summary>
      <returns>Un entero con signo de 8 bits que es equivalente al número incluido en el parámetro <paramref name="s" />.</returns>
      <param name="s">Cadena que representa el número que se va a convertir.La cadena se interpreta usando el estilo <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo especificado en el entero de 8 bits con signo equivalente.</summary>
      <returns>Un entero con signo de 8 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir.La cadena se interpreta usando el estilo especificado por <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo y el formato específico de la referencia cultural que se hayan especificado en el entero de 8 bits con signo equivalente.</summary>
      <returns>Un valor con signo de 8 bits que es equivalente al número especificado en el parámetro <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene el número que se va a convertir.La cadena se interpreta usando el estilo especificado por <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />.Si <paramref name="provider" /> es null, se usa la referencia cultural actual del subproceso.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.-or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.-or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número en el formato específico de la referencia cultural que se haya especificado en el entero de 8 bits con signo equivalente.</summary>
      <returns>Un entero con signo de 8 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que representa el número que se va a convertir.La cadena se interpreta usando el estilo <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />.Si <paramref name="provider" /> es null, se usa la referencia cultural actual del subproceso.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="obj">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.SByte" />. </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>Es true si el valor de la instancia actual no es cero; en caso contrario, es false.</returns>
      <param name="provider">Este parámetro no se utiliza.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Byte" />.</returns>
      <param name="provider">Este parámetro no se utiliza.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Char" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Si se intenta, se produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>Ninguno.No se admite esta conversión.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Decimal" />.</returns>
      <param name="provider">Este parámetro no se utiliza.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Double" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Single" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>El valor de la instancia actual, convertido en un objeto de tipo <paramref name="type" />.</returns>
      <param name="type">El <see cref="T:System.Type" /> al que se convierte este valor <see cref="T:System.SByte" />.</param>
      <param name="provider">Una implementación de <see cref="T:System.IFormatProvider" /> que proporciona información sobre el formato del valor devuelto.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, que consta de un signo menos si el valor es negativo y una secuencia de dígitos que comprende del 0 al 9 sin ceros a la izquierda.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="provider" />.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato numérico estándar o personalizada.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en su representación de cadena equivalente mediante el formato y la información de formato específica de la referencia cultural que se especificaran.</summary>
      <returns>Representación de cadena del valor de esta instancia, tal y como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena de formato numérico estándar o personalizada.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>Intenta convertir la representación de cadena de un número con un estilo específico y un formato específico de la referencia cultural en su equivalente de <see cref="T:System.SByte" /> y devuelve un valor que indica si la conversión fue correcta.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que representa un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero con signo de 8 bits equivalente al número contenido en <paramref name="s" />, si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro es <paramref name="s" />null o <see cref="F:System.String.Empty" />, no tiene un formato compatible con <paramref name="style" /> o representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>Intenta convertir la representación de cadena de un número en si equivalente de <see cref="T:System.SByte" /> y devuelve un valor que indica si la conversión tuvo éxito.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir.</param>
      <param name="result">El resultado que devuelve este método contiene un valor entero con signo de 8 bits equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente o cero si se produce un error en la conversión.La conversión no se realiza correctamente si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" />, no tiene el formato correcto o representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Single">
      <summary>Representa un número de punto flotante de precisión sencilla.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>Compara esta instancia con un número de punto flotante de precisión sencilla especificado y devuelve un entero que indica si el valor de esta instancia es menor, igual o mayor que el valor del número de punto flotante de precisión sencilla especificado.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />). </returns>
      <param name="value">Número de punto flotante de precisión sencilla que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>Representa el menor valor <see cref="T:System.Single" /> positivo mayor que cero.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.Single" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>Devuelve un valor que indica si esta instancia y un objeto <see cref="T:System.Single" /> especificado representan el mismo valor.</summary>
      <returns>true si <paramref name="obj" /> es igual a esta instancia; en caso contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>Devuelve un valor que indica si el número especificado se evalúa como infinito negativo o positivo.</summary>
      <returns>Es true si <paramref name="f" /> se evalúa en <see cref="F:System.Single.PositiveInfinity" /> o <see cref="F:System.Single.NegativeInfinity" />; en caso contrario, es false.</returns>
      <param name="f">Número de punto flotante de precisión sencilla. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>Devuelve un valor que indica si el valor especificado no es un número (<see cref="F:System.Single.NaN" />).</summary>
      <returns>true si <paramref name="f" /> se evalúa como un valor no numérico (<see cref="F:System.Single.NaN" />); de lo contrario, false.</returns>
      <param name="f">Número de punto flotante de precisión sencilla. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>Devuelve un valor que indica si el número especificado se evalúa como infinito negativo.</summary>
      <returns>Es true si <paramref name="f" /> se evalúa en <see cref="F:System.Single.NegativeInfinity" />; en caso contrario, es false.</returns>
      <param name="f">Número de punto flotante de precisión sencilla. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>Devuelve un valor que indica si el número especificado se evalúa como infinito positivo.</summary>
      <returns>Es true si <paramref name="f" /> se evalúa en <see cref="F:System.Single.PositiveInfinity" />; en caso contrario, es false.</returns>
      <param name="f">Número de punto flotante de precisión sencilla. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>Representa el mayor valor posible de <see cref="T:System.Single" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>Representa el menor valor posible de <see cref="T:System.Single" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.NaN">
      <summary>Representa un valor no numérico (NaN).Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>Representa infinito negativo.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.op_Equality(System.Single,System.Single)">
      <summary>Devuelve un valor que indica si dos valores <see cref="T:System.Single" /> especificados son iguales.</summary>
      <returns>Es true si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, es false.</returns>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Single.op_GreaterThan(System.Single,System.Single)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Single" /> especificado es mayor que otro valor <see cref="T:System.Single" /> especificado.</summary>
      <returns>Es true si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Single" /> especificado es mayor o igual que otro valor <see cref="T:System.Single" /> especificado.</summary>
      <returns>Es true si <paramref name="left" /> es mayor o igual que <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Single.op_Inequality(System.Single,System.Single)">
      <summary>Devuelve un valor que indica si dos valores <see cref="T:System.Single" /> especificados no son iguales.</summary>
      <returns>true si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, false.</returns>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Single.op_LessThan(System.Single,System.Single)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Single" /> especificado es menor que otro valor <see cref="T:System.Single" /> especificado.</summary>
      <returns>Es true si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Single" /> especificado es menor o igual que otro valor <see cref="T:System.Single" /> especificado.</summary>
      <returns>Es true si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es false.</returns>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en el número de punto flotante de precisión sencilla equivalente.</summary>
      <returns>Número de punto flotante de precisión sencilla equivalente al valor numérico o símbolo especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación en forma de cadena de un número con un estilo especificado en el número de punto flotante de precisión sencilla equivalente.</summary>
      <returns>Número de punto flotante de precisión sencilla equivalente al valor numérico o símbolo especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Float" /> combinado con <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con un estilo y un formato específico de la referencia cultural especificados en el número de punto flotante de precisión sencilla equivalente.</summary>
      <returns>Número de punto flotante de precisión sencilla equivalente al valor numérico o símbolo especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Float" /> combinado con <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con un formato específico de la referencia cultural especificado en el número de punto flotante de precisión sencilla equivalente.</summary>
      <returns>Número de punto flotante de precisión sencilla equivalente al valor numérico o símbolo especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que contiene un número que se va a convertir. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>Representa infinito positivo.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Single" />. </exception>
    </member>
    <member name="M:System.Single.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>Es true si el valor de la instancia actual no es cero; en caso contrario, es false.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Byte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Decimal" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Double" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.SByte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <paramref name="type" />.</returns>
      <param name="type">Tipo al que se va a convertir este valor <see cref="T:System.Single" />.</param>
      <param name="provider">Objeto que suministra información sobre el formato del valor devuelto.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.Single.ToString">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación de cadena del valor de esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="provider" />.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en su representación de cadena equivalente mediante el formato y la información de formato específica de la referencia cultural que se especificaran.</summary>
      <returns>Representación de cadena del valor de esta instancia, tal y como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>Convierte la representación en forma de cadena de un número con un estilo y un formato específico de la referencia cultural especificados en el número de punto flotante de precisión sencilla equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que representa un número que se va a convertir. </param>
      <param name="style">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Float" /> combinado con <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="result">Cuando se devuelve este método, contiene el número de punto flotante de precisión sencilla equivalente al valor numérico o al símbolo contenido en <paramref name="s" /> si la conversión se realizó correctamente, o cero si no se realizó correctamente.Se produce un error en la conversión si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" />, no está en un formato compatible con <paramref name="style" />, representa un número menor que <see cref="F:System.Single.MinValue" /> o mayor que <see cref="F:System.Single.MaxValue" />, o bien si <paramref name="style" /> no es una combinación válida de constantes enumeradas de <see cref="T:System.Globalization.NumberStyles" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>Convierte la representación en forma de cadena de un número en el número de punto flotante de precisión sencilla equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Cadena que representa un número que se va a convertir. </param>
      <param name="result">Cuando se devuelve este método, contiene el número de punto flotante de precisión sencilla equivalente al valor numérico o al símbolo contenido en <paramref name="s" /> si la conversión se realizó correctamente, o cero si no se realizó correctamente.La conversión no finaliza correctamente si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" />, no es un número con formato válido o representa un número menor que <see cref="F:System.Single.MinValue" /> o mayor que <see cref="F:System.Single.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>Indica que el modelo de subprocesos COM de una aplicación es un contenedor uniproceso (STA). </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.STAThreadAttribute" />.</summary>
    </member>
    <member name="T:System.String">
      <summary>Representa texto como una serie de caracteres Unicode.Para examinar el código fuente de .NET Framework de este tipo, consulte el origen de referencia.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.String" /> con el valor indicado por un puntero especificado que apunta a una matriz de caracteres Unicode.</summary>
      <param name="value">Puntero a una matriz de caracteres Unicode terminada en null. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current process does not have read access to all the addressed characters.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> specifies an address less than 64000.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.String" /> con el valor indicado por un puntero especificado que apunta a una matriz de caracteres Unicode, una posición de carácter inicial dentro de dicha matriz y una longitud.</summary>
      <param name="value">Puntero a una matriz de caracteres Unicode. </param>
      <param name="startIndex">Posición inicial de <paramref name="value" />. </param>
      <param name="length">Número de caracteres de <paramref name="value" /> que se van a usar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero, <paramref name="value" /> + <paramref name="startIndex" /> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> + <paramref name="startIndex" /> specifies an address less than 64000.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.String" /> con el valor indicado por un carácter Unicode especificado que se repite un número de veces determinado.</summary>
      <param name="c">Carácter Unicode. </param>
      <param name="count">Número de veces que se presenta el parámetro <paramref name="c" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.String" /> en el valor indicado por una matriz de caracteres Unicode.</summary>
      <param name="value">Matriz de caracteres Unicode. </param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.String" /> con el valor indicado por una matriz de caracteres Unicode, una posición de carácter inicial dentro de dicha matriz y una longitud.</summary>
      <param name="value">Matriz de caracteres Unicode. </param>
      <param name="startIndex">Posición inicial de <paramref name="value" />. </param>
      <param name="length">Número de caracteres de <paramref name="value" /> que se van a usar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or- The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />. </exception>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>Obtiene el objeto <see cref="T:System.Char" /> situado en una posición específica en el objeto <see cref="T:System.String" /> actual.</summary>
      <returns>Objeto en la posición <paramref name="index" />.</returns>
      <param name="index">Posición en la cadena actual. </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is greater than or equal to the length of this object or less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Compara subcadenas de dos objetos <see cref="T:System.String" /> especificados y devuelve un entero que indica su posición relativa en el criterio de ordenación.</summary>
      <returns>Entero de 32 bits con signo que indica la relación léxica que existe entre los dos términos de una comparación.Value Condition Less than zero The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order. Zero The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero. Greater than zero The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">Primera cadena que se va a usar en la comparación. </param>
      <param name="indexA">Posición de la subcadena dentro de <paramref name="strA" />. </param>
      <param name="strB">Segunda cadena que se va a usar en la comparación. </param>
      <param name="indexB">Posición de la subcadena dentro de <paramref name="strB" />. </param>
      <param name="length">Número máximo de caracteres de las subcadenas que se van a comparar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. -or-Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Compara las subcadenas de dos objetos <see cref="T:System.String" /> especificados usando las reglas especificadas y devuelve un entero que indica su posición relativa en el criterio de ordenación. </summary>
      <returns>Entero de 32 bits con signo que indica la relación léxica que existe entre los dos términos de una comparación.Value Condition Less than zero The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.Zero The substrings occur in the same position in the sort order, or the <paramref name="length" /> parameter is zero. Greater than zero The substring in <paramref name="strA" /> follllows the substring in <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">Primera cadena que se va a usar en la comparación. </param>
      <param name="indexA">Posición de la subcadena dentro de <paramref name="strA" />. </param>
      <param name="strB">Segunda cadena que se va a usar en la comparación.</param>
      <param name="indexB">Posición de la subcadena dentro de <paramref name="strB" />. </param>
      <param name="length">Número máximo de caracteres de las subcadenas que se van a comparar. </param>
      <param name="comparisonType">Uno de los valores de enumeración que especifica las reglas que se van a usar en la comparación. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. -or-Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>Compara dos objetos <see cref="T:System.String" /> especificados y devuelve un entero que indica su posición relativa en el criterio de ordenación.</summary>
      <returns>Entero de 32 bits con signo que indica la relación léxica que existe entre los dos términos de una comparación.Value Condition Less than zero <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order. Zero <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order. Greater than zero <paramref name="strA" /> follows <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">Primera cadena que se va a comparar. </param>
      <param name="strB">Segunda cadena que se va a comparar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
      <summary>Compara dos objetos <see cref="T:System.String" /> especificados, pasando por alto o teniendo en cuenta el uso de mayúsculas y minúsculas, y devuelve un entero que indica su posición relativa en el criterio de ordenación.</summary>
      <returns>Entero de 32 bits con signo que indica la relación léxica que existe entre los dos términos de una comparación.Value Condition Less than zero <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order. Zero <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order. Greater than zero <paramref name="strA" /> follows <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">Primera cadena que se va a comparar. </param>
      <param name="strB">Segunda cadena que se va a comparar. </param>
      <param name="ignoreCase">true para no distinguir entre mayúsculas y minúsculas durante la comparación; de lo contrario, false.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>Compara dos objetos <see cref="T:System.String" /> especificados usando las reglas especificadas y devuelve un entero que indica su posición relativa en el criterio de ordenación.</summary>
      <returns>Entero de 32 bits con signo que indica la relación léxica que existe entre los dos términos de una comparación.Value Condition Less than zero <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order. Zero <paramref name="strA" /> is in the same position as <paramref name="strB" /> in the sort order. Greater than zero <paramref name="strA" /> follows <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">Primera cadena que se va a comparar.</param>
      <param name="strB">Segunda cadena que se va a comparar. </param>
      <param name="comparisonType">Uno de los valores de enumeración que especifica las reglas que se van a usar en la comparación. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.StringComparison" /> is not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Compara las subcadenas de dos objetos <see cref="T:System.String" /> especificados mediante la evaluación de los valores numéricos de los correspondientes objetos <see cref="T:System.Char" /> en cada subcadena. </summary>
      <returns>Entero de 32 bits con signo que indica la relación léxica que existe entre los dos términos de una comparación.ValueCondition Less than zero The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />. Zero The substrings are equal, or <paramref name="length" /> is zero. Greater than zero The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. </returns>
      <param name="strA">Primera cadena que se va a usar en la comparación. </param>
      <param name="indexA">Índice inicial de la subcadena de <paramref name="strA" />. </param>
      <param name="strB">Segunda cadena que se va a usar en la comparación. </param>
      <param name="indexB">Índice inicial de la subcadena de <paramref name="strB" />. </param>
      <param name="length">Número máximo de caracteres de las subcadenas que se van a comparar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="strA" /> is not null and <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="strB" /> is not null and<paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>Compara dos objetos <see cref="T:System.String" /> especificados mediante la evaluación de los valores numéricos de los objetos <see cref="T:System.Char" /> correspondientes de cada cadena.</summary>
      <returns>Entero que indica la relación léxica que existe entre los dos términos de una comparación.ValueCondition Less than zero <paramref name="strA" /> is less than <paramref name="strB" />. Zero <paramref name="strA" /> and <paramref name="strB" /> are equal. Greater than zero <paramref name="strA" /> is greater than <paramref name="strB" />. </returns>
      <param name="strA">Primera cadena que se va a comparar. </param>
      <param name="strB">Segunda cadena que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>Compara esta instancia con un objeto <see cref="T:System.String" /> especificado e indica si la posición de esta instancia es anterior, posterior o igual que la posición de la cadena especificada en el criterio de ordenación. </summary>
      <returns>Entero con signo de 32 bits que indica si la posición de esta instancia es anterior, posterior o igual que la posición del parámetro <paramref name="strB" /> en el criterio de ordenación.Value Condition Less than zero This instance precedes <paramref name="strB" />. Zero This instance has the same position in the sort order as <paramref name="strB" />. Greater than zero This instance follows <paramref name="strB" />.-or- <paramref name="strB" /> is null. </returns>
      <param name="strB">Cadena que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Concatena los miembros de una colección <see cref="T:System.Collections.Generic.IEnumerable`1" /> construida de tipo <see cref="T:System.String" />.</summary>
      <returns>Cadenas concatenadas de <paramref name="values" />.</returns>
      <param name="values">Objeto de colección que implementa la interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> y cuyo argumento de tipo genérico es <see cref="T:System.String" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatena los miembros de una implementación de <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Miembros concatenados de <paramref name="values" />.</returns>
      <param name="values">Objeto de colección que implementa la interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="T">Tipo de los miembros de <paramref name="values" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>Crea la representación de cadena de un objeto especificado.</summary>
      <returns>Representación de cadena del valor de <paramref name="arg0" />, o el campo si <see cref="F:System.String.Empty" /> si <paramref name="arg0" /> es null.</returns>
      <param name="arg0">Objeto que se va a representar, o null. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>Concatena las representaciones de cadena de dos objetos especificados.</summary>
      <returns>Representaciones de cadena concatenadas de los valores de los parámetros <paramref name="arg0" /> y <paramref name="arg1" />.</returns>
      <param name="arg0">Primer objeto que se va a concatenar. </param>
      <param name="arg1">Segundo objeto que se va a concatenar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>Concatena las representaciones de cadena de tres objetos especificados.</summary>
      <returns>Representaciones de cadena concatenadas de los valores de los parámetros <paramref name="arg0" />, <paramref name="arg1" /> y <paramref name="arg2" />.</returns>
      <param name="arg0">Primer objeto que se va a concatenar. </param>
      <param name="arg1">Segundo objeto que se va a concatenar. </param>
      <param name="arg2">Tercer objeto que se va a concatenar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>Concatena las representaciones de cadena de los elementos de una matriz <see cref="T:System.Object" /> especificada.</summary>
      <returns>Representaciones de cadena concatenadas de los valores de los elementos de <paramref name="args" />.</returns>
      <param name="args">Matriz de objetos que contiene los elementos que se van a concatenar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> is null. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>Concatena dos instancias de <see cref="T:System.String" /> especificadas.</summary>
      <returns>Concatenación de <paramref name="str0" /> y <paramref name="str1" />.</returns>
      <param name="str0">Primera cadena que se va a concatenar. </param>
      <param name="str1">Segunda cadena que se va a concatenar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>Concatena tres instancias de <see cref="T:System.String" /> especificadas.</summary>
      <returns>Concatenación de <paramref name="str0" /> y <paramref name="str1" />.<paramref name="str2" />.</returns>
      <param name="str0">Primera cadena que se va a concatenar. </param>
      <param name="str1">Segunda cadena que se va a concatenar. </param>
      <param name="str2">Tercera cadena que se va a concatenar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>Concatena cuatro instancias de <see cref="T:System.String" /> especificadas.</summary>
      <returns>Concatenación de <paramref name="str0" /> y <paramref name="str1" />.<paramref name="str2" />.<paramref name="str3" />.</returns>
      <param name="str0">Primera cadena que se va a concatenar. </param>
      <param name="str1">Segunda cadena que se va a concatenar. </param>
      <param name="str2">Tercera cadena que se va a concatenar. </param>
      <param name="str3">Cuarta cadena que se va a concatenar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>Concatena los elementos en una matriz <see cref="T:System.String" /> especificada.</summary>
      <returns>Elementos concatenados de <paramref name="values" />.</returns>
      <param name="values">Matriz de instancias de cadena. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>Devuelve un valor que indica si una subcadena especificada aparece dentro de esta cadena.</summary>
      <returns>Es true si el parámetro <paramref name="value" /> aparece en esta cadena o si <paramref name="value" /> es la cadena vacía (""); en caso contrario, es false.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Copia un número especificado de caracteres situados en una posición especificada de la instancia en una posición determinada de una matriz de caracteres Unicode.</summary>
      <param name="sourceIndex">Índice del primer carácter de esta instancia que se va a copiar. </param>
      <param name="destination">Matriz de caracteres Unicode a los que se copian los caracteres de esta instancia. </param>
      <param name="destinationIndex">Índice de <paramref name="destination" /> en el que comienza la operación de copia. </param>
      <param name="count">Número de caracteres de la instancia en cuestión que se van a copiar en <paramref name="destination" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative -or- <paramref name="sourceIndex" /> does not identify a position in the current instance. -or-<paramref name="destinationIndex" /> does not identify a valid index in the <paramref name="destination" /> array. -or-<paramref name="count" /> is greater than the length of the substring from <paramref name="startIndex" /> to the end of this instance -or- <paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of the <paramref name="destination" /> array. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.String.Empty">
      <summary>Representa la cadena vacía.Este campo es de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>Determina si el final de esta instancia de cadena coincide con la cadena especificada.</summary>
      <returns>Es true si <paramref name="value" /> coincide con el final de esta instancia; en caso contrario, es false.</returns>
      <param name="value">Cadena que se va a comparar con la subcadena situada al final de esta instancia. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>Determina si el final de esta instancia de cadena coincide con la cadena especificada cuando se comparan usando la opción de comparación especificada.</summary>
      <returns>Es true si el parámetro <paramref name="value" /> coincide con el final de esta cadena; en caso contrario, es false.</returns>
      <param name="value">Cadena que se va a comparar con la subcadena situada al final de esta instancia. </param>
      <param name="comparisonType">Uno de los valores de enumeración que determina cómo se comparan esta cadena y <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>Determina si esta instancia y un objeto especificado, que también debe ser un objeto <see cref="T:System.String" />, tienen el mismo valor.</summary>
      <returns>Es true si <paramref name="obj" /> es un objeto <see cref="T:System.String" /> y tiene el mismo valor que esta instancia; en caso contrario, es false.Si el valor de <paramref name="obj" /> es null, el método devuelve false.</returns>
      <param name="obj">Cadena que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>Determina si esta instancia y otro objeto <see cref="T:System.String" /> especificado tienen el mismo valor.</summary>
      <returns>Es true si el valor del parámetro <paramref name="value" /> es el mismo que el de esta instancia; en caso contrario, es false.Si el valor de <paramref name="value" /> es null, el método devuelve false.</returns>
      <param name="value">Cadena que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>Determina si dos objetos <see cref="T:System.String" /> especificados tienen el mismo valor.</summary>
      <returns>true si el valor de <paramref name="a" /> es el mismo que el valor de <paramref name="b" />; en caso contrario, false.Si tanto <paramref name="a" /> como <paramref name="b" /> son null, el método devuelve true.</returns>
      <param name="a">Primera cadena que se va a comparar, o null. </param>
      <param name="b">Segunda cadena que se va a comparar, o null. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>Determina si dos objetos <see cref="T:System.String" /> especificados tienen el mismo valor.Un parámetro especifica la referencia cultural, el uso de mayúsculas y minúsculas, así como las reglas de ordenación usadas en la comparación.</summary>
      <returns>Es true si el valor del parámetro <paramref name="a" /> es igual que el valor del parámetro <paramref name="b" />; en caso contrario, es false.</returns>
      <param name="a">Primera cadena que se va a comparar, o null. </param>
      <param name="b">Segunda cadena que se va a comparar, o null. </param>
      <param name="comparisonType">Uno de los valores de enumeración que especifica las reglas de la comparación. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>Determina si esta cadena y un objeto <see cref="T:System.String" /> especificado tienen el mismo valor.Un parámetro especifica la referencia cultural, el uso de mayúsculas y minúsculas, así como las reglas de ordenación usadas en la comparación.</summary>
      <returns>Es true si el valor del parámetro <paramref name="value" /> es el mismo que el de esta cadena; en caso contrario, es false.</returns>
      <param name="value">Cadena que se va a comparar con esta instancia.</param>
      <param name="comparisonType">Uno de los valores de enumeración que especifica cómo se compararán las cadenas. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
      <summary>Sustituye el elemento o elementos de formato en una cadena específica con la representación de cadena del objeto correspondiente.Un parámetro proporciona información de formato específica de la referencia cultural.</summary>
      <returns>Una copia de <paramref name="format" /> en la que el elemento o elementos de formato se han sustituido con la representación de cadena de <paramref name="arg0" />. </returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <param name="format">Una cadena de formato compuesto. </param>
      <param name="arg0">Objeto al que se va a aplicar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="arg0" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to one. </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>Reemplaza los elementos de formato en una cadena especificada por la representación de cadena de dos objetos especificados.Un parámetro proporciona información de formato específica de la referencia cultural.</summary>
      <returns>Copia de <paramref name="format" /> en la que los elementos de formato se ha reemplazado por las representaciones de cadena de <paramref name="arg0" /> y <paramref name="arg1" />. </returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <param name="format">Una cadena de formato compuesto. </param>
      <param name="arg0">Primer objeto al que se va a dar formato. </param>
      <param name="arg1">Segundo objeto al que se va a dar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />, <paramref name="arg0" />, or <paramref name="arg1" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to two. </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>Reemplaza los elementos de formato de una cadena especificada por la representación de cadena de tres objetos especificados.Un parámetro proporciona información de formato específica de la referencia cultural.</summary>
      <returns>Una copia de <paramref name="format" /> en la que los elementos de formato se han sustituido por las representaciones de cadena de <paramref name="arg0" />, <paramref name="arg1" /> y <paramref name="arg2" />. </returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <param name="format">Una cadena de formato compuesto. </param>
      <param name="arg0">Primer objeto al que se va a dar formato. </param>
      <param name="arg1">Segundo objeto al que se va a dar formato. </param>
      <param name="arg2">Tercer objeto al que se va a dar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />, <paramref name="arg0" />, <paramref name="arg1" />, or <paramref name="arg2" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to three. </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>Reemplaza los elementos de formato de una cadena especificada por representaciones de cadena de los objetos correspondientes en una matriz especificada.Un parámetro proporciona información de formato específica de la referencia cultural.</summary>
      <returns>Copia de <paramref name="format" /> en la que los elementos de formato se han reemplazado por la representación de cadena de los objetos correspondientes de <paramref name="args" />.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <param name="format">Una cadena de formato compuesto. </param>
      <param name="args">Matriz de objetos que contiene cero o más objetos a los que se va a aplicar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>Reemplaza uno o varios elementos de formato de una cadena especificada con la representación de cadena de un objeto especificado.</summary>
      <returns>Copia de <paramref name="format" /> en la que los elementos de formato se ha reemplazado por la representación de cadena de <paramref name="arg0" />.</returns>
      <param name="format">Una cadena de formato compuesto. </param>
      <param name="arg0">Objeto al que se va a aplicar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">The format item in <paramref name="format" /> is invalid.-or- The index of a format item is not zero. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>Reemplaza los elementos de formato en una cadena especificada por la representación de cadena de dos objetos especificados.</summary>
      <returns>Copia de <paramref name="format" /> en la que los elementos de formato se ha reemplazado por las representaciones de cadena de <paramref name="arg0" /> y <paramref name="arg1" />.</returns>
      <param name="format">Una cadena de formato compuesto. </param>
      <param name="arg0">Primer objeto al que se va a dar formato. </param>
      <param name="arg1">Segundo objeto al que se va a dar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is not zero or one. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>Reemplaza los elementos de formato de una cadena especificada por la representación de cadena de tres objetos especificados.</summary>
      <returns>Una copia de <paramref name="format" /> en la que los elementos de formato se han sustituido por las representaciones de cadena de <paramref name="arg0" />, <paramref name="arg1" /> y <paramref name="arg2" />.</returns>
      <param name="format">Una cadena de formato compuesto.</param>
      <param name="arg0">Primer objeto al que se va a dar formato. </param>
      <param name="arg1">Segundo objeto al que se va a dar formato. </param>
      <param name="arg2">Tercer objeto al que se va a dar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than two. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>Reemplaza el elemento de formato de una cadena especificada por la representación de cadena de un objeto correspondiente de una matriz especificada.</summary>
      <returns>Copia de <paramref name="format" /> en la que los elementos de formato se han reemplazado por la representación de cadena de los objetos correspondientes de <paramref name="args" />.</returns>
      <param name="format">Una cadena de formato compuesto.</param>
      <param name="args">Matriz de objetos que contiene cero o más objetos a los que se va a aplicar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>Devuelve el código hash para esta cadena.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>Devuelve el índice de base cero de la primera aparición del carácter Unicode especificado en esta cadena.</summary>
      <returns>Devuelve la posición de índice de base cero de <paramref name="value" /> si se encuentra dicho carácter; de lo contrario, devuelve -1.</returns>
      <param name="value">Carácter Unicode que se va a buscar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>Devuelve el índice de base cero de la primera aparición del carácter Unicode especificado en esta cadena.La búsqueda comienza en una posición de carácter especificada.</summary>
      <returns>Devuelve la posición de índice de base cero de <paramref name="value" /> si se encuentra dicho carácter; de lo contrario, devuelve -1.</returns>
      <param name="value">Carácter Unicode que se va a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of the string. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>Devuelve el índice de base en cero de la primera aparición del carácter especificado en la instancia en cuestión.La búsqueda comienza en una posición de carácter especificada y examina un número especificado de posiciones de caracteres.</summary>
      <returns>Devuelve la posición de índice de base cero de <paramref name="value" /> si se encuentra dicho carácter; de lo contrario, devuelve -1.</returns>
      <param name="value">Carácter Unicode que se va a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda. </param>
      <param name="count">Número de posiciones de caracteres que se van a examinar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this string.-or-<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>Indica el índice de base cero de la primera aparición de la cadena especificada en la instancia en cuestión.</summary>
      <returns>Devuelve la posición de índice de base cero de <paramref name="value" /> si se encuentra dicha cadena; de lo contrario, devuelve -1.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es 0.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>Indica el índice de base cero de la primera aparición de la cadena especificada en la instancia en cuestión.La búsqueda comienza en una posición de carácter especificada.</summary>
      <returns>Devuelve la posición de índice de base cero de <paramref name="value" /> si se encuentra dicha cadena; de lo contrario, devuelve -1.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es <paramref name="startIndex" />.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>Indica el índice de base cero de la primera aparición de la cadena especificada en la instancia en cuestión.La búsqueda comienza en una posición de carácter especificada y examina un número especificado de posiciones de caracteres.</summary>
      <returns>Devuelve la posición de índice de base cero de <paramref name="value" /> si se encuentra dicha cadena; de lo contrario, devuelve -1.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es <paramref name="startIndex" />.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda. </param>
      <param name="count">Número de posiciones de caracteres que se van a examinar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this string.-or-<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Devuelve el índice de base cero de la primera aparición de la cadena especificada en el objeto <see cref="T:System.String" /> actual.Los parámetros indican la posición inicial de búsqueda en la cadena actual, el número de caracteres de la cadena actual en los que buscar y el tipo de búsqueda que se va a usar para la cadena especificada.</summary>
      <returns>Devuelve la posición de índice de base cero del parámetro <paramref name="value" /> si se encuentra dicha cadena; de lo contrario, devuelve -1.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es <paramref name="startIndex" />.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda. </param>
      <param name="count">Número de posiciones de caracteres que se van a examinar. </param>
      <param name="comparisonType">Uno de los valores de enumeración que especifica las reglas de la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this instance.-or-<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>Devuelve el índice de base cero de la primera aparición de la cadena especificada en el objeto <see cref="T:System.String" /> actual.Los parámetros indican la posición inicial de búsqueda en la cadena actual y el tipo de búsqueda que se usa para la cadena especificada.</summary>
      <returns>Devuelve la posición de índice de base cero del parámetro <paramref name="value" /> si se encuentra dicha cadena; de lo contrario, devuelve -1.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es <paramref name="startIndex" />.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda. </param>
      <param name="comparisonType">Uno de los valores de enumeración que especifica las reglas de la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>Devuelve el índice de base cero de la primera aparición de la cadena especificada en el objeto <see cref="T:System.String" /> actual.Un parámetro especifica el tipo de búsqueda que se va a usar para la cadena especificada.</summary>
      <returns>Posición de índice del parámetro <paramref name="value" /> si se encuentra la cadena; de lo contrario, -1.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es 0.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <param name="comparisonType">Uno de los valores de enumeración que especifica las reglas de la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>Devuelve el índice de base cero de la primera aparición en la instancia de un carácter de una matriz de caracteres Unicode especificada.</summary>
      <returns>Posición de índice de base cero de la primera aparición en la instancia en cuestión donde se encontró cualquier carácter de <paramref name="anyOf" />; -1 si no se encontró ningún carácter de <paramref name="anyOf" />.</returns>
      <param name="anyOf">Matriz de caracteres Unicode que contiene uno o más caracteres que se van a buscar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>Devuelve el índice de base cero de la primera aparición en la instancia de un carácter de una matriz de caracteres Unicode especificada.La búsqueda comienza en una posición de carácter especificada.</summary>
      <returns>Posición de índice de base cero de la primera aparición en la instancia en cuestión donde se encontró cualquier carácter de <paramref name="anyOf" />; -1 si no se encontró ningún carácter de <paramref name="anyOf" />.</returns>
      <param name="anyOf">Matriz de caracteres Unicode que contiene uno o más caracteres que se van a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the number of characters in this instance. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Devuelve el índice de base cero de la primera aparición en la instancia de un carácter de una matriz de caracteres Unicode especificada.La búsqueda comienza en una posición de carácter especificada y examina un número especificado de posiciones de caracteres.</summary>
      <returns>Posición de índice de base cero de la primera aparición en la instancia en cuestión donde se encontró cualquier carácter de <paramref name="anyOf" />; -1 si no se encontró ningún carácter de <paramref name="anyOf" />.</returns>
      <param name="anyOf">Matriz de caracteres Unicode que contiene uno o más caracteres que se van a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda. </param>
      <param name="count">Número de posiciones de caracteres que se van a examinar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>Devuelve una nueva cadena en la que se inserta una cadena especificada en una posición de índice concreta en esta instancia. </summary>
      <returns>Nueva cadena que es equivalente a la instancia en cuestión, pero con <paramref name="value" /> insertado en la posición <paramref name="startIndex" />.</returns>
      <param name="startIndex">Índice de posición de base cero de la inserción. </param>
      <param name="value">Cadena que se va a insertar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative or greater than the length of this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>Indica si el valor de la cadena especificada es null o una cadena de <see cref="F:System.String.Empty" />.</summary>
      <returns>true si el parámetro <paramref name="value" /> es null o una cadena vacía (""); en caso contrario, false.</returns>
      <param name="value">Cadena que se va a comprobar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
      <summary>Indica si la cadena especificada es null, está vacía o consta únicamente de caracteres de espacio en blanco.</summary>
      <returns>Es true si el parámetro <paramref name="value" /> es null o <see cref="F:System.String.Empty" />, o bien si <paramref name="value" /> consta únicamente de caracteres de espacio en blanco. </returns>
      <param name="value">Cadena que se va a comprobar.</param>
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Concatena los miembros de una colección <see cref="T:System.Collections.Generic.IEnumerable`1" /> construida de tipo <see cref="T:System.String" />, usando el separador especificado entre todos los miembros.</summary>
      <returns>Cadena que consta de los miembros de <paramref name="values" /> delimitados por la cadena de <paramref name="separator" />.Si <paramref name="values" /> no tiene ningún miembro, el método devuelve <see cref="F:System.String.Empty" />.</returns>
      <param name="separator">Cadena que se va a usar como separador.<paramref name="separator" /> se incluye en la cadena devuelta solo si <paramref name="values" /> tiene más de un elemento.</param>
      <param name="values">Colección que contiene las cadenas que se van a concatenar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatena los miembros de una colección, usando el separador especificado entre todos los miembros.</summary>
      <returns>Cadena que consta de los miembros de <paramref name="values" /> delimitados por la cadena de <paramref name="separator" />.Si <paramref name="values" /> no tiene ningún miembro, el método devuelve <see cref="F:System.String.Empty" />.</returns>
      <param name="separator">Cadena que se va a usar como separador.<paramref name="separator" /> se incluye en la cadena devuelta solo si <paramref name="values" /> tiene más de un elemento.</param>
      <param name="values">Colección que contiene los objetos que se van a concatenar.</param>
      <typeparam name="T">Tipo de los miembros de <paramref name="values" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
      <summary>Concatena los elementos de una matriz de objetos, usando el separador especificado entre todos los elementos.</summary>
      <returns>Cadena que consta de los elementos de <paramref name="values" /> delimitados por la cadena de <paramref name="separator" />.Si <paramref name="values" /> es una matriz vacía, el método devuelve <see cref="F:System.String.Empty" />.</returns>
      <param name="separator">Cadena que se va a usar como separador.<paramref name="separator" /> se incluye en la cadena devuelta solo si <paramref name="values" /> tiene más de un elemento.</param>
      <param name="values">Matriz que contiene los elementos que se van a concatenar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>Concatena todos los elementos de una matriz de cadenas, usando el separador especificado entre todos los elementos. </summary>
      <returns>Cadena que consta de los elementos de <paramref name="value" /> delimitados por la cadena de <paramref name="separator" />.Si <paramref name="value" /> es una matriz vacía, el método devuelve <see cref="F:System.String.Empty" />.</returns>
      <param name="separator">Cadena que se va a usar como separador.<paramref name="separator" /> se incluye en la cadena devuelta solo si <paramref name="value" /> tiene más de un elemento.</param>
      <param name="value">Matriz que contiene los elementos que se van a concatenar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>Concatena los elementos especificados de una matriz de cadenas, usando el separador indicado entre todos los elementos. </summary>
      <returns>Cadena que consta de las cadenas de <paramref name="value" /> delimitadas por la cadena de <paramref name="separator" />. o bien<see cref="F:System.String.Empty" /> si el valor de <paramref name="count" /> es cero, <paramref name="value" /> no tiene elementos, o <paramref name="separator" /> y todos los elementos de <paramref name="value" /> tienen el valor <see cref="F:System.String.Empty" />.</returns>
      <param name="separator">Cadena que se va a usar como separador.<paramref name="separator" /> se incluye en la cadena devuelta solo si <paramref name="value" /> tiene más de un elemento.</param>
      <param name="value">Matriz que contiene los elementos que se van a concatenar. </param>
      <param name="startIndex">Primer elemento de <paramref name="value" /> que se va a usar. </param>
      <param name="count">Número de elementos de <paramref name="value" /> que se van a usar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than 0.-or- <paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>Devuelve la posición de índice de base cero de la última aparición de un carácter Unicode especificado en la instancia.</summary>
      <returns>Devuelve la posición de índice de base cero de <paramref name="value" /> si se encuentra dicho carácter; de lo contrario, devuelve -1.</returns>
      <param name="value">Carácter Unicode que se va a buscar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>Devuelve la posición de índice de base cero de la última aparición de un carácter Unicode especificado en la instancia.La búsqueda se inicia en una posición de carácter especificada y continúa hacia atrás hacia el principio de la cadena.</summary>
      <returns>Posición del índice de base cero de <paramref name="value" />, si se encuentra ese carácter, o -1 si no se encuentra o si la instancia actual es igual que <see cref="F:System.String.Empty" />.</returns>
      <param name="value">Carácter Unicode que se va a buscar. </param>
      <param name="startIndex">Posición inicial de la búsqueda.La búsqueda continúa desde <paramref name="startIndex" /> hacia el principio de esta instancia.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>Devuelve la posición de índice de base cero de la última aparición del carácter Unicode especificado en una subcadena de la instancia.La búsqueda se inicia en una posición de caracteres especificada y continúa hacia atrás hacia el principio de la cadena durante un número especificado de posiciones de caracteres.</summary>
      <returns>Posición del índice de base cero de <paramref name="value" />, si se encuentra ese carácter, o -1 si no se encuentra o si la instancia actual es igual que <see cref="F:System.String.Empty" />.</returns>
      <param name="value">Carácter Unicode que se va a buscar. </param>
      <param name="startIndex">Posición inicial de la búsqueda.La búsqueda continúa desde <paramref name="startIndex" /> hacia el principio de esta instancia.</param>
      <param name="count">Número de posiciones de caracteres que se van a examinar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" />
                 - <paramref name="count" /> + 1 is less than zero.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>Indica la posición de índice de base cero de la última aparición de una cadena especificada en la instancia en cuestión.</summary>
      <returns>Devuelve la posición de índice inicial de base cero de <paramref name="value" /> si se encuentra dicha cadena; de lo contrario, devuelve -1.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es la última posición de índice en esta instancia.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>Indica la posición de índice de base cero de la última aparición de una cadena especificada en la instancia en cuestión.La búsqueda se inicia en una posición de carácter especificada y continúa hacia atrás hacia el principio de la cadena.</summary>
      <returns>Posición del índice de inicio de base cero de <paramref name="value" />, si se encuentra esa cadena, o -1 si no se encuentra o si la instancia actual es igual que <see cref="F:System.String.Empty" />.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es el menor de <paramref name="startIndex" /> y la última posición de índice de esta instancia.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda.La búsqueda continúa desde <paramref name="startIndex" /> hacia el principio de esta instancia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance. -or-The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>Indica la posición de índice de base cero de la última aparición de una cadena especificada en la instancia en cuestión.La búsqueda se inicia en una posición de caracteres especificada y continúa hacia atrás hacia el principio de la cadena durante un número especificado de posiciones de caracteres.</summary>
      <returns>Posición del índice de inicio de base cero de <paramref name="value" />, si se encuentra esa cadena, o -1 si no se encuentra o si la instancia actual es igual que <see cref="F:System.String.Empty" />.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es el menor de <paramref name="startIndex" /> y la última posición de índice de esta instancia.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda.La búsqueda continúa desde <paramref name="startIndex" /> hacia el principio de esta instancia.</param>
      <param name="count">Número de posiciones de caracteres que se van a examinar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and  <paramref name="startIndex" /> is negative.-or- The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" />
                 - <paramref name="count" /> + 1 specifies a position that is not within this instance. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Indica la posición de índice de base cero de la última aparición de una cadena especificada en la instancia en cuestión.La búsqueda se inicia en una posición de caracteres especificada y continúa hacia atrás hacia el principio de la cadena durante el número especificado de posiciones de caracteres.Un parámetro especifica el tipo de comparación que se debe realizar cuando se busca la cadena especificada.</summary>
      <returns>Posición del índice de inicio de base cero del parámetro <paramref name="value" />, si se encuentra esa cadena, o -1 si no se encuentra o si la instancia actual es igual que <see cref="F:System.String.Empty" />.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es el menor de <paramref name="startIndex" /> y la última posición de índice de esta instancia.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda.La búsqueda continúa desde <paramref name="startIndex" /> hacia el principio de esta instancia.</param>
      <param name="count">Número de posiciones de caracteres que se van a examinar. </param>
      <param name="comparisonType">Uno de los valores de enumeración que especifica las reglas de la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.-or- The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> specifies a position that is not within this instance. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>Devuelve el índice de base cero de la última aparición de una cadena especificada dentro del objeto <see cref="T:System.String" /> actual.La búsqueda se inicia en una posición de carácter especificada y continúa hacia atrás hacia el principio de la cadena.Un parámetro especifica el tipo de comparación que se debe realizar cuando se busca la cadena especificada.</summary>
      <returns>Posición del índice de inicio de base cero del parámetro <paramref name="value" />, si se encuentra esa cadena, o -1 si no se encuentra o si la instancia actual es igual que <see cref="F:System.String.Empty" />.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es el menor de <paramref name="startIndex" /> y la última posición de índice de esta instancia.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda.La búsqueda continúa desde <paramref name="startIndex" /> hacia el principio de esta instancia.</param>
      <param name="comparisonType">Uno de los valores de enumeración que especifica las reglas de la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance. -or-The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>Devuelve el índice de base cero de la última aparición de una cadena especificada dentro del objeto <see cref="T:System.String" /> actual.Un parámetro especifica el tipo de búsqueda que se va a usar para la cadena especificada.</summary>
      <returns>Devuelve la posición de índice inicial de base cero del parámetro <paramref name="value" /> si se encuentra dicha cadena; de lo contrario, devuelve -1.Si <paramref name="value" /> es <see cref="F:System.String.Empty" />, el valor devuelto es la última posición de índice en esta instancia.</returns>
      <param name="value">Cadena que se va a buscar. </param>
      <param name="comparisonType">Uno de los valores de enumeración que especifica las reglas de la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>Devuelve la posición de índice de base cero de la última aparición en la instancia de uno o varios caracteres especificados de una matriz de caracteres Unicode.</summary>
      <returns>Posición de índice de la última aparición en la instancia en cuestión donde se encontró cualquier carácter de <paramref name="anyOf" />; -1 si no se encontró ningún carácter de <paramref name="anyOf" />.</returns>
      <param name="anyOf">Matriz de caracteres Unicode que contiene uno o más caracteres que se van a buscar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>Devuelve la posición de índice de base cero de la última aparición en la instancia de uno o varios caracteres especificados de una matriz de caracteres Unicode.La búsqueda se inicia en una posición de carácter especificada y continúa hacia atrás hacia el principio de la cadena.</summary>
      <returns>Posición de índice de la última aparición en esta instancia donde se encontraron caracteres en <paramref name="anyOf" />; -1 si no se encontraron caracteres en <paramref name="anyOf" /> o si la instancia actual es igual a <see cref="F:System.String.Empty" />.</returns>
      <param name="anyOf">Matriz de caracteres Unicode que contiene uno o más caracteres que se van a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda.La búsqueda continúa desde <paramref name="startIndex" /> hacia el principio de esta instancia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> specifies a position that is not within this instance. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Devuelve la posición de índice de base cero de la última aparición en la instancia de uno o varios caracteres especificados de una matriz de caracteres Unicode.La búsqueda se inicia en una posición de caracteres especificada y continúa hacia atrás hacia el principio de la cadena durante un número especificado de posiciones de caracteres.</summary>
      <returns>Posición de índice de la última aparición en esta instancia donde se encontraron caracteres en <paramref name="anyOf" />; -1 si no se encontraron caracteres en <paramref name="anyOf" /> o si la instancia actual es igual a <see cref="F:System.String.Empty" />.</returns>
      <param name="anyOf">Matriz de caracteres Unicode que contiene uno o más caracteres que se van a buscar. </param>
      <param name="startIndex">Posición en la que comienza la búsqueda.La búsqueda continúa desde <paramref name="startIndex" /> hacia el principio de esta instancia.</param>
      <param name="count">Número de posiciones de caracteres que se van a examinar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> minus <paramref name="count" /> + 1 is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.String.Length">
      <summary>Obtiene el número de caracteres del objeto <see cref="T:System.String" /> actual.</summary>
      <returns>Número de caracteres de la cadena actual.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>Determina si dos cadenas especificadas tienen el mismo valor.</summary>
      <returns>true si el valor de <paramref name="a" /> es el mismo que el valor de <paramref name="b" />; en caso contrario, false.</returns>
      <param name="a">Primera cadena que se va a comparar, o null. </param>
      <param name="b">Segunda cadena que se va a comparar, o null. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>Determina si dos cadenas especificadas tienen valores diferentes.</summary>
      <returns>true si el valor de <paramref name="a" /> es diferente que el valor de <paramref name="b" />; en caso contrario, false.</returns>
      <param name="a">Primera cadena que se va a comparar, o null. </param>
      <param name="b">Segunda cadena que se va a comparar, o null. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>Devuelve una nueva cadena que alinea a la derecha los caracteres de la instancia e inserta espacios en blanco a la izquierda hasta alcanzar la longitud total especificada.</summary>
      <returns>Nueva cadena que es equivalente a esta instancia, pero que se alinea a la derecha y en la que se insertan a la izquierda los espacios que sean necesarios para crear la longitud especificada por el parámetro <paramref name="totalWidth" />.Sin embargo, si <paramref name="totalWidth" /> es menor que la longitud de esta instancia, el método devuelve una referencia a la instancia existente.Si <paramref name="totalWidth" /> es igual que la longitud de esta instancia, el método devuelve una nueva cadena que es idéntica a esta instancia.</returns>
      <param name="totalWidth">Número de caracteres de la cadena resultante, igual al número de caracteres originales más el número de caracteres de relleno adicionales. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>Devuelve una nueva cadena que alinea a la derecha los caracteres de la instancia e inserta a la izquierda un carácter Unicode especificado hasta alcanzar la longitud total especificada.</summary>
      <returns>Nueva cadena que es equivalente a esta instancia, pero que se alinea a la derecha y en la que se insertan a la izquierda los caracteres de <paramref name="paddingChar" /> que sean necesarios para crear la longitud especificada por el parámetro <paramref name="totalWidth" />.Sin embargo, si <paramref name="totalWidth" /> es menor que la longitud de esta instancia, el método devuelve una referencia a la instancia existente.Si <paramref name="totalWidth" /> es igual que la longitud de esta instancia, el método devuelve una nueva cadena que es idéntica a esta instancia.</returns>
      <param name="totalWidth">Número de caracteres de la cadena resultante, igual al número de caracteres originales más el número de caracteres de relleno adicionales. </param>
      <param name="paddingChar">Carácter Unicode de relleno. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>Devuelve una nueva cadena que alinea a la izquierda los caracteres de la cadena e inserta espacios en blanco a la derecha hasta alcanzar la longitud total especificada.</summary>
      <returns>Nueva cadena que es equivalente a esta instancia, pero que se alinea a la izquierda y en la que se insertan a la derecha los espacios que sean necesarios para crear la longitud especificada por el parámetro <paramref name="totalWidth" />.Sin embargo, si <paramref name="totalWidth" /> es menor que la longitud de esta instancia, el método devuelve una referencia a la instancia existente.Si <paramref name="totalWidth" /> es igual que la longitud de esta instancia, el método devuelve una nueva cadena que es idéntica a esta instancia.</returns>
      <param name="totalWidth">Número de caracteres de la cadena resultante, igual al número de caracteres originales más el número de caracteres de relleno adicionales. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>Devuelve una nueva cadena que alinea a la izquierda los caracteres de la cadena e inserta a la derecha un carácter Unicode especificado hasta alcanzar la longitud total especificada.</summary>
      <returns>Nueva cadena que es equivalente a esta instancia, pero que se alinea a la izquierda y en la que se insertan a la derecha los caracteres de <paramref name="paddingChar" /> que sean necesarios para crear la longitud especificada por el parámetro <paramref name="totalWidth" />.Sin embargo, si <paramref name="totalWidth" /> es menor que la longitud de esta instancia, el método devuelve una referencia a la instancia existente.Si <paramref name="totalWidth" /> es igual que la longitud de esta instancia, el método devuelve una nueva cadena que es idéntica a esta instancia.</returns>
      <param name="totalWidth">Número de caracteres de la cadena resultante, igual al número de caracteres originales más el número de caracteres de relleno adicionales. </param>
      <param name="paddingChar">Carácter Unicode de relleno. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>Devuelve una nueva cadena en la que se han eliminado todos los caracteres de la instancia actual, a partir de una posición especificada y hasta la última posición.</summary>
      <returns>Una nueva cadena que es equivalente a esta cadena, excepto por los caracteres quitados.</returns>
      <param name="startIndex">Posición de base cero a partir de la cual comienza la eliminación de caracteres. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero.-or- <paramref name="startIndex" /> specifies a position that is not within this string. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>Devuelve una nueva cadena en la que se ha eliminado un número de caracteres especificado en la instancia actual a partir de una posición especificada.</summary>
      <returns>Una nueva cadena que es equivalente a esta instancia, excepto por los caracteres quitados.</returns>
      <param name="startIndex">Posición de base cero a partir de la cual comienza la eliminación de caracteres. </param>
      <param name="count">Número de caracteres que se va a eliminar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>Devuelve una nueva cadena en la que todas las apariciones de un carácter Unicode especificado de esta instancia se reemplazan por otro carácter Unicode especificado.</summary>
      <returns>Cadena que es equivalente a esta instancia salvo en que todas las instancias de <paramref name="oldChar" /> se reemplazan con <paramref name="newChar" />.Si <paramref name="oldChar" /> no se encuentra en la instancia actual, el método devuelve la instancia actual sin modificar.</returns>
      <param name="oldChar">Carácter Unicode que se va a reemplazar. </param>
      <param name="newChar">Carácter Unicode que va a reemplazar todas las apariciones de <paramref name="oldChar" />. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>Devuelve una nueva cadena en la que todas las apariciones de una cadena especificada en la instancia actual se reemplazan por otra cadena especificada.</summary>
      <returns>Cadena que es equivalente a la cadena actual salvo en que todas las instancias de <paramref name="oldValue" /> se reemplacen por <paramref name="newValue" />.Si <paramref name="oldValue" /> no se encuentra en la instancia actual, el método devuelve la instancia actual sin modificar.</returns>
      <param name="oldValue">Cadena que se va a reemplazar. </param>
      <param name="newValue">Cadena que va a reemplazar todas las apariciones de <paramref name="oldValue" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> is the empty string (""). </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>Devuelve una matriz de cadenas que contiene las subcadenas de esta instancia que están delimitadas por elementos de la matriz de caracteres Unicode especificada.</summary>
      <returns>Una matriz cuyos elementos contienen las subcadenas de esta instancia que están delimitadas por uno o varios caracteres de <paramref name="separator" />.Para obtener más información, vea la sección Comentarios.</returns>
      <param name="separator">Matriz de caracteres Unicode que delimitan las subcadenas de esta instancia, una matriz vacía sin delimitadores o null. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>Devuelve una matriz de cadenas que contiene las subcadenas de esta instancia que están delimitadas por elementos de la matriz de caracteres Unicode especificada.Un parámetro especifica el número máximo de subcadenas que se van a devolver.</summary>
      <returns>Una matriz cuyos elementos contienen las subcadenas de esta instancia que están delimitadas por uno o varios caracteres de <paramref name="separator" />.Para obtener más información, vea la sección Comentarios.</returns>
      <param name="separator">Matriz de caracteres Unicode que delimitan las subcadenas de esta instancia, una matriz vacía sin delimitadores o null. </param>
      <param name="count">Número máximo de subcadenas que se van devolver. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
      <summary>Devuelve una matriz de cadenas que contiene las subcadenas de esta cadena que están delimitadas por elementos de la matriz de caracteres Unicode especificada.Los parámetros especifican el número máximo de subcadenas que se van a devolver y si se van a devolver elementos de matriz vacíos.</summary>
      <returns>Una matriz cuyos elementos contienen las subcadenas de esta cadena que están delimitadas por uno o varios caracteres de <paramref name="separator" />.Para obtener más información, vea la sección Comentarios.</returns>
      <param name="separator">Matriz de caracteres Unicode que delimitan las subcadenas de esta cadena, una matriz vacía sin delimitadores o null. </param>
      <param name="count">Número máximo de subcadenas que se van devolver. </param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> para omitir los elementos de matriz vacíos de la matriz devuelta; o bien, <see cref="F:System.StringSplitOptions.None" /> para incluir los elementos de matriz vacíos en la matriz devuelta. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>Devuelve una matriz de cadenas que contiene las subcadenas de esta cadena que están delimitadas por elementos de la matriz de caracteres Unicode especificada.Un parámetro especifica si se van a devolver elementos de matriz vacíos.</summary>
      <returns>Una matriz cuyos elementos contienen las subcadenas de esta cadena que están delimitadas por uno o varios caracteres de <paramref name="separator" />.Para obtener más información, vea la sección Comentarios.</returns>
      <param name="separator">Matriz de caracteres Unicode que delimitan las subcadenas de esta cadena, una matriz vacía sin delimitadores o null. </param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> para omitir los elementos de matriz vacíos de la matriz devuelta; o bien, <see cref="F:System.StringSplitOptions.None" /> para incluir los elementos de matriz vacíos en la matriz devuelta. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
      <summary>Devuelve una matriz de cadenas que contiene las subcadenas de esta cadena que están delimitadas por elementos de la matriz de cadenas especificada.Los parámetros especifican el número máximo de subcadenas que se van a devolver y si se van a devolver elementos de matriz vacíos.</summary>
      <returns>Una matriz cuyos elementos contienen las subcadenas de esta cadena que están delimitadas por una o varias cadenas de <paramref name="separator" />.Para obtener más información, vea la sección Comentarios.</returns>
      <param name="separator">Matriz de cadenas que delimitan las subcadenas de esta cadena, una matriz vacía sin delimitadores o null. </param>
      <param name="count">Número máximo de subcadenas que se van devolver. </param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> para omitir los elementos de matriz vacíos de la matriz devuelta; o bien, <see cref="F:System.StringSplitOptions.None" /> para incluir los elementos de matriz vacíos en la matriz devuelta. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>Devuelve una matriz de cadenas que contiene las subcadenas de esta cadena que están delimitadas por elementos de la matriz de cadenas especificada.Un parámetro especifica si se van a devolver elementos de matriz vacíos.</summary>
      <returns>Una matriz cuyos elementos contienen las subcadenas de esta cadena que están delimitadas por una o varias cadenas de <paramref name="separator" />.Para obtener más información, vea la sección Comentarios.</returns>
      <param name="separator">Matriz de cadenas que delimitan las subcadenas de esta cadena, una matriz vacía sin delimitadores o null. </param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> para omitir los elementos de matriz vacíos de la matriz devuelta; o bien, <see cref="F:System.StringSplitOptions.None" /> para incluir los elementos de matriz vacíos en la matriz devuelta. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>Determina si el principio de esta instancia de cadena coincide con la cadena especificada.</summary>
      <returns>true si <paramref name="value" /> coincide con el principio de esta cadena; en caso contrario, false.</returns>
      <param name="value">Cadena que se va a comparar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>Determina si el principio de esta instancia de cadena coincide con la cadena especificada cuando se comparan usando la opción de comparación especificada.</summary>
      <returns>true si esta instancia comienza con <paramref name="value" />; de lo contrario, false.</returns>
      <param name="value">Cadena que se va a comparar. </param>
      <param name="comparisonType">Uno de los valores de enumeración que determina cómo se comparan esta cadena y <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>Recupera una subcadena de la instancia.La subcadena empieza en una posición de caracteres especificada y continúa hasta el final de la cadena.</summary>
      <returns>Cadena equivalente a la subcadena que comienza en el valor de <paramref name="startIndex" /> de esta instancia, o bien, <see cref="F:System.String.Empty" /> si el valor de <paramref name="startIndex" /> es igual a la longitud de esta instancia.</returns>
      <param name="startIndex">Posición de carácter inicial de base cero de una subcadena en la instancia. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>Recupera una subcadena de la instancia.La subcadena comienza en una posición de carácter especificada y tiene una longitud especificada.</summary>
      <returns>Cadena equivalente a la subcadena de longitud de <paramref name="length" /> que comienza en el valor de <paramref name="startIndex" /> de esta instancia, o bien, <see cref="F:System.String.Empty" /> si el valor de <paramref name="startIndex" /> es igual a la longitud de esta instancia y el valor de <paramref name="length" /> es cero.</returns>
      <param name="startIndex">Posición de carácter inicial de base cero de una subcadena en la instancia. </param>
      <param name="length">Número de caracteres de la subcadena. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.-or- <paramref name="startIndex" /> or <paramref name="length" /> is less than zero. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración el objeto <see cref="T:System.String" /> actual. </summary>
      <returns>Un <see cref="T:System.Collections.Generic.IEnumerator`1" /> de tipo <see cref="T:System.Char" /> que se puede usar para recorrer en iteración el objeto <see cref="T:System.String" /> actual.</returns>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración el objeto <see cref="T:System.String" /> actual. </summary>
      <returns>Enumerador que se puede usar para iterar por la cadena actual.</returns>
    </member>
    <member name="M:System.String.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.String" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true si el valor de la cadena actual es <see cref="F:System.Boolean.TrueString" />; false si el valor de la cadena actual es <see cref="F:System.Boolean.FalseString" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.FormatException">The value of the current string is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <returns>Carácter en el índice 0 del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToString(System.IFormatProvider)"></member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="type">Tipo del objeto devuelto. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <returns>Valor convertido del objeto <see cref="T:System.String" /> actual.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>Copia los caracteres de la instancia en una matriz de caracteres Unicode. </summary>
      <returns>Matriz de caracteres Unicode cuyos elementos son los caracteres individuales de la instancia.Si la instancia es una cadena vacía, la matriz devuelta es una matriz vacía y su longitud es nula.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>Copia los caracteres de una subcadena especificada de la instancia en una matriz de caracteres Unicode.</summary>
      <returns>Matriz de caracteres Unicode cuyos elementos son el número de caracteres de la instancia especificado en <paramref name="length" /> a partir de la posición de carácter <paramref name="startIndex" />.</returns>
      <param name="startIndex">Posición inicial de una subcadena en la instancia. </param>
      <param name="length">Longitud de la subcadena en la instancia. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="length" /> is greater than the length of this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToLower">
      <summary>Devuelve una copia de esta cadena convertida en minúsculas.</summary>
      <returns>Una cadena en minúsculas.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <summary>Devuelve una copia de este objeto <see cref="T:System.String" /> convertido en minúsculas, aplicando las reglas de mayúsculas y minúsculas de la referencia cultural de todos los idiomas.</summary>
      <returns>Equivalente en minúsculas de la cadena actual.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToString">
      <summary>Devuelve la instancia de <see cref="T:System.String" />; no se efectúa una conversión real.</summary>
      <returns>Cadena actual.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>Devuelve una copia de esta cadena convertida en mayúsculas.</summary>
      <returns>Equivalente en mayúsculas de la cadena actual.</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <summary>Devuelve una copia de este objeto <see cref="T:System.String" /> convertido en mayúsculas, aplicando las reglas de mayúsculas y minúsculas de la referencia cultural de todos los idiomas.</summary>
      <returns>Equivalente en mayúsculas de la cadena actual.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.Trim">
      <summary>Quita todos los caracteres de espacio en blanco del principio y el final del objeto <see cref="T:System.String" /> actual.</summary>
      <returns>Cadena que queda una vez quitados todos los caracteres de espacio en blanco del principio y el final de la cadena actual.Si no se puede quitar ningún carácter de la instancia actual, el método devuelve la instancia actual sin cambios.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>Quita todas las apariciones del principio y el final de un conjunto de caracteres especificados en una matriz del objeto <see cref="T:System.String" /> actual.</summary>
      <returns>Cadena que queda una vez quitadas todas las apariciones de los caracteres especificados por el parámetro <paramref name="trimChars" /> del principio y del final de la cadena actual.Si <paramref name="trimChars" /> es null o una matriz vacía, se quitarán los caracteres de espacio en blanco.Si no se puede quitar ningún carácter de la instancia actual, el método devuelve la instancia actual sin cambios.</returns>
      <param name="trimChars">Matriz de caracteres Unicode que se van a quitar, o null. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>Quita todas las apariciones del final de un conjunto de caracteres especificados en una matriz del objeto <see cref="T:System.String" /> actual.</summary>
      <returns>Cadena que queda una vez quitadas todas las apariciones de los caracteres especificados por el parámetro <paramref name="trimChars" /> del final de la cadena actual.Si <paramref name="trimChars" /> es null o una matriz vacía, se quitarán los caracteres de espacio en blanco de Unicode.Si no se puede quitar ningún carácter de la instancia actual, el método devuelve la instancia actual sin cambios.</returns>
      <param name="trimChars">Matriz de caracteres Unicode que se van a quitar, o null. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>Quita todas las apariciones del principio de un conjunto de caracteres especificados en una matriz del objeto <see cref="T:System.String" /> actual.</summary>
      <returns>Cadena que queda una vez quitadas todas las apariciones de los caracteres especificados por el parámetro <paramref name="trimChars" /> del principio de la cadena actual.Si <paramref name="trimChars" /> es null o una matriz vacía, se quitarán los caracteres de espacio en blanco.</returns>
      <param name="trimChars">Matriz de caracteres Unicode que se van a quitar, o null. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.StringComparison">
      <summary>Especifica la referencia cultural, la distinción o no entre mayúsculas y minúsculas, y las reglas de ordenación que se utilizarán en ciertas sobrecargas de los métodos <see cref="M:System.String.Compare(System.String,System.String)" /> y <see cref="M:System.String.Equals(System.Object)" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>Compara cadenas utilizando la referencia cultural actual y reglas de ordenación dependientes de la cultura.</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>Compara cadenas utilizando la referencia cultural actual y reglas de ordenación dependientes de la cultura, sin hacer distinción entre mayúsculas y minúsculas en las cadenas comparadas.</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>Compara cadenas utilizando las reglas de ordenación ordinal.</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>Compara cadenas utilizando reglas de ordenación ordinal y sin distinguir entre mayúsculas y minúsculas en las cadenas comparadas.</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>Especifica si las sobrecargas del método <see cref="Overload:System.String.Split" /> aplicables incluyen u omiten las subcadenas vacías del valor devuelto.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>El valor devuelto incluye los elementos de matriz que contienen una cadena vacía</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>El valor devuelto no incluye los elementos de matriz que contienen una cadena vacía</summary>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>Indica que el valor de un campo estático es único para cada subproceso.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ThreadStaticAttribute" />.</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>La excepción que se produce cuando ha expirado la hora asignada para un proceso u operación.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.TimeoutException" />.</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.TimeoutException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.TimeoutException" /> con el mensaje y la excepción interna especificadas.</summary>
      <param name="message">Mensaje que describe el error. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>Representa un intervalo de tiempo.Para examinar el código fuente de .NET Framework para este tipo, vea el origen de referencia.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.TimeSpan" /> con un número de horas, minutos y segundos especificado.</summary>
      <param name="hours">Número de horas. </param>
      <param name="minutes">Número de minutos. </param>
      <param name="seconds">Número de segundos. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.TimeSpan" /> con un número de días, horas, minutos y segundos especificado.</summary>
      <param name="days">Número de días. </param>
      <param name="hours">Número de horas. </param>
      <param name="minutes">Número de minutos. </param>
      <param name="seconds">Número de segundos. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.TimeSpan" /> con un número de días, horas, minutos, segundos y milisegundos especificado.</summary>
      <param name="days">Número de días. </param>
      <param name="hours">Número de horas. </param>
      <param name="minutes">Número de minutos. </param>
      <param name="seconds">Número de segundos. </param>
      <param name="milliseconds">Número de milisegundos. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.TimeSpan" /> en un número de pasos especificado.</summary>
      <param name="ticks">Período de tiempo expresado en unidades de 100 nanosegundos. </param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>Devuelve un nuevo objeto <see cref="T:System.TimeSpan" /> cuyo valor es la suma del objeto <see cref="T:System.TimeSpan" /> especificado y esta instancia.</summary>
      <returns>Objeto nuevo que representa el valor de la instancia en concreto, más el valor de <paramref name="ts" />.</returns>
      <param name="ts">Intervalo de tiempo que se va a agregar.</param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>Compara dos valores <see cref="T:System.TimeSpan" /> y devuelve un entero que indica si el primer valor es menor, igual o mayor que el segundo valor.</summary>
      <returns>Uno de los siguientes valores.Valor Descripción -1 <paramref name="t1" /> es más corto que <paramref name="t2" />. 0 <paramref name="t1" /> es igual a <paramref name="t2" />. 1 <paramref name="t1" /> es más largo que <paramref name="t2" />. </returns>
      <param name="t1">Primer intervalo de tiempo que se va a comparar. </param>
      <param name="t2">Segundo intervalo de tiempo que se va a comparar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>Compara esta instancia con un objeto <see cref="T:System.TimeSpan" /> especificado y devuelve un entero que indica si la instancia es más corta, igual o más larga que el objeto <see cref="T:System.TimeSpan" />.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Valor Descripción Un entero negativo Esta instancia es más corta que <paramref name="value" />. Cero Esta instancia es igual a <paramref name="value" />. Un entero positivo. Esta instancia es más larga que <paramref name="value" />. </returns>
      <param name="value">Un objeto que se va a comparar con esta instancia.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>Obtiene el componente de días del intervalo de tiempo representado por el objeto <see cref="T:System.TimeSpan" /> actual.</summary>
      <returns>Componente de días de esta instancia.El valor devuelto puede ser positivo o negativo.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>Devuelve un nuevo objeto <see cref="T:System.TimeSpan" /> cuyo valor es el valor absoluto del objeto <see cref="T:System.TimeSpan" /> actual.</summary>
      <returns>Nuevo objeto cuyo valor es el valor absoluto del objeto <see cref="T:System.TimeSpan" /> actual.</returns>
      <exception cref="T:System.OverflowException">The value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="value" /> es un objeto <see cref="T:System.TimeSpan" /> que representa el mismo intervalo de tiempo que la estructura <see cref="T:System.TimeSpan" /> actual; en caso contrario, es false.</returns>
      <param name="value">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto <see cref="T:System.TimeSpan" /> especificado.</summary>
      <returns>Es true si <paramref name="obj" /> representa el mismo intervalo de tiempo que esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>Devuelve un valor que indica si dos instancias de <see cref="T:System.TimeSpan" /> especificadas son iguales.</summary>
      <returns>Es true si los valores de <paramref name="t1" /> y <paramref name="t2" /> son iguales; de lo contrario, es false.</returns>
      <param name="t1">Primer intervalo de tiempo que se va a comparar. </param>
      <param name="t2">Segundo intervalo de tiempo que se va a comparar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>Devuelve un <see cref="T:System.TimeSpan" /> que representa un número de días especificado con una precisión aproximada al milisegundo más cercano.</summary>
      <returns>Objeto que representa <paramref name="value" />.</returns>
      <param name="value">Número de días con una precisión aproximada al milisegundo más cercano. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. -or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>Devuelve un <see cref="T:System.TimeSpan" /> que representa un número de horas especificado con una precisión aproximada al milisegundo más cercano.</summary>
      <returns>Objeto que representa <paramref name="value" />.</returns>
      <param name="value">Número de horas con una precisión aproximada al milisegundo más cercano. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. -or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>Devuelve un <see cref="T:System.TimeSpan" /> que representa un número de milisegundos especificado.</summary>
      <returns>Objeto que representa <paramref name="value" />.</returns>
      <param name="value">Número de milisegundos. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>Devuelve un <see cref="T:System.TimeSpan" /> que representa un número de minutos especificado con una precisión aproximada al milisegundo más cercano.</summary>
      <returns>Objeto que representa <paramref name="value" />.</returns>
      <param name="value">Número de minutos con una precisión aproximada al milisegundo más cercano. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>Devuelve un <see cref="T:System.TimeSpan" /> que representa un número de segundos especificado con una precisión aproximada al milisegundo más cercano.</summary>
      <returns>Objeto que representa <paramref name="value" />.</returns>
      <param name="value">Número de segundos con una precisión aproximada al milisegundo más cercano. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>Devuelve un <see cref="T:System.TimeSpan" /> que representa un tiempo especificado en unidades de paso.</summary>
      <returns>Objeto que representa <paramref name="value" />.</returns>
      <param name="value">Número de pasos que representan un intervalo de tiempo. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>Devuelve un código hash para esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>Obtiene el componente de horas del intervalo de tiempo representado por el objeto <see cref="T:System.TimeSpan" /> actual.</summary>
      <returns>Componente de horas de la estructura <see cref="T:System.TimeSpan" /> actual.El valor devuelto está comprendido entre -23 y 23.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>Representa el valor máximo de <see cref="T:System.TimeSpan" />.Este campo es de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>Obtiene el componente de milisegundos del intervalo de tiempo representado por el objeto <see cref="T:System.TimeSpan" /> actual.</summary>
      <returns>Componente de milisegundos de la estructura <see cref="T:System.TimeSpan" /> actual.El valor devuelto está comprendido entre -999 y 999.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>Obtiene el componente de minutos del intervalo de tiempo representado por el objeto <see cref="T:System.TimeSpan" /> actual.</summary>
      <returns>Componente de minutos de la estructura <see cref="T:System.TimeSpan" /> actual.El valor devuelto está comprendido entre -59 y 59.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>Representa el valor mínimo de <see cref="T:System.TimeSpan" />.Este campo es de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>Devuelve un objeto <see cref="T:System.TimeSpan" /> nuevo cuyo valor es el valor negado de esta instancia.</summary>
      <returns>Nuevo objeto con los mismos valores numéricos que esta instancia, pero de signo contrario.</returns>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>Agrega dos instancias de <see cref="T:System.TimeSpan" /> especificadas.</summary>
      <returns>Objeto cuyo valor es la suma de los valores de <paramref name="t1" /> y <paramref name="t2" />.</returns>
      <param name="t1">Primer intervalo de tiempo que se va a agregar. </param>
      <param name="t2">Segundo intervalo de tiempo que se va a agregar.</param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>Indica si dos instancias <see cref="T:System.TimeSpan" /> son iguales.</summary>
      <returns>Es true si los valores de <paramref name="t1" /> y <paramref name="t2" /> son iguales; de lo contrario, es false.</returns>
      <param name="t1">Primer intervalo de tiempo que se va a comparar. </param>
      <param name="t2">Segundo intervalo de tiempo que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>Indica si un <see cref="T:System.TimeSpan" /> especificado es mayor que otro <see cref="T:System.TimeSpan" /> especificado.</summary>
      <returns>true si el valor de <paramref name="t1" /> es mayor que el valor de <paramref name="t2" />; en caso contrario, false.</returns>
      <param name="t1">Primer intervalo de tiempo que se va a comparar. </param>
      <param name="t2">Segundo intervalo de tiempo que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>Indica si un <see cref="T:System.TimeSpan" /> especificado es mayor o igual que otro <see cref="T:System.TimeSpan" /> especificado.</summary>
      <returns>true si el valor de <paramref name="t1" /> es mayor o igual que el valor de <paramref name="t2" />; en caso contrario, false.</returns>
      <param name="t1">Primer intervalo de tiempo que se va a comparar.</param>
      <param name="t2">Segundo intervalo de tiempo que se va a comparar.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>Indica si dos instancias <see cref="T:System.TimeSpan" /> no son iguales.</summary>
      <returns>true si los valores de <paramref name="t1" /> y <paramref name="t2" /> no son iguales; en caso contrario, false.</returns>
      <param name="t1">Primer intervalo de tiempo que se va a comparar.</param>
      <param name="t2">Segundo intervalo de tiempo que se va a comparar.</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>Indica si un <see cref="T:System.TimeSpan" /> especificado es menor que otro <see cref="T:System.TimeSpan" /> especificado.</summary>
      <returns>true si el valor de <paramref name="t1" /> es menor que el valor de <paramref name="t2" />; en caso contrario, false.</returns>
      <param name="t1">Primer intervalo de tiempo que se va a comparar.</param>
      <param name="t2">Segundo intervalo de tiempo que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>Indica si un <see cref="T:System.TimeSpan" /> especificado es menor o igual que otro <see cref="T:System.TimeSpan" /> especificado.</summary>
      <returns>true si el valor de <paramref name="t1" /> es menor o igual que el valor de <paramref name="t2" />; en caso contrario, false.</returns>
      <param name="t1">Primer intervalo de tiempo que se va a comparar. </param>
      <param name="t2">Segundo intervalo de tiempo que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>Resta un <see cref="T:System.TimeSpan" /> especificado de otro <see cref="T:System.TimeSpan" /> especificado.</summary>
      <returns>Objeto cuyo valor es el resultado del valor de <paramref name="t1" /> menos el valor de <paramref name="t2" />.</returns>
      <param name="t1">Minuendo. </param>
      <param name="t2">Sustraendo. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>Devuelve un <see cref="T:System.TimeSpan" /> cuyo valor es el valor negado de la instancia especificada.</summary>
      <returns>Objeto con el mismo valor numérico que esta instancia, pero de signo contrario.</returns>
      <param name="t">Intervalo de tiempo que se va a negar. </param>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>Devuelve la instancia especificada de <see cref="T:System.TimeSpan" />.</summary>
      <returns>Intervalo de tiempo especificado por <paramref name="t" />.</returns>
      <param name="t">Intervalo de tiempo que se va a devolver. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>Convierte la representación de cadena de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" />. </summary>
      <returns>Intervalo de tiempo que corresponde a <paramref name="s" />.</returns>
      <param name="s">Cadena que especifica el intervalo de tiempo que se va a convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components is outside its valid range. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" />, usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Intervalo de tiempo que corresponde a <paramref name="input" /> de acuerdo con lo especificado por <paramref name="formatProvider" />.</returns>
      <param name="input">Cadena que especifica el intervalo de tiempo que se va a convertir.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" />, usando el formato especificado, así como la información de formato específica de la referencia cultural especificada.El formato de la representación de cadena debe coincidir exactamente con el formato especificado.</summary>
      <returns>Intervalo de tiempo que corresponde a <paramref name="input" /> de acuerdo con lo especificado por <paramref name="format" /> y <paramref name="formatProvider" />.</returns>
      <param name="input">Cadena que especifica el intervalo de tiempo que se va a convertir.</param>
      <param name="format">Cadena de formato estándar o personalizado que define el formato requerido de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>Convierte la representación de cadena de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" />, usando el formato, los estilos y la información de formato específica de la referencia cultural especificados.El formato de la representación de cadena debe coincidir exactamente con el formato especificado.</summary>
      <returns>Intervalo de tiempo que corresponde a <paramref name="input" /> de acuerdo con lo especificado por <paramref name="format" />, <paramref name="formatProvider" /> y <paramref name="styles" />.</returns>
      <param name="input">Cadena que especifica el intervalo de tiempo que se va a convertir.</param>
      <param name="format">Cadena de formato estándar o personalizado que define el formato requerido de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <param name="styles">Combinación bit a bit de valores de enumeración que define los elementos de estilo que pueden estar presentes en <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>Convierte la representación de cadena de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" />, usando la matriz de cadenas de formato y la información de formato específica de la referencia cultural especificadas.El formato de la representación de cadena debe coincidir exactamente con uno de los formatos especificados.</summary>
      <returns>Intervalo de tiempo que corresponde a <paramref name="input" /> de acuerdo con lo especificado por <paramref name="formats" /> y <paramref name="formatProvider" />.</returns>
      <param name="input">Cadena que especifica el intervalo de tiempo que se va a convertir.</param>
      <param name="formats">Matriz de cadenas de formato estándar o personalizado que define el formato necesario de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>Convierte la representación de cadena de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" />, usando los formatos, los estilos y la información de formato específica de la referencia cultural especificados.El formato de la representación de cadena debe coincidir exactamente con uno de los formatos especificados.</summary>
      <returns>Intervalo de tiempo que corresponde a <paramref name="input" /> de acuerdo con lo especificado por <paramref name="formats" />, <paramref name="formatProvider" /> y <paramref name="styles" />.</returns>
      <param name="input">Cadena que especifica el intervalo de tiempo que se va a convertir.</param>
      <param name="formats">Matriz de cadenas de formato estándar o personalizado que define el formato necesario de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <param name="styles">Combinación bit a bit de valores de enumeración que define los elementos de estilo que pueden estar presentes en input.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>Obtiene el componente de segundos del intervalo de tiempo representado por el objeto <see cref="T:System.TimeSpan" /> actual.</summary>
      <returns>Componente de segundos de la estructura <see cref="T:System.TimeSpan" /> actual.El valor devuelto está comprendido entre -59 y 59.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>Devuelve un nuevo objeto <see cref="T:System.TimeSpan" /> cuyo valor es la diferencia entre el objeto <see cref="T:System.TimeSpan" /> especificado y esta instancia.</summary>
      <returns>Nuevo intervalo de tiempo cuyo valor es el resultado de restar el valor de esta instancia menos el valor de <paramref name="ts" />.</returns>
      <param name="ts">Intervalo de tiempo que se va a restar. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Valor devuelto Significado Menor que cero Esta instancia es anterior a <paramref name="value" /> en el criterio de ordenación.Cero Esta instancia se produce en la misma posición que <paramref name="value" /> en el criterio de ordenación.Mayor que cero Esta instancia sigue a <paramref name="value" /> en el criterio de ordenación.O bien 
                  El valor de <paramref name="value" /> es null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.TimeSpan" /> object. </exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>Obtiene el número de pasos que representa el valor de la estructura <see cref="T:System.TimeSpan" /> actual.</summary>
      <returns>Número de pasos de la instancia en cuestión.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>Representa el número de pasos en 1 día.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>Representa el número de pasos en 1 hora.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>Representa el número de pasos en 1 milisegundo.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>Representa el número de pasos en 1 minuto.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>Representa el número de pasos en 1 segundo.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>Convierte el valor del objeto <see cref="T:System.TimeSpan" /> actual en su representación de cadena equivalente.</summary>
      <returns>Representación de cadena del valor <see cref="T:System.TimeSpan" /> actual. </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
      <summary>Convierte el valor del objeto <see cref="T:System.TimeSpan" /> actual en su representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación de cadena del valor <see cref="T:System.TimeSpan" /> actual en el formato especificado por el parámetro <paramref name="format" />.</returns>
      <param name="format">Cadena de formato de <see cref="T:System.TimeSpan" /> estándar o personalizado.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor del objeto <see cref="T:System.TimeSpan" /> actual en la representación de cadena equivalente usando el formato y la información de formato específica de la referencia cultural especificados.</summary>
      <returns>Representación de cadena del valor del objeto <see cref="T:System.TimeSpan" /> actual, con el formato especificado por <paramref name="format" /> y <paramref name="formatProvider" />.</returns>
      <param name="format">Cadena de formato de <see cref="T:System.TimeSpan" /> estándar o personalizado.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>Obtiene el valor de la estructura <see cref="T:System.TimeSpan" /> actual expresado en días completos y fracciones de días.</summary>
      <returns>Número total de días representado por esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>Obtiene el valor de la estructura <see cref="T:System.TimeSpan" /> actual expresado en días completos y fracciones de horas.</summary>
      <returns>Número total de horas representado por esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>Obtiene el valor de la estructura <see cref="T:System.TimeSpan" /> actual expresado en días completos y fracciones de milisegundos.</summary>
      <returns>Número total de milisegundos representado por esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>Obtiene el valor de la estructura <see cref="T:System.TimeSpan" /> actual expresado en días completos y fracciones de minutos.</summary>
      <returns>Número total de minutos representado por esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>Obtiene el valor de la estructura <see cref="T:System.TimeSpan" /> actual expresado en días completos y fracciones de segundos.</summary>
      <returns>Número total de segundos representado por esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>Convierte la representación de cadena de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" /> usando la información de formato específica de la referencia cultural, y devuelve un valor que indica si la conversión se realizó correctamente.</summary>
      <returns>true si <paramref name="input" /> se convirtió correctamente; en caso contrario, false.Esta operación devuelve false si el parámetro <paramref name="input" /> es null o <see cref="F:System.String.Empty" />, tiene un formato no válido, representa un intervalo de tiempo menor que <see cref="F:System.TimeSpan.MinValue" /> o mayor que <see cref="F:System.TimeSpan.MaxValue" />, o tiene al menos uno de sus componentes de días, horas, minutos o segundos fuera del intervalo válido.</returns>
      <param name="input">Cadena que especifica el intervalo de tiempo que se va a convertir.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <param name="result">El resultado que devuelve este método contiene un objeto que representa el intervalo de tiempo especificado por <paramref name="input" /> o <see cref="F:System.TimeSpan.Zero" /> si la conversión no finalizó correctamente.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>Convierte la representación de cadena de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" /> y devuelve un valor que indica si la conversión se realizó correctamente.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.Esta operación devuelve false si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" />, tiene un formato no válido, representa un intervalo de tiempo menor que <see cref="F:System.TimeSpan.MinValue" /> o mayor que <see cref="F:System.TimeSpan.MaxValue" />, o tiene al menos uno de sus componentes de días, horas, minutos o segundos fuera del intervalo válido.</returns>
      <param name="s">Cadena que especifica el intervalo de tiempo que se va a convertir.</param>
      <param name="result">El resultado que devuelve este método contiene un objeto que representa el intervalo de tiempo especificado por <paramref name="s" /> o <see cref="F:System.TimeSpan.Zero" /> si la conversión no finalizó correctamente.Este parámetro se pasa sin inicializar.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>Convierte la representación de cadena de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" /> usando el formato, los estilos y la información de formato específica de la referencia cultural especificados, y devuelve un valor que indica si la conversión se realizó correctamente.El formato de la representación de cadena debe coincidir exactamente con el formato especificado.</summary>
      <returns>true si <paramref name="input" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="input">Cadena que especifica el intervalo de tiempo que se va a convertir.</param>
      <param name="format">Cadena de formato estándar o personalizado que define el formato requerido de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <param name="styles">Uno o varios valores de enumeración que indican el estilo de <paramref name="input" />.</param>
      <param name="result">El resultado que devuelve este método contiene un objeto que representa el intervalo de tiempo especificado por <paramref name="input" /> o <see cref="F:System.TimeSpan.Zero" /> si la conversión no finalizó correctamente.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>Convierte la representación de cadena de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" /> usando el formato especificado y la información de formato específica de la referencia cultural, y devuelve un valor que indica si la conversión se realizó correctamente.El formato de la representación de cadena debe coincidir exactamente con el formato especificado.</summary>
      <returns>true si <paramref name="input" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="input">Cadena que especifica el intervalo de tiempo que se va a convertir.</param>
      <param name="format">Cadena de formato estándar o personalizado que define el formato requerido de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <param name="result">El resultado que devuelve este método contiene un objeto que representa el intervalo de tiempo especificado por <paramref name="input" /> o <see cref="F:System.TimeSpan.Zero" /> si la conversión no finalizó correctamente.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>Convierte la representación de cadena especificada de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" /> usando los formatos, los estilos y la información de formato específica de la referencia cultural especificados, y devuelve un valor que indica si la conversión se realizó correctamente.El formato de la representación de cadena debe coincidir exactamente con uno de los formatos especificados.</summary>
      <returns>true si <paramref name="input" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="input">Cadena que especifica el intervalo de tiempo que se va a convertir.</param>
      <param name="formats">Matriz de cadenas de formato estándar o personalizado que definen los formatos aceptables de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <param name="styles">Uno o varios valores de enumeración que indican el estilo de <paramref name="input" />.</param>
      <param name="result">El resultado que devuelve este método contiene un objeto que representa el intervalo de tiempo especificado por <paramref name="input" /> o <see cref="F:System.TimeSpan.Zero" /> si la conversión no finalizó correctamente.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>Convierte la representación de cadena especificada de un intervalo de tiempo en su equivalente de <see cref="T:System.TimeSpan" /> usando los formatos y la información de formato específica de la referencia cultural especificados, y devuelve un valor que indica si la conversión se realizó correctamente.El formato de la representación de cadena debe coincidir exactamente con uno de los formatos especificados.</summary>
      <returns>true si <paramref name="input" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="input">Cadena que especifica el intervalo de tiempo que se va a convertir.</param>
      <param name="formats">Matriz de cadenas de formato estándar o personalizado que definen los formatos aceptables de <paramref name="input" />.</param>
      <param name="formatProvider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <param name="result">El resultado que devuelve este método contiene un objeto que representa el intervalo de tiempo especificado por <paramref name="input" /> o <see cref="F:System.TimeSpan.Zero" /> si la conversión no finalizó correctamente.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>Representa el valor cero de <see cref="T:System.TimeSpan" />.Este campo es de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>Representa cualquier zona horaria del mundo.</summary>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>Obtiene la diferencia horaria entre la hora estándar de la zona horaria actual y la hora universal coordinada (hora UTC).</summary>
      <returns>Un objeto que indica la diferencia horaria entre la hora estándar de la zona horaria actual y la hora universal coordinada (hora UTC).</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>Convierte una hora en la hora de una zona horaria determinada.</summary>
      <returns>Fecha y hora de la zona horaria de destino.</returns>
      <param name="dateTime">Fecha y hora que se van a convertir.   </param>
      <param name="destinationTimeZone">Zona horaria en la que se va a convertir <paramref name="dateTime" />.</param>
      <exception cref="T:System.ArgumentException">El valor del parámetro <paramref name="dateTime" /> representa una hora no válida.</exception>
      <exception cref="T:System.ArgumentNullException">El valor del parámetro <paramref name="destinationTimeZone" /> es null.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
      <summary>Convierte una hora de una zona horaria en otra.</summary>
      <returns>Fecha y hora de la zona horaria de destino que se corresponde con el parámetro <paramref name="dateTime" /> de la zona horaria de origen.</returns>
      <param name="dateTime">Fecha y hora que se van a convertir.</param>
      <param name="sourceTimeZone">Zona horaria de <paramref name="dateTime" />.</param>
      <param name="destinationTimeZone">Zona horaria en la que se va a convertir <paramref name="dateTime" />.</param>
      <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.DateTime.Kind" /> del parámetro <paramref name="dateTime" /> es <see cref="F:System.DateTimeKind.Local" />, pero el parámetro <paramref name="sourceTimeZone" /> no es igual a <see cref="F:System.DateTimeKind.Local" />.Para obtener más información, vea la sección Comentarios.O bienLa propiedad <see cref="P:System.DateTime.Kind" /> del parámetro <paramref name="dateTime" /> es <see cref="F:System.DateTimeKind.Utc" />, pero el parámetro <paramref name="sourceTimeZone" /> no es igual a <see cref="P:System.TimeZoneInfo.Utc" />.O bienEl parámetro <paramref name="dateTime" /> es una hora no válida (es decir, representa una hora que no existe debido a las reglas de ajuste de una zona horaria).</exception>
      <exception cref="T:System.ArgumentNullException">El valor del parámetro <paramref name="sourceTimeZone" /> es null.O bienEl valor del parámetro <paramref name="destinationTimeZone" /> es null.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>Convierte una hora en la hora de una zona horaria determinada.</summary>
      <returns>Fecha y hora de la zona horaria de destino.</returns>
      <param name="dateTimeOffset">Fecha y hora que se van a convertir.   </param>
      <param name="destinationTimeZone">Zona horaria en la que se va a convertir <paramref name="dateTime" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor del parámetro <paramref name="destinationTimeZone" /> es null.</exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>Obtiene el nombre para mostrar para el horario de verano de la zona horaria actual.</summary>
      <returns>El nombre para mostrar para el horario de verano de la zona horaria.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>Obtiene el nombre para mostrar general que representa la zona horaria.</summary>
      <returns>El nombre para mostrar general de la zona horaria.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>Determina si el objeto <see cref="T:System.TimeZoneInfo" /> actual y otro objeto <see cref="T:System.TimeZoneInfo" /> son iguales.</summary>
      <returns>Es true si los dos objetos <see cref="T:System.TimeZoneInfo" /> son iguales; en caso contrario, es false.</returns>
      <param name="other">Un segundo objeto con el que se va a comparar el objeto actual.  </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)">
      <summary>Recupera un objeto <see cref="T:System.TimeZoneInfo" /> del Registro basándose en su identificador.</summary>
      <returns>Un objeto cuyo identificador es el valor del parámetro <paramref name="id" />.</returns>
      <param name="id">Identificador de la zona horaria, que se corresponde con la propiedad <see cref="P:System.TimeZoneInfo.Id" />.      </param>
      <exception cref="T:System.OutOfMemoryException">El sistema no tiene bastante memoria para contener información sobre la zona horaria.</exception>
      <exception cref="T:System.ArgumentNullException">El valor del parámetro <paramref name="id" /> es null.</exception>
      <exception cref="T:System.TimeZoneNotFoundException">No se encontró el identificador de zona horaria especificado por <paramref name="id" />.Esto significa que no existe una clave del Registro cuyo nombre coincida con <paramref name="id" />, o que la clave existe pero no contiene ningún dato de la zona horaria.</exception>
      <exception cref="T:System.Security.SecurityException">El proceso no tiene los permisos necesarios para leer de la clave del Registro que contiene la información de zona horaria.</exception>
      <exception cref="T:System.InvalidTimeZoneException">Se encontró el identificador de zona horaria, pero los datos del Registro están dañados.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>Devuelve información sobre las posibles fechas y horas a las que se puede asignar una fecha y hora ambigua.</summary>
      <returns>Una matriz de objetos que representa los desplazamientos posibles de hora universal coordinada (UTC) que se pueden asignar a una fecha y hora determinada.</returns>
      <param name="dateTime">Fecha y hora.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> no es una hora ambigua.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>Devuelve información sobre las posibles fechas y horas a las que se puede asignar una fecha y hora ambigua.</summary>
      <returns>Una matriz de objetos que representa los desplazamientos posibles de hora universal coordinada (UTC) que se pueden asignar a una fecha y hora determinada.</returns>
      <param name="dateTimeOffset">Fecha y hora.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> no es una hora ambigua.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>Actúa como una función hash para los algoritmos hash y estructuras de datos, como las tablas hash.</summary>
      <returns>Un entero con signo de 32 bits que actúa como código hash para este objeto <see cref="T:System.TimeZoneInfo" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetSystemTimeZones">
      <summary>Devuelve una colección ordenada de todas las zonas horarias sobre qué información está disponible en el sistema local.</summary>
      <returns>Una colección de sólo lectura de objetos <see cref="T:System.TimeZoneInfo" />.</returns>
      <exception cref="T:System.OutOfMemoryException">No hay memoria suficiente para almacenar toda la información de la zona horaria.</exception>
      <exception cref="T:System.Security.SecurityException">El usuario no tiene permiso para leer en las claves del Registro que contienen información de la zona horaria.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>Calcula el desplazamiento o diferencia entre la hora de esta zona horaria y la hora universal coordinada (UTC) para una fecha y hora determinadas.</summary>
      <returns>Un objeto que indica la diferencia horaria entre las dos zonas horarias.</returns>
      <param name="dateTime">Fecha y hora para las que se va a determinar el desplazamiento.   </param>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>Calcula el desplazamiento o diferencia entre la hora de esta zona horaria y la hora universal coordinada (UTC) para una fecha y hora determinadas.</summary>
      <returns>Un objeto que indica la diferencia horaria entre la hora universal coordinada (UTC) y la zona horaria actual.</returns>
      <param name="dateTimeOffset">Fecha y hora para las que se va a determinar el desplazamiento.</param>
    </member>
    <member name="P:System.TimeZoneInfo.Id">
      <summary>Obtiene el identificador de la zona horaria.</summary>
      <returns>El identificador de la zona horaria.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>Determina si un valor de fecha y hora determinado en una zona horaria concreta es ambiguo y se puede asignar a dos o más horas UTC (hora universal coordinada).</summary>
      <returns>Es true si el parámetro <paramref name="dateTime" /> es ambiguo; de lo contrario, es false.</returns>
      <param name="dateTime">Valor de fecha y hora.   </param>
      <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.DateTime.Kind" /> del valor <paramref name="dateTime" /> es <see cref="F:System.DateTimeKind.Local" /> y <paramref name="dateTime" /> es una hora no válida.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>Determina si un valor de fecha y hora determinado en una zona horaria concreta es ambiguo y se puede asignar a dos o más horas UTC (hora universal coordinada).</summary>
      <returns>Es true si el parámetro <paramref name="dateTimeOffset" /> es ambiguo en la zona horaria actual; de lo contrario, es false.</returns>
      <param name="dateTimeOffset">Fecha y hora.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>Indica si una fecha y hora especificadas están en el intervalo de horario de verano de la zona horaria del objeto <see cref="T:System.TimeZoneInfo" /> actual.</summary>
      <returns>Es true si el parámetro <paramref name="dateTime" /> corresponde al horario de verano; de los contrario, es false.</returns>
      <param name="dateTime">Valor de fecha y hora.   </param>
      <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.DateTime.Kind" /> del valor <paramref name="dateTime" /> es <see cref="F:System.DateTimeKind.Local" /> y <paramref name="dateTime" /> es una hora no válida.</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>Indica si una fecha y hora especificadas están en el intervalo de horario de verano de la zona horaria del objeto <see cref="T:System.TimeZoneInfo" /> actual.</summary>
      <returns>Es true si el parámetro <paramref name="dateTimeOffset" /> corresponde al horario de verano; de los contrario, es false.</returns>
      <param name="dateTimeOffset">Valor de fecha y hora.</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>Indica si una fecha y hora determinadas no son válidas.</summary>
      <returns>Es true si <paramref name="dateTime" /> no es válida; de lo contrario, es false.</returns>
      <param name="dateTime">Valor de fecha y hora.   </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>Obtiene un objeto <see cref="T:System.TimeZoneInfo" /> que representa la zona horaria local.</summary>
      <returns>Un objeto que representa la zona horaria local.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>Obtiene el nombre para mostrar de la hora estándar de la zona horaria.</summary>
      <returns>El nombre para mostrar de la hora estándar de la zona horaria.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>Obtiene un valor que indica si la zona horaria tiene alguna regla de horario de verano.</summary>
      <returns>Es true si la zona horaria admite el horario de verano; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>Devuelve el nombre para mostrar del objeto <see cref="T:System.TimeZoneInfo" /> actual.</summary>
      <returns>El valor de la propiedad <see cref="P:System.TimeZoneInfo.DisplayName" /> del objeto <see cref="T:System.TimeZoneInfo" /> actual.</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>Obtiene un objeto <see cref="T:System.TimeZoneInfo" /> que representa la zona horaria universal coordinada (hora UTC).</summary>
      <returns>Un objeto que representa la zona horaria universal coordinada (hora UTC).</returns>
    </member>
    <member name="T:System.Tuple">
      <summary>Proporciona los métodos estáticos para crear los objetos de tupla. Para examinar el código fuente de .NET Framework para este tipo, vea el origen de referencia.</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
      <summary>Crea una nueva tupla de 1 o singleton.</summary>
      <returns>Una tupla cuyo valor es (<paramref name="item1" />).</returns>
      <param name="item1">Valor del único componente de la tupla.</param>
      <typeparam name="T1">Tipo del único componente de la tupla.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
      <summary>Crea una nueva tupla de 2 o par.</summary>
      <returns>Una tupla de 2 cuyo valor es (<paramref name="item1" />,<paramref name="item2" />).</returns>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
      <summary>Crea una nueva tupla de 3 o triple.</summary>
      <returns>Una tupla de 3 cuyo valor es (<paramref name="item1" />,<paramref name="item2" />, <paramref name="item3" />).</returns>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
      <summary>Crea una nueva tupla de 4 o cuádruplo.</summary>
      <returns>Una tupla de 4 cuyo valor es (<paramref name="item1" />,<paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />).</returns>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
      <param name="item4">Valor del cuarto componente de la tupla.</param>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
      <typeparam name="T4">Tipo del cuarto componente de la tupla. </typeparam>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>Crea una nueva tupla de 5 o quíntuplo.</summary>
      <returns>Una tupla de 5 cuyo valor es (<paramref name="item1" />,<paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />).</returns>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
      <param name="item4">Valor del cuarto componente de la tupla.</param>
      <param name="item5">Valor del quinto componente de la tupla.</param>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
      <typeparam name="T4">Tipo del cuarto componente de la tupla.</typeparam>
      <typeparam name="T5">Tipo del quinto componente de la tupla.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>Crea una nueva tupla de 6 o séxtuplo.</summary>
      <returns>Una tupla de 6 cuyo valor es (<paramref name="item1" />,<paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />).</returns>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
      <param name="item4">Valor del cuarto componente de la tupla.</param>
      <param name="item5">Valor del quinto componente de la tupla.</param>
      <param name="item6">Valor del sexto componente de la tupla.</param>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
      <typeparam name="T4">Tipo del cuarto componente de la tupla.</typeparam>
      <typeparam name="T5">Tipo del quinto componente de la tupla.</typeparam>
      <typeparam name="T6">Tipo del sexto componente de la tupla.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>Crea una nueva tupla de 7 o séptuplo.</summary>
      <returns>Una tupla de 7 cuyo valor es (<paramref name="item1" />,<paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />).</returns>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
      <param name="item4">Valor del cuarto componente de la tupla.</param>
      <param name="item5">Valor del quinto componente de la tupla.</param>
      <param name="item6">Valor del sexto componente de la tupla.</param>
      <param name="item7">Valor del séptimo componente de la tupla.</param>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
      <typeparam name="T4">Tipo del cuarto componente de la tupla.</typeparam>
      <typeparam name="T5">Tipo del quinto componente de la tupla.</typeparam>
      <typeparam name="T6">Tipo del sexto componente de la tupla.</typeparam>
      <typeparam name="T7">Tipo del séptimo componente de la tupla.</typeparam>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>Crea una nueva tupla de 8 u óctuple.</summary>
      <returns>Una tupla de 8 (óctupla) cuyo valor es (<paramref name="item1" />,<paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />, <paramref name="item8" />). </returns>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
      <param name="item4">Valor del cuarto componente de la tupla.</param>
      <param name="item5">Valor del quinto componente de la tupla.</param>
      <param name="item6">Valor del sexto componente de la tupla.</param>
      <param name="item7">Valor del séptimo componente de la tupla.</param>
      <param name="item8">Valor del octavo componente de la tupla.</param>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
      <typeparam name="T4">Tipo del cuarto componente de la tupla.</typeparam>
      <typeparam name="T5">Tipo del quinto componente de la tupla.</typeparam>
      <typeparam name="T6">Tipo del sexto componente de la tupla.</typeparam>
      <typeparam name="T7">Tipo del séptimo componente de la tupla.</typeparam>
      <typeparam name="T8">Tipo del octavo componente de la tupla.</typeparam>
    </member>
    <member name="T:System.Tuple`1">
      <summary>Representa una tupla de 1 o singleton. </summary>
      <typeparam name="T1">Tipo del único componente de la tupla.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Tuple`1" />.</summary>
      <param name="item1">Valor del único componente de la tupla.</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`1" /> actual es igual a un objeto especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
      <summary>Devuelve el código hash del objeto <see cref="T:System.Tuple`1" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
      <summary>Obtiene el valor del único componente del objeto <see cref="T:System.Tuple`1" />. </summary>
      <returns>Valor del único componente del objeto <see cref="T:System.Tuple`1" /> actual.</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compara el objeto <see cref="T:System.Tuple`1" /> actual con un objeto especificado utilizando un comparador especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="other" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="other" />.ZeroEsta instancia y <paramref name="other" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia está detrás de <paramref name="other" />.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Un objeto que proporciona reglas personalizadas para la comparación.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> no es un objeto <see cref="T:System.Tuple`1" />.</exception>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`1" /> actual es igual que el objeto especificado según el método de comparación especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="other">Objeto que se va a comparar con esta instancia.</param>
      <param name="comparer">Un objeto que define el método que se usa para evaluar si los dos objetos son iguales.</param>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calcula el código hash del objeto <see cref="T:System.Tuple`1" /> actual usando el método de cálculo especificado.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <param name="comparer">Un objeto cuyo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula el código hash del objeto <see cref="T:System.Tuple`1" /> actual.</param>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>Compara el objeto <see cref="T:System.Tuple`1" /> actual con un objeto especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o si se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="obj" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="obj" />.ZeroEsta instancia y <paramref name="obj" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia sigue a <paramref name="obj" />.</returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> no es un objeto <see cref="T:System.Tuple`1" />.</exception>
    </member>
    <member name="M:System.Tuple`1.ToString">
      <summary>Devuelve una cadena que representa el valor de esta instancia de <see cref="T:System.Tuple`1" />.</summary>
      <returns>Representación de cadena del objeto <see cref="T:System.Tuple`1" /> en cuestión.</returns>
    </member>
    <member name="T:System.Tuple`2">
      <summary>Representa una tupla de 2 o par. </summary>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Tuple`2" />.</summary>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`2" /> actual es igual a un objeto especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
      <summary>Devuelve el código hash del objeto <see cref="T:System.Tuple`2" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
      <summary>Obtiene el valor del primer componente del objeto <see cref="T:System.Tuple`2" /> actual.</summary>
      <returns>Valor del primer componente del objeto <see cref="T:System.Tuple`2" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
      <summary>Obtiene el valor del segundo componente del objeto <see cref="T:System.Tuple`2" /> actual.</summary>
      <returns>Valor del segundo componente del objeto <see cref="T:System.Tuple`2" /> actual.</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compara el objeto <see cref="T:System.Tuple`2" /> actual con un objeto especificado utilizando un comparador especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o si se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="other" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="other" />.ZeroEsta instancia y <paramref name="other" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia está detrás de <paramref name="other" />.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Un objeto que proporciona reglas personalizadas para la comparación.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> no es un objeto <see cref="T:System.Tuple`2" />.</exception>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`2" /> actual es igual que el objeto especificado según el método de comparación especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="other">Objeto que se va a comparar con esta instancia.</param>
      <param name="comparer">Un objeto que define el método que se usa para evaluar si los dos objetos son iguales.</param>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calcula el código hash del objeto <see cref="T:System.Tuple`2" /> actual usando el método de cálculo especificado.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <param name="comparer">Un objeto cuyo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula el código hash del objeto <see cref="T:System.Tuple`2" /> actual.</param>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>Compara el objeto <see cref="T:System.Tuple`2" /> actual con un objeto especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="obj" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="obj" />.ZeroEsta instancia y <paramref name="obj" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia sigue a <paramref name="obj" />.</returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> no es un objeto <see cref="T:System.Tuple`2" />.</exception>
    </member>
    <member name="M:System.Tuple`2.ToString">
      <summary>Devuelve una cadena que representa el valor de esta instancia de <see cref="T:System.Tuple`2" />.</summary>
      <returns>Representación de cadena del objeto <see cref="T:System.Tuple`2" /> en cuestión.</returns>
    </member>
    <member name="T:System.Tuple`3">
      <summary>Representa una tupla de 3 o triple. </summary>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Tuple`3" />.</summary>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`3" /> actual es igual a un objeto especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
      <summary>Devuelve el código hash del objeto <see cref="T:System.Tuple`3" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
      <summary>Obtiene el valor del primer componente del objeto <see cref="T:System.Tuple`3" /> actual.</summary>
      <returns>Valor del primer componente del objeto <see cref="T:System.Tuple`3" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
      <summary>Obtiene el valor del segundo componente del objeto <see cref="T:System.Tuple`3" /> actual.</summary>
      <returns>Valor del segundo componente del objeto <see cref="T:System.Tuple`3" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
      <summary>Obtiene el valor del tercer componente del objeto <see cref="T:System.Tuple`3" /> actual.</summary>
      <returns>Valor del tercer componente del objeto <see cref="T:System.Tuple`3" /> actual.</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compara el objeto <see cref="T:System.Tuple`3" /> actual con un objeto especificado utilizando un comparador especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="other" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="other" />.ZeroEsta instancia y <paramref name="other" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia está detrás de <paramref name="other" />.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Un objeto que proporciona reglas personalizadas para la comparación.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> no es un objeto <see cref="T:System.Tuple`3" />.</exception>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`3" /> actual es igual que el objeto especificado según el método de comparación especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="other">Objeto que se va a comparar con esta instancia.</param>
      <param name="comparer">Un objeto que define el método que se usa para evaluar si los dos objetos son iguales.</param>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calcula el código hash del objeto <see cref="T:System.Tuple`3" /> actual usando el método de cálculo especificado.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <param name="comparer">Un objeto cuyo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula el código hash del objeto <see cref="T:System.Tuple`3" /> actual.</param>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>Compara el objeto <see cref="T:System.Tuple`3" /> actual con un objeto especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="obj" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="obj" />.ZeroEsta instancia y <paramref name="obj" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia sigue a <paramref name="obj" />.</returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> no es un objeto <see cref="T:System.Tuple`3" />.</exception>
    </member>
    <member name="M:System.Tuple`3.ToString">
      <summary>Devuelve una cadena que representa el valor de esta instancia de <see cref="T:System.Tuple`3" />.</summary>
      <returns>Representación de cadena del objeto <see cref="T:System.Tuple`3" /> en cuestión.</returns>
    </member>
    <member name="T:System.Tuple`4">
      <summary>Representa una tupla de 4 o cuádruplo. </summary>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
      <typeparam name="T4">Tipo del cuarto componente de la tupla.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Tuple`4" />.</summary>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
      <param name="item4">Valor del cuarto componente de la tupla</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`4" /> actual es igual a un objeto especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
      <summary>Devuelve el código hash del objeto <see cref="T:System.Tuple`4" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
      <summary>Obtiene el valor del primer componente del objeto <see cref="T:System.Tuple`4" /> actual.</summary>
      <returns>Valor del primer componente del objeto <see cref="T:System.Tuple`4" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
      <summary>Obtiene el valor del segundo componente del objeto <see cref="T:System.Tuple`4" /> actual.</summary>
      <returns>Valor del segundo componente del objeto <see cref="T:System.Tuple`4" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
      <summary>Obtiene el valor del tercer componente del objeto <see cref="T:System.Tuple`4" /> actual.</summary>
      <returns>Valor del tercer componente del objeto <see cref="T:System.Tuple`4" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
      <summary>Obtiene el valor del cuarto componente del objeto <see cref="T:System.Tuple`4" /> actual.</summary>
      <returns>Valor del cuarto componente del objeto <see cref="T:System.Tuple`4" /> actual.</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compara el objeto <see cref="T:System.Tuple`4" /> actual con un objeto especificado utilizando un comparador especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="other" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="other" />.ZeroEsta instancia y <paramref name="other" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia está detrás de <paramref name="other" />.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Un objeto que proporciona reglas personalizadas para la comparación.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> no es un objeto <see cref="T:System.Tuple`4" />.</exception>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`4" /> actual es igual que el objeto especificado según el método de comparación especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false. </returns>
      <param name="other">Objeto que se va a comparar con esta instancia.</param>
      <param name="comparer">Un objeto que define el método que se usa para evaluar si los dos objetos son iguales.</param>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calcula el código hash del objeto <see cref="T:System.Tuple`4" /> actual usando el método de cálculo especificado.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <param name="comparer">Un objeto cuyo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula el código hash del objeto <see cref="T:System.Tuple`4" /> actual.</param>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>Compara el objeto <see cref="T:System.Tuple`4" /> actual con un objeto especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="obj" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="obj" />.ZeroEsta instancia y <paramref name="obj" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia sigue a <paramref name="obj" />.</returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> no es un objeto <see cref="T:System.Tuple`4" />.</exception>
    </member>
    <member name="M:System.Tuple`4.ToString">
      <summary>Devuelve una cadena que representa el valor de esta instancia de <see cref="T:System.Tuple`4" />.</summary>
      <returns>Representación de cadena del objeto <see cref="T:System.Tuple`4" /> en cuestión.</returns>
    </member>
    <member name="T:System.Tuple`5">
      <summary>Representa una tupla de 5 o quíntuplo. </summary>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
      <typeparam name="T4">Tipo del cuarto componente de la tupla.</typeparam>
      <typeparam name="T5">Tipo del quinto componente de la tupla.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Tuple`5" />.</summary>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
      <param name="item4">Valor del cuarto componente de la tupla</param>
      <param name="item5">Valor del quinto componente de la tupla.</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`5" /> actual es igual que un objeto especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
      <summary>Devuelve el código hash del objeto <see cref="T:System.Tuple`5" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
      <summary>Obtiene el valor del primer componente del objeto <see cref="T:System.Tuple`5" /> actual.</summary>
      <returns>Valor del primer componente del objeto <see cref="T:System.Tuple`5" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
      <summary>Obtiene el valor del segundo componente del objeto <see cref="T:System.Tuple`5" /> actual.</summary>
      <returns>Valor del segundo componente del objeto <see cref="T:System.Tuple`5" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
      <summary>Obtiene el valor del tercer componente del objeto <see cref="T:System.Tuple`5" /> actual.</summary>
      <returns>Valor del tercer componente del objeto <see cref="T:System.Tuple`5" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
      <summary>Obtiene el valor del cuarto componente del objeto <see cref="T:System.Tuple`5" /> actual.</summary>
      <returns>Valor del cuarto componente del objeto <see cref="T:System.Tuple`5" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
      <summary>Obtiene el valor del quinto componente del objeto <see cref="T:System.Tuple`5" /> actual.</summary>
      <returns>Valor del quinto componente del objeto <see cref="T:System.Tuple`5" /> actual.</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compara el objeto <see cref="T:System.Tuple`5" /> actual con un objeto especificado utilizando un comparador especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="other" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="other" />.ZeroEsta instancia y <paramref name="other" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia está detrás de <paramref name="other" />.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Un objeto que proporciona reglas personalizadas para la comparación.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> no es un objeto <see cref="T:System.Tuple`5" />.</exception>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`5" /> actual es igual que el objeto especificado según el método de comparación especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="other">Objeto que se va a comparar con esta instancia.</param>
      <param name="comparer">Un objeto que define el método que se usa para evaluar si los dos objetos son iguales.</param>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calcula el código hash del objeto <see cref="T:System.Tuple`5" /> actual usando el método de cálculo especificado.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <param name="comparer">Un objeto cuyo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula el código hash del objeto <see cref="T:System.Tuple`5" /> actual.</param>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>Compara el objeto <see cref="T:System.Tuple`5" /> actual con un objeto especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="obj" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="obj" />.ZeroEsta instancia y <paramref name="obj" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia sigue a <paramref name="obj" />.</returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> no es un objeto <see cref="T:System.Tuple`5" />.</exception>
    </member>
    <member name="M:System.Tuple`5.ToString">
      <summary>Devuelve una cadena que representa el valor de esta instancia de <see cref="T:System.Tuple`5" />.</summary>
      <returns>Representación de cadena del objeto <see cref="T:System.Tuple`5" /> en cuestión.</returns>
    </member>
    <member name="T:System.Tuple`6">
      <summary>Representa una tupla de 6 o séxtuplo. </summary>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
      <typeparam name="T4">Tipo del cuarto componente de la tupla.</typeparam>
      <typeparam name="T5">Tipo del quinto componente de la tupla.</typeparam>
      <typeparam name="T6">Tipo del sexto componente de la tupla.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Tuple`6" />.</summary>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
      <param name="item4">Valor del cuarto componente de la tupla</param>
      <param name="item5">Valor del quinto componente de la tupla.</param>
      <param name="item6">Valor del sexto componente de la tupla.</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`6" /> actual es igual que el objeto especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
      <summary>Devuelve el código hash del objeto <see cref="T:System.Tuple`6" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
      <summary>Obtiene el valor del primer componente del objeto <see cref="T:System.Tuple`6" /> actual.</summary>
      <returns>Valor del primer componente del objeto <see cref="T:System.Tuple`6" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
      <summary>Obtiene el valor del segundo componente del objeto <see cref="T:System.Tuple`6" /> actual.</summary>
      <returns>Valor del segundo componente del objeto <see cref="T:System.Tuple`6" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
      <summary>Obtiene el valor del tercer componente del objeto <see cref="T:System.Tuple`6" /> actual.</summary>
      <returns>Valor del tercer componente del objeto <see cref="T:System.Tuple`6" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
      <summary>Obtiene el valor del cuarto componente del objeto <see cref="T:System.Tuple`6" /> actual.</summary>
      <returns>Valor del cuarto componente del objeto <see cref="T:System.Tuple`6" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
      <summary>Obtiene el valor del quinto componente del objeto <see cref="T:System.Tuple`6" /> actual.</summary>
      <returns>Valor del quinto componente del objeto <see cref="T:System.Tuple`6" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
      <summary>Obtiene el valor del sexto componente del objeto <see cref="T:System.Tuple`6" /> actual.</summary>
      <returns>Valor del sexto componente del objeto <see cref="T:System.Tuple`6" /> actual.</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compara el objeto <see cref="T:System.Tuple`6" /> actual con el objeto especificado utilizando el comparador especificado y devuelve un entero que indica si el objeto actual se encuentra delante, detrás o en la misma posición que el objeto especificado en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="other" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="other" />.ZeroEsta instancia y <paramref name="other" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia está detrás de <paramref name="other" />.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Un objeto que proporciona reglas personalizadas para la comparación.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> no es un objeto <see cref="T:System.Tuple`6" />.</exception>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`6" /> actual es igual que el objeto especificado según el método de comparación especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="other">Objeto que se va a comparar con esta instancia.</param>
      <param name="comparer">Un objeto que define el método que se usa para evaluar si los dos objetos son iguales.</param>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calcula el código hash del objeto <see cref="T:System.Tuple`6" /> actual usando el método de cálculo especificado.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <param name="comparer">Un objeto cuyo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula el código hash del objeto <see cref="T:System.Tuple`6" /> actual.</param>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>Compara el objeto <see cref="T:System.Tuple`6" /> actual con el objeto especificado y devuelve un entero que indica si el objeto actual se encuentra delante, detrás o en la misma posición que el objeto especificado en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="obj" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="obj" />.ZeroEsta instancia y <paramref name="obj" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia sigue a <paramref name="obj" />.</returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> no es un objeto <see cref="T:System.Tuple`6" />.</exception>
    </member>
    <member name="M:System.Tuple`6.ToString">
      <summary>Devuelve una cadena que representa el valor de esta instancia de <see cref="T:System.Tuple`6" />.</summary>
      <returns>Representación de cadena del objeto <see cref="T:System.Tuple`6" /> en cuestión.</returns>
    </member>
    <member name="T:System.Tuple`7">
      <summary>Representa una tupla de 7 o séptuplo. </summary>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
      <typeparam name="T4">Tipo del cuarto componente de la tupla.</typeparam>
      <typeparam name="T5">Tipo del quinto componente de la tupla.</typeparam>
      <typeparam name="T6">Tipo del sexto componente de la tupla.</typeparam>
      <typeparam name="T7">Tipo del séptimo componente de la tupla.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Tuple`7" />.</summary>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
      <param name="item4">Valor del cuarto componente de la tupla</param>
      <param name="item5">Valor del quinto componente de la tupla.</param>
      <param name="item6">Valor del sexto componente de la tupla.</param>
      <param name="item7">Valor del séptimo componente de la tupla.</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`7" /> actual es igual a un objeto especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
      <summary>Devuelve el código hash del objeto <see cref="T:System.Tuple`7" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
      <summary>Obtiene el valor del primer componente del objeto <see cref="T:System.Tuple`7" /> actual.</summary>
      <returns>Valor del primer componente del objeto <see cref="T:System.Tuple`7" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
      <summary>Obtiene el valor del segundo componente del objeto <see cref="T:System.Tuple`7" /> actual.</summary>
      <returns>Valor del segundo componente del objeto <see cref="T:System.Tuple`7" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
      <summary>Obtiene el valor del tercer componente del objeto <see cref="T:System.Tuple`7" /> actual.</summary>
      <returns>Valor del tercer componente del objeto <see cref="T:System.Tuple`7" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
      <summary>Obtiene el valor del cuarto componente del objeto <see cref="T:System.Tuple`7" /> actual.</summary>
      <returns>Valor del cuarto componente del objeto <see cref="T:System.Tuple`7" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
      <summary>Obtiene el valor del quinto componente del objeto <see cref="T:System.Tuple`7" /> actual.</summary>
      <returns>Valor del quinto componente del objeto <see cref="T:System.Tuple`7" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
      <summary>Obtiene el valor del sexto componente del objeto <see cref="T:System.Tuple`7" /> actual.</summary>
      <returns>Valor del sexto componente del objeto <see cref="T:System.Tuple`7" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
      <summary>Obtiene el valor del séptimo componente del objeto <see cref="T:System.Tuple`7" /> actual.</summary>
      <returns>Valor del séptimo componente del objeto <see cref="T:System.Tuple`7" /> actual.</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compara el objeto <see cref="T:System.Tuple`7" /> actual con un objeto especificado utilizando un comparador especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o si se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="other" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="other" />.ZeroEsta instancia y <paramref name="other" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia está detrás de <paramref name="other" />.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Un objeto que proporciona reglas personalizadas para la comparación.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> no es un objeto <see cref="T:System.Tuple`7" />.</exception>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`7" /> actual es igual que el objeto especificado según el método de comparación especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="other">Objeto que se va a comparar con esta instancia.</param>
      <param name="comparer">Un objeto que define el método que se usa para evaluar si los dos objetos son iguales.</param>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calcula el código hash del objeto <see cref="T:System.Tuple`7" /> actual usando el método de cálculo especificado.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <param name="comparer">Objeto cuyo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula el código hash del objeto <see cref="T:System.Tuple`7" /> actual.</param>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>Compara el objeto <see cref="T:System.Tuple`7" /> actual con un objeto especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="obj" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="obj" />.ZeroEsta instancia y <paramref name="obj" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia sigue a <paramref name="obj" />.</returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> no es un objeto <see cref="T:System.Tuple`7" />.</exception>
    </member>
    <member name="M:System.Tuple`7.ToString">
      <summary>Devuelve una cadena que representa el valor de esta instancia de <see cref="T:System.Tuple`7" />.</summary>
      <returns>Representación de cadena del objeto <see cref="T:System.Tuple`7" /> en cuestión.</returns>
    </member>
    <member name="T:System.Tuple`8">
      <summary>Representa una tupla de n, donde n es 8 o más.</summary>
      <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
      <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
      <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
      <typeparam name="T4">Tipo del cuarto componente de la tupla.</typeparam>
      <typeparam name="T5">Tipo del quinto componente de la tupla.</typeparam>
      <typeparam name="T6">Tipo del sexto componente de la tupla.</typeparam>
      <typeparam name="T7">Tipo del séptimo componente de la tupla.</typeparam>
      <typeparam name="TRest">Cualquier objeto Tuple genérico que defina los tipos de los componentes restantes de la tupla.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Tuple`8" />.</summary>
      <param name="item1">Valor del primer componente de la tupla.</param>
      <param name="item2">Valor del segundo componente de la tupla.</param>
      <param name="item3">Valor del tercer componente de la tupla.</param>
      <param name="item4">Valor del cuarto componente de la tupla</param>
      <param name="item5">Valor del quinto componente de la tupla.</param>
      <param name="item6">Valor del sexto componente de la tupla.</param>
      <param name="item7">Valor del séptimo componente de la tupla.</param>
      <param name="rest">Cualquier objeto Tuple genérico que contenga los valores de los restantes componentes de la tupla.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> no es un objeto Tuple genérico.</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`8" /> actual es igual que el objeto especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
      <summary>Calcula el código hash para el objeto <see cref="T:System.Tuple`8" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
      <summary>Obtiene el valor del primer componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
      <returns>Valor del primer componente del objeto <see cref="T:System.Tuple`8" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
      <summary>Obtiene el valor del segundo componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
      <returns>Valor del segundo componente del objeto <see cref="T:System.Tuple`8" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
      <summary>Obtiene el valor del tercer componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
      <returns>Valor del tercer componente del objeto <see cref="T:System.Tuple`8" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
      <summary>Obtiene el valor del cuarto componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
      <returns>Valor del cuarto componente del objeto <see cref="T:System.Tuple`8" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
      <summary>Obtiene el valor del quinto componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
      <returns>Valor del quinto componente del objeto <see cref="T:System.Tuple`8" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
      <summary>Obtiene el valor del sexto componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
      <returns>Valor del sexto componente del objeto <see cref="T:System.Tuple`8" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
      <summary>Obtiene el valor del séptimo componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
      <returns>Valor del séptimo componente del objeto <see cref="T:System.Tuple`8" /> actual.</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
      <summary>Obtiene los componentes restantes del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
      <returns>Valor de los restantes componente del objeto <see cref="T:System.Tuple`8" /> actual.</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Compara el objeto <see cref="T:System.Tuple`8" /> actual con un objeto especificado utilizando un comparador especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="other" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="other" />.ZeroEsta instancia y <paramref name="other" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia está detrás de <paramref name="other" />.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Un objeto que proporciona reglas personalizadas para la comparación.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> no es un objeto <see cref="T:System.Tuple`8" />.</exception>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`8" /> actual es igual que el objeto especificado según el método de comparación especificado.</summary>
      <returns>Es true si la instancia actual es igual al objeto especificado; en caso contrario, es false.</returns>
      <param name="other">Objeto que se va a comparar con esta instancia.</param>
      <param name="comparer">Un objeto que define el método que se usa para evaluar si los dos objetos son iguales.</param>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Calcula el código hash del objeto <see cref="T:System.Tuple`8" /> actual usando el método de cálculo especificado.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <param name="comparer">Un objeto cuyo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula el código hash del objeto <see cref="T:System.Tuple`8" /> actual.</param>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>Compara el objeto <see cref="T:System.Tuple`8" /> actual con un objeto especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica la posición relativa de esta instancia y <paramref name="obj" /> en el criterio de ordenación, como se muestra en la tabla siguiente.ValorDescripciónUn entero negativoEsta instancia antecede a <paramref name="obj" />.ZeroEsta instancia y <paramref name="obj" /> tienen la misma posición en el criterio de ordenación.Un entero positivo.Esta instancia sigue a <paramref name="obj" />.</returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> no es un objeto <see cref="T:System.Tuple`8" />.</exception>
    </member>
    <member name="M:System.Tuple`8.ToString">
      <summary>Devuelve una cadena que representa el valor de esta instancia de <see cref="T:System.Tuple`8" />.</summary>
      <returns>Representación de cadena del objeto <see cref="T:System.Tuple`8" /> en cuestión.</returns>
    </member>
    <member name="T:System.Type">
      <summary>Representa declaraciones de tipos: tipos de clase, tipos de interfaz, tipos de matriz, tipos de valor, tipos de enumeración, parámetros de tipo, definiciones de tipo genérico y tipos genéricos construidos abiertos o cerrados.Para examinar el código fuente de .NET Framework de este tipo, consulte el origen de referencia.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>Obtiene el nombre calificado con el ensamblado del tipo, que incluye el nombre del ensamblado a partir del cual se ha cargado el objeto <see cref="T:System.Type" />.</summary>
      <returns>Nombre calificado con el ensamblado de <see cref="T:System.Type" />, que incluye el nombre del ensamblado a partir del cual se ha cargado <see cref="T:System.Type" />, o null si la instancia actual representa un parámetro de tipo genérico.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>Obtiene el tipo que declara el tipo anidado actual o el parámetro de tipo genérico.</summary>
      <returns>Un objeto <see cref="T:System.Type" /> que representa el tipo envolvente, si el tipo actual es un tipo anidado; o la definición de tipo genérico, si el tipo actual es un parámetro de tipo de un tipo genérico; o el tipo que declara el método genérico, si el tipo actual es un parámetro de tipo de un método genérico; en caso contrario, null..</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>Representa una matriz vacía de tipo <see cref="T:System.Type" />.Este campo es de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>Determina si el tipo de sistema subyacente del objeto <see cref="T:System.Type" /> actual es igual que el tipo de sistema subyacente del objeto <see cref="T:System.Object" /> especificado.</summary>
      <returns>Es true si el tipo del sistema subyacente de <paramref name="o" /> coincide con el tipo del sistema subyacente del objeto <see cref="T:System.Type" /> actual; de lo contrario, es false.Este método también devuelve false si el objeto especificado por el parámetro <paramref name="o" /> no es Type.</returns>
      <param name="o">Objeto cuyo tipo de sistema subyacente se va a comparar con el tipo de sistema subyacente del objeto <see cref="T:System.Type" /> actual. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>Determina si el tipo de sistema subyacente del objeto <see cref="T:System.Type" /> actual es igual que el tipo de sistema subyacente del objeto <see cref="T:System.Type" /> especificado.</summary>
      <returns>Es true si el tipo del sistema subyacente de <paramref name="o" /> coincide con el tipo del sistema subyacente del objeto <see cref="T:System.Type" /> actual; de lo contrario, es false.</returns>
      <param name="o">Objeto cuyo tipo de sistema subyacente se va a comparar con el tipo de sistema subyacente del objeto <see cref="T:System.Type" /> actual. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.FullName">
      <summary>Obtiene el nombre completo del tipo, incluido su espacio de nombres, pero no su ensamblado. </summary>
      <returns>Nombre completo del tipo, con espacio de nombres y sin ensamblado; o bien, null si la instancia actual representa un parámetro de tipo genérico, un tipo de matriz, un tipo de puntero o un tipo byref basado en un parámetro de tipo, o un tipo genérico que no sea una definición de tipo genérico, pero que contenga parámetros de tipo sin resolver.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>Obtiene la posición del parámetro de tipo en la lista de parámetros de tipo del tipo o método genérico que declaró el parámetro, siempre que el objeto <see cref="T:System.Type" /> represente un parámetro de tipo de un tipo genérico o de un método genérico.</summary>
      <returns>Posición de un parámetro de tipo en la lista de parámetros de tipo del método o tipo genérico que define el parámetro.Los números de posición comienzan en 0.</returns>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a type parameter.That is, <see cref="P:System.Type.IsGenericParameter" /> returns false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.GenericTypeArguments">
      <summary>Obtiene una matriz de los argumentos de tipo genérico para este tipo.</summary>
      <returns>Una matriz de argumentos de tipo genérico para este tipo.</returns>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>Obtiene el número de dimensiones de una matriz. </summary>
      <returns>Entero que contiene el número de dimensiones del tipo actual. </returns>
      <exception cref="T:System.NotSupportedException">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead. </exception>
      <exception cref="T:System.ArgumentException">The current type is not an array. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>Cuando se invalida en una clase derivada, devuelve la clase <see cref="T:System.Type" /> del objeto englobado o al que hace referencia la matriz, el puntero o el tipo de referencia actual.</summary>
      <returns>
        <see cref="T:System.Type" /> del objeto englobado o al que hace referencia la matriz, puntero o tipo de referencia actual; o bien, null si el objeto <see cref="T:System.Type" /> actual no es una matriz o un puntero, o si no se pasa por referencia, o si representa un tipo genérico o un parámetro de tipo en la definición de un tipo genérico o de un método genérico.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>Devuelve un objeto <see cref="T:System.Type" /> que representa una definición de tipo genérico a partir de la cual se puede construir el tipo genérico actual.</summary>
      <returns>Objeto <see cref="T:System.Type" /> que representa un tipo genérico a partir del cual se puede construir el tipo actual.</returns>
      <exception cref="T:System.InvalidOperationException">The current type is not a generic type.That is, <see cref="P:System.Type.IsGenericType" /> returns false.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.Derived classes must provide an implementation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de esta instancia.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>Obtiene el objeto <see cref="T:System.Type" /> con el nombre especificado, mediante una búsqueda en la que se distingue entre mayúsculas y minúsculas.</summary>
      <returns>Tipo con el nombre especificado, si se encuentra; de lo contrario null.</returns>
      <param name="typeName">Nombre calificado con el ensamblado del tipo que se va a obtener.Vea <see cref="P:System.Type.AssemblyQualifiedName" />.Si el tipo está en el ensamblado que se ejecuta actualmente o en Mscorlib.dll, es suficiente para proporcionar el nombre completo del tipo por su espacio de nombres.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>Obtiene el objeto <see cref="T:System.Type" /> con el nombre especificado, que realiza una búsqueda donde se distingue entre mayúsculas y minúsculas y especifica si se va a producir o no una excepción si no se encuentra el tipo.</summary>
      <returns>Tipo con el nombre especificado.Si el tipo no se encuentra, el parámetro <paramref name="throwOnError" /> especifica si se devuelve null o se produce una excepción.En algunos casos, se produce una excepción con independencia del valor de <paramref name="throwOnError" />.Vea la sección Excepciones.</returns>
      <param name="typeName">Nombre calificado con el ensamblado del tipo que se va a obtener.Vea <see cref="P:System.Type.AssemblyQualifiedName" />.Si el tipo está en el ensamblado que se ejecuta actualmente o en Mscorlib.dll, es suficiente para proporcionar el nombre completo del tipo por su espacio de nombres.</param>
      <param name="throwOnError">Es true para producir una excepción si no se puede encontrar el tipo; es false para devolver null.Si se especifica false se suprimen otras condiciones de excepción, pero no todas.Vea la sección Excepciones.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. -or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> is an empty string.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> represents an array type with an invalid size. -or-<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid syntax.For example, "MyType[,*,]".-or- <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is true and the assembly or one of its dependencies was not found. </exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Obtiene el <see cref="T:System.Type" /> con el nombre indicado, que especifica si se genera una excepción en caso de que no se encuentre el tipo y si se va a realizar una búsqueda donde se distingue entre mayúsculas y minúsculas. </summary>
      <returns>Tipo con el nombre especificado.Si el tipo no se encuentra, el parámetro <paramref name="throwOnError" /> especifica si se devuelve null o se produce una excepción.En algunos casos, se produce una excepción con independencia del valor de <paramref name="throwOnError" />.Vea la sección Excepciones.</returns>
      <param name="typeName">Nombre calificado con el ensamblado del tipo que se va a obtener.Vea <see cref="P:System.Type.AssemblyQualifiedName" />.Si el tipo está en el ensamblado que se ejecuta actualmente o en Mscorlib.dll, es suficiente para proporcionar el nombre completo del tipo por su espacio de nombres.</param>
      <param name="throwOnError">true para producir una excepción si no se puede encontrar el tipo; false para devolver null. Especificar false también suprime algunas otras condiciones de excepción, pero no todas ellas.Vea la sección Excepciones.</param>
      <param name="ignoreCase">true para realizar una búsqueda de <paramref name="typeName" /> que no distinga entre mayúsculas y minúsculas; false para realizar una búsqueda de <paramref name="typeName" /> que distinga entre mayúsculas y minúsculas. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. -or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> is an empty string.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> represents an array type with an invalid size. -or-<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid syntax.For example, "MyType[,*,]".-or- <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is true and the assembly or one of its dependencies was not found. </exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>Obtiene el tipo al que hace referencia el identificador de tipos especificado.</summary>
      <returns>El tipo al que hace referencia el <see cref="T:System.RuntimeTypeHandle" /> especificado o null si la propiedad <see cref="P:System.RuntimeTypeHandle.Value" /> de <paramref name="handle" /> es null.</returns>
      <param name="handle">Objeto que hace referencia al tipo. </param>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Type" /> actual engloba o hace referencia a otro tipo; es decir, si el objeto <see cref="T:System.Type" /> actual es una matriz o un puntero, o si se pasa por referencia.</summary>
      <returns>Es true si <see cref="T:System.Type" /> es una matriz o un puntero, o si se pasa por referencia; en caso contrario, es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>Obtiene un valor que indica si el tipo es una matriz. </summary>
      <returns>true si el tipo actual es una matriz; en caso contrario, false. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>Obtiene un valor que indica si <see cref="T:System.Type" /> se pasa por referencia.</summary>
      <returns>Es true si <see cref="T:System.Type" /> se pasa por referencia; en caso contrario, es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsConstructedGenericType">
      <summary>Obtiene un valor que indica si este objeto representa un tipo genérico construido.Puede crear instancias de un tipo genérico construido.</summary>
      <returns>true si este objeto representa una definición de tipo genérico construido; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Type.IsGenericParameter">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Type" /> actual representa un parámetro de tipo en la definición de un método o tipo genérico.</summary>
      <returns>true si el objeto <see cref="T:System.Type" /> representa un parámetro de tipo de una definición de tipo genérico o de una definición de método genérico; de lo contrario, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNested">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Type" /> actual representa un tipo cuya definición está anidada dentro de la definición de otro tipo.</summary>
      <returns>Es true si <see cref="T:System.Type" /> está anidado dentro de otro tipo; de lo contrario, es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Type" /> es un puntero.</summary>
      <returns>Es true si <see cref="T:System.Type" /> es un puntero; en caso contrario, es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>Devuelve un objeto <see cref="T:System.Type" /> que representa una matriz unidimensional del tipo actual, con un límite inferior de cero.</summary>
      <returns>Objeto <see cref="T:System.Type" /> que representa una matriz unidimensional del tipo actual, con un límite inferior de cero.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.Derived classes must provide an implementation.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>Devuelve un objeto <see cref="T:System.Type" /> que representa una matriz del tipo actual, con el número de dimensiones especificado.</summary>
      <returns>Objeto que representa una matriz del tipo actual, con el número de dimensiones especificado.</returns>
      <param name="rank">Número de dimensiones de la matriz.Este número debe ser menor o igual que 32.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is invalid.For example, 0 or negative.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.-or-<paramref name="rank" /> is greater than 32.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>Devuelve un objeto <see cref="T:System.Type" /> que representa el tipo actual cuando se pasa como un parámetro ref (ByRef en Visual Basic).</summary>
      <returns>Objeto <see cref="T:System.Type" /> que representa el tipo actual cuando se pasa como un parámetro ref (ByRef en Visual Basic).</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>Sustituye los elementos de una matriz de tipos por los parámetros de tipo de la definición de tipo genérico actual y devuelve un objeto <see cref="T:System.Type" /> que representa el tipo construido resultante.</summary>
      <returns>Objeto <see cref="T:System.Type" /> que representa el tipo construido formado al sustituir los elementos de <paramref name="typeArguments" /> por los parámetros del tipo genérico actual.</returns>
      <param name="typeArguments">Matriz de tipos que se va a sustituir por los parámetros del tipo genérico actual.</param>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a generic type definition.That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns false.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is null.-or- Any element of <paramref name="typeArguments" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.-or- Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. -or- <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns true), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns true), or <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>Devuelve un objeto <see cref="T:System.Type" /> que representa un puntero al tipo actual.</summary>
      <returns>Objeto <see cref="T:System.Type" /> que representa un puntero al tipo actual.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Type.Missing">
      <summary>Representa un valor que falta en la información de <see cref="T:System.Type" />.Este campo es de solo lectura.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.Name"></member>
    <member name="P:System.Type.Namespace">
      <summary>Obtiene el espacio de nombres de <see cref="T:System.Type" />.</summary>
      <returns>Espacio de nombres de <see cref="T:System.Type" />; null si la instancia actual no tiene un espacio de nombres o representa un parámetro genérico.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.ToString">
      <summary>Devuelve un valor String que representa el nombre del objeto Type actual.</summary>
      <returns>Valor <see cref="T:System.String" /> que representa el nombre del objeto <see cref="T:System.Type" /> actual.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>Obtiene el identificador del objeto <see cref="T:System.Type" /> actual.</summary>
      <returns>Identificador del objeto <see cref="T:System.Type" /> actual.</returns>
      <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this property.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.TypeAccessException">
      <summary>Excepción que se produce cuando un método intenta usar un tipo al que no tiene acceso.</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.TypeAccessException" /> con un mensaje proporcionado por el sistema que describe el error.</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.TypeAccessException" /> con un mensaje especificado que describe el error.</summary>
      <param name="message">Mensaje que describe la excepción.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la referencia cultural actual del sistema.</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.TypeAccessException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje que describe la excepción.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la referencia cultural actual del sistema.</param>
      <param name="inner">Excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.TypeCode">
      <summary>Especifica el tipo de un objeto.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>Tipo simple que representa los valores booleanos true o false.</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>Tipo entero que representa enteros de 8 bits sin signo con valores comprendidos entre 0 y 255.</summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>Tipo entero que representa enteros de 16 bits sin signo con valores comprendidos entre 0 y 65535.El conjunto de valores posibles para el tipo <see cref="F:System.TypeCode.Char" /> corresponde al juego de caracteres Unicode.</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>Tipo que representa un valor de fecha y hora.</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>Tipo simple que representa los valores comprendidos entre 1,0 x 10 -28 y aproximadamente 7,9 x 10 28, con 28-29 dígitos significativos.</summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>Tipo de punto flotante que representa los valores comprendidos entre aproximadamente 5,0 x 10 -324 y 1,7 x 10 308, con una precisión de 15-16 dígitos.</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>Referencia nula.</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>Tipo entero que representa enteros de 16 bits con signo con valores comprendidos entre -32768 y 32767.</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>Tipo entero que representa enteros de 32 bits con signo con valores comprendidos entre -2147483648 y 2147483647.</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>Tipo entero que representa enteros de 64 bits con signo con valores comprendidos entre -9223372036854775808 y 9223372036854775807.</summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>Tipo general que representa a cualquier tipo de valor o referencia no representado de forma explícita por otro TypeCode.</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>Tipo entero que representa enteros de 8 bits con signo con valores comprendidos entre -128 y 127.</summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>Tipo de punto flotante que representa los valores comprendidos entre aproximadamente 1,5 x 10 -45 y 3,4 x 10 38, con una precisión de 7 dígitos.</summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>Tipo de clase sealed que representa cadenas de caracteres Unicode.</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>Tipo entero que representa enteros de 16 bits sin signo con valores comprendidos entre 0 y 65535.</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>Tipo entero que representa enteros de 32 bits sin signo con valores comprendidos entre 0 y 4294967295.</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>Tipo entero que representa enteros de 64 bits sin signo con valores comprendidos entre 0 y 18446744073709551615.</summary>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>Excepción que se produce como contenedor de la excepción producida por el inicializador de la clase.Esta clase no puede heredarse.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.TypeInitializationException" /> con el mensaje de error predeterminado, el nombre del tipo especificado y una referencia a la excepción interna que representa la causa principal de esta excepción.</summary>
      <param name="fullTypeName">Nombre completo del tipo que no se puede inicializar. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>Obtiene el nombre completo del tipo que no se puede inicializar.</summary>
      <returns>Nombre completo del tipo que no se puede inicializar.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>Excepción que se produce cuando se producen errores de carga de tipos.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.TypeLoadException" />.</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.TypeLoadException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.TypeLoadException" /> con el mensaje de error especificado y una referencia a la excepción interna que es la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>Obtiene el mensaje de error para esta excepción.</summary>
      <returns>Cadena con el mensaje de error.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>Obtiene el nombre completo del tipo que provoca la excepción.</summary>
      <returns>Nombre de tipo completo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.UInt16">
      <summary>Representa un entero de 16 bits sin signo.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>Compara esta instancia con un entero de 16 bits sin signo y devuelve una indicación de los valores relativos.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">Entero sin signo que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.UInt16" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Un objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un valor de <see cref="T:System.UInt16" /> especificado.</summary>
      <returns>true si el valor de <paramref name="obj" /> tiene el mismo valor que esta instancia; en caso contrario, false.</returns>
      <param name="obj">Un entero de 16 bits sin signo que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>Representa el mayor valor posible de <see cref="T:System.UInt16" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>Representa el menor valor posible de <see cref="T:System.UInt16" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en el entero de 16 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 16 bits equivalente al número incluido en <paramref name="s" />.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación en forma de cadena de un número del estilo especificado en el entero de 16 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 16 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir.La cadena se interpreta usando el estilo especificado por el parámetro <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que especifican el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo y el formato específicos de la referencia cultural que se hayan especificado en el entero de 16 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 16 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir.La cadena se interpreta usando el estilo especificado por el parámetro <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con el formato específico de la referencia cultural que se haya especificado en el entero de 16 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 16 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt16" /> object. </exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>Es true si el valor de la instancia actual no es cero; en caso contrario, es false.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Byte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Char" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>Valor actual de esta instancia, convertido en <see cref="T:System.Decimal" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>Valor actual de esta instancia, convertido en <see cref="T:System.Double" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor actual de esta instancia, convertido en <see cref="T:System.Int16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de esta instancia, convertido en <see cref="T:System.Int32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor actual de esta instancia, convertido en <see cref="T:System.Int64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>Valor actual de esta instancia, convertido en <see cref="T:System.SByte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>Valor actual de esta instancia, convertido en <see cref="T:System.Single" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>Valor actual de esta instancia, convertido en <paramref name="type" />.</returns>
      <param name="type">Tipo al que se va a convertir este valor <see cref="T:System.UInt16" />.</param>
      <param name="provider">Implementación de <see cref="T:System.IFormatProvider" /> que proporciona información sobre el formato del valor devuelto.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor actual de esta instancia, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor actual de esta instancia, convertido en <see cref="T:System.UInt32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor actual de esta instancia, convertido en <see cref="T:System.UInt64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación de cadena del valor de esta instancia, que consta de una secuencia de dígitos que van del 0 al 9, sin signo ni ceros a la izquierda.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación de cadena del valor de esta instancia, que consta de una secuencia de dígitos que van del 0 al 9, sin signo ni ceros a la izquierda.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en su representación de cadena equivalente mediante el formato y la información de formato específica de la referencia cultural que se especificaran.</summary>
      <returns>Representación de cadena del valor de esta instancia tal y como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>Intenta convertir la representación de cadena de un número en el estilo y en el formato específicos de la referencia cultural que se hayan indicado en el entero de 16 bits sin signo equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir.La cadena se interpreta usando el estilo especificado por el parámetro <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero sin signo de 16 bits equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro es <paramref name="s" />null o <see cref="F:System.String.Empty" />, no tiene un formato compatible con <paramref name="style" /> o representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>Intenta convertir la representación de cadena de un número en el entero de 16 bits sin signo equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero sin signo de 16 bits que es equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.Se produce un error en la conversión si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" />, no está en el formato correcto,o representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UInt32">
      <summary>Representa un entero de 32 bits sin signo.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>Compara esta instancia con un entero de 32 bits sin signo y devuelve una indicación de los valores relativos.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Return value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">Entero sin signo que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.UInt32" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un <see cref="T:System.UInt32" /> especificado.</summary>
      <returns>true si el valor de <paramref name="obj" /> tiene el mismo valor que esta instancia; en caso contrario, false.</returns>
      <param name="obj">Un valor que se comparará con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>Representa el mayor valor posible de <see cref="T:System.UInt32" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>Representa el menor valor posible de <see cref="T:System.UInt32" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en el entero de 32 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 32 bits equivalente al número incluido en <paramref name="s" />.</returns>
      <param name="s">Cadena que representa el número que se va a convertir. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación en forma de cadena de un número del estilo especificado en el entero de 32 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 32 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que representa el número que se va a convertir.La cadena se interpreta usando el estilo especificado por el parámetro <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que especifican el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo y el formato específicos de la referencia cultural que se hayan especificado en el entero de 32 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 32 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Cadena que representa el número que se va a convertir.La cadena se interpreta usando el estilo especificado por el parámetro <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con el formato específico de la referencia cultural que se haya especificado en el entero de 32 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 32 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct style. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt32" /> object. </exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>Es true si el valor de la instancia actual no es cero; en caso contrario, es false.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Byte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Char" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Decimal" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Double" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.SByte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Single" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <paramref name="type" />.</returns>
      <param name="type">Tipo al que se va a convertir este valor <see cref="T:System.UInt32" />.</param>
      <param name="provider">Implementación de <see cref="T:System.IFormatProvider" /> que proporciona información específica de la referencia cultural sobre el formato del valor devuelto.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, formada por una secuencia de dígitos que comprende del 0 al 9, sin signo y sin ceros a la izquierda.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación de cadena del valor de esta instancia, que consta de una secuencia de dígitos que van del 0 al 9, sin signo ni ceros a la izquierda.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en su representación de cadena equivalente mediante el formato y la información de formato específica de la referencia cultural que se especificaran.</summary>
      <returns>Representación de cadena del valor de esta instancia, tal y como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <param name="provider">Objeto que aporta información de formato específica de la referencia cultural acerca de esta instancia. </param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>Intenta convertir la representación de cadena de un número en el estilo y en el formato específicos de la referencia cultural que se hayan indicado en el entero de 32 bits sin signo equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir.La cadena se interpreta usando el estilo especificado por el parámetro <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero sin signo de 32 bits equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" />, no tiene un formato conforme a <paramref name="style" /> o representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>Intenta convertir la representación de cadena de un número en el entero de 32 bits sin signo equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero sin signo de 32 bits que es equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" />, no tiene el formato correcto o representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UInt64">
      <summary>Representa un entero de 64 bits sin signo.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>Compara esta instancia con un entero de 64 bits sin signo y devuelve una indicación de los valores relativos.</summary>
      <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">Entero sin signo que se va a comparar. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.UInt64" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Un objeto que se va a comparar con esta instancia. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un valor de <see cref="T:System.UInt64" /> especificado.</summary>
      <returns>true si el valor de <paramref name="obj" /> tiene el mismo valor que esta instancia; en caso contrario, false.</returns>
      <param name="obj">Valor <see cref="T:System.UInt64" /> que se va a comparar con esta instancia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>Representa el mayor valor posible de <see cref="T:System.UInt64" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>Representa el menor valor posible de <see cref="T:System.UInt64" />.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en el entero de 64 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 64 bits equivalente al número incluido en <paramref name="s" />.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación en forma de cadena de un número del estilo especificado en el entero de 64 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 64 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir.La cadena se interpreta usando el estilo especificado por el parámetro <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que especifican el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con el estilo y el formato específicos de la referencia cultural que se hayan especificado en el entero de 64 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 64 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir.La cadena se interpreta usando el estilo especificado por el parámetro <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con el formato específico de la referencia cultural que se haya especificado en el entero de 64 bits sin signo equivalente.</summary>
      <returns>Entero sin signo de 64 bits equivalente al número especificado en <paramref name="s" />.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir. </param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct style. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt64" /> object. </exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>Es true si el valor de la instancia actual no es cero; en caso contrario, es false.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Byte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Char" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>No se admite esta conversión.Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No se admite esta conversión.No se devuelve ningún valor.</returns>
      <param name="provider">Este parámetro se ignora.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Decimal" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Double" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Int64" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.SByte" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.Single" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <paramref name="type" />.</returns>
      <param name="type">Tipo al que se va a convertir este valor <see cref="T:System.UInt64" />.</param>
      <param name="provider">Implementación de <see cref="T:System.IFormatProvider" /> que proporciona información sobre el formato del valor devuelto.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt16" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, convertido en <see cref="T:System.UInt32" />.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>Valor de la instancia actual, sin ningún tipo de modificación.</returns>
      <param name="provider">Este parámetro se ignora.</param>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, formada por una secuencia de dígitos que comprende del 0 al 9, sin signo y sin ceros a la izquierda.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, formada por una secuencia de dígitos que comprende del 0 al 9, sin signo y sin ceros a la izquierda.  </returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente usando el formato especificado.</summary>
      <returns>Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor numérico de esta instancia en su representación de cadena equivalente mediante el formato y la información de formato específica de la referencia cultural que se especificaran.</summary>
      <returns>Representación de cadena del valor de esta instancia, tal y como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <param name="format">Cadena de formato numérico.</param>
      <param name="provider">Objeto que aporta información de formato específica de la referencia cultural acerca de esta instancia. </param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>Intenta convertir la representación de cadena de un número en el estilo y en el formato específicos de la referencia cultural que se hayan indicado en el entero de 64 bits sin signo equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir.La cadena se interpreta usando el estilo especificado por el parámetro <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de valores de enumeración que indica el formato permitido de <paramref name="s" />.Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="s" />. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero sin signo de 64 bits equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro es <paramref name="s" />null o <see cref="F:System.String.Empty" />, no tiene un formato compatible con <paramref name="style" /> o representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>Intenta convertir la representación de cadena de un número en el entero de 64 bits sin signo equivalente.Un valor devuelto indica si la conversión se realizó correctamente o si se produjeron errores.</summary>
      <returns>true si <paramref name="s" /> se convirtió correctamente; en caso contrario, false.</returns>
      <param name="s">Una cadena que representa el número que se va a convertir. </param>
      <param name="result">El resultado que devuelve este método contiene el valor entero sin signo de 64 bits que es equivalente al número contenido en <paramref name="s" /> si la conversión se realizó correctamente, o bien, cero si no se realizó correctamente.La conversión no se realiza correctamente si el parámetro <paramref name="s" /> es null o <see cref="F:System.String.Empty" /> no tiene el formato correcto o representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.Este parámetro se pasa sin inicializar; cualquier valor proporcionado originalmente en <paramref name="result" /> se sobrescribirá.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UIntPtr">
      <summary>Tipo específico de plataforma que se utiliza para representar un puntero o un identificador.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.UIntPtr" /> que utiliza el puntero o identificador especificado de 32 bits.</summary>
      <param name="value">Puntero o identificador contenido en un entero de 32 bits sin signo. </param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.UIntPtr" /> utilizando el puntero o identificador de 64 bits especificado.</summary>
      <param name="value">Puntero o identificador contenido en un entero de 64 bits sin signo. </param>
      <exception cref="T:System.OverflowException">En una plataforma de 32 bits, <paramref name="value" /> es demasiado grande para representarse como <see cref="T:System.UIntPtr" />. </exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.UIntPtr" /> utilizando el puntero especificado a un tipo no especificado.</summary>
      <param name="value">Puntero a un tipo no especificado. </param>
    </member>
    <member name="M:System.UIntPtr.Add(System.UIntPtr,System.Int32)">
      <summary>Suma un desplazamiento al valor de un puntero sin signo.</summary>
      <returns>Nuevo puntero sin signo que es el resultado de sumar <paramref name="offset" /> a <paramref name="pointer" />.</returns>
      <param name="pointer">Puntero sin signo al que se va a sumar el desplazamiento.</param>
      <param name="offset">Desplazamiento que se va a sumar.</param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>Es true si <paramref name="obj" /> es una instancia de <see cref="T:System.UIntPtr" /> y es igual al valor de esta instancia; en caso contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con esta instancia o null. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)">
      <summary>Suma un desplazamiento al valor de un puntero sin signo.</summary>
      <returns>Nuevo puntero sin signo que es el resultado de sumar <paramref name="offset" /> a <paramref name="pointer" />.</returns>
      <param name="pointer">Puntero sin signo al que se va a sumar el desplazamiento.</param>
      <param name="offset">Desplazamiento que se va a sumar.</param>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>Determina si dos instancias especificadas de <see cref="T:System.UIntPtr" /> son iguales.</summary>
      <returns>true si <paramref name="value1" /> es igual a <paramref name="value2" />; en caso contrario, false.</returns>
      <param name="value1">Primer puntero o controlador que se va a comparar. </param>
      <param name="value2">Segundo puntero o controlador que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>Convierte el valor de un entero de 32 bits sin signo en un <see cref="T:System.UIntPtr" />.</summary>
      <returns>Nueva instancia de <see cref="T:System.UIntPtr" /> inicializada en <paramref name="value" />.</returns>
      <param name="value">Entero de 32 bits sin signo. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>Convierte el valor de un entero de 64 bits sin signo en un <see cref="T:System.UIntPtr" />.</summary>
      <returns>Nueva instancia de <see cref="T:System.UIntPtr" /> inicializada en <paramref name="value" />.</returns>
      <param name="value">Entero de 64 bits sin signo. </param>
      <exception cref="T:System.OverflowException">En una plataforma de 32 bits, <paramref name="value" /> es demasiado grande para representarse como <see cref="T:System.UIntPtr" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>Convierte el valor del <see cref="T:System.UIntPtr" /> especificado en un entero de 64 bits sin signo.</summary>
      <returns>El contenido de <paramref name="value" />.</returns>
      <param name="value">Puntero o controlador que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>Convierte el valor del <see cref="T:System.UIntPtr" /> especificado en un puntero a un tipo no especificado.</summary>
      <returns>El contenido de <paramref name="value" />.</returns>
      <param name="value">Puntero o controlador que se va a convertir. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>Convierte el valor del <see cref="T:System.UIntPtr" /> especificado en un entero de 32 bits sin signo.</summary>
      <returns>El contenido de <paramref name="value" />.</returns>
      <param name="value">Puntero o controlador que se va a convertir. </param>
      <exception cref="T:System.OverflowException">En una plataforma de 64 bits, el valor de <paramref name="value" /> es demasiado grande para representarse como un entero de 32 bits sin signo. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>Convierte el puntero especificado a un tipo no especificado en un <see cref="T:System.UIntPtr" />.</summary>
      <returns>Nueva instancia de <see cref="T:System.UIntPtr" /> inicializada en <paramref name="value" />.</returns>
      <param name="value">Puntero a un tipo no especificado. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>Determina si dos instancias especificadas de <see cref="T:System.UIntPtr" /> no son iguales.</summary>
      <returns>true si <paramref name="value1" /> no es igual a <paramref name="value2" />; en caso contrario, false.</returns>
      <param name="value1">Primer puntero o controlador que se va a comparar. </param>
      <param name="value2">Segundo puntero o controlador que se va a comparar. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)">
      <summary>Resta un desplazamiento del valor de un puntero sin signo.</summary>
      <returns>Nuevo puntero sin signo que es el resultado de restar <paramref name="offset" /> de <paramref name="pointer" />.</returns>
      <param name="pointer">Puntero sin signo del que se va a restar el desplazamiento.</param>
      <param name="offset">Desplazamiento que se va a restar.</param>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>Obtiene el tamaño de esta instancia.</summary>
      <returns>Tamaño de un puntero o identificador en esta plataforma, medido en bytes.El valor de esta propiedad es 4 en una plataforma de 32 bits y 8 en una plataforma de 64 bits.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)">
      <summary>Resta un desplazamiento del valor de un puntero sin signo.</summary>
      <returns>Nuevo puntero sin signo que es el resultado de restar <paramref name="offset" /> de <paramref name="pointer" />.</returns>
      <param name="pointer">Puntero sin signo del que se va a restar el desplazamiento.</param>
      <param name="offset">Desplazamiento que se va a restar.</param>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>Convierte el valor de esta instancia a un puntero en un tipo no especificado.</summary>
      <returns>Puntero a <see cref="T:System.Void" />; es decir, puntero a memoria que contiene datos de un tipo no especificado.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>Convierte el valor numérico de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Representación de cadena del valor de esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>Convierte el valor de esta instancia en un entero de 32 bits sin signo.</summary>
      <returns>Entero de 32 bits sin signo igual al valor de esta instancia.</returns>
      <exception cref="T:System.OverflowException">En una plataforma de 64 bits, el valor de esta instancia es demasiado grande para representarse como un entero de 32 bits sin signo. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>Convierte el valor de esta instancia en un entero de 64 bits sin signo.</summary>
      <returns>Entero de 64 bits sin signo igual al valor de esta instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>Campo de solo lectura que representa un puntero o identificador que se ha inicializado en cero.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>Excepción que se produce cuando el sistema operativo deniega el acceso a causa de un error de E/S o de un error de seguridad de un tipo concreto.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UnauthorizedAccessException" />.</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UnauthorizedAccessException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error. </param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UnauthorizedAccessException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción. </param>
      <param name="inner">Excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es una referencia nula (Nothing en Visual Basic), la excepción actual se inicia en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.Uri">
      <summary>Proporciona una representación de objeto de un identificador de recursos uniforme (URI) y un acceso sencillo a las partes del identificador URI.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Uri" /> con el identificador URI especificado.</summary>
      <param name="uriString">Identificador URI. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="uriString" /> es null. </exception>
      <exception cref="T:System.UriFormatException">En el .NET for Windows Store apps o biblioteca de clases Portable, detecte la excepción de la clase base, <see cref="T:System.FormatException" />, en su lugar.<paramref name="uriString" /> está vacía.o bien El esquema especificado en <paramref name="uriString" /> no tiene el formato correcto.Vea <see cref="M:System.Uri.CheckSchemeName(System.String)" />.o bien <paramref name="uriString" /> contiene demasiadas barras diagonales.o bien La contraseña especificada en <paramref name="uriString" /> no es válido.o bien El nombre de host especificado en <paramref name="uriString" /> no es válido.o bien El nombre de archivo especificado en <paramref name="uriString" /> no es válido. o bien El nombre de usuario especificado en <paramref name="uriString" /> no es válido.o bien El nombre de host o de autoridad especificado en <paramref name="uriString" /> no puede terminar en barras diagonales inversas.o bien El número de puerto especificado en <paramref name="uriString" /> no es válido o no se puede analizar.o bien La longitud de <paramref name="uriString" /> superior a 65519 caracteres.o bien La longitud del esquema especificado en <paramref name="uriString" /> superior a 1023 caracteres.o bien Hay una secuencia de caracteres no válidos en <paramref name="uriString" />.o bien La ruta de acceso MS-DOS especificada en <paramref name="uriString" /> debe comenzar con c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Uri" /> con el identificador URI especificado.Este constructor permite especificar si la cadena URI corresponde a un identificador URI relativo, a un identificador URI absoluto, o si está sin determinar.</summary>
      <param name="uriString">Cadena que identifica el recurso que la instancia de <see cref="T:System.Uri" /> va a representar.</param>
      <param name="uriKind">Especifica si la cadena URI es un identificador URI relativo, un identificador URI absoluto, o si está sin determinar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> no es válido. </exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="uriString" /> es null. </exception>
      <exception cref="T:System.UriFormatException">En el .NET for Windows Store apps o biblioteca de clases Portable, detecte la excepción de la clase base, <see cref="T:System.FormatException" />, en su lugar.<paramref name="uriString" /> contiene un URI relativo y <paramref name="uriKind" /> es <see cref="F:System.UriKind.Absolute" />.o<paramref name="uriString" /> contiene un URI absoluto y <paramref name="uriKind" /> es <see cref="F:System.UriKind.Relative" />.o<paramref name="uriString" /> está vacía.o bien El esquema especificado en <paramref name="uriString" /> no tiene el formato correcto.Vea <see cref="M:System.Uri.CheckSchemeName(System.String)" />.o bien <paramref name="uriString" /> contiene demasiadas barras diagonales.o bien La contraseña especificada en <paramref name="uriString" /> no es válido.o bien El nombre de host especificado en <paramref name="uriString" /> no es válido.o bien El nombre de archivo especificado en <paramref name="uriString" /> no es válido. o bien El nombre de usuario especificado en <paramref name="uriString" /> no es válido.o bien El nombre de host o de autoridad especificado en <paramref name="uriString" /> no puede terminar en barras diagonales inversas.o bien El número de puerto especificado en <paramref name="uriString" /> no es válido o no se puede analizar.o bien La longitud de <paramref name="uriString" /> superior a 65519 caracteres.o bien La longitud del esquema especificado en <paramref name="uriString" /> superior a 1023 caracteres.o bien Hay una secuencia de caracteres no válidos en <paramref name="uriString" />.o bien La ruta de acceso MS-DOS especificada en <paramref name="uriString" /> debe comenzar con c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Uri" /> basada en la cadena especificada de identificador URI base y relativo.</summary>
      <param name="baseUri">Identificador URI base. </param>
      <param name="relativeUri">Identificador URI relativo que se va a agregar al identificador URI base. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="baseUri" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> no es absoluto <see cref="T:System.Uri" /> instancia. </exception>
      <exception cref="T:System.UriFormatException">En el .NET for Windows Store apps o biblioteca de clases Portable, detecte la excepción de la clase base, <see cref="T:System.FormatException" />, en su lugar.La dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> está vacío o contiene sólo espacios en blanco.o bien El esquema especificado en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.o bien La dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> contiene demasiadas barras diagonales.o bien La contraseña especificada en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.o bien El nombre de host especificado en el URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.o bien El nombre de archivo especificado en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido. o bien El nombre de usuario especificado en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.o bien El nombre de host o de autoridad especificado en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no puede terminar en barras diagonales inversas.o bien El número de puerto especificado en el URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido o no se puede analizar.o bien La longitud de la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> superior a 65519 caracteres.o bien La longitud del esquema especificado en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> superior a 1023 caracteres.o bien Hay una secuencia de caracteres no válidos en el identificador URI formado mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" />.o bien La ruta de acceso MS-DOS especificada en <paramref name="uriString" /> debe comenzar con c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Uri" /> basada en la combinación de una instancia especificada de <see cref="T:System.Uri" /> base y una instancia de <see cref="T:System.Uri" /> relativo.</summary>
      <param name="baseUri">
        <see cref="T:System.Uri" /> absoluto que es la base de la nueva instancia de <see cref="T:System.Uri" />. </param>
      <param name="relativeUri">Instancia de <see cref="T:System.Uri" /> relativo que se combina con <paramref name="baseUri" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseUri" /> no es absoluto <see cref="T:System.Uri" /> instancia. </exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="baseUri" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> no es absoluto <see cref="T:System.Uri" /> instancia. </exception>
      <exception cref="T:System.UriFormatException">En el .NET for Windows Store apps o biblioteca de clases Portable, detecte la excepción de la clase base, <see cref="T:System.FormatException" />, en su lugar.La dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> está vacío o contiene sólo espacios en blanco.o bien El esquema especificado en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.o bien La dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> contiene demasiadas barras diagonales.o bien La contraseña especificada en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.o bien El nombre de host especificado en el URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.o bien El nombre de archivo especificado en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido. o bien El nombre de usuario especificado en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.o bien El nombre de host o de autoridad especificado en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no puede terminar en barras diagonales inversas.o bien El número de puerto especificado en el URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido o no se puede analizar.o bien La longitud de la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> superior a 65519 caracteres.o bien La longitud del esquema especificado en la dirección URI formada mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" /> superior a 1023 caracteres.o bien Hay una secuencia de caracteres no válidos en el identificador URI formado mediante la combinación <paramref name="baseUri" /> y <paramref name="relativeUri" />.o bien La ruta de acceso MS-DOS especificada en <paramref name="uriString" /> debe comenzar con c:\\.</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>Obtiene la ruta de acceso absoluta del identificador URI.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la ruta de acceso absoluta al recurso.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>Obtiene el identificador URI absoluto.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el identificador URI completo.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>Obtiene el nombre de host DNS (Sistema de nombres de dominio) o la dirección IP y el número de puerto de un servidor.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el componente de autoridad del identificador URI representado por esta instancia.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>Determina si el nombre de host especificado es un nombre DNS válido.</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> que indica el tipo del nombre de host.Si no puede determinarse el tipo del nombre de host o si el nombre del host es null o una cadena de longitud cero, este método devuelve <see cref="F:System.UriHostNameType.Unknown" />.</returns>
      <param name="name">Nombre de host que se va a validar.Puede ser una dirección IPv4 o IPv6, o un nombre de host de Internet.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>Determina si el nombre de esquema especificado es válido.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si el nombre de esquema es válido; en caso contrario, false.</returns>
      <param name="schemeName">Nombre de esquema que se va a validar. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>Compara las partes especificadas de dos identificadores URI utilizando las reglas de comparación especificadas.</summary>
      <returns>Valor <see cref="T:System.Int32" /> que indica la relación léxica entre los componentes <see cref="T:System.Uri" /> comparados.ValorSignificadoMenor que cero<paramref name="uri1" /> es menor que <paramref name="uri2" />.Cero<paramref name="uri1" /> es igual que <paramref name="uri2" />.Mayor que cero<paramref name="uri1" /> es mayor que <paramref name="uri2" />.</returns>
      <param name="uri1">Primer objeto <see cref="T:System.Uri" />.</param>
      <param name="uri2">Segundo objeto <see cref="T:System.Uri" />.</param>
      <param name="partsToCompare">Combinación bit a bit de los valores <see cref="T:System.UriComponents" /> que especifica las partes de <paramref name="uri1" /> y <paramref name="uri2" /> que se van a comparar.</param>
      <param name="compareFormat">Uno de los valores <see cref="T:System.UriFormat" /> que especifica la secuencia de escape de carácter usada al comparar los componentes del identificador URI.</param>
      <param name="comparisonType">Uno de los valores de <see cref="T:System.StringComparison" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> no es válida <see cref="T:System.StringComparison" /> valor.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>Obtiene un nombre de host sin secuencias de escape que es seguro para la resolución DNS.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la parte del host sin escape del identificador URI que es adecuada para la resolución de DNS, o bien la cadena de host sin escape original, si ya es adecuada para la resolución.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>Compara dos instancias de <see cref="T:System.Uri" /> para determinar si sus valores son iguales.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si las dos instancias representan el mismo identificador URI; en caso contrario, false.</returns>
      <param name="comparand">Instancia de <see cref="T:System.Uri" /> o identificador URI que se va a comparar con la instancia actual. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>Convierte una cadena en su representación de escape.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la representación de escape de <paramref name="stringToEscape" />.</returns>
      <param name="stringToEscape">Cadena a la que se van a aplicar secuencias de escape.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="stringToEscape" /> es null. </exception>
      <exception cref="T:System.UriFormatException">En el .NET for Windows Store apps o biblioteca de clases Portable, detecte la excepción de la clase base, <see cref="T:System.FormatException" />, en su lugar.La longitud de <paramref name="stringToEscape" /> superior a 32766 caracteres.</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>Convierte una cadena URI en su representación con secuencias de escape.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la representación de escape de <paramref name="stringToEscape" />.</returns>
      <param name="stringToEscape">Cadena a la que se van a aplicar secuencias de escape.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="stringToEscape" /> es null. </exception>
      <exception cref="T:System.UriFormatException">En el .NET for Windows Store apps o biblioteca de clases Portable, detecte la excepción de la clase base, <see cref="T:System.FormatException" />, en su lugar.La longitud de <paramref name="stringToEscape" /> superior a 32766 caracteres.</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>Obtiene el fragmento de URI de escape.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene información del fragmento de URI.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>Obtiene los componentes especificados de la instancia actual utilizando las secuencias de escape especificadas para los caracteres especiales.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene los componentes.</returns>
      <param name="components">Combinación bit a bit de los valores <see cref="T:System.UriComponents" /> que especifica qué partes de la instancia actual se van a devolver al llamador.</param>
      <param name="format">Uno de los valores <see cref="T:System.UriFormat" /> que controla cómo se utiliza una secuencia de escape para los caracteres especiales. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> no es una combinación de válido <see cref="T:System.UriComponents" /> valores.</exception>
      <exception cref="T:System.InvalidOperationException">Actual <see cref="T:System.Uri" /> no es un URI absoluto.Los identificadores URI relativos no se pueden utilizar con este método.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>Obtiene el código hash del identificador URI.</summary>
      <returns>
        <see cref="T:System.Int32" /> que contiene el valor hash generado por este identificador URI.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Host">
      <summary>Obtiene el componente de host de esta instancia.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el nombre del host.Suele ser el nombre del host DNS o la dirección IP del servidor.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>Obtiene el tipo del nombre de host especificado en el identificador URI.</summary>
      <returns>Miembro de la enumeración <see cref="T:System.UriHostNameType" />.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IdnHost">
      <summary>Nombre de dominio internacional del host compatible con RFC 3490, mediante Punycode según corresponda.</summary>
      <returns>Devuelve el nombre de host, formateado con Punycode según el estándar IDN.<see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>Obtiene un valor que indica si la instancia de <see cref="T:System.Uri" /> es absoluta.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si la instancia de <see cref="T:System.Uri" /> es absoluta; en caso contrario, false.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>Determina si la instancia de <see cref="T:System.Uri" /> actual es una base de la instancia de <see cref="T:System.Uri" /> especificada.</summary>
      <returns>true si la instancia <see cref="T:System.Uri" /> actual es una base de <paramref name="uri" />; de lo contrario, false.</returns>
      <param name="uri">Instancia de <see cref="T:System.Uri" /> especificada que se va a probar. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="uri" /> es null. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>Obtiene un valor que indica si el valor de puerto del identificador URI es el valor predeterminado para este esquema.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si el valor de la propiedad <see cref="P:System.Uri.Port" /> es el puerto predeterminado para este esquema; en caso contrario, false.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>Obtiene un valor que indica si el <see cref="T:System.Uri" /> especificado es un identificador URI de archivo.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si el <see cref="T:System.Uri" /> es un identificador URI de archivo; en caso contrario, false.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>Obtiene un valor que indica si el <see cref="T:System.Uri" /> especificado hace referencia al host local.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si este <see cref="T:System.Uri" /> hace referencia a un host local; en caso contrario, false.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>Obtiene un valor que indica si el <see cref="T:System.Uri" /> especificado es una ruta de acceso UNC (Convención de nomenclatura universal).</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si el <see cref="T:System.Uri" /> es una ruta de acceso UNC; en caso contrario, false.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>Indica si la cadena usada para construir este <see cref="T:System.Uri" /> tiene el formato correcto y no hay que utilizar más secuencias de escape.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si la cadena tiene el formato correcto; en caso contrario, false.</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>Indica si la cadena tiene el formato correcto al intentar construir un URI con ella y garantiza que la cadena no requiere después secuencias de escape.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true  si la cadena tiene el formato correcto; en caso contrario, false.</returns>
      <param name="uriString">Cadena usada para intentar construir un <see cref="T:System.Uri" />.</param>
      <param name="uriKind">Tipo del <see cref="T:System.Uri" /> en <paramref name="uriString" />.</param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>Obtiene una representación del sistema operativo local de un nombre de archivo.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la representación local del sistema operativo de un nombre de archivo.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>Determina la diferencia que existe entre dos instancias de <see cref="T:System.Uri" />.</summary>
      <returns>Si el nombre de host y el esquema de esta instancia de identificador URI y <paramref name="uri" /> son iguales, este método devuelve un <see cref="T:System.Uri" /> relativo que, cuando se anexa a la instancia de identificador URI actual, genera <paramref name="uri" />.Si el nombre de host o el esquema son diferentes, este método devuelve un <see cref="T:System.Uri" /> que representa el parámetro <paramref name="uri" />.</returns>
      <param name="uri">Identificador URI que se va a comparar con el identificador URI actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="uri" /> es null. </exception>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>Determina si dos instancias de <see cref="T:System.Uri" /> tienen el mismo valor.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si las instancias de <see cref="T:System.Uri" /> son equivalentes; en caso contrario, false.</returns>
      <param name="uri1">Instancia de <see cref="T:System.Uri" /> que se va a comparar con <paramref name="uri2" />. </param>
      <param name="uri2">Instancia de <see cref="T:System.Uri" /> que se va a comparar con <paramref name="uri1" />. </param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>Determina si dos instancias de <see cref="T:System.Uri" /> no tienen el mismo valor.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si las dos instancias de <see cref="T:System.Uri" /> no son iguales; en caso contrario, false.Si alguno de los parámetros es null, este método devuelve true.</returns>
      <param name="uri1">Instancia de <see cref="T:System.Uri" /> que se va a comparar con <paramref name="uri2" />. </param>
      <param name="uri2">Instancia de <see cref="T:System.Uri" /> que se va a comparar con <paramref name="uri1" />. </param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>Obtiene la cadena de identificador URI original que se pasó al constructor <see cref="T:System.Uri" />.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el identificador URI exacto que se especificó al construir esta instancia; en caso contrario, <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>Obtiene las propiedades <see cref="P:System.Uri.AbsolutePath" /> y <see cref="P:System.Uri.Query" /> separadas por un signo de interrogación (?).</summary>
      <returns>
        <see cref="T:System.String" /> que contiene las propiedades <see cref="P:System.Uri.AbsolutePath" /> y <see cref="P:System.Uri.Query" /> separadas por un signo de interrogación (?).</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Port">
      <summary>Obtiene el número de puerto de este identificador URI.</summary>
      <returns>Valor <see cref="T:System.Int32" /> que contiene el número de puerto de este identificador URI.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Query">
      <summary>Obtiene la información de consulta incluida en el identificador URI especificado.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la información de consulta incluida en el identificador URI especificado.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>Obtiene el nombre de esquema de este identificador URI.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el esquema de este identificador URI, convertido a minúsculas.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>Obtiene una matriz que contiene los segmentos de ruta de acceso que componen el identificador URI especificado.</summary>
      <returns>Matriz de <see cref="T:System.String" /> que contiene los segmentos de ruta de acceso que componen el identificador URI especificado.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>Obtiene una representación de cadena canónica para la instancia de <see cref="T:System.Uri" /> especificada.</summary>
      <returns>Instancia de <see cref="T:System.String" /> que contiene la representación canónica sin escape de la instancia de <see cref="T:System.Uri" />.Todos son caracteres sin escape, excepto #, ? y %.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>Crea un nuevo <see cref="T:System.Uri" /> usando la <see cref="T:System.String" /> especificada y un <see cref="T:System.UriKind" />.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si el <see cref="T:System.Uri" /> se creó correctamente; en caso contrario, false.</returns>
      <param name="uriString">
        <see cref="T:System.String" /> que representa el <see cref="T:System.Uri" />.</param>
      <param name="uriKind">Tipo de URI.</param>
      <param name="result">Cuando este método finaliza, contiene el <see cref="T:System.Uri" /> construido.</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>Crea un nuevo <see cref="T:System.Uri" /> usando la base especificada y las instancias de <see cref="T:System.String" /> relativo.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si el <see cref="T:System.Uri" /> se creó correctamente; en caso contrario, false.</returns>
      <param name="baseUri">
        <see cref="T:System.Uri" /> base.</param>
      <param name="relativeUri">
        <see cref="T:System.Uri" /> relativo representado como <see cref="T:System.String" />, que se va a agregar al <see cref="T:System.Uri" /> base.</param>
      <param name="result">Cuando este método finaliza, contiene un objeto <see cref="T:System.Uri" /> construido a partir del <paramref name="baseUri" /> y el <paramref name="relativeUri" />.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>Crea un nuevo <see cref="T:System.Uri" /> usando la base especificada y las instancias de <see cref="T:System.Uri" /> relativo.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si el <see cref="T:System.Uri" /> se creó correctamente; en caso contrario, false.</returns>
      <param name="baseUri">
        <see cref="T:System.Uri" /> base. </param>
      <param name="relativeUri">
        <see cref="T:System.Uri" /> relativo que se va a agregar al <see cref="T:System.Uri" /> base. </param>
      <param name="result">Cuando este método finaliza, contiene un objeto <see cref="T:System.Uri" /> construido a partir del <paramref name="baseUri" /> y el <paramref name="relativeUri" />.Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="baseUri" /> es null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>Convierte una cadena en su representación sin secuencias de escape.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la representación sin secuencias de escape de <paramref name="stringToUnescape" />. </returns>
      <param name="stringToUnescape">Cadena a la que se van a quitar las secuencias de escape.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="stringToUnescape" /> es null. </exception>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>Indica que se utilizó una secuencia de escape completa para la cadena de identificador URI antes de crear la instancia de <see cref="T:System.Uri" />.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si el parámetro <paramref name="dontEscape" /> se estableció en true al crear la instancia de <see cref="T:System.Uri" />; en caso contrario, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>Obtiene el nombre de usuario, la contraseña u otra información específica del usuario asociada al identificador URI especificado.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene información del usuario asociada al identificador URI.El valor devuelto no incluye el carácter reservado "@" para delimitar la parte de información de usuario del identificador URI.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.UriComponents">
      <summary>Especifica las partes de <see cref="T:System.Uri" />.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>Datos de <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" />, <see cref="P:System.Uri.Query" /> y <see cref="P:System.Uri.Fragment" />.</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>Datos de <see cref="P:System.Uri.Fragment" />.</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>Datos de <see cref="P:System.Uri.Host" />.</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>Datos de <see cref="P:System.Uri.Host" /> y <see cref="P:System.Uri.Port" />.Si el identificador URI no tiene datos del puerto y se ha asignado un puerto predeterminado a <see cref="P:System.Uri.Scheme" />, se devuelve el puerto predeterminado.Si no hay ningún puerto predeterminado, se devuelve -1.</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>Datos de <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" /> y <see cref="P:System.Uri.Query" />.</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>Especifica que se debe incluir el delimitador.</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>La forma normalizada del <see cref="P:System.Uri.Host" />.</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>Datos de <see cref="P:System.Uri.LocalPath" />.</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>Datos de <see cref="P:System.Uri.LocalPath" /> y <see cref="P:System.Uri.Query" />.Vea también <see cref="P:System.Uri.PathAndQuery" />.</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>Datos de <see cref="P:System.Uri.Port" />.</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>Datos de <see cref="P:System.Uri.Query" />.</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>Datos de <see cref="P:System.Uri.Scheme" />.</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>Datos de <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" /> y <see cref="P:System.Uri.Port" />.</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>Contexto completo de <see cref="T:System.Uri" /> necesario para los serializadores de identificadores uniformes de recursos URI.El contexto incluye el ámbito de IPv6.</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>Datos de <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" /> y <see cref="P:System.Uri.Port" />.Si <see cref="T:System.Uri" /> no tiene datos del puerto y se ha asignado un puerto predeterminado a <see cref="P:System.Uri.Scheme" />, se devuelve el puerto predeterminado.Si no hay ningún puerto predeterminado, se devuelve -1.</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>Datos de <see cref="P:System.Uri.Port" />.Si <see cref="T:System.Uri" /> no tiene datos del puerto y se ha asignado un puerto predeterminado a <see cref="P:System.Uri.Scheme" />, se devuelve el puerto predeterminado.Si no hay ningún puerto predeterminado, se devuelve -1.</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>Datos de <see cref="P:System.Uri.UserInfo" />.</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>Controla cómo se utilizan los caracteres de escape en la información del identificador uniforme de recursos.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>Los caracteres que tienen un significado reservado en los componentes URI solicitados mantienen los caracteres de escape.Para todos los demás no se utilizan caracteres de escape.Vea la sección Comentarios.</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>No se utilizan caracteres de escape.</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>Los caracteres de escape se utilizan de acuerdo con las reglas de RFC 2396.</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>Excepción que se produce cuando se detecta un identificador de recursos uniformes (URI) no válido.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriFormatException" />.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriFormatException" /> con el mensaje especificado.</summary>
      <param name="textString">Cadena con el mensaje de error. </param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriFormatException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="textString">Mensaje que describe la excepción.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
      <param name="e">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>Define tipos de nombre de host para el método <see cref="M:System.Uri.CheckHostName(System.String)" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>Se establece el host, pero no se puede determinar el tipo.</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>El nombre de host es un nombre de host DNS (Sistema de nombres de dominio).</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>El nombre de host es una dirección de host IP (Protocolo de Internet), versión 4.</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>El nombre de host es una dirección de host IP (Protocolo de Internet), versión 6.</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>No se proporciona el tipo del nombre de host.</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>Define los tipos de <see cref="T:System.Uri" /> para <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" /> y varios métodos <see cref="Overload:System.Uri.#ctor" />.</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>El identificador uniforme de recursos es absoluto.</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>El identificador uniforme de recursos es relativo.</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>El tipo de URI está sin determinar.</summary>
    </member>
    <member name="T:System.ValueType">
      <summary>Proporciona la clase base para tipos de valores.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ValueType" />. </summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>Indica si esta instancia y un objeto especificado son iguales.</summary>
      <returns>true si <paramref name="obj" /> y esta instancia son del mismo tipo y representan el mismo valor; en caso contrario, false. </returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Entero de 32 bits con signo, que es el código hash de esta instancia.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>Devuelve el nombre de tipo completo de esta instancia.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene un nombre de tipo completo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Version">
      <summary>Representa el número de versión de un ensamblado, sistema operativo o Common Language Runtime.Esta clase no puede heredarse.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Version" /> usando los valores principal y secundario especificados.</summary>
      <param name="major">Número de versión principal. </param>
      <param name="minor">Número de versión secundaria. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> or <paramref name="minor" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Version" /> usando los valores principal, secundario y de compilación especificados.</summary>
      <param name="major">Número de versión principal. </param>
      <param name="minor">Número de versión secundaria. </param>
      <param name="build">Número de compilación. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, or <paramref name="build" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Version" /> con los números principal, secundario, de compilación y revisión especificados.</summary>
      <param name="major">Número de versión principal. </param>
      <param name="minor">Número de versión secundaria. </param>
      <param name="build">Número de compilación. </param>
      <param name="revision">Número de revisión. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, <paramref name="build" />, or <paramref name="revision" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Version" /> con la cadena especificada.</summary>
      <param name="version">Cadena que contiene los números principal, secundario, de compilación y de revisión en los que cada número está delimitado por un punto ('.'). </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> has fewer than two components or more than four components. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A major, minor, build, or revision component is less than zero. </exception>
      <exception cref="T:System.FormatException">At least one component of <paramref name="version" /> does not parse to an integer. </exception>
      <exception cref="T:System.OverflowException">At least one component of <paramref name="version" /> represents a number greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>Obtiene el valor del componente de compilación del número de versión del objeto <see cref="T:System.Version" /> actual.</summary>
      <returns>Número de compilación, o -1 si el número de compilación no está definido.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>Compara el objeto <see cref="T:System.Version" /> actual con un objeto <see cref="T:System.Version" /> especificado y devuelve una indicación de los valores relativos.</summary>
      <returns>Un entero con signo que indica los valores relativos de los dos objetos, como se muestra en la tabla siguiente.Valor devuelto Significado Menor que cero El objeto <see cref="T:System.Version" /> actual es una versión anterior a <paramref name="value" />. Cero El objeto <see cref="T:System.Version" /> actual es la misma versión que <paramref name="value" />. Mayor que cero El objeto <see cref="T:System.Version" /> actual es una versión posterior a <paramref name="value" />. O bien
                  El valor de <paramref name="value" /> es null.</returns>
      <param name="value">Objeto <see cref="T:System.Version" /> que se va a comparar con el objeto <see cref="T:System.Version" /> actual o null.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Version" /> actual es igual a un objeto especificado.</summary>
      <returns>Es true si el objeto <see cref="T:System.Version" /> actual y <paramref name="obj" /> son objetos <see cref="T:System.Version" /> y cada componente del objeto <see cref="T:System.Version" /> actual coincide con el componente correspondiente de <paramref name="obj" />; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto <see cref="T:System.Version" /> actual o null. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Version" /> actual y un objeto <see cref="T:System.Version" /> especificado representan el mismo valor.</summary>
      <returns>Es true si cada componente del objeto <see cref="T:System.Version" /> actual coincide con el componente correspondiente del parámetro <paramref name="obj" />; de lo contrario, es false.</returns>
      <param name="obj">Objeto <see cref="T:System.Version" /> que se va a comparar con el objeto <see cref="T:System.Version" /> actual o null.</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>Devuelve un código hash del objeto <see cref="T:System.Version" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Version.Major">
      <summary>Obtiene el valor del componente principal del número de versión del objeto <see cref="T:System.Version" /> actual.</summary>
      <returns>Número de versión principal.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Version.MajorRevision">
      <summary>Obtiene los 16 bits superiores del número de revisión.</summary>
      <returns>Entero de 16 bits con signo.</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>Obtiene el valor del componente secundario del número de versión del objeto <see cref="T:System.Version" /> actual.</summary>
      <returns>Número de versión secundaria.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Version.MinorRevision">
      <summary>Obtiene los 16 bits inferiores del número de revisión.</summary>
      <returns>Entero de 16 bits con signo.</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>Determina si los dos objetos <see cref="T:System.Version" /> especificados son iguales.</summary>
      <returns>Es true si <paramref name="v1" /> es igual a <paramref name="v2" />; en caso contrario, es false.</returns>
      <param name="v1">El primer objeto <see cref="T:System.Version" />. </param>
      <param name="v2">El segundo objeto <see cref="T:System.Version" />. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>Determina si el primer objeto <see cref="T:System.Version" /> especificado es mayor que el segundo objeto <see cref="T:System.Version" /> especificado.</summary>
      <returns>Es true si <paramref name="v1" /> es mayor que <paramref name="v2" />; en caso contrario, es false.</returns>
      <param name="v1">El primer objeto <see cref="T:System.Version" />. </param>
      <param name="v2">El segundo objeto <see cref="T:System.Version" />. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>Determina si el primer objeto <see cref="T:System.Version" /> especificado es mayor o igual que el segundo objeto <see cref="T:System.Version" /> especificado.</summary>
      <returns>Es true si <paramref name="v1" /> es mayor o igual que <paramref name="v2" />; en caso contrario, es false.</returns>
      <param name="v1">El primer objeto <see cref="T:System.Version" />. </param>
      <param name="v2">El segundo objeto <see cref="T:System.Version" />. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>Determina si los dos objetos <see cref="T:System.Version" /> especificados no son iguales.</summary>
      <returns>Es true si <paramref name="v1" /> no es igual a <paramref name="v2" />; en caso contrario, es false.</returns>
      <param name="v1">El primer objeto <see cref="T:System.Version" />. </param>
      <param name="v2">El segundo objeto <see cref="T:System.Version" />. </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>Determina si el primer objeto <see cref="T:System.Version" /> especificado es menor que el segundo objeto <see cref="T:System.Version" /> especificado.</summary>
      <returns>Es true si <paramref name="v1" /> es menor que <paramref name="v2" />; en caso contrario, es false.</returns>
      <param name="v1">El primer objeto <see cref="T:System.Version" />. </param>
      <param name="v2">El segundo objeto <see cref="T:System.Version" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>Determina si el primer objeto <see cref="T:System.Version" /> especificado es menor o igual que el segundo objeto <see cref="T:System.Version" />.</summary>
      <returns>Es true si <paramref name="v1" /> es menor o igual que <paramref name="v2" />; en caso contrario, es false.</returns>
      <param name="v1">El primer objeto <see cref="T:System.Version" />. </param>
      <param name="v2">El segundo objeto <see cref="T:System.Version" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.Parse(System.String)">
      <summary>Convierte la representación de cadena de un número de versión en un objeto <see cref="T:System.Version" /> equivalente.</summary>
      <returns>Objeto equivalente al número de versión especificado en el parámetro <paramref name="input" />.</returns>
      <param name="input">Cadena que contiene un número de versión que se va a convertir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> has fewer than two or more than four version components.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">At least one component in <paramref name="input" /> is less than zero.</exception>
      <exception cref="T:System.FormatException">At least one component in <paramref name="input" /> is not an integer.</exception>
      <exception cref="T:System.OverflowException">At least one component in <paramref name="input" /> represents a number that is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>Obtiene el valor del componente de revisión del número de versión del objeto <see cref="T:System.Version" /> actual.</summary>
      <returns>Número de revisión, o -1 si el número de revisión no está definido.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.System#IComparable#CompareTo(System.Object)">
      <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
      <returns>Un entero con signo que indica el orden relativo de esta instancia y <paramref name="value" />.Valor devuelto Significado Menor que cero Esta instancia es anterior a <paramref name="value" /> en el criterio de ordenación.Cero Esta instancia se produce en la misma posición que <paramref name="value" /> en el criterio de ordenación.Mayor que cero Esta instancia sigue a <paramref name="value" /> en el criterio de ordenación.O bien 
                  El valor de <paramref name="value" /> es null. </returns>
      <param name="version">Objeto que se va a comparar con esta instancia o null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Version" /> object. </exception>
    </member>
    <member name="M:System.Version.ToString">
      <summary>Convierte el valor del objeto <see cref="T:System.Version" /> actual en su representación <see cref="T:System.String" /> equivalente.</summary>
      <returns>Representación <see cref="T:System.String" /> de los valores de los componentes principal, secundario, de compilación y de revisión del objeto <see cref="T:System.Version" /> actual, con el siguiente formato.Cada componente está separado por un punto ('.').Los corchetes ('[' y ']') hacen referencia a un componente que no aparecerá en el valor devuelto si el componente no está definido:principal.secundario[.de compilación[.de revisión]] Por ejemplo, si se crea un objeto <see cref="T:System.Version" /> usando el constructor Version(1,1), la cadena devuelta es "1.1".Si se crea un objeto <see cref="T:System.Version" /> usando el constructor Version(1,3,4,2), la cadena devuelta es "1.3.4.2".</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>Convierte el valor del objeto <see cref="T:System.Version" /> actual en su representación <see cref="T:System.String" /> equivalente.Un recuento especificado indica el número de componente que se va a devolver.</summary>
      <returns>Representación <see cref="T:System.String" /> de los valores de los componentes principal, secundario, de compilación y de revisión del objeto <see cref="T:System.Version" /> actual, cada uno separado por un punto ('.').El parámetro <paramref name="fieldCount" /> determina cuántos componentes se devuelven.fieldCount Valor devuelto 0 Cadena vacía (""). 1 principal 2 principal.secundario 3 principal.secundario.de compilación 4 principal.secundario.de compilación.de revisión Por ejemplo, si se crea un objeto <see cref="T:System.Version" /> usando el constructor Version(1,3,5), ToString(2) devuelve "1.3" y ToString(4) produce una excepción.</returns>
      <param name="fieldCount">Número de componentes que se van a devolver.El <paramref name="fieldCount" /> está entre 0 y 4.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> is less than 0, or more than 4.-or- <paramref name="fieldCount" /> is more than the number of components defined in the current <see cref="T:System.Version" /> object. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
      <summary>Intenta convertir la representación de cadena de un número de versión en un objeto <see cref="T:System.Version" /> equivalente y devuelve un valor que indica si la conversión se realizó correctamente o no.</summary>
      <returns>true si el parámetro <paramref name="input" /> se convierte correctamente; en caso contrario, false.</returns>
      <param name="input">Cadena que contiene un número de versión que se va a convertir.</param>
      <param name="result">Cuando este método vuelve, contiene el objeto <see cref="T:System.Version" /> equivalente del número contenido en <paramref name="input" />, si la conversión se realizó correctamente, o un objeto <see cref="T:System.Version" /> cuyos números de versión principal y secundaria son 0 si se produjo un error en la conversión.Si el valor de <paramref name="input" /> es null o <see cref="F:System.String.Empty" />, el valor de <paramref name="result" /> es null cuando se devuelve el método.</param>
    </member>
    <member name="T:System.Void">
      <summary>Especifica un tipo de valor devuelto para un método que no devuelve ningún valor.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.WeakReference">
      <summary>Representa una referencia débil, que hace referencia a un objeto mientras sigue permitiendo que la recolección de elementos no utilizados lo reclame.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.WeakReference" /> que hace referencia al objeto especificado.</summary>
      <param name="target">Objeto del que se va a realizar un seguimiento o null. </param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.WeakReference" /> que hace referencia al objeto especificado y utiliza el seguimiento especificado del restablecimiento.</summary>
      <param name="target">Objeto del que se va a realizar un seguimiento. </param>
      <param name="trackResurrection">Indica cuándo va a detenerse el seguimiento del objeto.Si es true, se realiza un seguimiento del objeto después de la finalización; si es false, sólo se realiza un seguimiento del objeto hasta que tiene lugar la finalización.</param>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>Descarta la referencia al destino representado por el objeto <see cref="T:System.WeakReference" /> actual.</summary>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>Obtiene un valor que indica si el objeto al que hace referencia el objeto <see cref="T:System.WeakReference" /> actual ha sido detectado durante la recolección de elementos no utilizados.</summary>
      <returns>Es true si el objeto al que hace referencia el objeto <see cref="T:System.WeakReference" /> actual no ha sido detectado durante la recolección de elementos no utilizados y sigue siendo accesible; en caso contrario, es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>Obtiene o establece el objeto (destino) al que hace referencia el objeto <see cref="T:System.WeakReference" /> actual.</summary>
      <returns>Es null si el objeto al que hace referencia el objeto <see cref="T:System.WeakReference" /> actual ha sido detectado durante la recolección de elementos no utilizados; en caso contrario, es una referencia al objeto al que hace referencia el objeto <see cref="T:System.WeakReference" /> actual.</returns>
      <exception cref="T:System.InvalidOperationException">La referencia al objeto de destino no es válida.Se puede producir esta excepción mientras se establece esta propiedad si el valor es una referencia nula o si el objeto se ha finalizado durante la operación de establecimiento.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>Obtiene un valor que indica si se debe realizar un seguimiento del objeto al que hace referencia el objeto <see cref="T:System.WeakReference" /> actual después de su finalización.</summary>
      <returns>Es true si se realiza un seguimiento del objeto al que hace referencia el objeto <see cref="T:System.WeakReference" /> actual después de la finalización; o es false si sólo se realiza un seguimiento del objeto hasta que tiene lugar la finalización.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.WeakReference`1">
      <summary>Representa una referencia débil con tipo, que hace referencia a un objeto mientras sigue permitiendo que lo reclame la recolección de elementos no utilizados.</summary>
      <typeparam name="T">Tipo del objeto al que se hace referencia.</typeparam>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.WeakReference`1" /> que hace referencia al objeto especificado.</summary>
      <param name="target">Objeto al que se va a hacer referencia o null.</param>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.WeakReference`1" /> que hace referencia al objeto especificado y usa el seguimiento especificado del restablecimiento.</summary>
      <param name="target">Objeto al que se va a hacer referencia o null.</param>
      <param name="trackResurrection">true para realizar un seguimiento del objeto después de la finalización; false para realizar un seguimiento del objeto hasta que tiene lugar la finalización.</param>
    </member>
    <member name="M:System.WeakReference`1.Finalize">
      <summary>Descarta la referencia al destino representado por el objeto <see cref="T:System.WeakReference`1" /> actual.</summary>
    </member>
    <member name="M:System.WeakReference`1.SetTarget(`0)">
      <summary>Establece el objeto de destino al que hace referencia este objeto <see cref="T:System.WeakReference`1" />.</summary>
      <param name="target">Nuevo objeto de destino.</param>
    </member>
    <member name="M:System.WeakReference`1.TryGetTarget(`0@)">
      <summary>Intenta recuperar el objeto de destino al que hace referencia el objeto <see cref="T:System.WeakReference`1" /> actual.</summary>
      <returns>true si el destino se recuperó; si no, false.</returns>
      <param name="target">Cuando este método vuelve, contiene el objeto de destino, si está disponible.Este parámetro se trata como sin inicializar.</param>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>Define un par clave-valor de diccionario que se puede establecer o recuperar.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>Inicializa una instancia del tipo <see cref="T:System.Collections.DictionaryEntry" /> con la clave y el valor especificados.</summary>
      <param name="key">Objeto definido en cada par clave-valor. </param>
      <param name="value">Definición asociada a <paramref name="key" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null y la versión de .NET Framework es 1.0 o 1.1. </exception>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>Obtiene o establece la clave del par clave-valor.</summary>
      <returns>La clave del par clave-valor.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>Obtiene o establece el valor del par clave-valor.</summary>
      <returns>El valor del par clave-valor.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>Define el tamaño, los enumeradores y los métodos de sincronización para todas las colecciones no genéricas.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de la interfaz <see cref="T:System.Collections.ICollection" /> en un objeto <see cref="T:System.Array" />, a partir de un índice determinado de la clase <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />.<see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.O bien El número de elementos en la interfaz <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la matriz <paramref name="array" /> de destino.O bienEl tipo de la interfaz <see cref="T:System.Collections.ICollection" /> de origen no se puede convertir automáticamente al tipo de la matriz <paramref name="array" /> de destino.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>Obtiene el número de elementos incluidos en <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Número de elementos incluidos en <see cref="T:System.Collections.ICollection" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es true si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>Expone un método que compara dos objetos.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>Compara dos objetos y devuelve un valor que indica si uno de ellos es menor, igual o mayor que el otro.</summary>
      <returns>Entero con signo que indica los valores relativos de <paramref name="x" /> e <paramref name="y" />, como se muestra en la tabla siguiente.Valor Significado Menor que cero <paramref name="x" /> es menor que <paramref name="y" />. Zero <paramref name="x" /> es igual que <paramref name="y" />. Mayor que cero <paramref name="x" /> es mayor que <paramref name="y" />. </returns>
      <param name="x">Primer objeto que se va a comparar. </param>
      <param name="y">Segundo objeto que se va a comparar. </param>
      <exception cref="T:System.ArgumentException">Ni <paramref name="x" /> ni <paramref name="y" /> implementan la interfaz <see cref="T:System.IComparable" />.O bien <paramref name="x" /> y <paramref name="y" /> son de tipos diferentes y ninguno puede controlar comparaciones con el otro. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>Representa una colección no genérica de pares clave-valor.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>Agrega un elemento con la clave y el valor proporcionados al objeto <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">
        <see cref="T:System.Object" /> que se va a utilizar como clave del elemento que se va a agregar. </param>
      <param name="value">
        <see cref="T:System.Object" /> que se va a utilizar como valor del elemento que se va a agregar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />is null. </exception>
      <exception cref="T:System.ArgumentException">Ya existe un elemento con la misma clave en el objeto <see cref="T:System.Collections.IDictionary" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> es de solo lectura.o bien <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>Quita todos los elementos del objeto <see cref="T:System.Collections.IDictionary" />.</summary>
      <exception cref="T:System.NotSupportedException">El objeto <see cref="T:System.Collections.IDictionary" /> es de solo lectura. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave especificada.</summary>
      <returns>trueSi el <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave; de lo contrario, false.</returns>
      <param name="key">Clave que se buscará en el objeto <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />is null. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>Devuelve un objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el objeto <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el objeto <see cref="T:System.Collections.IDictionary" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns>trueSi el <see cref="T:System.Collections.IDictionary" /> objeto tiene un tamaño fijo; de lo contrario, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IDictionary" /> es de solo lectura.</summary>
      <returns>Es true si el objeto <see cref="T:System.Collections.IDictionary" /> es de solo lectura; en caso contrario, es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>Obtiene o establece el elemento con la clave especificada.</summary>
      <returns>Elemento con la clave especificada o null si la clave no existe.</returns>
      <param name="key">La clave del elemento que se obtiene o establece. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />is null. </exception>
      <exception cref="T:System.NotSupportedException">La propiedad está establecida y el objeto <see cref="T:System.Collections.IDictionary" /> es de solo lectura.o bien La propiedad está establecida, <paramref name="key" /> no existe en la colección y el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>Obtiene un objeto <see cref="T:System.Collections.ICollection" /> que contiene las claves del objeto <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Objeto <see cref="T:System.Collections.ICollection" /> que contiene las claves del objeto <see cref="T:System.Collections.IDictionary" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>Quita el elemento con la clave especificada del objeto <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">Clave del elemento que se va a quitar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />is null. </exception>
      <exception cref="T:System.NotSupportedException">El objeto <see cref="T:System.Collections.IDictionary" /> es de solo lectura.o bien <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>Obtiene un objeto <see cref="T:System.Collections.ICollection" /> que contiene los valores del objeto <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Un <see cref="T:System.Collections.ICollection" /> objeto que contiene los valores de la <see cref="T:System.Collections.IDictionary" /> objeto.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>Enumera los elementos de un diccionario no genérico.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>Obtiene la clave y el valor de la entrada de diccionario actual.</summary>
      <returns>Estructura <see cref="T:System.Collections.DictionaryEntry" /> que contiene la clave y el valor de la entrada del diccionario actual.</returns>
      <exception cref="T:System.InvalidOperationException">La interfaz <see cref="T:System.Collections.IDictionaryEnumerator" /> está situada antes de la primera entrada del diccionario o después de la última. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>Obtiene la clave de la entrada de diccionario actual.</summary>
      <returns>Clave del elemento actual de la enumeración.</returns>
      <exception cref="T:System.InvalidOperationException">La interfaz <see cref="T:System.Collections.IDictionaryEnumerator" /> está situada antes de la primera entrada del diccionario o después de la última. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>Obtiene el valor de la entrada de diccionario actual.</summary>
      <returns>Valor del elemento actual de la enumeración.</returns>
      <exception cref="T:System.InvalidOperationException">La interfaz <see cref="T:System.Collections.IDictionaryEnumerator" /> está situada antes de la primera entrada del diccionario o después de la última. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>Expone un enumerador, que admite una iteración simple en una colección no genérica.Para examinar el código fuente de .NET Framework para este tipo, vea el origen de referencia.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Objeto <see cref="T:System.Collections.IEnumerator" /> que puede usarse para recorrer en iteración la colección.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>Admite una iteración simple a través de una colección no genérica.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>Obtiene el elemento actual de la colección.</summary>
      <returns>Elemento actual de la colección.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de la colección.</summary>
      <returns>Es true si el enumerador avanzó con éxito hasta el siguiente elemento; es false si el enumerador alcanzó el final de la colección.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>Define métodos para admitir la comparación de objetos en concepto de igualdad.</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>Determina si los objetos especificados son iguales.</summary>
      <returns>true si los objetos especificados son iguales; en caso contrario, false.</returns>
      <param name="x">Primer objeto que se va a comparar.</param>
      <param name="y">Segundo objeto que se va a comparar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> y <paramref name="y" /> son de tipos diferentes y ninguno puede controlar comparaciones con el otro.</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>Devuelve un código hash para el objeto especificado.</summary>
      <returns>Código hash para el objeto especificado.</returns>
      <param name="obj">
        <see cref="T:System.Object" /> para el que se va a devolver un código hash.</param>
      <exception cref="T:System.ArgumentNullException">El tipo de <paramref name="obj" /> es un tipo de referencia y <paramref name="obj" /> es null.</exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>Representa una colección de objetos no genéricos a los que se puede obtener acceso por índice.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>Agrega un elemento al objeto <see cref="T:System.Collections.IList" />.</summary>
      <returns>Posición en la que se insertó el nuevo elemento o -1 para indicar que el elemento no se insertó en la colección.</returns>
      <param name="value">Objeto que se va a agregar a <see cref="T:System.Collections.IList" />. </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> es de solo lectura.O bien <see cref="T:System.Collections.IList" /> tiene un tamaño fijo. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.IList" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> es de solo lectura. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>Determina si la interfaz <see cref="T:System.Collections.IList" /> contiene un valor específico.</summary>
      <returns>Es true si se encuentra <see cref="T:System.Object" /> en <see cref="T:System.Collections.IList" />; en caso contrario, es false.</returns>
      <param name="value">Objeto que se va a buscar en <see cref="T:System.Collections.IList" />. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>Determina el índice de un elemento específico en la interfaz <see cref="T:System.Collections.IList" />.</summary>
      <returns>Índice de <paramref name="value" />, si se encuentra en la lista; de lo contrario, -1.</returns>
      <param name="value">Objeto que se va a buscar en <see cref="T:System.Collections.IList" />. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en la interfaz <see cref="T:System.Collections.IList" />, en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />. </param>
      <param name="value">Objeto que se va a insertar en <see cref="T:System.Collections.IList" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> es de solo lectura.O bien <see cref="T:System.Collections.IList" /> tiene un tamaño fijo. </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> es una referencia null de la interfaz <see cref="T:System.Collections.IList" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns>Es true si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; de lo contrario, es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.IList" /> es de sólo lectura.</summary>
      <returns>Es true si la interfaz <see cref="T:System.Collections.IList" /> es de solo lectura; de lo contrario, es false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>Obtiene o establece el elemento que se encuentra en el índice especificado.</summary>
      <returns>El elemento en el índice especificado.</returns>
      <param name="index">Índice de base cero del elemento que se va a obtener o establecer. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">La propiedad está establecida y <see cref="T:System.Collections.IList" /> es de solo lectura. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Objeto que se va a quitar de <see cref="T:System.Collections.IList" />. </param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> es de solo lectura.O bien <see cref="T:System.Collections.IList" /> tiene un tamaño fijo. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>Quita el elemento de <see cref="T:System.Collections.IList" /> en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> es de solo lectura.O bien <see cref="T:System.Collections.IList" /> tiene un tamaño fijo. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>Admite la comparación estructural de objetos de colección.</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determina si el objeto de colección actual precede o sigue a otro objeto en el criterio de ordenación, o aparece en la misma posición que él.</summary>
      <returns>Un entero que indica la relación del objeto de colección actual con <paramref name="other" />, como se muestra en la tabla siguiente.Valor devueltoDescripción-1La instancia actual precede a <paramref name="other" />.0La instancia actual y <paramref name="other" /> son iguales.1La instancia actual se encuentra detrás de <paramref name="other" />.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Objeto que compara los miembros del objeto de colección actual con los miembros correspondientes de <paramref name="other" />.</param>
      <exception cref="T:System.ArgumentException">Esta instancia y <paramref name="other" /> no son del mismo tipo.</exception>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>Define métodos para admitir la comparación de objetos y comprobar su igualdad estructural. </summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determina si un objeto es estructuralmente igual que la instancia actual.</summary>
      <returns>Es true si los dos objetos son iguales; de lo contrario, es false.</returns>
      <param name="other">Objeto que se va a comparar con la instancia actual.</param>
      <param name="comparer">Un objeto que determina si la instancia actual y <paramref name="other" /> son iguales. </param>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Devuelve un código hash de la instancia actual.</summary>
      <returns>Código hash de la instancia actual.</returns>
      <param name="comparer">Objeto que calcula el código hash del objeto actual.</param>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>Define métodos para manipular colecciones genéricas.</summary>
      <typeparam name="T">Tipo de los elementos de la colección.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura. </exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>Determina si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> contiene un valor específico.</summary>
      <returns>true si <paramref name="item" /> se encuentra en la matriz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, false.</returns>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.Generic.ICollection`1" /> en un objeto <see cref="T:System.Array" />, a partir de un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.ICollection`1" />.<see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="arrayIndex" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos de <see cref="T:System.Collections.Generic.ICollection`1" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>Número de elementos incluidos en <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de sólo lectura.</summary>
      <returns>true si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; en caso contrario, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>true si <paramref name="item" /> se ha quitado correctamente de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, false.Este método también devuelve false si no se encontró <paramref name="item" /> en la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> original.</returns>
      <param name="item">Objeto que se va a quitar de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>Define un método que un tipo implementa para comparar dos objetos.</summary>
      <typeparam name="T">Tipo de objetos que se van a comparar.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>Compara dos objetos y devuelve un valor que indica si uno de ellos es menor, igual o mayor que el otro.</summary>
      <returns>Entero con signo que indica los valores relativos de <paramref name="x" /> e <paramref name="y" />, como se muestra en la tabla siguiente.Valor Significado Menor que cero<paramref name="x" /> es menor que <paramref name="y" />.Zero<paramref name="x" /> es igual que <paramref name="y" />.Mayor que cero<paramref name="x" /> es mayor que <paramref name="y" />.</returns>
      <param name="x">Primer objeto que se va a comparar.</param>
      <param name="y">Segundo objeto que se va a comparar.</param>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>Representa una colección genérica de pares clave-valor.</summary>
      <typeparam name="TKey">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores del diccionario.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>Agrega un elemento con la clave y el valor proporcionados a <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">Objeto que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value">El objeto que se va a usar como valor del elemento que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />is null.</exception>
      <exception cref="T:System.ArgumentException">Ya existe un elemento con la misma clave en <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>Determina si <see cref="T:System.Collections.Generic.IDictionary`2" /> contiene un elemento con la clave especificada.</summary>
      <returns>trueSi el <see cref="T:System.Collections.Generic.IDictionary`2" /> contiene un elemento con la clave; de lo contrario, false.</returns>
      <param name="key">Clave que se buscará en <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>Obtiene o establece el elemento con la clave especificada.</summary>
      <returns>El elemento con la clave especificada.</returns>
      <param name="key">La clave del elemento que se obtiene o establece.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La propiedad se recupera, pero <paramref name="key" /> no se encuentra.</exception>
      <exception cref="T:System.NotSupportedException">La propiedad está establecida y <see cref="T:System.Collections.Generic.IDictionary`2" /> es de solo lectura.</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>Obtiene un <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Un <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves del objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>Quita el elemento con la clave especificada de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Es true si el elemento se quita correctamente; en caso contrario, es false.Este método también devuelve false si <paramref name="key" /> no se encontró en el original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtiene el valor asociado a la clave especificada.</summary>
      <returns>Es true si el objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" /> contiene un elemento con la clave especificada; en caso contrario, es false.</returns>
      <param name="key">Clave cuyo valor se va a obtener.</param>
      <param name="value">Cuando este método devuelve el resultado, el valor asociado a la clave especificada, si se encuentra la clave; en caso contrario, el valor predeterminado para el tipo del parámetro <paramref name="value" />.Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>Obtiene un <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores en el <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Un <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores en el objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>Expone el enumerador, que admite una iteración simple en una colección de un tipo especificado.Para examinar el código fuente de .NET Framework para este tipo, consulte el fuente de referencia de.</summary>
      <typeparam name="T">Tipo de los objetos que se van a enumerar.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>Admite una iteración simple en una colección genérica.</summary>
      <typeparam name="T">Tipo de los objetos que se van a enumerar.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>Obtiene el elemento de la colección situado en la posición actual del enumerador.</summary>
      <returns>Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>Define métodos para admitir la comparación de objetos en concepto de igualdad.</summary>
      <typeparam name="T">Tipo de objetos que se van a comparar.Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>Determina si los objetos especificados son iguales.</summary>
      <returns>true si los objetos especificados son iguales; en caso contrario, false.</returns>
      <param name="x">Primer objeto de tipo <paramref name="T" /> que se va a comparar.</param>
      <param name="y">Segundo objeto de tipo <paramref name="T" /> que se va a comparar.</param>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>Devuelve un código hash para el objeto especificado.</summary>
      <returns>Código hash para el objeto especificado.</returns>
      <param name="obj">
        <see cref="T:System.Object" /> para el que se va a devolver un código hash.</param>
      <exception cref="T:System.ArgumentNullException">El tipo de <paramref name="obj" /> es un tipo de referencia y <paramref name="obj" /> es null.</exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>Representa una colección de objetos a los que se puede tener acceso individualmente por un índice.</summary>
      <typeparam name="T">Tipo de elementos en la lista.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>Determina el índice de un elemento específico de <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <returns>Índice de <paramref name="item" /> si se encuentra en la lista; en caso contrario, -1.</returns>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.IList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>Inserta un elemento en la interfaz <see cref="T:System.Collections.Generic.IList`1" />, en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item">Objeto que se va a insertar en la interfaz <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> es de solo lectura.</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>Obtiene o establece el elemento que se encuentra en el índice especificado.</summary>
      <returns>El elemento en el índice especificado.</returns>
      <param name="index">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">La propiedad está establecida y <see cref="T:System.Collections.Generic.IList`1" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>Quita el elemento de la interfaz <see cref="T:System.Collections.Generic.IList`1" /> que se encuentra en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> es de solo lectura.</exception>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
      <summary>Representa una colección de elementos fuertemente tipada y de solo lectura.</summary>
      <typeparam name="T">Tipo de los elementos.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
      <summary>Obtiene el número de elementos de la colección.</summary>
      <returns>Número de elementos de la colección. </returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
      <summary>Representa una colección genérica de solo lectura de pares clave-valor.</summary>
      <typeparam name="TKey">Tipo de las claves del diccionario de solo lectura. </typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario de solo lectura. </typeparam>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>Determina si el diccionario de solo lectura contiene un elemento con la clave especificada.</summary>
      <returns>Es true si el diccionario de solo lectura contiene un elemento con la clave especificada; en caso contrario, es false.</returns>
      <param name="key">Clave que se va a localizar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
      <summary>Obtiene el elemento que tiene la clave especificada en el diccionario de solo lectura.</summary>
      <returns>Elemento que tiene la clave especificada en el diccionario de solo lectura.</returns>
      <param name="key">Clave que se va a localizar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La propiedad se recupera, pero <paramref name="key" /> no se encuentra. </exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
      <summary>Obtiene una colección enumerable que contiene las claves del diccionario de solo lectura. </summary>
      <returns>Una colección enumerable que contiene las claves del diccionario de solo lectura.</returns>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtiene el valor que está asociado a la clave especificada.</summary>
      <returns>Es true si el objeto que implementa la interfaz <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> contiene un elemento con la clave especificada; en caso contrario, es false.</returns>
      <param name="key">Clave que se va a localizar.</param>
      <param name="value">Cuando este método devuelve el resultado, el valor asociado a la clave especificada, si se encuentra la clave; en caso contrario, el valor predeterminado para el tipo del parámetro <paramref name="value" />.Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
      <summary>Obtiene una colección enumerable que contiene los valores del diccionario de solo lectura.</summary>
      <returns>Una colección enumerable que contiene los valores del diccionario de solo lectura.</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyList`1">
      <summary>Representa una colección de elementos de solo lectura a los que se puede tener acceso por un índice. </summary>
      <typeparam name="T">Tipo de elementos en la lista de solo lectura. Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo que sea más derivado. Para obtener más información sobre la covarianza y la contravarianza, consulte Covarianza y contravarianza en genéricos.</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
      <summary>Obtiene el elemento en el índice especificado en la lista de solo lectura.</summary>
      <returns>Elemento en el índice especificado en la lista de solo lectura.</returns>
      <param name="index">Índice de base cero del elemento que se va a obtener. </param>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>Proporciona la interfaz base para la abstracción de conjuntos.</summary>
      <typeparam name="T">Tipo de elementos del conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>Agrega un elemento al conjunto actual y devuelve un valor que indica si el elemento se ha agregado correctamente. </summary>
      <returns>true si el elemento se ha agregado al conjunto; false si el elemento ya está en el conjunto.</returns>
      <param name="item">Elemento que se va a agregar al conjunto.</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita del conjunto actual todos los elementos de la colección especificada.</summary>
      <param name="other">Colección de elementos que se van a quitar del conjunto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <returns>Es true si el conjunto actual es un subconjunto apropiado de <paramref name="other" />; de lo contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un supraconjunto apropiado (estricto) de una colección especificada.</summary>
      <returns>Es true si el conjunto actual es un supraconjunto apropiado de <paramref name="other" />; de lo contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si un conjunto es un subconjunto de una colección especificada.</summary>
      <returns>true si el conjunto actual es un subconjunto de <paramref name="other" />; de lo contrario, false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un supraconjunto de una colección especificada.</summary>
      <returns>true si el conjunto actual es un supraconjunto de <paramref name="other" />; de lo contrario, false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual se superpone a la colección especificada.</summary>
      <returns>true si el conjunto actual y <paramref name="other" /> comparten al menos un elemento común; de lo contrario, false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual y la colección especificada contienen los mismos elementos.</summary>
      <returns>true si el conjunto actual es igual a <paramref name="other" />; de lo contrario, false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que únicamente contenga elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos. </summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que contenga todos los elementos que están presentes en el conjunto actual, en la colección especificada o en ambos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />is null.</exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>Excepción que se produce cuando la clave especificada para obtener acceso a un elemento de una colección no coincide con ninguna clave de la colección.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.KeyNotFoundException" /> utilizando los valores de propiedad predeterminados.</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.KeyNotFoundException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Collections.Generic.KeyNotFoundException" /> con el mensaje de error especificado y una referencia a la excepción interna que causó esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción.</param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>Define un par clave-valor que se puede establecer o recuperar.</summary>
      <typeparam name="TKey">Tipo de la clave.</typeparam>
      <typeparam name="TValue">Tipo del valor.</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> con la clave y valor especificados.</summary>
      <param name="key">Objeto definido en cada par clave-valor.</param>
      <param name="value">Definición asociada a <paramref name="key" />.</param>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>Obtiene la clave del par clave-valor.</summary>
      <returns>
        <paramref name="TKey" /> que es la clave de <see cref="T:System.Collections.Generic.KeyValuePair`2" />. </returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>Devuelve una representación de cadena de <see cref="T:System.Collections.Generic.KeyValuePair`2" />, utilizando las representaciones de cadena de la clave y el valor.</summary>
      <returns>Representación de cadena de <see cref="T:System.Collections.Generic.KeyValuePair`2" />, que incluye las representaciones de cadena de la clave y el valor.</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>Obtiene el valor del par clave-valor.</summary>
      <returns>
        <paramref name="TValue" /> que es el valor de <see cref="T:System.Collections.Generic.KeyValuePair`2" />. </returns>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>Proporciona la clase base para una colección genérica.</summary>
      <typeparam name="T">Tipo de los elementos de la colección.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.Collection`1" /> que está vacía.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.Collection`1" /> como contenedor para la lista especificada.</summary>
      <param name="list">Lista ajustada por la nueva colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> es null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>Agrega un objeto al final de la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />. </summary>
      <param name="item">Objeto que se va a agregar al final de la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />.El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>Quita todos los elementos de la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>Quita todos los elementos de la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>Determina si un elemento se encuentra en la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>true si <paramref name="item" /> se encuentra en la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />; en caso contrario, false.</returns>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Collections.ObjectModel.Collection`1" />.El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>Copia la totalidad de <see cref="T:System.Collections.ObjectModel.Collection`1" /> en una matriz <see cref="T:System.Array" /> unidimensional y compatible, comenzando en el índice especificado de la matriz de destino.</summary>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.ObjectModel.Collection`1" />.<see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos en la colección <see cref="T:System.Collections.ObjectModel.Collection`1" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la matriz <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>Obtiene el número de elementos contenido realmente en <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>Número de elementos contenido realmente en <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>Interfaz <see cref="T:System.Collections.Generic.IEnumerator`1" /> para la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición en toda la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>Índice de base cero de la primera aparición de <paramref name="item" /> en la totalidad de <see cref="T:System.Collections.ObjectModel.Collection`1" />, si se encuentra; en caso contrario, -1.</returns>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.List`1" />.El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>Inserta un elemento en la colección <see cref="T:System.Collections.ObjectModel.Collection`1" /> en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item">Objeto que se va a insertar.El valor puede ser null para los tipos de referencia.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.O bien<paramref name="index" /> es mayor que <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>Inserta un elemento en la colección <see cref="T:System.Collections.ObjectModel.Collection`1" /> en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item">Objeto que se va a insertar.El valor puede ser null para los tipos de referencia.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.O bien<paramref name="index" /> es mayor que <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>Obtiene o establece el elemento que se encuentra en el índice especificado.</summary>
      <returns>El elemento en el índice especificado.</returns>
      <param name="index">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.O bien<paramref name="index" /> es mayor o igual que <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />. </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>Obtiene un contenedor de <see cref="T:System.Collections.Generic.IList`1" /> para la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>Contenedor de <see cref="T:System.Collections.Generic.IList`1" /> para la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>Quita la primera aparición de un objeto específico de la colección <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <returns>true si <paramref name="item" /> se quita correctamente; en caso contrario, false.  Este método también devuelve false si no se encontró <paramref name="item" /> en el objeto <see cref="T:System.Collections.ObjectModel.Collection`1" /> original.</returns>
      <param name="item">Objeto que se va a quitar de <see cref="T:System.Collections.ObjectModel.Collection`1" />.El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>Quita el elemento en el índice especificado de <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.O bien<paramref name="index" /> es mayor o igual que <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>Quita el elemento en el índice especificado de <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.O bien<paramref name="index" /> es mayor o igual que <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>Reemplaza el elemento del índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a reemplazar.</param>
      <param name="item">Nuevo valor para el elemento del índice especificado.El valor puede ser null para los tipos de referencia.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.O bien<paramref name="index" /> es mayor que <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de sólo lectura.</summary>
      <returns>true si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; en caso contrario, false.  En la implementación predeterminada de <see cref="T:System.Collections.ObjectModel.Collection`1" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de la interfaz <see cref="T:System.Collections.ICollection" /> en un objeto <see cref="T:System.Array" />, a partir de un índice determinado de la clase <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />.<see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.O bien<paramref name="array" /> no tiene índices de base cero.O bienEl número de elementos en la interfaz <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la matriz <paramref name="array" /> de destino.O bienEl tipo de la interfaz <see cref="T:System.Collections.ICollection" /> de origen no se puede convertir automáticamente al tipo de la matriz <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es true si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es false.  En la implementación predeterminada de <see cref="T:System.Collections.ObjectModel.Collection`1" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.ObjectModel.Collection`1" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>Agrega un elemento al objeto <see cref="T:System.Collections.IList" />.</summary>
      <returns>Posición en la que se insertó el nuevo elemento.</returns>
      <param name="value">
        <see cref="T:System.Object" /> que se va a agregar a la interfaz <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> es de un tipo que no se puede asignar a la interfaz <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determina si la interfaz <see cref="T:System.Collections.IList" /> contiene un valor específico.</summary>
      <returns>Es true si se encuentra <see cref="T:System.Object" /> en <see cref="T:System.Collections.IList" />; en caso contrario, es false.</returns>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> es de un tipo que no se puede asignar a la interfaz <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina el índice de un elemento específico en la interfaz <see cref="T:System.Collections.IList" />.</summary>
      <returns>Índice de <paramref name="value" />, si se encuentra en la lista; de lo contrario, -1.</returns>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> es de un tipo que no se puede asignar a la interfaz <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en la interfaz <see cref="T:System.Collections.IList" />, en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a insertar en <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> es de un tipo que no se puede asignar a la interfaz <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns>Es true si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; de lo contrario, es false.  En la implementación predeterminada de <see cref="T:System.Collections.ObjectModel.Collection`1" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.IList" /> es de sólo lectura.</summary>
      <returns>Es true si la interfaz <see cref="T:System.Collections.IList" /> es de solo lectura; de lo contrario, es false.  En la implementación predeterminada de <see cref="T:System.Collections.ObjectModel.Collection`1" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene o establece el elemento que se encuentra en el índice especificado.</summary>
      <returns>El elemento en el índice especificado.</returns>
      <param name="index">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException">La propiedad ya está establecida y el tipo de <paramref name="value" /> no se puede asignar a la interfaz <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Objeto <see cref="T:System.Object" /> que se quita de la interfaz <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> es de un tipo que no se puede asignar a la interfaz <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>Proporciona la clase base para una colección genérica de solo lectura.</summary>
      <typeparam name="T">Tipo de los elementos de la colección.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que es un contenedor de solo lectura para la lista especificada.</summary>
      <param name="list">Lista que se va a incluir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>Determina si un elemento se encuentra en <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>true si <paramref name="value" /> se encuentra en la matriz <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />; en caso contrario, false.</returns>
      <param name="value">Objeto que se va a buscar en <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copia la totalidad de <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> en una matriz <see cref="T:System.Array" /> unidimensional compatible, comenzando en el índice especificado de la matriz de destino.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.<see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>Obtiene el número de elementos incluidos en la instancia de <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>Número de elementos incluidos en la instancia de <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>Estructura <see cref="T:System.Collections.Generic.IEnumerator`1" /> para la colección <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición en todo el objeto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>Índice de base cero de la primera aparición de <paramref name="item" /> en la totalidad de <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, si se encuentra; en caso contrario, -1.</returns>
      <param name="value">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.List`1" />.El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>Obtiene el elemento en el índice especificado.</summary>
      <returns>Elemento en el índice especificado.</returns>
      <param name="index">Índice de base cero del elemento que se va a obtener.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" />. </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>Devuelve la interfaz <see cref="T:System.Collections.Generic.IList`1" /> incluida en la colección <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>Interfaz <see cref="T:System.Collections.Generic.IList`1" /> incluida en la colección <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />.Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.Generic.ICollection`1" />.Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es true si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es false.En la implementación predeterminada de <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, esta propiedad siempre devuelve true.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Es true si <paramref name="value" /> se ha quitado correctamente de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, es false.</returns>
      <param name="value">Objeto que se va a quitar de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Inserta un elemento en la interfaz <see cref="T:System.Collections.Generic.IList`1" />, en el índice especificado.Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">Objeto que se va a insertar en <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Obtiene el elemento en el índice especificado.Se produce <see cref="T:System.NotSupportedException" /> si se intenta establecer el elemento en el índice especificado.</summary>
      <returns>Elemento en el índice especificado.</returns>
      <param name="index">Índice de base cero del elemento que se va a obtener.</param>
      <exception cref="T:System.NotSupportedException">Always thrown if the property is set.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Quita el elemento de la interfaz <see cref="T:System.Collections.Generic.IList`1" /> que se encuentra en el índice especificado.Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.ICollection" /> en una matriz <see cref="T:System.Array" />, a partir de un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />.<see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es true si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es false.En la implementación predeterminada de <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.En la implementación predeterminada de <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que se puede usar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Agrega un elemento a <see cref="T:System.Collections.IList" />.Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Posición en la que se insertó el nuevo elemento.</returns>
      <param name="value">
        <see cref="T:System.Object" /> que se va a agregar a la interfaz <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.IList" />.Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determina si la interfaz <see cref="T:System.Collections.IList" /> contiene un valor específico.</summary>
      <returns>Es true si <see cref="T:System.Object" /> se encuentra en <see cref="T:System.Collections.IList" />; de lo contrario, es false.</returns>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina el índice de un elemento específico de <see cref="T:System.Collections.IList" />.</summary>
      <returns>Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</returns>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en la interfaz <see cref="T:System.Collections.IList" />, en el índice especificado.Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a insertar en <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns>Es true si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; de lo contrario, es false.En la implementación predeterminada de <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, esta propiedad siempre devuelve true.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.IList" /> es de solo lectura.</summary>
      <returns>Es true si la interfaz <see cref="T:System.Collections.IList" /> es de solo lectura; de lo contrario, es false.En la implementación predeterminada de <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, esta propiedad siempre devuelve true.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene el elemento en el índice especificado.Se produce <see cref="T:System.NotSupportedException" /> si se intenta establecer el elemento en el índice especificado.</summary>
      <returns>Elemento en el índice especificado.</returns>
      <param name="index">Índice de base cero del elemento que se va a obtener.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">Always thrown if the property is set.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.IList" />.Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a quitar de <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Quita el elemento de la interfaz <see cref="T:System.Collections.IList" /> que se encuentra en el índice especificado.Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>Especifica el valor predeterminado para una propiedad.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un valor <see cref="T:System.Boolean" />.</summary>
      <param name="value">
        <see cref="T:System.Boolean" /> que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un entero de 8 bits sin signo.</summary>
      <param name="value">Entero de 8 bits sin signo que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un carácter Unicode.</summary>
      <param name="value">Carácter Unicode que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un número de punto flotante de precisión doble.</summary>
      <param name="value">Número de punto flotante de precisión doble que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un entero de 16 bits con signo.</summary>
      <param name="value">Entero de 16 bits con signo que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un entero de 32 bits con signo.</summary>
      <param name="value">Entero de 32 bits con signo que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un entero de 64 bits con signo.</summary>
      <param name="value">Entero de 64 bits con signo que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que representa el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un número de punto flotante de precisión sencilla.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante <see cref="T:System.String" />.</summary>
      <param name="value">
        <see cref="T:System.String" /> que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" />, convirtiendo el valor especificado en el tipo especificado, y utilizando una referencia cultural invariable como contexto de conversión.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo al que se va a convertir el valor. </param>
      <param name="value">
        <see cref="T:System.String" /> que se puede convertir al tipo mediante el <see cref="T:System.ComponentModel.TypeConverter" /> correspondiente al tipo y a la referencia cultural Inglés de EE.UU. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.DefaultValueAttribute" /> actual.</summary>
      <returns>true si el valor del objeto especificado es igual al del actual; en caso contrario, false.</returns>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>Obtiene el valor predeterminado de la propiedad a la que está enlazado este atributo.</summary>
      <returns>
        <see cref="T:System.Object" /> que representa el valor predeterminado de la propiedad a la que está enlazado este atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>Especifica que una propiedad o método es visible en un editor.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> con <see cref="T:System.ComponentModel.EditorBrowsableState" />.</summary>
      <param name="state">
        <see cref="T:System.ComponentModel.EditorBrowsableState" /> en donde se va a establecer <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" />. </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> actual.</summary>
      <returns>true si el valor del objeto especificado es igual al del actual; en caso contrario, false.</returns>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar. </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>Obtiene el estado examinable de la propiedad o del método.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EditorBrowsableState" /> que es el estado examinable de la propiedad o del método.</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>Especifica el estado examinable de una propiedad o método desde un editor.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>La propiedad o el método es una característica que sólo deben ver los usuarios avanzados.Un editor puede mostrar u ocultar dichas propiedades.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>La propiedad o el método siempre puede examinarse desde un editor.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>La propiedad o el método jamás puede examinarse desde un editor.</summary>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>Indica a los compiladores que se debería omitir una llamada al método o atributo a menos que se defina un símbolo de compilación condicional especificado.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.ConditionalAttribute" />.</summary>
      <param name="conditionString">Cadena que especifica el símbolo de compilación condicional con distinción entre mayúsculas y minúsculas asociado al atributo. </param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>Obtiene el símbolo de compilación condicional asociado al atributo <see cref="T:System.Diagnostics.ConditionalAttribute" />.</summary>
      <returns>Cadena que especifica el símbolo de compilación condicional con distinción entre mayúsculas y minúsculas asociado al atributo <see cref="T:System.Diagnostics.ConditionalAttribute" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>Modifica la generación de código para la depuración Just-In-Time (JIT) en tiempo de ejecución.Esta clase no puede heredarse.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.DebuggableAttribute" />, utilizando los modos de depuración especificados para el compilador Just-In-Time (JIT). </summary>
      <param name="modes">Combinación bit a bit de los valores de <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> que especifican el modo de depuración para el compilador JIT.</param>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>Especifica el modo de depuración para el compilador Just-In-Time (JIT).</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>Da instrucciones al compilador JIT para que siga su comportamiento predeterminado, que incluye habilitar optimizaciones, deshabilitar la compatibilidad con la función Editar y continuar, y utilizar los puntos de secuencia del almacén de símbolos, si es que existen.En la versión 2.0 de .NET Framework, se genera siempre información de seguimiento JIT, el desplazamiento de Lenguaje intermedio de Microsoft (MSIL) correspondiente al desplazamiento de código nativo dentro de un método.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>Deshabilita las optimizaciones realizadas por el compilador para que el archivo de salida sea menor, más rápido y más eficaz.Las optimizaciones causan la reestructuración del código en el archivo de salida, por lo que pueden dificultar la depuración.Normalmente, la optimización debe estar deshabilitada durante la depuración.En versiones 2.0 o posteriores, combine este valor con Default (Default | DisableOptimizations) para habilitar el seguimiento JIT y deshabilitar las optimizaciones.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>Permite modificar y continuar.Permite realizar cambios en el código fuente mientras el programa está en modo de interrupción.La capacidad de editar y continuar depende del compilador.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>Utiliza los puntos de secuencia implícitos de MSIL y no los puntos de secuencia de la base de datos del programa (PDB).La información simbólica suele incluir al menos un desplazamiento de Lenguaje intermedio de Microsoft (MSIL) para cada línea de código fuente.Cuando el compilador Just-In-Time (JIT) está a punto de compilar un método, solicita a los servicios de generación de perfiles una lista de los desplazamientos MSIL que deben conservarse.Estos desplazamientos de MSIL se denominan puntos de secuencia.</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>En la versión 2.0 de .NET Framework, siempre se genera información de seguimiento JIT, y este marcador tiene el mismo efecto que <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />, con la excepción de que la propiedad <see cref="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled" /> es false, lo que no tiene significado alguno en la versión 2.0.</summary>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>Define las opciones de formato que personalizan el análisis de cadenas de algunos métodos de análisis de fecha y hora.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>La fecha y la hora se devuelven como hora coordinada universal (UTC).Si la cadena de entrada denota una hora local, mediante un especificador de zona horaria o <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />, la fecha y hora se convierten de la zona horaria local a UTC.Si la cadena de entrada denota una hora UTC, mediante un especificador de zona horaria o <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />, no se produce ninguna conversión.Si la cadena de entrada no denota ninguna hora local u hora UTC, no se produce ninguna conversión y la propiedad <see cref="P:System.DateTime.Kind" /> resultante es <see cref="F:System.DateTimeKind.Unspecified" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>Los caracteres de espacio en blanco adicionales situados en la mitad de la cadena se deben omitir durante el análisis, salvo si aparecen en los modelos de formato de <see cref="T:System.Globalization.DateTimeFormatInfo" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>Los caracteres de espacio en blanco iniciales se deben omitir durante el análisis, salvo si aparecen en los modelos de formato de <see cref="T:System.Globalization.DateTimeFormatInfo" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>Los caracteres de espacio en blanco finales se deben omitir durante el análisis, salvo si aparecen en los modelos de formato de <see cref="T:System.Globalization.DateTimeFormatInfo" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>Los caracteres de espacio en blanco adicionales situados en cualquier parte de la cadena se deben omitir durante el análisis, salvo si aparecen en los modelos de formato de <see cref="T:System.Globalization.DateTimeFormatInfo" />.Este valor es la combinación de los valores de <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" /> y <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>Si en la cadena analizada no hay ninguna zona horaria especificada, se supone que la cadena denota una hora local. </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>Si en la cadena analizada no hay ninguna zona horaria especificada, se supone que la cadena denota una hora UTC. </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>Si la cadena analizada solo contiene la hora y no contiene la fecha, los métodos de análisis suponen la fecha gregoriana con el año = 1, el mes = 1 y el día = 1.Si este valor no se utiliza, se supone la fecha actual.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>Se deben usar las opciones de formato predeterminadas.Este valor representa el estilo predeterminado de los métodos <see cref="M:System.DateTime.Parse(System.String)" />, <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> y <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" />.</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>El campo <see cref="T:System.DateTimeKind" /> de una fecha se conserva cuando un objeto <see cref="T:System.DateTime" /> se convierte en una cadena mediante el especificador de formato estándar "o" o "r" y, a continuación, la cadena vuelve a convertirse en un objeto <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>Determina los estilos permitidos en argumentos de cadena numéricos que se pasan a los métodos TryParse y Parse de los tipos numéricos enteros y de punto flotante.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>Indica que la cadena numérica puede contener un símbolo de divisa.La propiedad <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> determina los símbolos de divisa válidos.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>Indica que la cadena numérica puede tener una coma decimal.Si el valor <see cref="T:System.Globalization.NumberStyles" /> incluye la marca <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> y la cadena analizada incluye un símbolo de divisa, la propiedad <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> determina el carácter del separador decimal.De lo contrario, el carácter separador decimal viene determinado por la propiedad <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>Indica que la cadena numérica puede tener una notación exponencial.La marca <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> permite a la cadena analizada contener un exponente que comienza con el carácter "E" o "e", un signo positivo opcional o negativo, y un enteroEn otras palabras, analiza correctamente las cadenas con formatonnnExx, nnnE+xx y nnnE-xx.No permite un separador decimal o signo en el significado o mantisa; para permitir que se analicen estos elementos de la cadena, use las marcas <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> y <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> o un estilo compuesto que incluya estas marcas individuales.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>Indica que la cadena numérica representa un valor hexadecimal.Los valores hexadecimales válidos incluyen los dígitos numéricos 0-9 y los dígitos hexadecimales A-F y a-f.Las cadenas analizadas con este estilo no pueden ir precedidas de "0x" o "&amp;h".Una cadena que se analiza con el estilo <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> siempre se interpretará como un valor hexadecimal.Las únicas marcas que se pueden combinar con <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> son <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> y <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />.La enumeración <see cref="T:System.Globalization.NumberStyles" /> incluye un estilo compuesto, <see cref="F:System.Globalization.NumberStyles.HexNumber" />, que consta de estas tres marcas.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>Indica que la cadena numérica puede tener un signo inicial.Los caracteres de signo inicial válidos se determinan mediante las propiedades <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> y <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" />.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>Indica que la cadena analizada puede incluir caracteres de espacio en blanco iniciales.Los caracteres de espacio en blanco válidos tienen los valores Unicode U+0009, U+000A, U+000B, U+000C, U+000D y U+0020.Observe que este es un subconjunto de los caracteres para los que el método <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> devuelve true.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>Indica que la cadena numérica puede tener una pareja de paréntesis para delimitar el número.Los paréntesis indican que la cadena que se va a analizar representa un número negativo.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>Indica que la cadena numérica puede tener separadores de grupo; como símbolos que separan las centenas de los millares.Si el valor <see cref="T:System.Globalization.NumberStyles" /> incluye la marca <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> y la cadena que se va a analizar incluye un símbolo de divisa, la propiedad <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> determina el carácter del separador de grupo válido y la propiedad <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> determina el número de dígitos de cada grupo.De lo contrario, el carácter separador del grupo válido se determina con la propiedad <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> y el número de dígitos de cada grupo se determina con la propiedad <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>Indica que la cadena numérica puede tener un signo final.Los caracteres de signo final válidos se determinan mediante las propiedades <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> y <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" />.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>Indica que la cadena analizada puede incluir caracteres de espacio en blanco finales.Los caracteres de espacio en blanco válidos tienen los valores Unicode U+0009, U+000A, U+000B, U+000C, U+000D y U+0020.Observe que este es un subconjunto de los caracteres para los que el método <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> devuelve true.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>Indica que se utilizan todos los estilos, excepto <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />.Este es un estilo de número compuesto.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>Indica que se utilizan todos los estilos, excepto <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> y <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />.Este es un estilo de número compuesto.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>Indica que se utilizan los estilos <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> y <see cref="F:System.Globalization.NumberStyles.AllowExponent" />.Este es un estilo de número compuesto.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>Indica que se utilizan los estilos <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> y <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />.Este es un estilo de número compuesto.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>Indica que se utilizan los estilos <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> y <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />.Este es un estilo de número compuesto.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>Indica que no se puede encontrar ningún elemento de estilo, como los espacios iniciales o en blanco, separadores de miles o un separador decimal, en la cadena analizada.La cadena que se va a analizar debe constar únicamente de dígitos decimales enteros.</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>Indica que se utilizan los estilos <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />, <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />, <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> y <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.Este es un estilo de número compuesto.</summary>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
      <summary>Define las opciones de formato que personalizan el análisis de cadenas de los métodos <see cref="Overload:System.TimeSpan.ParseExact" /> y <see cref="Overload:System.TimeSpan.TryParseExact" />.</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
      <summary>Indica que la entrada siempre se interpreta como un intervalo de tiempo negativo.</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
      <summary>Indica que la entrada solo se interpreta como un intervalo de tiempo negativo si está presente un signo negativo.</summary>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
      <summary>Excepción que se produce cuando no encuentra parte de un archivo o directorio.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.DirectoryNotFoundException" /> con la cadena de mensaje establecida en un mensaje proporcionado por el sistema y HRESULT establecido en COR_E_DIRECTORYNOTFOUND.</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.DirectoryNotFoundException" /> con la cadena de mensaje establecida en <paramref name="message" /> y HRESULT en COR_E_DIRECTORYNOTFOUND.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.IO.DirectoryNotFoundException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.IO.FileLoadException">
      <summary>Excepción que se produce cuando se encuentra un ensamblado administrado que no se puede cargar.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.FileLoadException" />, estableciendo la propiedad <see cref="P:System.Exception.Message" /> de la nueva instancia en un mensaje proporcionado por el sistema que describe el error, como "No se puede cargar el archivo especificado". Este mensaje tiene en cuenta la referencia cultural del sistema actual.</summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.FileLoadException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.FileLoadException" /> con el mensaje de error especificado y una referencia a la excepción interna que causó esta excepción.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.FileLoadException" /> con un mensaje de error especificado y el nombre de archivo que no se ha podido cargar.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
      <param name="fileName">
        <see cref="T:System.String" /> que contiene el nombre del archivo que no se ha cargado. </param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.FileLoadException" /> con un mensaje de error especificado, el nombre del archivo que no se ha podido cargar y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
      <param name="fileName">
        <see cref="T:System.String" /> que contiene el nombre del archivo que no se ha cargado. </param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="P:System.IO.FileLoadException.FileName">
      <summary>Obtiene el nombre del archivo que causa esta excepción.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el nombre del archivo con la imagen no válida o una referencia nula, si no se ha pasado ningún nombre de archivo al constructor para la instancia actual.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
      <summary>Obtiene el mensaje de error y el nombre del archivo que ha causado esta excepción.</summary>
      <returns>Cadena que contiene el mensaje de error y el nombre del archivo que ha causado esta excepción.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
      <summary>Devuelve el nombre completo de la excepción actual y, posiblemente, el mensaje de error, el nombre de la excepción interna y el seguimiento de la pila.</summary>
      <returns>Cadena que contiene el nombre completo de esta excepción y, posiblemente, el mensaje de error, el nombre de la excepción interna y el seguimiento de la pila, dependiendo de qué constructor <see cref="T:System.IO.FileLoadException" /> se utilice.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>Excepción que se produce cuando se produce un error al intentar tener acceso a un archivo que no existe en el disco.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.FileNotFoundException" /> con la cadena de mensaje establecida en un mensaje proporcionado por el sistema y HRESULT establecido en COR_E_FILENOTFOUND.</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.FileNotFoundException" /> con la cadena de mensaje establecida en <paramref name="message" /> y HRESULT en COR_E_FILENOTFOUND.</summary>
      <param name="message">Descripción del error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.FileNotFoundException" /> con un mensaje de error especificado y una referencia a la excepción interna que es la causa de esta excepción.</summary>
      <param name="message">Descripción del error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.FileNotFoundException" /> con la cadena de mensaje establecida en <paramref name="message" />, especificando el nombre de archivo que no se puede encontrar, y HRESULT en COR_E_FILENOTFOUND.</summary>
      <param name="message">Descripción del error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
      <param name="fileName">Nombre completo del archivo con la imagen no válida. </param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.FileNotFoundException" /> con un mensaje de error especificado y una referencia a la excepción interna que es la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="fileName">Nombre completo del archivo con la imagen no válida. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.FileName">
      <summary>Obtiene el nombre del archivo que no se puede encontrar.</summary>
      <returns>Nombre del archivo, o null si no se ha pasado al constructor un nombre de archivo para esta instancia.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message">
      <summary>Obtiene el mensaje de error que explica la razón de la excepción.</summary>
      <returns>Mensaje de error.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>Devuelve el nombre completo de esta excepción y, posiblemente, el mensaje de error, el nombre de la excepción interna y el seguimiento de la pila.</summary>
      <returns>Nombre completo de esta excepción y, posiblemente, el mensaje de error, el nombre de la excepción interna y el seguimiento de la pila.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.IO.IOException">
      <summary>Excepción que se produce cuando se produce un error de E/S.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.IOException" /> con la cadena de mensaje establecida en la cadena vacía (""), HRESULT en COR_E_IO y la excepción interna en una referencia nula.</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.IOException" /> con la cadena de mensaje establecida en <paramref name="message" />, HRESULT en COR_E_IO y la excepción interna en null.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.IOException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.IOException" /> con la cadena de mensaje establecida en <paramref name="message" /> y HRESULT definido por el usuario.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
      <param name="hresult">Entero que identifica el error que se ha producido. </param>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>Excepción que se produce cuando una ruta de acceso o un nombre de archivo supera la longitud máxima definida por el sistema.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.PathTooLongException" /> con HRESULT establecido en COR_E_PATHTOOLONG.</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.PathTooLongException" /> con la cadena de mensaje establecida en <paramref name="message" /> y HRESULT en COR_E_PATHTOOLONG.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.PathTooLongException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.Se pretende que el contenido de <paramref name="message" /> sea inteligible.El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>Define un atributo personalizado de nombres de compañía para el manifiesto del ensamblado.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyCompanyAttribute" />.</summary>
      <param name="company">Información sobre el nombre de la compañía. </param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>Obtiene la información sobre el nombre de la compañía.</summary>
      <returns>Cadena que contiene el nombre de la compañía.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>Especifica la configuración de la compilación, por ejemplo comercial o de depuración, para un ensamblado.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyConfigurationAttribute" />.</summary>
      <param name="configuration">Configuración del ensamblado. </param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>Obtiene la información de configuración del ensamblado.</summary>
      <returns>Cadena que contiene la información de configuración del ensamblado.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>Define un atributo personalizado de copyright para el manifiesto del ensamblado.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyCopyrightAttribute" />.</summary>
      <param name="copyright">Información de copyright. </param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>Obtiene la información de copyright.</summary>
      <returns>Cadena que contiene la información de copyright.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>Especifica la referencia cultural admitida por el ensamblado.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyCultureAttribute" /> con la referencia cultural que admite el ensamblado con atributos.</summary>
      <param name="culture">Referencia cultural que admite el ensamblado con atributos. </param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>Obtiene la referencia cultural compatible del ensamblado con atributos.</summary>
      <returns>Cadena que contiene el nombre de la referencia cultural compatible.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>Define un alias descriptivo predeterminado para el manifiesto del ensamblado.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" />.</summary>
      <param name="defaultAlias">Información del alias predeterminado del ensamblado. </param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>Obtiene la información del alias predeterminado.</summary>
      <returns>Cadena que contiene la información del alias predeterminado.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>Especifica que el ensamblado no se firmó completamente cuando se creó.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyDelaySignAttribute" />.</summary>
      <param name="delaySign">Es true si la característica que este atributo representa está activada; en caso contrario, es false. </param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>Obtiene un valor que indica el estado del atributo.</summary>
      <returns>Es true si este ensamblado se ha generado con retardo de firma; en caso contrario, es false.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>Proporciona una descripción de texto para un ensamblado.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyDescriptionAttribute" />.</summary>
      <param name="description">Descripción del ensamblado. </param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>Obtiene la información de descripción del ensamblado.</summary>
      <returns>Cadena que contiene la descripción del ensamblado.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>Indica a un compilador que utilice un número de versión específico para el recurso de versión del archivo Win32.No es necesario que la versión del archivo Win32 sea la misma que el número de versión del ensamblado.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyFileVersionAttribute" />, especificando la versión del archivo.</summary>
      <param name="version">Versión del archivo. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> es null. </exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>Obtiene el nombre del recurso de versión del archivo Win32.</summary>
      <returns>Cadena que contiene el nombre del recurso de versión.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>Especifica una combinación bit a bit de marcas <see cref="T:System.Reflection.AssemblyNameFlags" /> para un ensamblado, describiendo las opciones del compilador Just-In-Time (JIT), si el ensamblado es redestinable y si tiene una clave pública completa o con símbolo.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> con la combinación especificada de marcas <see cref="T:System.Reflection.AssemblyNameFlags" />.</summary>
      <param name="assemblyFlags">Una combinación bit a bit de marcas <see cref="T:System.Reflection.AssemblyNameFlags" /> que representan las opciones del compilador Just-In-time (JIT), la longevidad, si un ensamblado es redestinable y si tiene una clave pública completa o con símbolo.</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>Obtiene un valor entero que representa la combinación de marcas <see cref="T:System.Reflection.AssemblyNameFlags" /> especificadas cuando se creó esta instancia de atributo.</summary>
      <returns>Un valor entero que representa una combinación bit a bit de marcas <see cref="T:System.Reflection.AssemblyNameFlags" />.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>Define información de versión adicional para el manifiesto del ensamblado.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" />.</summary>
      <param name="informationalVersion">Información de la versión del ensamblado. </param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>Obtiene la información de la versión.</summary>
      <returns>Cadena que contiene la información de la versión.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>Especifica el nombre de un archivo que contiene el par de claves utilizado para generar un nombre seguro.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase AssemblyKeyFileAttribute con el nombre del archivo que contiene el par de claves para generar un nombre seguro para el ensamblado con atributos.</summary>
      <param name="keyFile">Nombre del archivo que contiene el par de claves. </param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>Obtiene el nombre del archivo que contiene el par de claves utilizado para generar un nombre seguro para el ensamblado con atributos.</summary>
      <returns>Cadena que contiene el nombre del archivo que contiene el par de claves.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>Especifica el nombre de un contenedor de claves dentro del CSP que contiene el par de claves utilizado para generar un nombre seguro.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> con el nombre del contenedor que incluye el par de claves utilizado para generar un nombre seguro para el ensamblado con atributos.</summary>
      <param name="keyName">Nombre del contenedor que incluye el par de claves. </param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>Obtiene el nombre del contenedor que incluye el par de claves que se utiliza para generar un nombre seguro para el ensamblado con atributos.</summary>
      <returns>Cadena que contiene el nombre del contenedor que incluye el par de claves relevante.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyMetadataAttribute">
      <summary>Define un par de metadatos clave‑valor para el ensamblado representativo.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyMetadataAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyMetadataAttribute" /> usando la clave y valor de metadatos especificados.</summary>
      <param name="key">Clave de metadatos.</param>
      <param name="value">Valor de los metadatos.</param>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Key">
      <summary>Obtiene la clave de los metadatos.</summary>
      <returns>Clave de metadatos.</returns>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Value">
      <summary>Obtiene el valor de metadatos.</summary>
      <returns>Valor de los metadatos.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>Proporciona información sobre una referencia de tipo <see cref="T:System.Reflection.Assembly" />.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>Especifica que no hay ninguna marca en vigor.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>Especifica que se forma una clave pública a partir de la clave pública completa en lugar del token de clave pública.</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>Especifica que el ensamblado se puede redestinar a un ensamblado de otro publicador de software en tiempo de ejecución.Este valor es compatible con la infraestructura de .NET Framework y no está pensado para utilizarse directamente desde el código.</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>Define un atributo personalizado de nombre de producto para el manifiesto del ensamblado.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyProductAttribute" />.</summary>
      <param name="product">Información de nombre del producto. </param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>Obtiene la información de nombre del producto.</summary>
      <returns>Cadena que contiene el nombre del producto.</returns>
    </member>
    <member name="T:System.Reflection.AssemblySignatureKeyAttribute">
      <summary>Proporciona la migración de una clave de nombre seguro anterior más sencilla a una clave más grande con un algoritmo hash más seguro.</summary>
    </member>
    <member name="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
      <summary>Crea una nueva instancia de la clase <see cref="T:System.Reflection.AssemblySignatureKeyAttribute" /> con la clave pública y la contrafirma especificadas.</summary>
      <param name="publicKey">La clave pública o de identidad.</param>
      <param name="countersignature">Contrasignatura, que es la parte de clave de signatura de la clave de nombre seguro.</param>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
      <summary>Obtiene la contrafirma para el nombre seguro del ensamblado.</summary>
      <returns>Contrasignatura para esta clave de signatura.</returns>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey">
      <summary>Obtiene la clave pública para el nombre seguro usado para firmar el ensamblado.</summary>
      <returns>La clave pública de este ensamblado.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>Especifica una descripción para un ensamblado.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyTitleAttribute" />.</summary>
      <param name="title">Título del ensamblado. </param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>Obtiene la información de título del ensamblado.</summary>
      <returns>Título del ensamblado. </returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>Define un atributo personalizado de marca comercial para el manifiesto del ensamblado.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyTrademarkAttribute" />.</summary>
      <param name="trademark">Información de marca comercial. </param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>Obtiene la información de marca comercial.</summary>
      <returns>Un valor String que contiene la información de marca comercial.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>Especifica la versión del ensamblado con atributos.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase AssemblyVersionAttribute con el número de versión del ensamblado con atributos.</summary>
      <param name="version">Número de versión del ensamblado con atributos. </param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>Obtiene el número de versión del ensamblado con atributos.</summary>
      <returns>Cadena que contiene el número de versión del ensamblado.</returns>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>Define el miembro de un tipo que es el miembro predeterminado utilizado por <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. </summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.DefaultMemberAttribute" />.</summary>
      <param name="memberName">Valor String que contiene el nombre del miembro al que se va a invocar.Este puede ser un constructor, método, propiedad o campo.Se debe especificar un atributo de invocación adecuado cuando se invoca el miembro.El miembro predeterminado de una clase se puede especificar pasando un valor String vacío como nombre del miembro.El miembro predeterminado de un tipo se marca con el atributo personalizado DefaultMemberAttribute o se marca en COM de la forma habitual. </param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>Obtiene el nombre del atributo.</summary>
      <returns>Cadena que representa el nombre del miembro.</returns>
    </member>
    <member name="T:System.Reflection.ProcessorArchitecture">
      <summary>Identifica el procesador y los bits por palabra de la plataforma de destino mediante un archivo ejecutable.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Amd64">
      <summary>Un procesador AMD de 64 bits sólo.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Arm">
      <summary>Procesador ARM.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.IA64">
      <summary>Un procesador AMD de 64 bits sólo.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.MSIL">
      <summary>Neutral respecto al procesador y los bits por palabra.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.None">
      <summary>Una combinación desconocida o no especificada de procesador y bits por palabra.</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.X86">
      <summary>Un procesador Intel de 32 bits, o nativo o en el entorno Windows on Windows en una plataforma de 64 bits (WOW64).</summary>
    </member>
    <member name="T:System.Runtime.GCLargeObjectHeapCompactionMode">
      <summary>[Compatible con .NET Framework 4.5.1 y versiones posteriores] Indica si la siguiente recolección de elementos no utilizados de bloqueo compacta el montón de objetos grandes (LOH). </summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce">
      <summary>El montón de objetos grandes (LOH) se compactará durante la siguiente recolección de elementos no utilizados de bloqueo de segunda generación. </summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.Default">
      <summary>No se compacta el montón de objetos grandes (LOH).</summary>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>Ajusta la hora a la que el recolector de elementos no utilizados entra en su aplicación.   </summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>Deshabilita la simultaneidad de la recolección de elementos no utilizados y recupera los objetos en una llamada en lote.Éste es el modo más intrusivo.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>Permite la simultaneidad de la recolección de elementos no utilizados y recupera los objetos mientras la aplicación se esté ejecutando.Este es el modo predeterminado para la recolección de elementos no utilizados en una estación de trabajo y es menos intrusivo que <see cref="F:System.Runtime.GCLatencyMode.Batch" />.Equilibra la capacidad de respuesta y el rendimiento.</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>Permite una recolección de elementos no utilizados que realiza una recuperación de objetos más conservadora.Las recolecciones completas solo se producen si el sistema necesita memoria, mientras que las recolecciones de la generación 0 y generación 1 pueden ocurrir con mayor frecuencia</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.SustainedLowLatency">
      <summary>Habilita la recolección de elementos no usados que intenta minimizar la latencia durante un período prolongado.El recolector intenta realizar solo generación 0, generación 1 y recolecciones simultáneas de generación 2.Las colecciones completas de bloqueo pueden producirse si el sistema tiene poca memoria.</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>Especifica la configuración de la recolección de elementos no utilizados para el proceso actual. </summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>Obtiene un valor que indica si la recolección de elementos no utilizados del servidor está habilitada.</summary>
      <returns>Es true si la recolección de elementos no utilizados del servidor está habilitada; en caso contrario, es false.</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode">
      <summary>[Se admite en el.NET Framework 4.5.1 y versiones posteriores] Obtiene o establece un valor que indica si una recolección de elementos no utilizados de bloqueo completo compacta el montón de objetos grandes (LOH). </summary>
      <returns>Uno de los valores de enumeración que indica si una recolección de elementos no utilizados bloqueada completa compacta el LOH. </returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>Obtiene o establece el modo de latencia actual para la recolección de elementos no utilizados.</summary>
      <returns>Uno de los valores de enumeración que especifica el modo de latencia. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El <see cref="P:System.Runtime.GCSettings.LatencyMode" /> propiedad se establece en un valor no válido. O bienEl <see cref="P:System.Runtime.GCSettings.LatencyMode" /> propiedad no puede establecerse en <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" />. </exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>Especifica el nombre de la propiedad que tiene acceso al campo al que se aplicó el atributo.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase AccessedThroughPropertyAttribute con el nombre de la propiedad utilizada para obtener acceso al campo al que se aplicó el atributo.</summary>
      <param name="propertyName">Nombre de la propiedad utilizada para obtener acceso al campo al que se aplicó el atributo. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>Obtiene el nombre de la propiedad utilizada para obtener acceso al campo al que se aplicó el atributo.</summary>
      <returns>Nombre de la propiedad utilizada para obtener acceso al campo al que se aplicó el atributo.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute">
      <summary>Indica si un método está marcado con el modificador Async (Visual Basic) o el modificadorasync (Referencia de C#).</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute" />.</summary>
      <param name="stateMachineType">El objeto de tipo para el tipo de máquina de estados subyacente que se va a usar para implementar un método de máquina de estados.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
      <summary>Permite obtener la ruta de acceso completa del archivo de origen que contiene el llamador.Esta es la ruta de acceso al archivo en el momento de la compilación.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerFilePathAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
      <summary>Permite obtener el número de línea en el archivo de origen en el que se llama al método.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerLineNumberAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
      <summary>Permite obtener el método o el nombre de propiedad del autor de la llamada al método.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>Controla la rigurosidad del código generado por el compilador Just-in-time (JIT) de Common Language Runtime.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> con las relajaciones de compilación especificadas.</summary>
      <param name="relaxations">Relajaciones de compilación. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>Obtiene las relajaciones de compilación especificadas cuando se construye el objeto actual.</summary>
      <returns>Relajaciones de compilación especificadas cuando se construye el objeto actual.Utilice la enumeración <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> con la propiedad <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>Distingue un elemento generado por compilador de otro generado por el usuario.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
      <summary>Permite a los compiladores adjuntar dinámicamente campos de objeto a objetos administrados.</summary>
      <typeparam name="TKey">Tipo de referencia al que se adjunta el campo. </typeparam>
      <typeparam name="TValue">Tipo del campo.Debe ser un tipo de referencia.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
      <summary>Agrega una clave a la tabla.</summary>
      <param name="key">Clave que se va a agregar.El parámetro <paramref name="key" /> representa el objeto al que se adjunta la propiedad.</param>
      <param name="value">Valor de propiedad de la clave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> ya existe.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize">
      <summary>Garantiza que se liberan los recursos y se realizan otras operaciones de limpieza cuando el recolector de elementos no utilizados reclama el <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> objeto. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
      <summary>Busca de forma atómica una clave especificada en la tabla y devuelve el valor correspondiente.Si la clave no existe en la tabla, el método invoca el constructor predeterminado de la clase que representa el valor de la tabla para crear un valor enlazado a la clave especificada.</summary>
      <returns>Valor correspondiente a <paramref name="key" />, si <paramref name="key" /> ya existe en la tabla; de lo contrario, un nuevo valor creado por el constructor predeterminado de la clase definida por el parámetro de tipo genérico <paramref name="TValue" />.</returns>
      <param name="key">Clave que se va a buscar.El parámetro <paramref name="key" /> representa el objeto al que se adjunta la propiedad.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <exception cref="T:System.MissingMethodException">En las API de .NET para aplicaciones de la Tienda Windows o en la Biblioteca de clases portable, encuentre la excepción de la clase base, <see cref="T:System.MissingMemberException" />, en su lugar.La clase que representa el valor de la tabla no define un constructor predeterminado.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
      <summary>Busca de forma atómica una clave especificada en la tabla y devuelve el valor correspondiente.Si la clave no existe en la tabla, el método invoca un método de devolución de llamada para crear un valor enlazado a la clave especificada.</summary>
      <returns>Valor adjuntado a <paramref name="key" />, si <paramref name="key" /> ya existe en la tabla; de lo contrario, el nuevo valor devuelto por el delegado <paramref name="createValueCallback" />.</returns>
      <param name="key">Clave que se va a buscar.El parámetro <paramref name="key" /> representa el objeto al que se adjunta la propiedad.</param>
      <param name="createValueCallback">Delegado para un método que puede crear un valor para el parámetro <paramref name="key" /> dado.Tiene un único parámetro de tipo <paramref name="TKey" /> y devuelve un valor de tipo <paramref name="TValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> o <paramref name="createValueCallback" /> es null.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
      <summary>Quita una clave y su valor de la tabla.</summary>
      <returns>Es true si la clave se encuentra y se quita; de lo contrario, es false.</returns>
      <param name="key">Clave que se va a quitar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
      <summary>Obtiene el valor de la clave especificada.</summary>
      <returns>Es true si se encuentra <paramref name="key" />; en caso contrario, es false.</returns>
      <param name="key">Clave que representa un objeto con una propiedad adjunta.</param>
      <param name="value">Cuando este método devuelve un valor, contiene el valor de la propiedad adjunta.Si <paramref name="key" /> no se encuentra, <paramref name="value" /> contiene el valor predeterminado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
      <summary>Representa un método que crea un valor no predeterminado que se va a agregar como parte de un par clave-valor a un objeto <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" />. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.Invoke(`0)"></member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>Define un valor constante que un compilador puede hacer persistir para un parámetro de método o campo.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" />. </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>Obtiene el valor constante almacenado por este atributo.</summary>
      <returns>Valor constante almacenado por este atributo.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>Hace persistir una constante <see cref="T:System.DateTime" /> de 8 bytes para un campo o parámetro.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>Inicializa una nueva instancia de la clase DateTimeConstantAttribute con el número de marcas de 100 nanosegundos que representan la fecha y la hora de esta instancia.</summary>
      <param name="ticks">Número de marcas de 100 nanosegundos que representan la fecha y la hora de esta instancia. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>Obtiene el número de marcas de 100 nanosegundos que representan la fecha y la hora de esta instancia.</summary>
      <returns>Número de marcas de 100 nanosegundos que representan la fecha y la hora de esta instancia.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>Almacena el valor de una constante <see cref="T:System.Decimal" /> en los metadatos.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> con los valores enteros con signo especificados. </summary>
      <param name="scale">Factor de escala de la potencia de 10 que indica el número de dígitos que se encuentra a la derecha del separador decimal.Los valores válidos son del 0 al 28, ambos inclusive.</param>
      <param name="sign">Un valor de 0 indica un valor positivo y un valor de 1, un valor negativo.</param>
      <param name="hi">Los 32 bits superiores del <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> de 96 bits.</param>
      <param name="mid">Los 32 bits intermedios del <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> de 96 bits.</param>
      <param name="low">Los 32 bits inferiores del <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> de 96 bits.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> con los valores enteros sin signo especificados.</summary>
      <param name="scale">Factor de escala de la potencia de 10 que indica el número de dígitos que se encuentra a la derecha del separador decimal.Los valores válidos son del 0 al 28, ambos inclusive.</param>
      <param name="sign">Un valor de 0 indica un valor positivo y un valor de 1, un valor negativo. </param>
      <param name="hi">Los 32 bits superiores del <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> de 96 bits. </param>
      <param name="mid">Los 32 bits intermedios del <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> de 96 bits. </param>
      <param name="low">Los 32 bits inferiores del <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> de 96 bits. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> &gt; 28. </exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>Obtiene la constante decimal almacenada en este atributo.</summary>
      <returns>Constante decimal almacenada en este atributo.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute">
      <summary>Indica que los miembros privados contenidos en los tipos de un ensamblado no están disponibles para la reflexión. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la <see cref="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute" /> clase. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>Indica que un método es un método de extensión, o que una clase o ensamblado contiene los métodos de extensión.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" />. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>Indica que un campo se debería tratar como si contuviera un número fijo de elementos del tipo primitivo especificado.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" />. </summary>
      <param name="elementType">El tipo de los elementos contenidos en el búfer.</param>
      <param name="length">Número de elementos que hay en el búfer.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>Obtiene el tipo de los elementos contenidos en el búfer fijo. </summary>
      <returns>Tipo de los elementos.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>Obtiene el número de elementos que hay en el búfer fijo. </summary>
      <returns>Número de elementos que hay en el búfer fijo.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.FormattableStringFactory">
      <summary>Proporciona un método estático para crear un objeto <see cref="T:System.FormattableString" /> a partir de una cadena de formato compuesto y sus argumentos. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FormattableStringFactory.Create(System.String,System.Object[])">
      <summary>Crea una instancia <see cref="T:System.FormattableString" /> a partir de una cadena de formato compuesto y sus argumentos. </summary>
      <returns>Objeto que representa la cadena de formato compuesto y sus argumentos. </returns>
      <param name="format">Cadena de formato compuesto. </param>
      <param name="arguments">Argumentos cuyas representaciones de cadena se van a insertar en la cadena de resultado. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="format" /> es null. O bienEl valor de <paramref name="arguments" /> es null. </exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>Indica el nombre por el cual se conoce a un indizador en los lenguajes de programación que no son compatibles directamente con indizadores.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" />.</summary>
      <param name="indexerName">Nombre del indizador, tal como se muestra a otros lenguajes. </param>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>Especifica que los tipos que normalmente solo son visibles en el ensamblado actual también se pueden ver en un ensamblado especificado.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> con el nombre del ensamblado de confianza especificado. </summary>
      <param name="assemblyName">El nombre de un ensamblado de confianza.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>Obtiene el nombre del ensamblado de confianza para el que todos los tipos y miembros de tipo marcados con la palabra clave internal se van ha hacer visibles. </summary>
      <returns>Cadena que representa el nombre de un ensamblado de confianza.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsConst">
      <summary>Indica que el tipo modificado tiene un modificador const.Esta clase no puede heredarse.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>Define una propiedad para tener acceso al valor al que hace referencia un objeto.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>Obtiene o establece el valor al que hace referencia un objeto.</summary>
      <returns>El valor al que hace referencia un objeto.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>Marca un campo como volátil.Esta clase no puede heredarse.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute">
      <summary>Indica si un método de Visual Basic se marca con el modificador Iterator.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute" />.</summary>
      <param name="stateMachineType">El objeto de tipo para el tipo de máquina de estados subyacente que se va a usar para implementar un método de máquina de estados.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>Especifica los detalles sobre el modo de implementar un método.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> con el valor de <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> especificado.</summary>
      <param name="methodImplOptions">Valor de <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> que especifica las propiedades del método al que se aplicó el atributo. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>Obtiene el valor de <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> que describe el método al que se aplicó el atributo.</summary>
      <returns>Valor de <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> que describe el método al que se aplicó el atributo.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>Define los detalles sobre el modo de implementar un método.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining">
      <summary>Se debería utilizar el método en línea si es posible.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>El método no se puede poner entre líneas.La alineación es una optimización por la que una llamada de método se reemplaza con el cuerpo del método.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>Método no se ha optimizado mediante el compilador Just-In-Time (JIT) o la generación de código nativo (vea Ngen.exe) al depurar los posibles problemas de generación de código.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>Signatura del método se exporta tal y como se declara.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
      <summary>Identifica un ensamblado como ensamblado de referencia, que contiene metadatos pero no contiene código ejecutable.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" />. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> usando la descripción especificada. </summary>
      <param name="description">Descripción del ensamblado de referencia. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
      <summary>Obtiene la descripción del ensamblado de referencia.</summary>
      <returns>Descripción del ensamblado de referencia.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>Especifica si las excepciones que no derivan de la clase <see cref="T:System.Exception" /> se ajustan con un objeto <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" />. </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>Obtiene o establece un valor que indica si se deben ajustar las excepciones que no deriven de la clase <see cref="T:System.Exception" /> con un objeto <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />.</summary>
      <returns>true si hay que ajustar las excepciones que no derivan de la clase <see cref="T:System.Exception" /> con un objeto <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />; de lo contrario, false.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>Proporciona un conjunto de propiedades y métodos estáticos que proporcionan funcionalidad para los compiladores.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack">
      <summary>Asegura que el espacio de pila restante es suficiente para ejecutar la función media de .NET Framework.</summary>
      <exception cref="T:System.InsufficientExecutionStackException">El espacio de pila disponible es insuficiente para ejecutar la función media de .NET Framework.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>Sirve como función hash para un objeto concreto, y es apropiado para su utilización en algoritmos hash y estructuras de datos que usan códigos hash, como las tablas hash.</summary>
      <returns>Código hash para el objeto identificado por el parámetro <paramref name="o" />.</returns>
      <param name="o">Objeto cuyo código hash se va a recuperar. </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>Encuadra un tipo de valor.</summary>
      <returns>Copia encuadrada de <paramref name="obj" /> en el caso de que sea una clase de valor; de lo contrario, se devuelve el propio <paramref name="obj" />.</returns>
      <param name="obj">Tipo de valor que se va a encuadrar. </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>Proporciona un modo rápido de inicializar una matriz a partir de los datos almacenados en un módulo.</summary>
      <param name="array">Matriz que se va a inicializar. </param>
      <param name="fldHandle">Identificador de campo que especifica la ubicación de los datos que se utilizan para inicializar la matriz. </param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>Obtiene el desplazamiento, en bytes, hasta los datos de la cadena especificada.</summary>
      <returns>El desplazamiento de bytes se realiza desde el inicio del objeto <see cref="T:System.String" /> hasta el primer carácter de la cadena.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>Ejecuta un método constructor de clase especificado.</summary>
      <param name="type">Controlador de tipo que especifica el método constructor de clase que se va a ejecutar. </param>
      <exception cref="T:System.TypeInitializationException">El inicializador de clase produce una excepción. </exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.StateMachineAttribute">
      <summary>Permite determinar si un método es un método de equipo de estado.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.StateMachineAttribute" />.</summary>
      <param name="stateMachineType">El objeto de tipo para el tipo de máquina de estados subyacente generado por el compilador para implementar el método de máquina de estados.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType">
      <summary>Devuelve el objeto de tipo para el tipo de equipo de estado subyacente generado por el compilador para implementar el método de equipo de estado.</summary>
      <returns>Obtiene el objeto de tipo para el tipo de equipo de estado subyacente generado por el compilador para implementar el método de equipo de estado.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>Contiene una referencia a un valor.</summary>
      <typeparam name="T">Tipo del valor al que <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> hace referencia.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>Inicializa una nueva clase StrongBox que puede recibir un valor cuando se utiliza en una llamada de referencia.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> mediante el uso del valor proporcionado. </summary>
      <param name="value">Valor al que <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> hará referencia.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>Obtiene o establece el valor al que <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> hace referencia.</summary>
      <returns>El valor al que <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> hace referencia.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>Representa el valor al que <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> hace referencia.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>Especifica una clase <see cref="T:System.Type" /> de origen en otro ensamblado. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" />. </summary>
      <param name="assemblyFullName">Clase <see cref="T:System.Type" /> de origen de otro ensamblado. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="assemblyFullName" /> es null o está vacío.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>Obtiene el nombre calificado con el ensamblado del tipo de origen.</summary>
      <returns>Nombre calificado con el ensamblado del tipo de origen.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>Especifica un destino <see cref="T:System.Type" /> en otro ensamblado. </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> especificando un destino <see cref="T:System.Type" />. </summary>
      <param name="destination">El destino <see cref="T:System.Type" /> de otro ensamblado.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>Obtiene el destino <see cref="T:System.Type" /> en otro ensamblado.</summary>
      <returns>El destino <see cref="T:System.Type" /> de otro ensamblado.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>Especifica que un tipo contiene una matriz no administrada que podría provocar un desbordamiento.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
      <summary>Representa una excepción cuya estado se captura en un punto determinado del código. </summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
      <summary>Crea un objeto <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> que representa la excepción especificada en el punto actual del código. </summary>
      <returns>Un objeto que representa la excepción especificada en el punto actual del código. </returns>
      <param name="source">Excepción cuyo estado se captura y que está representada por el objeto devuelto. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> es null. </exception>
    </member>
    <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
      <summary>Obtiene la excepción representada por la instancia actual. </summary>
      <returns>Excepción representada por la instancia actual. </returns>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
      <summary>Produce la excepción representada por el objeto <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> actual, después de restaurar el estado que se guardó cuando se capturó la excepción. </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>Indica qué juego de caracteres deben utilizar las cadenas cuya referencia se va calcular.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>Calcula las referencias de las cadenas como cadenas de caracteres de varios bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>Calcula referencias de las cadenas como caracteres Unicode de 2 bytes.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>Controla la accesibilidad a COM de un tipo o miembro administrado individual o de todos los tipos de un ensamblado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase ComVisibleAttribute.</summary>
      <param name="visibility">Es true para indicar que el tipo es visible para COM; en caso contrario, es false.De manera predeterminada, es true.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>Obtiene un valor que indica si el tipo COM es visible.</summary>
      <returns>Es true si el tipo es visible; en caso contrario, es false.El valor predeterminado es true.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>Indica la posición física de los campos dentro de la representación no administrada de una clase o de una estructura.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> con la posición de desplazamiento en la estructura al comienzo del campo.</summary>
      <param name="offset">Desplazamiento en bytes desde el comienzo de la estructura al comienzo del campo. </param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>Obtiene el desplazamiento desde el comienzo de la estructura al comienzo del campo.</summary>
      <returns>Desplazamiento desde el comienzo de la estructura al comienzo del campo.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>Controla el diseño de un objeto cuando se exporta a código no administrado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>El motor en tiempo de ejecución elige un diseño apropiado para los miembros de un objeto en la memoria no administrada.Los objetos definidos con este miembro de enumeración no se pueden exponer fuera del código administrado.Si se intenta hacer esto, se genera una excepción.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>La posición exacta de cada miembro de un objeto en memoria no administrada se controla explícitamente, sujeta al valor del campo <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />.Cada miembro debe utilizar <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> para indicar la posición del campo dentro del tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>Los miembros del objeto se disponen secuencialmente, en el orden en que aparecen cuando se exporta a la memoria no administrada.Los miembros se disponen de acuerdo con el empaquetado especificado en <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> y pueden no ser contiguos.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>Indica que el cálculo de referencias de los datos debe realizarse del destinatario de la llamada al llamador.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.OutAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>Le permite controlar el diseño físico de los campos de datos de una clase o una estructura en la memoria.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> con el miembro de enumeración <see cref="T:System.Runtime.InteropServices.LayoutKind" /> especificado.</summary>
      <param name="layoutKind">Uno de los valores de enumeración que especifica cómo debe organizarse la clase o la estructura. </param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>Indica si las referencias de los campos de datos de cadena dentro de la clase deben calcularse como LPWSTR o LPSTR de forma predeterminada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>Controla la alineación de los campos de datos de una clase o una estructura en la memoria.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>Indica el tamaño absoluto de la clase o estructura.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>Obtiene el valor de <see cref="T:System.Runtime.InteropServices.LayoutKind" /> que especifica la forma en que está organizada la clase o estructura.</summary>
      <returns>Uno de los valores de enumeración que especifica cómo se organiza la clase o la estructura.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
      <summary>Identifica la versión de .NET Framework con la que se compiló un ensamblado concreto.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
      <summary>Inicializa una instancia de la clase <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" /> especificando la versión de .NET Framework con la que se compiló un ensamblado.</summary>
      <param name="frameworkName">Versión de .NET Framework con la que se compiló el ensamblado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> es null.</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
      <summary>Obtiene el nombre para mostrar de la versión de .NET Framework con la que se compiló un ensamblado.</summary>
      <returns>Nombre para mostrar de la versión de .NET Framework.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
      <summary>Obtiene el nombre de la versión de .NET Framework con la que se compiló un ensamblado concreto.</summary>
      <returns>Nombre de la versión de .NET Framework con la que se compiló el ensamblado.</returns>
    </member>
    <member name="T:System.Security.AllowPartiallyTrustedCallersAttribute">
      <summary>Permite que código de confianza parcial llame a un ensamblado.Sin esta declaración, solo los llamadores de plena confianza pueden utilizar el ensamblado.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" />. </summary>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
      <summary>Especifica que el código o un ensamblado realiza las operaciones críticas para la seguridad.</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecurityCriticalAttribute" />. </summary>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>La excepción que se produce cuando se detecta un error de seguridad.</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecurityException" /> con las propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecurityException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecurityException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="inner">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="inner" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>Devuelve una representación de la <see cref="T:System.Security.SecurityException" /> actual.</summary>
      <returns>Representación en forma de cadena de la <see cref="T:System.Security.SecurityException" /> actual.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
      <summary>Identifica tipos o miembros como críticos para la seguridad y accesibles de forma segura mediante código transparente.</summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecuritySafeCriticalAttribute" />. </summary>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
      <summary>Especifica que un ensamblado no puede producir una elevación de privilegios. </summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecurityTransparentAttribute" />. </summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>Excepción que se produce cuando la directiva de seguridad requiere que el código tenga seguridad de tipos y el proceso de comprobación no puede comprobar este punto.</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.VerificationException" /> con las propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.VerificationException" /> con un mensaje explicativo.</summary>
      <param name="message">Mensaje que indica el motivo de la excepción. </param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.VerificationException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción. </param>
      <param name="innerException">La excepción que es la causa de la excepción actual.Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se produce en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>Representa una cadena de caracteres modificable.Esta clase no puede heredarse.Para examinar el código fuente de .NET Framework para este tipo, consulte el fuente de referencia de.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.StringBuilder" />.</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.StringBuilder" /> con la capacidad especificada.</summary>
      <param name="capacity">Sugerencia de tamaño inicial de la instancia. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.StringBuilder" /> que empieza con una capacidad concreta y puede aumentar hasta un máximo especificado.</summary>
      <param name="capacity">Sugerencia de tamaño inicial de <see cref="T:System.Text.StringBuilder" />. </param>
      <param name="maxCapacity">Número máximo de caracteres que puede contener la cadena actual. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> es menor que uno, <paramref name="capacity" /> es menor que cero, o <paramref name="capacity" /> es mayor que <paramref name="maxCapacity" />. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.StringBuilder" /> con la cadena especificada.</summary>
      <param name="value">Cadena usada para inicializar el valor de la instancia.Si <paramref name="value" /> es null, el nuevo <see cref="T:System.Text.StringBuilder" /> contendrá la cadena vacía (o sea, <see cref="F:System.String.Empty" />).</param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.StringBuilder" /> con la cadena y capacidad especificadas.</summary>
      <param name="value">Cadena usada para inicializar el valor de la instancia.Si <paramref name="value" /> es null, el nuevo <see cref="T:System.Text.StringBuilder" /> contendrá la cadena vacía (o sea, <see cref="F:System.String.Empty" />).</param>
      <param name="capacity">Sugerencia de tamaño inicial de <see cref="T:System.Text.StringBuilder" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.StringBuilder" /> a partir de la subcadena y capacidad especificadas.</summary>
      <param name="value">Cadena que contiene la subcadena usada para inicializar el valor de esta instancia.Si <paramref name="value" /> es null, el nuevo <see cref="T:System.Text.StringBuilder" /> contendrá la cadena vacía (o sea, <see cref="F:System.String.Empty" />).</param>
      <param name="startIndex">Posición de <paramref name="value" /> en que comienza la subcadena. </param>
      <param name="length">Número de caracteres de la subcadena. </param>
      <param name="capacity">Sugerencia de tamaño inicial de <see cref="T:System.Text.StringBuilder" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero.O bien <paramref name="startIndex" /> y <paramref name="length" /> no son una posición dentro de <paramref name="value" />. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un valor booleano especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor booleano que se va a agregar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un entero sin signo de 8 bits especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un carácter Unicode especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Carácter Unicode que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char*,System.Int32)">
      <summary>Agrega una matriz de caracteres Unicode a partir de una dirección especificada a esta instancia. </summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado. </returns>
      <param name="value">Un puntero a una matriz de caracteres. </param>
      <param name="valueCount">El número de caracteres de la matriz. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> es menor que cero. O bienSi se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" />es un puntero nulo. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>Anexa a esta instancia un número especificado de copias de la representación en forma de cadena de un carácter Unicode.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Carácter que se va a anexar. </param>
      <param name="repeatCount">Número de veces que se va a anexar <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> es menor que cero.O bien Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <exception cref="T:System.OutOfMemoryException">Memoria insuficiente.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>Anexa a esta instancia la representación en forma de cadena de los caracteres Unicode de una matriz especificada.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Matriz de caracteres que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>Anexa a esta instancia la representación en forma de cadena de una submatriz de caracteres Unicode especificados.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Matriz de caracteres. </param>
      <param name="startIndex">Posición inicial en <paramref name="value" />. </param>
      <param name="charCount">Número de caracteres que se van a anexar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es null y <paramref name="startIndex" /> y <paramref name="charCount" /> son distintos de cero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> es menor que cero.O bien <paramref name="startIndex" /> es menor que cero.O bien <paramref name="startIndex" /> + <paramref name="charCount" /> es mayor que la longitud de <paramref name="value" />.O bien Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un número decimal especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un número de punto flotante de precisión doble especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un entero con signo de 16 bits especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un entero con signo de 32 bits especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un entero con signo de 64 bits especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un objeto especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Objeto que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un entero con signo de 8 bits especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un número de punto flotante de precisión sencilla especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>Anexa a esta instancia una copia de la cadena especificada.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Cadena que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>Anexa a esta instancia una copia de una subcadena especificada.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Cadena que contiene la subcadena que se va a anexar. </param>
      <param name="startIndex">Posición inicial de la subcadena dentro de <paramref name="value" />. </param>
      <param name="count">Número de caracteres de <paramref name="value" /> que se van a anexar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es null y <paramref name="startIndex" /> y <paramref name="count" /> son distintos de cero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> menor que cero.O bien <paramref name="startIndex" /> menor que cero.O bien <paramref name="startIndex" /> + <paramref name="count" /> es mayor que la longitud de <paramref name="value" />.O bien Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un entero sin signo de 16 bits especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un entero sin signo de 32 bits especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>Anexa a esta instancia la representación en forma de cadena de un entero sin signo de 64 bits especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Valor que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)">
      <summary>Anexa a esta instancia la cadena que se devuelve al procesar una cadena con formato compuesto, que contiene cero o más elementos de formato.Cada elemento de formato se reemplaza por la representación de cadena de un único argumento mediante un proveedor de formato especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.Después de la operación de anexado, esta instancia contiene los datos que existían antes de la operación, el sufijo de una copia de <paramref name="format" /> en qué formato de cualquier especificación se reemplaza por la representación de cadena de <paramref name="arg0" />.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <param name="format">Cadena de formato compuesto (vea Comentarios). </param>
      <param name="arg0">El objeto al que se va a aplicar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es válido. O bienEl índice de un elemento de formato es menor que 0 (cero), o mayor o igual a uno (1). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La longitud de la cadena expandida superaría <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>Anexa a esta instancia la cadena que se devuelve al procesar una cadena con formato compuesto, que contiene cero o más elementos de formato.Cada elemento de formato se reemplaza por la representación de cadena de cualquiera de los dos argumentos mediante un proveedor de formato especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.Después de la operación de anexado, esta instancia contiene todos los datos que existían antes de la operación, seguidos de una copia de <paramref name="format" /> como sufijo, en la que cualquier especificación de formato se reemplaza con la representación en forma de cadena del argumento de objeto correspondiente.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <param name="format">Cadena de formato compuesto (vea Comentarios). </param>
      <param name="arg0">Primer objeto al que se va a dar formato. </param>
      <param name="arg1">Segundo objeto al que se va a dar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es válido. O bienEl índice de un elemento de formato es menor que 0 (cero), o mayor o igual a 2 (dos). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La longitud de la cadena expandida superaría <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>Anexa a esta instancia la cadena que se devuelve al procesar una cadena con formato compuesto, que contiene cero o más elementos de formato.Cada elemento de formato se reemplaza por la representación de cadena de cualquiera de los tres argumentos mediante un proveedor de formato especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.Después de la operación de anexado, esta instancia contiene todos los datos que existían antes de la operación, seguidos de una copia de <paramref name="format" /> como sufijo, en la que cualquier especificación de formato se reemplaza con la representación en forma de cadena del argumento de objeto correspondiente.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <param name="format">Cadena de formato compuesto (vea Comentarios). </param>
      <param name="arg0">Primer objeto al que se va a dar formato. </param>
      <param name="arg1">Segundo objeto al que se va a dar formato. </param>
      <param name="arg2">Tercer objeto al que se va a dar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es válido. O bienEl índice de un elemento de formato es menor que 0 (cero), o mayor o igual a 3 (tres). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La longitud de la cadena expandida superaría <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>Anexa a esta instancia la cadena que se devuelve al procesar una cadena con formato compuesto, que contiene cero o más elementos de formato.Cada elemento de formato se reemplaza con la representación de cadena del argumento correspondiente de una matriz de parámetros, utilizando el proveedor de formato especificado.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.Después de la operación de anexado, esta instancia contiene todos los datos que existían antes de la operación, seguidos de una copia de <paramref name="format" /> como sufijo, en la que cualquier especificación de formato se reemplaza con la representación en forma de cadena del argumento de objeto correspondiente.</returns>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. </param>
      <param name="format">Cadena de formato compuesto (vea Comentarios). </param>
      <param name="args">Matriz de objetos a la que se va a dar formato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es válido. O bienEl índice de un elemento de formato es menor que 0 (cero) o mayor o igual que la longitud de la matriz <paramref name="args" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La longitud de la cadena expandida superaría <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
      <summary>Anexa a esta instancia la cadena que se devuelve al procesar una cadena con formato compuesto, que contiene cero o más elementos de formato.Cada elemento de formato se reemplaza por la representación en forma de cadena de un único argumento.</summary>
      <returns>Referencia a la instancia con <paramref name="format" /> anexado.Cada elemento de formato de <paramref name="format" /> se reemplaza por la representación en forma de cadena de <paramref name="arg0" />.</returns>
      <param name="format">Cadena de formato compuesto (vea Comentarios). </param>
      <param name="arg0">Objeto al que se va a aplicar el formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es válido. O bienEl índice de un elemento de formato es menor que 0 (cero) o mayor que, o igual que 1.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La longitud de la cadena expandida superaría <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
      <summary>Anexa a esta instancia la cadena que se devuelve al procesar una cadena con formato compuesto, que contiene cero o más elementos de formato.Cada elemento de formato se reemplaza por la representación en forma de cadena de uno de dos argumentos.</summary>
      <returns>Referencia a la instancia con <paramref name="format" /> anexado.Cada elemento de formato de <paramref name="format" /> se reemplaza con la representación de cadena del argumento de objeto correspondiente.</returns>
      <param name="format">Cadena de formato compuesto (vea Comentarios). </param>
      <param name="arg0">Primer objeto al que se va a dar formato. </param>
      <param name="arg1">Segundo objeto al que se va a dar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es válido.O bienEl índice de un elemento de formato es menor que 0 (cero) o mayor que, o igual que 2. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La longitud de la cadena expandida superaría <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>Anexa a esta instancia la cadena que se devuelve al procesar una cadena con formato compuesto, que contiene cero o más elementos de formato.Cada elemento de formato se reemplaza por la representación en forma de cadena de uno de tres argumentos.</summary>
      <returns>Referencia a la instancia con <paramref name="format" /> anexado.Cada elemento de formato de <paramref name="format" /> se reemplaza con la representación de cadena del argumento de objeto correspondiente.</returns>
      <param name="format">Cadena de formato compuesto (vea Comentarios). </param>
      <param name="arg0">Primer objeto al que se va a dar formato. </param>
      <param name="arg1">Segundo objeto al que se va a dar formato. </param>
      <param name="arg2">Tercer objeto al que se va a dar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es válido.O bienEl índice de un elemento de formato es menor que 0 (cero) o mayor que, o igual que 3.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La longitud de la cadena expandida superaría <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>Anexa a esta instancia la cadena que se devuelve al procesar una cadena con formato compuesto, que contiene cero o más elementos de formato.Cada elemento de formato se reemplaza con la representación de cadena del argumento correspondiente de una matriz de parámetros.</summary>
      <returns>Referencia a la instancia con <paramref name="format" /> anexado.Cada elemento de formato de <paramref name="format" /> se reemplaza con la representación de cadena del argumento de objeto correspondiente.</returns>
      <param name="format">Cadena de formato compuesto (vea Comentarios). </param>
      <param name="args">Matriz de objetos a la que se va a dar formato. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> o <paramref name="args" /> es null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es válido. O bienEl índice de un elemento de formato es menor que 0 (cero) o mayor o igual que la longitud de la matriz <paramref name="args" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La longitud de la cadena expandida superaría <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>Anexa el terminador de línea predeterminado al final del objeto <see cref="T:System.Text.StringBuilder" /> actual.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>Anexa una copia de la cadena especificada seguida del terminador de línea predeterminado al final del objeto <see cref="T:System.Text.StringBuilder" /> actual.</summary>
      <returns>Referencia a esta instancia después de que se complete la operación de anexado.</returns>
      <param name="value">Cadena que se va a anexar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>Obtiene o establece el número máximo de caracteres que puede contener la memoria asignada por la instancia en uso.</summary>
      <returns>Número máximo de caracteres que puede contener la memoria asignada por la instancia en uso.Su valor puede oscilar entre <see cref="P:System.Text.StringBuilder.Length" /> a <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor especificado para una operación determinada es menor que la longitud actual de esta instancia.O bien El valor especificado para una determinada operación es mayor que la capacidad máxima. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>Obtiene o establece el carácter en la posición de carácter especificada en la instancia.</summary>
      <returns>Carácter Unicode en la posición <paramref name="index" />.</returns>
      <param name="index">Posición del carácter. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> queda fuera de los límites de esta instancia al establecer un carácter. </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> queda fuera de los límites de esta instancia al obtener un carácter. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>Quita todos los caracteres de la instancia de <see cref="T:System.Text.StringBuilder" /> actual.</summary>
      <returns>Objeto cuya propiedad <see cref="P:System.Text.StringBuilder.Length" /> tiene un valor 0 (cero).</returns>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Copia los caracteres de un segmento especificado de esta instancia al segmento especificado de una matriz <see cref="T:System.Char" /> de destino.</summary>
      <param name="sourceIndex">Posición inicial de esta instancia de donde se copiarán los caracteres.El índice está basado en cero.</param>
      <param name="destination">Matriz en la que se copiarán los caracteres.</param>
      <param name="destinationIndex">Posición inicial de <paramref name="destination" /> en la que se copiarán los caracteres.El índice está basado en cero.</param>
      <param name="count">Número de caracteres que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" /> o <paramref name="count" /> es menor que cero.O bien<paramref name="sourceIndex" /> es mayor que la longitud de la instancia.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> + <paramref name="count" /> es mayor que la longitud de esta instancia.O bien<paramref name="destinationIndex" /> + <paramref name="count" /> es mayor que la longitud de <paramref name="destination" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>Garantiza que la capacidad de la instancia de <see cref="T:System.Text.StringBuilder" /> corresponde como mínimo al valor especificado.</summary>
      <returns>Nueva capacidad de esta instancia.</returns>
      <param name="capacity">Capacidad mínima que se va a garantizar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero.O bien Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <returns>true si esta instancia y <paramref name="sb" /> tienen los mismos valores de cadena, <see cref="P:System.Text.StringBuilder.Capacity" /> y <see cref="P:System.Text.StringBuilder.MaxCapacity" />; en caso contrario, false.</returns>
      <param name="sb">Objeto que se va a comparar con esta instancia o null. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>Inserta en la instancia la representación en forma de cadena de un valor booleano en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia.</exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>Inserta en la instancia la representación en forma de cadena de un entero de 8 bits sin signo, en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>Inserta en la instancia la representación en forma de cadena de un carácter Unicode concreto en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia.O bien Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>Inserta en la instancia la representación en forma de cadena de una matriz concreta de caracteres Unicode en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Matriz de caracteres que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia.O bien Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Inserta en la instancia la representación en forma de cadena de una submatriz concreta de caracteres Unicode en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Matriz de caracteres. </param>
      <param name="startIndex">Índice inicial de <paramref name="value" />. </param>
      <param name="charCount">Número de caracteres que se van a insertar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es null y <paramref name="startIndex" /> y <paramref name="charCount" /> son distintos de cero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />, <paramref name="startIndex" /> o <paramref name="charCount" /> es menor que cero.O bien <paramref name="index" /> es mayor que la longitud de la instancia.O bien <paramref name="startIndex" /> y <paramref name="charCount" /> no son una posición dentro de <paramref name="value" />.O bien Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>Inserta en la instancia la representación en forma de cadena de un número decimal en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>Inserta en la instancia la representación en forma de cadena de un número de punto flotante de doble precisión en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>Inserta en esta instancia la representación en forma de cadena de un entero de 16 bits con signo especificado, en la posición del carácter que se haya indicado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>Inserta en esta instancia la representación en forma de cadena de un entero de 32 bits con signo especificado, en la posición del carácter que se haya indicado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>Inserta en la instancia la representación en forma de cadena de un entero de 64 bits con signo, en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>Inserta en la instancia la representación en forma de cadena de un objeto en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Objeto que se va a insertar o null. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>Inserta en esta instancia la representación en forma de cadena de un entero de 8 bits con signo especificado, en la posición del carácter que se haya indicado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>Inserta en la instancia la representación en forma de cadena de un número de punto flotante de precisión sencilla en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>Inserta una cadena en la instancia en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Cadena que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de la instancia en cuestión. O bienLa longitud actual del objeto <see cref="T:System.Text.StringBuilder" /> más la longitud de <paramref name="value" /> supera <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>Inserta en la instancia una o más copias de una cadena concreta en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Cadena que se va a insertar. </param>
      <param name="count">Número de veces que se va a insertar <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de la instancia en cuestión.O bien <paramref name="count" /> es menor que cero. </exception>
      <exception cref="T:System.OutOfMemoryException">La longitud actual del objeto <see cref="T:System.Text.StringBuilder" /> más la longitud de <paramref name="value" /> del número de veces de que se inserta <paramref name="count" /> supera <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>Inserta en esta instancia la representación en forma de cadena de un entero de 16 bits sin signo, en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>Inserta en esta instancia la representación en forma de cadena de un entero de 32 bits sin signo, en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>Inserta en esta instancia la representación en forma de cadena de un entero de 64 bits sin signo, en la posición del carácter que se haya especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de inserción.</returns>
      <param name="index">Posición en la que comienza la inserción en la instancia. </param>
      <param name="value">Valor que se va a insertar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que la longitud de esta instancia. </exception>
      <exception cref="T:System.OutOfMemoryException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>Obtiene o establece la longitud del objeto <see cref="T:System.Text.StringBuilder" /> actual.</summary>
      <returns>Longitud de la instancia.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor especificado para una determinada operación es menor que cero o mayor que <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>Obtiene la capacidad máxima de la instancia.</summary>
      <returns>Número máximo de caracteres que la instancia puede controlar.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>Quita de la instancia el intervalo de caracteres especificado.</summary>
      <returns>Referencia a la instancia después de que se complete la operación de eliminación.</returns>
      <param name="startIndex">Posición de base cero en esta instancia donde comienza la eliminación. </param>
      <param name="length">Número de caracteres que se van a quitar. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Si <paramref name="startIndex" /> o <paramref name="length" /> son menores que cero, o <paramref name="startIndex" /> + <paramref name="length" /> son mayores que la longitud de la instancia. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>Reemplaza todas las apariciones de un carácter especificado en la instancia por otro carácter especificado.</summary>
      <returns>Referencia a la instancia con <paramref name="oldChar" /> reemplazado por <paramref name="newChar" />.</returns>
      <param name="oldChar">Carácter que se va a reemplazar. </param>
      <param name="newChar">Carácter que reemplaza a <paramref name="oldChar" />. </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>En una subcadena de la instancia, reemplaza todas las apariciones de un carácter especificado por otro carácter especificado.</summary>
      <returns>Referencia a la instancia con <paramref name="oldChar" /> reemplazado por <paramref name="newChar" /> en el intervalo de <paramref name="startIndex" /> a <paramref name="startIndex" /> + <paramref name="count" /> -1.</returns>
      <param name="oldChar">Carácter que se va a reemplazar. </param>
      <param name="newChar">Carácter que reemplaza a <paramref name="oldChar" />. </param>
      <param name="startIndex">Posición de la instancia en la que comienza la subcadena. </param>
      <param name="count">Longitud de la subcadena. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> + <paramref name="count" /> es mayor que la longitud del valor de la instancia.O bien El valor de <paramref name="startIndex" /> u <paramref name="count" /> es menor que cero. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>Reemplaza todas las apariciones de una cadena especificada en la instancia por otra cadena especificada.</summary>
      <returns>Referencia a la instancia junto a todas las instancias de <paramref name="oldValue" /> reemplazadas por <paramref name="newValue" />.</returns>
      <param name="oldValue">Cadena que se va a reemplazar. </param>
      <param name="newValue">Cadena que reemplaza a <paramref name="oldValue" /> o null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> es null. </exception>
      <exception cref="T:System.ArgumentException">La longitud de <paramref name="oldValue" /> es cero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>En una subcadena de la instancia, reemplaza todas las apariciones de una cadena especificada por otra cadena especificada.</summary>
      <returns>Referencia a la instancia con todas las instancias de <paramref name="oldValue" /> reemplazada por <paramref name="newValue" /> en el intervalo que va de <paramref name="startIndex" /> a <paramref name="startIndex" /> + <paramref name="count" /> -1.</returns>
      <param name="oldValue">Cadena que se va a reemplazar. </param>
      <param name="newValue">Cadena que reemplaza a <paramref name="oldValue" /> o null. </param>
      <param name="startIndex">Posición de la instancia en la que comienza la subcadena. </param>
      <param name="count">Longitud de la subcadena. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> es null. </exception>
      <exception cref="T:System.ArgumentException">La longitud de <paramref name="oldValue" /> es cero. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> u <paramref name="count" /> es menor que cero.O bien La suma de <paramref name="startIndex" /> y <paramref name="count" /> indica una posición de carácter fuera de la instancia.O bien Si se aumenta el valor de la instancia, se superará <see cref="P:System.Text.StringBuilder.MaxCapacity" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>Convierte el valor de la instancia en un objeto <see cref="T:System.String" />.</summary>
      <returns>Cadena cuyo valor es el mismo que el de la instancia.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>Convierte el valor de una subcadena de la instancia en un objeto <see cref="T:System.String" />.</summary>
      <returns>Cadena cuyo valor es el mismo que el de la subcadena especificada de la instancia.</returns>
      <param name="startIndex">Posición inicial de la subcadena en la instancia. </param>
      <param name="length">Longitud de la subcadena. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="startIndex" /> u <paramref name="length" /> es menor que cero.O bien La suma de <paramref name="startIndex" /> y <paramref name="length" /> es mayor que la longitud de la instancia en uso. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>Especifica cómo una instancia de <see cref="T:System.Lazy`1" /> sincroniza el acceso entre varios subprocesos.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>Se usan bloqueos para garantizar que solo un subproceso puede inicializar una instancia de <see cref="T:System.Lazy`1" /> de una manera segura para subprocesos.Si el método de inicialización (o el constructor predeterminado, si no hay ningún método de inicialización) utiliza los bloqueos internamente, se pueden producir interbloqueos.Si usa un constructor <see cref="T:System.Lazy`1" /> que especifica un método de inicialización (parámetro <paramref name="valueFactory" />) y el método de inicialización genera una excepción (o no puede controlar una excepción), la primera vez que llama a la propiedad <see cref="P:System.Lazy`1.Value" />, la excepción se almacena en caché y se genera de nuevo en las siguientes llamadas a la propiedad <see cref="P:System.Lazy`1.Value" />.Si usa un constructor <see cref="T:System.Lazy`1" /> que no especifica ningún método de inicialización, las excepciones producidas por el constructor predeterminado de <paramref name="T" /> no se almacenan en memoria caché.En ese caso, la siguiente llamada a la propiedad <see cref="P:System.Lazy`1.Value" /> podría inicializar correctamente la instancia de <see cref="T:System.Lazy`1" />.Si el método de inicialización tiene acceso de forma recursiva a la propiedad <see cref="P:System.Lazy`1.Value" /> de la instancia <see cref="T:System.Lazy`1" />, se produce <see cref="T:System.InvalidOperationException" />.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>La instancia de <see cref="T:System.Lazy`1" /> no es segura para subprocesos; se desconoce el comportamiento si se tiene acceso a la instancia desde varios subprocesos.Use este modo únicamente cuando sea crucial obtener un alto rendimiento y se garantice que la instancia de <see cref="T:System.Lazy`1" /> nunca se vaya a inicializar desde más de un subproceso.Si usa un constructor <see cref="T:System.Lazy`1" /> que especifica un método de inicialización (parámetro <paramref name="valueFactory" />) y el método de inicialización genera una excepción (o no puede controlar una excepción), la primera vez que llama a la propiedad <see cref="P:System.Lazy`1.Value" />, la excepción se almacena en caché y se genera de nuevo en las siguientes llamadas a la propiedad <see cref="P:System.Lazy`1.Value" />.Si usa un constructor <see cref="T:System.Lazy`1" /> que no especifica ningún método de inicialización, las excepciones producidas por el constructor predeterminado de <paramref name="T" /> no se almacenan en memoria caché.En ese caso, la siguiente llamada a la propiedad <see cref="P:System.Lazy`1.Value" /> podría inicializar correctamente la instancia de <see cref="T:System.Lazy`1" />.Si el método de inicialización tiene acceso de forma recursiva a la propiedad <see cref="P:System.Lazy`1.Value" /> de la instancia <see cref="T:System.Lazy`1" />, se produce <see cref="T:System.InvalidOperationException" />.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>Cuando varios subprocesos intentan inicializar una instancia de <see cref="T:System.Lazy`1" /> simultáneamente, todos los subprocesos pueden ejecutar el método de inicialización (o el constructor predeterminado, si no hay ningún método de inicialización).El primer subproceso que completa la inicialización, establece el valor de la instancia de <see cref="T:System.Lazy`1" />.Ese valor se devuelve a cualquier otro subproceso que esté ejecutando el método de inicialización simultáneamente, a menos que el método de inicialización produzca excepciones en esos subprocesos.Se descarta cualquier instancia de <paramref name="T" /> creada por los subprocesos que compiten.Si el método de inicialización produce una excepción en cualquier subproceso, la excepción se propaga fuera de la propiedad <see cref="P:System.Lazy`1.Value" /> en ese subproceso.La excepción no se almacena en caché.El valor de la propiedad <see cref="P:System.Lazy`1.IsValueCreated" /> sigue siendo false y las llamadas subsiguientes a la propiedad <see cref="P:System.Lazy`1.Value" />, bien por parte del subproceso donde se produjo la excepción, o bien por parte de otros subprocesos, hacen que el método de inicialización se ejecute de nuevo.Si el método de inicialización tiene acceso de forma recursiva a la propiedad <see cref="P:System.Lazy`1.Value" /> de la instancia <see cref="T:System.Lazy`1" />, no se produce ninguna excepción.</summary>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>Contiene las constantes que especifican intervalos de tiempo de espera infinitos.Esta clase no puede heredarse.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>Constante usada para especificar un período de espera infinito para métodos de subprocesamiento que aceptan un parámetro <see cref="T:System.Int32" />. </summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Threading.Timeout.InfiniteTimeSpan">
      <summary>Constante usada para especificar un período de espera infinito para métodos que aceptan un parámetro <see cref="T:System.TimeSpan" />.</summary>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>Encapsula los objetos específicos del sistema operativo que esperan obtener un acceso exclusivo a los recursos compartidos.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.WaitHandle" />.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Threading.WaitHandle" />.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>Cuando se reemplaza en una clase derivada, libera los recursos no administrados que usa <see cref="T:System.Threading.WaitHandle" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="explicitDisposing">Es true para liberar tanto recursos administrados como no administrados; es false para liberar únicamente recursos no administrados. </param>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>Representa un identificador del sistema operativo nativo no válido.Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>Espera a que todos los elementos de la matriz especificada reciban una señal.</summary>
      <returns>true cuando todos los elementos de <paramref name="waitHandles" /> reciben una señal; en caso contrario, el método nunca devuelve ningún valor.</returns>
      <param name="waitHandles">Matriz WaitHandle que contiene los objetos por los que la instancia actual esperará.Esta matriz no puede contener varias referencias al mismo objeto.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array are null. -or-<paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>Espera a que todos los elementos de la matriz especificada reciban una señal mediante un valor <see cref="T:System.Int32" /> para especificar el intervalo de tiempo.</summary>
      <returns>true cuando todos los elementos de <paramref name="waitHandles" /> reciben una señal; en caso contrario, false.</returns>
      <param name="waitHandles">Matriz WaitHandle que contiene los objetos por los que la instancia actual esperará.Esta matriz no puede contener varias referencias al mismo objeto (duplicados).</param>
      <param name="millisecondsTimeout">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or- One or more of the objects in the <paramref name="waitHandles" /> array is null. -or-<paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>Espera a que todos los elementos de la matriz especificada reciban una señal, usando un valor <see cref="T:System.TimeSpan" /> para especificar el intervalo de tiempo.</summary>
      <returns>true cuando todos los elementos de <paramref name="waitHandles" /> reciben una señal; en caso contrario, false.</returns>
      <param name="waitHandles">Matriz WaitHandle que contiene los objetos por los que la instancia actual esperará.Esta matriz no puede contener varias referencias al mismo objeto.</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null. -or- One or more of the objects in the <paramref name="waitHandles" /> array is null. -or-<paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>Espera a que cualquiera de los elementos de la matriz especificada reciba una señal.</summary>
      <returns>Índice de la matriz del objeto que satisfizo la espera.</returns>
      <param name="waitHandles">Matriz WaitHandle que contiene los objetos por los que la instancia actual esperará. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>Espera a que cualquiera de los elementos de la matriz especificada reciba una señal, utilizando un entero de 32 bits con signo para especificar el intervalo de tiempo.</summary>
      <returns>Índice de matriz del objeto que satisfizo la espera o <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> si ningún objeto satisfizo la espera y transcurrió un intervalo de tiempo equivalente a <paramref name="millisecondsTimeout" />.</returns>
      <param name="waitHandles">Matriz WaitHandle que contiene los objetos por los que la instancia actual esperará. </param>
      <param name="millisecondsTimeout">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>Espera a que cualquiera de los elementos de la matriz especificada reciba una señal, usando un <see cref="T:System.TimeSpan" /> para especificar el intervalo de tiempo.</summary>
      <returns>Índice de matriz del objeto que satisfizo la espera o <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> si ningún objeto satisfizo la espera y transcurrió un intervalo de tiempo equivalente a <paramref name="timeout" />.</returns>
      <param name="waitHandles">Matriz WaitHandle que contiene los objetos por los que la instancia actual esperará. </param>
      <param name="timeout">Estructura <see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o estructura <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>Bloquea el subproceso actual hasta que el objeto <see cref="T:System.Threading.WaitHandle" /> actual recibe una señal.</summary>
      <returns>true si la instancia actual recibe una señal.Si nunca se señala a la instancia actual, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> nunca devuelve nada.</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>Bloquea el subproceso actual hasta que el objeto <see cref="T:System.Threading.WaitHandle" /> actual recibe una señal, usando un entero de 32 bits con signo para especificar el intervalo de tiempo en milisegundos.</summary>
      <returns>true si la instancia actual recibe una señal; de lo contrario, false.</returns>
      <param name="millisecondsTimeout">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente. </param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>Bloquea el subproceso actual hasta que la instancia actual recibe una señal, usando <see cref="T:System.TimeSpan" /> para especificar el intervalo de tiempo.</summary>
      <returns>true si la instancia actual recibe una señal; de lo contrario, false.</returns>
      <param name="timeout">Estructura <see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o estructura <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente. </param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.-or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>Indica que una operación <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> ha superado el tiempo de espera antes de que se señalara un identificador de espera.Este campo es constante.</summary>
      <filterpriority>1</filterpriority>
    </member>
  </members>
</doc>