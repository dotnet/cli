<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime</name>
  </assembly>
  <members>
    <member name="T:System.Action">
      <summary>封裝沒有參數而且沒有傳回值的方法。</summary>
    </member>
    <member name="M:System.Action.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action.BeginInvoke(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action.Invoke"></member>
    <member name="T:System.Action`1">
      <summary>封裝具有單一參數的方法，並且不會傳回值。若要瀏覽這種類型的 .NET Framework 原始程式碼，請參閱參考原始程式碼。</summary>
      <typeparam name="T">這個委派所封裝之方法的參數類型。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Action`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`1.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`1.Invoke(`0)"></member>
    <member name="T:System.Action`10">
      <summary>封裝有 10 個參數的方法，並且不會傳回值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`10.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`10.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`10.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`10.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)"></member>
    <member name="T:System.Action`11">
      <summary>封裝有 11 個參數的方法，並且不會傳回值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`11.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`11.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`11.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`11.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)"></member>
    <member name="T:System.Action`12">
      <summary>封裝有 12 個參數的方法，並且不會傳回值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`12.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`12.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`12.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`12.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)"></member>
    <member name="T:System.Action`13">
      <summary>封裝有 13 個參數而且沒傳回值的方法。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`13.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`13.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`13.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`13.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)"></member>
    <member name="T:System.Action`14">
      <summary>封裝有 14 個參數的方法，並且不會傳回值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`14.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`14.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`14.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`14.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)"></member>
    <member name="T:System.Action`15">
      <summary>封裝有 15 個參數的方法，並且不會傳回值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">這個委派所封裝方法之第 15 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`15.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`15.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`15.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`15.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)"></member>
    <member name="T:System.Action`16">
      <summary>封裝有 16 個參數的方法，並且不會傳回值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">這個委派所封裝方法之第 15 個參數的型別。</typeparam>
      <typeparam name="T16">這個委派所封裝方法之第 16 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`16.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`16.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`16.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`16.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)"></member>
    <member name="T:System.Action`2">
      <summary>封裝有兩個參數且沒有傳回值的方法。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`2.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`2.BeginInvoke(`0,`1,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`2.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`2.Invoke(`0,`1)"></member>
    <member name="T:System.Action`3">
      <summary>封裝具有三個參數的方法，並且不會傳回值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`3.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`3.BeginInvoke(`0,`1,`2,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`3.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`3.Invoke(`0,`1,`2)"></member>
    <member name="T:System.Action`4">
      <summary>封裝有四個參數且沒有傳回值的方法。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`4.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`4.BeginInvoke(`0,`1,`2,`3,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`4.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`4.Invoke(`0,`1,`2,`3)"></member>
    <member name="T:System.Action`5">
      <summary>封裝有具有五個參數的方法，並且不會傳回值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`5.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`5.BeginInvoke(`0,`1,`2,`3,`4,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`5.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`5.Invoke(`0,`1,`2,`3,`4)"></member>
    <member name="T:System.Action`6">
      <summary>封裝具有六個參數的方法，並且不會傳回值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`6.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`6.BeginInvoke(`0,`1,`2,`3,`4,`5,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`6.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`6.Invoke(`0,`1,`2,`3,`4,`5)"></member>
    <member name="T:System.Action`7">
      <summary>封裝具有七個參數且沒有傳回值的方法。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`7.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`7.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`7.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`7.Invoke(`0,`1,`2,`3,`4,`5,`6)"></member>
    <member name="T:System.Action`8">
      <summary>封裝具有八個參數且沒有傳回值的方法。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`8.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`8.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`8.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`8.Invoke(`0,`1,`2,`3,`4,`5,`6,`7)"></member>
    <member name="T:System.Action`9">
      <summary>封裝具有九個參數的方法，並且不會傳回值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`9.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`9.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`9.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`9.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8)"></member>
    <member name="T:System.Activator">
      <summary>包含本機或遠端建立物件類型的方法，或者取得對現有遠端物件的參考。此類別無法被繼承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>使用無參數建構函式，建立由指定之泛型類型參數所指定之類型的執行個體。</summary>
      <returns>新建立物件的參考。</returns>
      <typeparam name="T">要建立的類型。</typeparam>
      <exception cref="T:System.MissingMethodException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.MissingMemberException" />, 、 相反。為 <paramref name="T" /> 指定的型別沒有無參數建構函式。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>使用指定之類型的預設建構函式，建立該類型的執行個體。</summary>
      <returns>新建立物件的參考。</returns>
      <param name="type">要建立的物件類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 RuntimeType。-或-<paramref name="type" /> 是開放式泛型型別 (也就是說，<see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 true)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不可以是 <see cref="T:System.Reflection.Emit.TypeBuilder" />。-或- 不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 型別，或這些型別的陣列。-或-包含 <paramref name="type" /> 的組件是以 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 建立的動態組件。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">被呼叫的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.MemberAccessException" />, 、 相反。呼叫端沒有使用權限來呼叫這個建構函式。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別 (Abstract Class) 的執行個體，或者，這個成員是以晚期繫結機制叫用的。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 型別不是透過 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 取得。</exception>
      <exception cref="T:System.MissingMethodException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.MissingMemberException" />, 、 相反。找不到相符的公用建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是 COM 物件，但是用來取得型別的類別識別項 (Class Identifier) 無效，或者所識別的類別並未註冊。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的型別。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>使用最符合指定參數的建構函式，建立指定類型的執行個體。</summary>
      <returns>新建立物件的參考。</returns>
      <param name="type">要建立的物件類型。</param>
      <param name="args">引數的陣列，此引數在數目、順序和類型上符合要叫用的建構函式的參數。如果 <paramref name="args" /> 是空陣列或 null，會叫用未採用參數的建構函式 (預設的建構函式)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 RuntimeType。-或-<paramref name="type" /> 是開放式泛型型別 (也就是說，<see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 true)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不可以是 <see cref="T:System.Reflection.Emit.TypeBuilder" />。-或- 不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 型別，或這些型別的陣列。-或-包含 <paramref name="type" /> 的組件是以 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 建立的動態組件。-或-最符合 <paramref name="args" /> 的建構函式具有 varargs 引數。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">被呼叫的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.MemberAccessException" />, 、 相反。呼叫端沒有使用權限來呼叫這個建構函式。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別 (Abstract Class) 的執行個體，或者，這個成員是以晚期繫結機制叫用的。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 型別不是透過 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 取得。</exception>
      <exception cref="T:System.MissingMethodException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.MissingMemberException" />, 、 相反。找不到相符的公用建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是 COM 物件，但是用來取得型別的類別識別項 (Class Identifier) 無效，或者所識別的類別並未註冊。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的型別。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
      </PermissionSet>
    </member>
    <member name="T:System.ArgumentException">
      <summary>當其中一個提供給方法的引數無效時所擲回的例外狀況。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的參數名稱，初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="paramName">造成目前例外狀況的參數名稱。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息、參數名稱和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="paramName">造成目前例外狀況的參數名稱。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>取得錯誤訊息和參數名稱，在參數名稱未設定時只會取得錯誤訊息。</summary>
      <returns>描述例外狀況之詳細資料的文字字串。這個屬性值是下列兩種形式中的一種：條件值<paramref name="paramName" /> 是 Null 參考 (在 Visual Basic 中為 Nothing) 或長度為零。傳遞給建構函式的 <paramref name="message" /> 字串。<paramref name="paramName" /> 不是 Null 參考 (在 Visual Basic 中為 Nothing) 且長度大於零。與無效參數名稱附加在一起的 <paramref name="message" /> 字串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>取得造成這個例外狀況的參數名稱。</summary>
      <returns>參數名稱。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>例外狀況，這個例外狀況會在 Null 參考 (在 Visual Basic 中為 Nothing) 被傳遞至不接受其為有效引數的方法時擲回。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentNullException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>使用造成這個例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentNullException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的例外狀況，初始化 <see cref="T:System.ArgumentNullException" /> 類別的新執行個體。</summary>
      <param name="message">解釋這個例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 Nothing)。 </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentNullException" /> 類別的執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>當引數值超出了叫用 (Invoke) 方法所定義值的容許範圍時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>使用造成這個例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成這個例外狀況的參數名稱。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的例外狀況，初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="message">解釋這個例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 Nothing)。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>使用參數名稱引數值和指定的錯誤訊息，初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
      <param name="actualValue">造成例外狀況的引數名稱。</param>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>使用造成這個例外狀況的參數名稱和指定的錯誤訊息，初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>取得造成這個例外狀況的引數值。</summary>
      <returns>Object，包含造成目前 <see cref="T:System.Exception" /> 的參數值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>取得錯誤訊息和無效引數值的字串表示，或如果引數值是 null 時，只取得錯誤訊息。</summary>
      <returns>這個例外狀況的文字訊息。這個屬性值是下列兩種形式中的一種：條件值<paramref name="actualValue" /> 為 null。傳遞給建構函式的 <paramref name="message" /> 字串。<paramref name="actualValue" /> 不是 null。與代表無效參數名稱之字串附加在一起的 <paramref name="message" /> 字串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>為算術、轉型 (Casting) 或轉換作業中的錯誤擲回例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>初始化 <see cref="T:System.ArithmeticException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.ArithmeticException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.ArithmeticException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Array">
      <summary>提供建立、管理、搜尋和排序陣列的方法，可在 Common Language Runtime 時做為所有陣列的基底類別。若要瀏覽此類型的.NET Framework 原始碼，請參閱參考來源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>使用陣列的每個元素和指定之值所實作的 <see cref="T:System.IComparable" /> 介面，在已排序的一維陣列內某個範圍的元素中搜尋值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元 (Bitwise) 補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序之一維 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="value" /> 是與 <paramref name="array" /> 的元素不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable" /> 介面的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 介面，在已排序的一維陣列內某範圍的元素中搜尋值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元 (Bitwise) 補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序之一維 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。-或- null 表示使用每個項目的 <see cref="T:System.IComparable" /> 實作</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="comparer" /> 為 null，並且 <paramref name="value" /> 是與 <paramref name="array" /> 的元素不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，且 <paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable" /> 介面的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>使用陣列每個元素和指定物件所實作的 <see cref="T:System.IComparable" /> 介面，在整個一維已排序的陣列中搜尋特定的元素。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元 (Bitwise) 補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序之一維 <see cref="T:System.Array" />。</param>
      <param name="value">要搜尋的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 是與 <paramref name="array" /> 的元素不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable" /> 介面的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 介面，在整個已排序的一維陣列中搜尋值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元 (Bitwise) 補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序之一維 <see cref="T:System.Array" />。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。-或- null 表示使用每個項目的 <see cref="T:System.IComparable" /> 實作</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 為 null，並且 <paramref name="value" /> 是與 <paramref name="array" /> 的元素不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，且 <paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable" /> 介面的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素和指定之值所實作的 <see cref="T:System.IComparable`1" /> 泛型介面，在已排序的一維陣列內某個範圍的元素中搜尋值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元 (Bitwise) 補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序、以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="value" /> 是與 <paramref name="array" /> 的元素不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> 不會實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，在已排序的一維陣列內某範圍的元素中搜尋值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元 (Bitwise) 補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序、以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作。-或- null 表示使用每個項目的 <see cref="T:System.IComparable`1" /> 實作</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="comparer" /> 為 null，並且 <paramref name="value" /> 是與 <paramref name="array" /> 的元素不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="T" /> 不會實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素和指定之物件所實作的 <see cref="T:System.IComparable`1" /> 泛型介面，在整個已排序的一維陣列中搜尋特定的元素。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元 (Bitwise) 補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序、以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要搜尋的物件。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> 不會實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，在整個已排序的一維陣列中搜尋值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元 (Bitwise) 補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序、以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作。-或- null 表示使用每個項目的 <see cref="T:System.IComparable`1" /> 實作</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 為 null，並且 <paramref name="value" /> 是與 <paramref name="array" /> 的元素不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="T" /> 不會實作 <see cref="T:System.IComparable`1" /> 泛型介面</exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>將陣列中的項目範圍設定為每個項目類型的預設值。</summary>
      <param name="array">項目需要加以清除的陣列。</param>
      <param name="index">要清除之項目範圍的起始索引。</param>
      <param name="length">要清除的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="length" /> 的總和大於 <paramref name="array" /> 的大小。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Clone">
      <summary>建立 <see cref="T:System.Array" /> 的淺層複本 (Shallow Copy)。</summary>
      <returns>
        <see cref="T:System.Array" /> 的淺層複本。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>從 <see cref="T:System.Array" /> 複製某範圍的元素 (從指定的來源索引開始)，並且將它們貼至另一個 <see cref="T:System.Array" /> (從指定的目的索引開始)。如果此複本未完全成功，則保證所有的變更一定未完成。</summary>
      <param name="sourceArray">包含要複製資料的 <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">32 位元的整數，代表 <paramref name="sourceArray" /> 中的索引，由此開始複製。</param>
      <param name="destinationArray">接收資料的 <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">32 位元的整數，代表 <paramref name="destinationArray" /> 中的索引，由此開始儲存。</param>
      <param name="length">32 位元整數，表示要複製的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 為 null。-或-<paramref name="destinationArray" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 具有不同的陣序規範。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 型別既沒有與 <paramref name="destinationArray" /> 型別相同，也不是繼承自此型別。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中至少一個元素無法轉型為 <paramref name="destinationArray" /> 的型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 小於 <paramref name="sourceArray" /> 第一個維度的下限。-或-<paramref name="destinationIndex" /> 小於 <paramref name="destinationArray" /> 第一個維度的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大於從 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 結尾的元素數目。-或-<paramref name="length" /> 大於從 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 結尾的元素數目。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>從 <see cref="T:System.Array" /> 複製某範圍的元素 (從第一個元素開始)，並且將它們貼至另一個 <see cref="T:System.Array" /> (從第一個元素開始)。長度已指定為 32 位元整數。</summary>
      <param name="sourceArray">包含要複製資料的 <see cref="T:System.Array" />。</param>
      <param name="destinationArray">接收資料的 <see cref="T:System.Array" />。</param>
      <param name="length">32 位元整數，表示要複製的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 為 null。-或-<paramref name="destinationArray" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 具有不同的陣序規範。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的型別不相容。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中至少一個元素無法轉型為 <paramref name="destinationArray" /> 的型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大於 <paramref name="sourceArray" /> 的元素數目。-或-<paramref name="length" /> 大於 <paramref name="destinationArray" /> 的元素數目。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>從 <see cref="T:System.Array" /> 複製某範圍的元素 (從指定的來源索引開始)，並且將它們貼至另一個 <see cref="T:System.Array" /> (從指定的目的索引開始)。長度與索引都指定為 32 位元的整數。</summary>
      <param name="sourceArray">包含要複製資料的 <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">32 位元的整數，代表 <paramref name="sourceArray" /> 中的索引，由此開始複製。</param>
      <param name="destinationArray">接收資料的 <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">32 位元的整數，代表 <paramref name="destinationArray" /> 中的索引，由此開始儲存。</param>
      <param name="length">32 位元整數，表示要複製的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 為 null。-或-<paramref name="destinationArray" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 具有不同的陣序規範。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的型別不相容。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中至少一個元素無法轉型為 <paramref name="destinationArray" /> 的型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 小於 <paramref name="sourceArray" /> 第一個維度的下限。-或-<paramref name="destinationIndex" /> 小於 <paramref name="destinationArray" /> 第一個維度的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大於從 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 結尾的元素數目。-或-<paramref name="length" /> 大於從 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 結尾的元素數目。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>將目前一維陣列的所有項目複製到指定的一維陣列 (從指定的目的陣列索引開始)。索引已指定為 32 位元整數。</summary>
      <param name="array">一維陣列，從目前陣列複製過來的項目之目的端。</param>
      <param name="index">32 位元的整數，代表 <paramref name="array" /> 中的索引，由此開始複製。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維的。-或-來源陣列中的項目數大於從 <paramref name="index" /> 到目的端 <paramref name="array" /> 末尾的可用項目數。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">來源 <see cref="T:System.Array" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
      <exception cref="T:System.RankException">來源陣列是多維。</exception>
      <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Array" /> 中至少有一個元素無法轉換為目的 <paramref name="array" /> 的類型。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>建立指定 <see cref="T:System.Type" /> 和長度的一維 <see cref="T:System.Array" /> (具有以零起始的索引)。</summary>
      <returns>新的一維 <see cref="T:System.Array" />，具有指定的長度和指定的 <see cref="T:System.Type" />，並使用以零起始的索引。</returns>
      <param name="elementType">要建立的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="length">要建立的 <see cref="T:System.Array" /> 的大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.NotSupportedException">不支援 <paramref name="elementType" />。例如，不支援 <see cref="T:System.Void" />。-或-<paramref name="elementType" /> 為開放式泛型型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小於零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>建立指定 <see cref="T:System.Type" /> 和維度長度的多維 <see cref="T:System.Array" /> (具有以零起始的索引)。維度長度已指定在 32 位元整數的陣列中。</summary>
      <returns>新的多維 <see cref="T:System.Array" />，具有指定的 <see cref="T:System.Type" /> 且每個維度具有指定的長度，並使用以零起始的索引。</returns>
      <param name="elementType">要建立的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">32 位元整數的陣列，代表 <see cref="T:System.Array" /> 所建立之每個維度的大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 null。-或-<paramref name="lengths" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。-或-<paramref name="lengths" /> 陣列並未包含任一元素。</exception>
      <exception cref="T:System.NotSupportedException">不支援 <paramref name="elementType" />。例如，不支援 <see cref="T:System.Void" />。-或-<paramref name="elementType" /> 為開放式泛型型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中任一數值小於零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>建立指定 <see cref="T:System.Type" /> 和維度長度的多維 <see cref="T:System.Array" /> (具有指定的下限)。</summary>
      <returns>新的多維 <see cref="T:System.Array" />，具有指定的 <see cref="T:System.Type" /> 且每個維度具有指定的長度和下限。</returns>
      <param name="elementType">要建立的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">一維陣列，包含要建立的 <see cref="T:System.Array" /> 的每個維度大小。</param>
      <param name="lowerBounds">一維陣列，包含要建立的 <see cref="T:System.Array" /> 的每個維度下限 (起始索引)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 null。-或-<paramref name="lengths" /> 為 null。-或-<paramref name="lowerBounds" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。-或-<paramref name="lengths" /> 陣列並未包含任一元素。-或-<paramref name="lengths" /> 和 <paramref name="lowerBounds" /> 陣列沒有相同的元素數目。</exception>
      <exception cref="T:System.NotSupportedException">不支援 <paramref name="elementType" />。例如，不支援 <see cref="T:System.Void" />。-或-<paramref name="elementType" /> 為開放式泛型型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中任一數值小於零。-或-<paramref name="lowerBounds" /> 中的任何值都非常大，以至於維度的下限和長度的總和都大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Empty``1">
      <summary>傳回空陣列。</summary>
      <returns>會傳回空白<see cref="T:System.Array" />。</returns>
      <typeparam name="T">陣列項目的類型。</typeparam>
    </member>
    <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
      <summary>判斷指定的陣列是否包含符合指定之述詞 (Predicate) 所定義的條件之項目。</summary>
      <returns>如果 <paramref name="array" /> 包含的一個或多個元素符合指定之述詞所定義的條件，則為 true，否則為 false。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="match">定義搜尋元素之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Array" /> 內第一個相符的項目。</summary>
      <returns>第一個符合指定之述詞所定義的條件之元素 (如果找到的話)，否則為型別 <paramref name="T" /> 的預設值。</returns>
      <param name="array">要搜尋的一維、以零為起始的陣列。</param>
      <param name="match">定義要搜尋項目之條件的述詞。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
      <summary>擷取符合指定之述詞所定義的條件之所有項目。</summary>
      <returns>
        <see cref="T:System.Array" />，其中包含符合指定之述詞所定義的條件之所有元素 (如果有找到的話)，否則為空的 <see cref="T:System.Array" />。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="match">定義搜尋元素之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Array" /> 中從指定之索引開始，且包含指定之元素數目的元素範圍內第一個符合項目之以零起始的索引。</summary>
      <returns>如果有找到，是第一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效區段。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Array" /> 中從指定之索引延伸到最後一個元素的元素範圍內第一個符合項目之以零起始的索引。</summary>
      <returns>如果有找到，是第一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Array" /> 內第一個相符項目之以零起始的索引。</summary>
      <returns>如果有找到，是第一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Array" /> 內最後一個相符的項目。</summary>
      <returns>最後一個符合指定之述詞所定義的條件之元素 (如果找到的話)，否則為型別 <paramref name="T" /> 的預設值。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Array" /> 中包含指定之元素數目，且結束於指定之索引的元素範圍內最後一個符合項目之以零起始的索引。</summary>
      <returns>如果有找到，是最後一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效區段。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Array" /> 中從第一個元素延伸到指定之索引的元素範圍內最後一個符合項目之以零起始的索引。</summary>
      <returns>如果有找到，是最後一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Array" /> 內最後一個相符項目之以零起始的索引。</summary>
      <returns>如果有找到，是最後一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>傳回 <see cref="T:System.Array" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>
        <see cref="T:System.Array" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>取得代表 <see cref="T:System.Array" /> 指定維度之元素數目的 32 位元整數。</summary>
      <returns>32 位元的整數，代表指定維度的項目數目。</returns>
      <param name="dimension">需要決定長度之 <see cref="T:System.Array" /> 的以零起始維度。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小於零。-或-<paramref name="dimension" /> 等於或大於 <see cref="P:System.Array.Rank" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>取得陣列中指定之維度的第一個項目的索引。</summary>
      <returns>陣列中指定之維度的第一個項目的索引。</returns>
      <param name="dimension">需要決定開始索引之陣列的以零為起始的維度。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小於零。-或-<paramref name="dimension" /> 等於或大於 <see cref="P:System.Array.Rank" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>取得陣列中指定之維度的最後一個項目的索引。</summary>
      <returns>陣列中指定之維度的最後一個項目的索引，如果指定之維度是空的則為 -1。 </returns>
      <param name="dimension">需要決定上限之陣列的以零為起始的維度。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小於零。-或-<paramref name="dimension" /> 等於或大於 <see cref="P:System.Array.Rank" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>取得一維 <see cref="T:System.Array" /> 中位於指定位置的值。索引已指定為 32 位元整數。</summary>
      <returns>一維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <param name="index">32 位元整數，表示要取得的 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好一維的維度。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 在目前 <see cref="T:System.Array" /> 的有效索引範圍之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>取得多維 <see cref="T:System.Array" /> 中位於指定位置的值。索引已指定為 32 位元整數的陣列。</summary>
      <returns>多維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <param name="indices">32 位元整數的一維陣列，代表索引，指定要取得的 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">目前 <see cref="T:System.Array" /> 中的維度數目不等於 <paramref name="indices" /> 中的元素數目。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任一元素超過目前 <see cref="T:System.Array" /> 中對應維度的有效索引範圍。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>搜尋指定的物件，並傳回其第一次出現在一維陣列中的索引。</summary>
      <returns>第一次的索引<paramref name="value" />中<paramref name="array" />，如果有找到。否則，下限減 1。</returns>
      <param name="array">要搜尋的一維陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>在一維陣列的項目範圍中搜尋指定的物件，並傳回其第一次出現的索引。此範圍從指定的索引延伸到陣列的結尾。</summary>
      <returns>第一次的索引<paramref name="value" />，如果找到，範圍中的項目內<paramref name="array" />會擴充從<paramref name="startIndex" />至最後一個元素，否則，下限減 1。</returns>
      <param name="array">要搜尋的一維陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">搜尋的起始索引。0 (零) 在空白陣列中有效。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>在一維陣列的項目範圍中搜尋指定的物件，並傳回其第一次出現的索引。此範圍的延伸起點為指定項目數的指定索引。</summary>
      <returns>第一次的索引<paramref name="value" />，如果找到時，在<paramref name="array" />從索引<paramref name="startIndex" />至<paramref name="startIndex" />+ <paramref name="count" /> -1。否則，下限減 1。</returns>
      <param name="array">要搜尋的一維陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">搜尋的起始索引。0 (零) 在空白陣列中有效。</param>
      <param name="count">要搜尋的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效區段。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>搜尋指定的物件，並傳回其第一次出現在一維陣列中的索引。</summary>
      <returns>第一次出現的以零起始的索引<paramref name="value" />在整個<paramref name="array" />，如果有找到。否則為-1。</returns>
      <param name="array">要搜尋的一維、以零為起始的陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>在一維陣列的項目範圍中搜尋指定的物件，並傳回其第一次出現的索引。此範圍從指定的索引延伸到陣列的結尾。</summary>
      <returns>在 <paramref name="array" /> 中從 <paramref name="startIndex" /> 延伸到最後一個項目的元素範圍內，<paramref name="value" /> 的第一個相符項目之以零起始的索引 (如果找到的話)，否則為 -1。</returns>
      <param name="array">要搜尋的一維、以零為起始的陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。0 (零) 在空白陣列中有效。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>在一維陣列的項目範圍中搜尋指定的物件，並傳回其第一次出現的索引。此範圍的延伸起點為指定項目數的指定索引。</summary>
      <returns>在 <paramref name="array" /> 中從 <paramref name="startIndex" /> 開始且包含 <paramref name="count" /> 內指定之元素數的元素範圍內之 <paramref name="value" /> 的第一個相符項目之以零起始的索引 (如果有找到)，否則為 -1。</returns>
      <param name="array">要搜尋的一維、以零為起始的陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。0 (零) 在空白陣列中有效。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效區段。</exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>呼叫實值型別的預設建構函式，初始化實值型別 <see cref="T:System.Array" /> 的每個元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>搜尋指定物件，並且傳回整個一維 <see cref="T:System.Array" /> 中最後一個相符項目的索引。</summary>
      <returns>如果找到的話，則為整個 <paramref name="array" /> 中 <paramref name="value" /> 的最後一個相符項目的索引，否則為陣列的下限減 1。</returns>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>搜尋指定的物件，並傳回一維 <see cref="T:System.Array" /> 內從第一個元素延伸至指定之索引的元素範圍中，最後一個相符項目的索引。</summary>
      <returns>如果找到的話，則為 <paramref name="array" /> 中從第一個元素延伸到 <paramref name="startIndex" /> 的元素範圍內，<paramref name="value" /> 的最後一個相符項目的索引，否則為陣列的下限減 1。</returns>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">反向搜尋的起始索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回一維 <see cref="T:System.Array" /> 中包含指定之元素數且結束於指定之索引的元素範圍內，最後一個相符項目的索引。</summary>
      <returns>如果找到的話，則為在 <paramref name="array" /> 中包含 <paramref name="count" /> 內指定之元素數且結束於 <paramref name="startIndex" /> 的元素範圍內，<paramref name="value" /> 的最後一個相符項目之索引，否則為陣列的下限減 1。</returns>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">反向搜尋的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效區段。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Array" /> 中最後一個相符項目的索引。</summary>
      <returns>如果有找到，則是在整個 <paramref name="array" /> 內，<paramref name="value" /> 最後一次出現的以零起始的索引，否則為 -1。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>搜尋指定的物件，並傳回在 <see cref="T:System.Array" /> 內從第一個元素延伸至指定之索引的元素範圍中，最後一個相符項目的索引。</summary>
      <returns>在 <paramref name="array" /> 中從第一個元素延伸到 <paramref name="startIndex" /> 的元素範圍內，<paramref name="value" /> 的最後一個相符項目之以零起始的索引 (如果找到的話)，否則為 -1。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回 <see cref="T:System.Array" /> 中包含指定之元素數且結束於指定之索引的元素範圍內，最後一個相符項目的索引。</summary>
      <returns>在 <paramref name="array" /> 中包含 <paramref name="count" /> 內指定之元素數且結束於 <paramref name="startIndex" /> 的元素範圍內，<paramref name="value" /> 的最後一個相符項目之以零起始的索引 (如果有找到)，否則為 -1。</returns>
      <param name="array">要搜尋的一維、以零起始的 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效區段。</exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>取得代表 <see cref="T:System.Array" /> 所有維度的元素總數之 32 位元整數。</summary>
      <returns>32 位元整數，表示 <see cref="T:System.Array" /> 所有維度的元素總數，如果陣列中沒有元素，則為零。</returns>
      <exception cref="T:System.OverflowException">陣列是多維的且包含多個<see cref="F:System.Int32.MaxValue" />項目。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Array.Rank">
      <summary>取得 <see cref="T:System.Array" /> 的陣序 (維度數目)。例如，一維陣列傳回 1，二維陣列傳回 2，依此類推。</summary>
      <returns>
        <see cref="T:System.Array" /> 的陣序規範 (維度數目)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>將一維陣列中的項目數目變更為指定的新大小。</summary>
      <param name="array">要調整大小之以零起始的一維陣列，或是 null，表示要以指定之大小建立新陣列。</param>
      <param name="newSize">新陣列的大小。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> 小於零。</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>反轉整個一維 <see cref="T:System.Array" /> 中的元素順序。</summary>
      <param name="array">要反轉的一維 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。 </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>將一維 <see cref="T:System.Array" /> 中某個範圍的元素之元素順序顛倒。</summary>
      <param name="array">要反轉的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要反轉之區段的起始索引。</param>
      <param name="length">區段中要反轉的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>設定一維 <see cref="T:System.Array" /> 中指定位置之元素的值。索引已指定為 32 位元整數。</summary>
      <param name="value">指定項目的新值。</param>
      <param name="index">32 位元整數，表示要設定的 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好一維的維度。</exception>
      <exception cref="T:System.InvalidCastException">不可以將 <paramref name="value" /> 轉換成目前 <see cref="T:System.Array" /> 的項目型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 在目前 <see cref="T:System.Array" /> 的有效索引範圍之外。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>設定多維 <see cref="T:System.Array" /> 中指定位置之元素的值。索引已指定為 32 位元整數的陣列。</summary>
      <param name="value">指定項目的新值。</param>
      <param name="indices">32 位元整數的一維陣列，代表指定要設定之項目位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">目前 <see cref="T:System.Array" /> 中的維度數目不等於 <paramref name="indices" /> 中的元素數目。</exception>
      <exception cref="T:System.InvalidCastException">不可以將 <paramref name="value" /> 轉換成目前 <see cref="T:System.Array" /> 的項目型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任一元素超過目前 <see cref="T:System.Array" /> 中對應維度的有效索引範圍。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素的 <see cref="T:System.IComparable" /> 實作，排序整個一維 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序的一維 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array)">
      <summary>使用每個索引鍵的 <see cref="T:System.IComparable" /> 實作，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對一維的 <see cref="T:System.Array" /> 物件 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維 <see cref="T:System.Array" />，包含對應至 <paramref name="keys" /><see cref="T:System.Array" /> 中每個索引鍵的項目。-或-null 表示只排序 <paramref name="keys" /><see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多維的。-或-<paramref name="items" /><see cref="T:System.Array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對一維的<see cref="T:System.Array" /> 物件 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維 <see cref="T:System.Array" />，包含對應至 <paramref name="keys" /><see cref="T:System.Array" /> 中每個索引鍵的項目。-或-null 表示只排序 <paramref name="keys" /><see cref="T:System.Array" />。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。-或-null 表示使用每個項目的 <see cref="T:System.IComparable" /> 實作</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多維的。-或-<paramref name="items" /><see cref="T:System.Array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。-或-<paramref name="comparer" /> 的實作在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)">
      <summary>使用每個索引鍵的 <see cref="T:System.IComparable" /> 實作，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對一維的 <see cref="T:System.Array" /> 物件中某個範圍的元素 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維 <see cref="T:System.Array" />，包含對應至 <paramref name="keys" /><see cref="T:System.Array" /> 中每個索引鍵的項目。-或-null 表示只排序 <paramref name="keys" /><see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多維的。-或-<paramref name="items" /><see cref="T:System.Array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="keys" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。-或-<paramref name="index" /> 和 <paramref name="length" /> 沒有在 <paramref name="keys" /><see cref="T:System.Array" /> 中指定有效範圍。-或-<paramref name="items" /> 不是 null，而且 <paramref name="index" /> 和 <paramref name="length" /> 沒有在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對一維的 <see cref="T:System.Array" /> 物件中某範圍的元素 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維 <see cref="T:System.Array" />，包含對應至 <paramref name="keys" /><see cref="T:System.Array" /> 中每個索引鍵的項目。-或-null 表示只排序 <paramref name="keys" /><see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的項目數目。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。-或-null 表示使用每個項目的 <see cref="T:System.IComparable" /> 實作</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多維的。-或-<paramref name="items" /><see cref="T:System.Array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="keys" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，並且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。-或-<paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。-或-<paramref name="index" /> 和 <paramref name="length" /> 沒有在 <paramref name="keys" /><see cref="T:System.Array" /> 中指定有效範圍。-或-<paramref name="items" /> 不是 null，而且 <paramref name="index" /> 和 <paramref name="length" /> 沒有在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效範圍。-或-<paramref name="comparer" /> 的實作在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，排序一維 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序的一維陣列。</param>
      <param name="comparer">比較項目時所要使用的實作。-或-null 表示使用每個項目的 <see cref="T:System.IComparable" /> 實作</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的實作在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素的 <see cref="T:System.IComparable" /> 實作，排序一維 <see cref="T:System.Array" /> 中某個元素範圍內的元素。</summary>
      <param name="array">要排序的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，排序一維 <see cref="T:System.Array" /> 中元素範圍內的元素。</summary>
      <param name="array">要排序的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的項目數目。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。-或-null 表示使用每個項目的 <see cref="T:System.IComparable" /> 實作</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="comparer" /> 的實作在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素之 <see cref="T:System.IComparable`1" /> 泛型介面實作，排序整個 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序之以零起始的一維 <see cref="T:System.Array" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，排序 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序之以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="comparer">在比較項目時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 null 以使用每個項目的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的實作在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>使用指定的 <see cref="T:System.Comparison`1" />，排序 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序之以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="comparison">比較元素時所要使用的 <see cref="T:System.Comparison`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="comparison" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparison" /> 的實作在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparison" /> 可能不會傳回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素之 <see cref="T:System.IComparable`1" /> 泛型介面實作，排序 <see cref="T:System.Array" /> 中某個元素範圍中的元素。</summary>
      <param name="array">要排序之以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的項目數目。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，對 <see cref="T:System.Array" /> 中的某個元素範圍內的元素進行排序。</summary>
      <param name="array">要排序之以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的項目數目。</param>
      <param name="comparer">在比較項目時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 null 以使用每個項目的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="comparer" /> 的實作在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <summary>使用每個索引鍵的 <see cref="T:System.IComparable`1" /> 泛型介面實作，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對 <see cref="T:System.Array" /> 物件 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維、以零起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；null 則表示只會排序 <paramref name="keys" />。</param>
      <typeparam name="TKey">索引鍵陣列項目的類型。</typeparam>
      <typeparam name="TValue">項目陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，並且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。-或-<paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對 <see cref="T:System.Array" /> 物件 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維、以零起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；null 則表示只會排序 <paramref name="keys" />。</param>
      <param name="comparer">在比較項目時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 null 以使用每個項目的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="TKey">索引鍵陣列項目的類型。</typeparam>
      <typeparam name="TValue">項目陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，並且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。-或-<paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。-或-<paramref name="comparer" /> 的實作在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <summary>使用每個索引鍵的 <see cref="T:System.IComparable`1" /> 泛型介面實作，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對 <see cref="T:System.Array" /> 物件中某個範圍的元素 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維、以零起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；null 則表示只會排序 <paramref name="keys" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的項目數目。</param>
      <typeparam name="TKey">索引鍵陣列項目的類型。</typeparam>
      <typeparam name="TValue">項目陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="keys" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，並且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。-或-<paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。-或-<paramref name="index" /> 和 <paramref name="length" /> 沒有在 <paramref name="keys" /><see cref="T:System.Array" /> 中指定有效範圍。-或-<paramref name="items" /> 不是 null，而且 <paramref name="index" /> 和 <paramref name="length" /> 沒有在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對 <see cref="T:System.Array" /> 物件中某範圍的元素 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維、以零起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；null 則表示只會排序 <paramref name="keys" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的項目數目。</param>
      <param name="comparer">在比較項目時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 null 以使用每個項目的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="TKey">索引鍵陣列項目的類型。</typeparam>
      <typeparam name="TValue">項目陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="keys" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，並且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。-或-<paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。-或-<paramref name="index" /> 和 <paramref name="length" /> 沒有在 <paramref name="keys" /><see cref="T:System.Array" /> 中指定有效範圍。-或-<paramref name="items" /> 不是 null，而且 <paramref name="index" /> 和 <paramref name="length" /> 沒有在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效範圍。-或-<paramref name="comparer" /> 的實作在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>取得在 <see cref="T:System.Array" /> 中所包含的項目數。</summary>
      <returns>集合中所包含的項目數目。</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值會指出 <see cref="T:System.Array" /> 的存取是否同步 (具備安全執行緒)。</summary>
      <returns>true if access to the <see cref="T:System.Array" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來同步處理 <see cref="T:System.Array" /> 存取的物件。</summary>
      <returns>可用來同步處理 <see cref="T:System.Array" /> 存取的物件。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>呼叫這個方法一定會擲回<see cref="T:System.NotSupportedException" />例外狀況。</summary>
      <returns>不支援將值加入陣列。沒有傳回值。</returns>
      <param name="value">要加入至 <see cref="T:System.Collections.IList" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>從 <see cref="T:System.Collections.IList" /> 中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>判斷某項目是否在 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>true if <paramref name="value" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">要在目前清單中尋找的物件。對於參考型別而言，要尋找的元素可以是 null。</param>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中指定項目的索引。</summary>
      <returns>如果在清單中有找到，則為值的索引，否則為 -1。</returns>
      <param name="value">要在目前清單中尋找的物件。</param>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入位於指定索引的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">應該插入 <paramref name="value" /> 處的索引。</param>
      <param name="value">要插入的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。-或-<see cref="T:System.Collections.IList" /> 具有固定的大小。 </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 是 <see cref="T:System.Collections.IList" /> 中的 null 參考。</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Array" /> 是否有固定的大小。</summary>
      <returns>true if the <see cref="T:System.Array" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Array.System#Collections#IList#IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Array" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Array" /> 是唯讀，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <returns>在指定索引上的項目。</returns>
      <param name="index">要取得或設定的項目之索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ICollection.Count" />。</exception>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好一維的維度。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="value">要從 <see cref="T:System.Collections.IList" /> 移除的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。-或-<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除在指定索引處的 <see cref="T:System.Collections.IList" /> 項目。</summary>
      <param name="index">要移除的項目索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">索引不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。-或-<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>判斷目前的集合物件在排序次序中位於另一個物件之前、相同位置或之後。</summary>
      <returns>整數，表示目前集合物件與 other 的關聯性，如下表所示。傳回值描述-1目前的執行個體在 <paramref name="other" /> 之前。0目前的執行個體與 <paramref name="other" /> 相等。1目前的執行個體在 <paramref name="other" /> 之後。</returns>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">將目前的物件與 <paramref name="other" /> 相比較的物件。</param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>判斷物件與目前的執行個體是否相等。</summary>
      <returns>如果兩個物件相等則為 true，否則為 false。</returns>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">物件，判斷目前的執行個體與 <paramref name="other" /> 是否相等。 </param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
      <param name="comparer">物件，會計算目前物件的雜湊碼。</param>
    </member>
    <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
      <summary>判斷陣列中的每一個項目是否符合指定之述詞所定義的條件。</summary>
      <returns>如果 <paramref name="array" /> 中的每一個元素都符合指定之述詞所定義的條件，則為 true，否則為 false。如果陣列中沒有元素，則傳回值為 true。</returns>
      <param name="array">要檢查之以零起始的一維 <see cref="T:System.Array" /> 所根據的條件。</param>
      <param name="match">述詞，可定義檢查項目所根據的條件。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>分隔一維陣列的區段。</summary>
      <typeparam name="T">陣列區段中的項目類型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 結構的新執行個體，這個新執行個體會分隔指定陣列中的所有項目。</summary>
      <param name="array">要包裝的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 結構的新執行個體，這個新執行個體會分隔指定陣列中的指定項目範圍。</summary>
      <param name="array">包含要分隔之項目範圍的陣列。</param>
      <param name="offset">陣列中第一個項目的以零起始的索引。</param>
      <param name="count">範圍中的項目數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小於 0</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 沒有指定 <paramref name="array" /> 中的有效範圍。</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>取得原始陣列，這個陣列包含陣列區段分隔的項目範圍。</summary>
      <returns>傳遞給建構函式的原始陣列，並且這個陣列包含 <see cref="T:System.ArraySegment`1" /> 分隔的範圍。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>取得陣列區段分隔範圍中的項目數目。</summary>
      <returns>
        <see cref="T:System.ArraySegment`1" /> 分隔範圍中的項目數目。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>判斷指定的 <see cref="T:System.ArraySegment`1" /> 結構和目前的執行個體是否相等。</summary>
      <returns>如果指定的 <see cref="T:System.ArraySegment`1" /> 結構和目前執行個體相等，則為 true，否則為 false。</returns>
      <param name="obj">要與目前執行個體比較的結構。</param>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>判斷指定的物件是否和目前的執行個體相等。</summary>
      <returns>如果指定的物件是 <see cref="T:System.ArraySegment`1" /> 結構，並且和目前執行個體相等，則為 true，否則為 false。</returns>
      <param name="obj">要與目前執行個體比較的物件。</param>
    </member>
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>取得陣列區段分隔範圍中的第一個項目位置，相對於原始陣列的開頭。</summary>
      <returns>
        <see cref="T:System.ArraySegment`1" /> 分隔範圍中的第一個項目位置，相對於原始陣列的開頭。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指出兩個 <see cref="T:System.ArraySegment`1" /> 結構是否相等。</summary>
      <returns>如果 <paramref name="a" /> 等於 <paramref name="b" />，則為 true，否則為 false。</returns>
      <param name="a"> 結構，位在相等運算子的左側。</param>
      <param name="b">相等運算子右側的結構。</param>
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指出兩個 <see cref="T:System.ArraySegment`1" /> 結構是否不相等。</summary>
      <returns>如果 <paramref name="a" /> 不等於 <paramref name="b" /> 則為 true，否則為 false。</returns>
      <param name="a">不等運算子左側的結構。</param>
      <param name="b">不等運算子右側的結構。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至陣列區段。</summary>
      <param name="item">要加入至陣列區段的物件。</param>
      <exception cref="T:System.NotSupportedException">此陣列區段是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>從陣列區段中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException">此陣列區段是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>判斷此陣列區段是否包含特定的值。</summary>
      <returns>如果在陣列區段中找到 <paramref name="item" /> 則為 true，否則為 false。</returns>
      <param name="item">要在陣列區段中尋找的物件。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>從指定的陣列索引處開始，將陣列區段的項目複製到陣列。</summary>
      <param name="array">一維陣列，它是從陣列區段複製過來之項目的目的端。陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源陣列區段中的項目數大於從 <paramref name="arrayIndex" /> 到目的端 <paramref name="array" /> 末尾的可用空間。-或-<paramref name="T" /> 型別無法自動轉換成目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出陣列區段是否為唯讀。</summary>
      <returns>如果陣列區段是唯讀的，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>從陣列區段中移除第一次出現的特定物件。</summary>
      <returns>如果已順利從陣列區段中移除 <paramref name="item" /> 則為 true，否則為 false。如果在陣列區段中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <param name="item">要從陣列區段中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">此陣列區段是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回列舉值，該值可逐一查看陣列區段。</summary>
      <returns>可用來逐一查看陣列區段的列舉值。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
      <summary>判斷陣列區段中特定項目的索引。</summary>
      <returns>如果可在清單中找到，則為 <paramref name="item" /> 的索引，否則為 -1。</returns>
      <param name="item">要在陣列區段中尋找的物件。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>將項目插入位於指定之索引處的陣列區段中。</summary>
      <param name="index">應該插入 <paramref name="item" /> 之以零起始的索引。</param>
      <param name="item">要插入陣列區段中的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是陣列區段中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">此陣列區段是唯讀的。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <returns>在指定索引上的項目。</returns>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.ArraySegment`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">已設定該屬性，陣列區段是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>在指定的索引處移除陣列區段項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是陣列區段中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">此陣列區段是唯讀的。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>取得位於陣列區段之指定索引位置的項目。</summary>
      <returns>在指定索引上的項目。</returns>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.ArraySegment`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回列舉值，該值可逐一查看陣列區段。</summary>
      <returns>可用來逐一查看陣列區段的列舉值。</returns>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>嘗試在陣列中儲存錯誤型別的元素時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>初始化 <see cref="T:System.ArrayTypeMismatchException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.ArrayTypeMismatchException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.ArrayTypeMismatchException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>參考要在對應之非同步作業完成時呼叫的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.AsyncCallback.BeginInvoke(System.IAsyncResult,System.AsyncCallback,System.Object)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.EndInvoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.Invoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Attribute">
      <summary>代表自訂屬性的基底類別。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>初始化 <see cref="T:System.Attribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>傳回數值，表示這個執行個體是否等於指定的物件。</summary>
      <returns>如果 <paramref name="obj" /> 和這個執行個體具有相同的型別和值，則為 true，否則為 false。</returns>
      <param name="obj">要與這個執行個體或 null 相比較的 <see cref="T:System.Object" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>指定有效套用屬性 (Attribute) 的應用程式項目。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>屬性可以套用至任何應用程式項目。</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>屬性可以套用至組件。</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>屬性可以套用至類別。</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>屬性可以套用至建構函式。</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>屬性可以套用至委派。</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>屬性可以套用至列舉型別。</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>屬性可以套用至事件。</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>屬性可以套用至欄位。</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>屬性可以套用至泛型參數。</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>屬性可以套用至介面。</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>屬性可以套用至方法。</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>屬性可以套用至模組。</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>屬性可以套用至參數。</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>屬性 (Attibute) 可以套用至屬性 (Property)。</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>屬性可以套用至傳回值。</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>屬性可以套用至結構，也就是實值型別 (Value Type)。</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>指定另一個屬性 (Attribute) 類別的使用方法。此類別無法被繼承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>使用指定的 <see cref="T:System.AttributeTargets" /> 清單、<see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> 值和 <see cref="P:System.AttributeUsageAttribute.Inherited" /> 值，初始化 <see cref="T:System.AttributeUsageAttribute" /> 類別的新執行個體。</summary>
      <param name="validOn">使用位元的 OR 運算所結合的數值集，用來指示那個程式項目有效。</param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>取得或設定布林值 (Boolean)，指出所指定屬性的幾個執行個體能否指定給單一程式項目。</summary>
      <returns>如果允許指定一個以上的執行個體，則為 true，否則為 false。預設為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>取得或設定布林 (Boolean) 值，指出所指示的屬性是否能被衍生類別和覆寫成員所繼承。</summary>
      <returns>如果衍生類別及覆寫成員可以繼承屬性，則為 true，否則為 false。預設為 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>取得一組數值，辨識哪些程式項目可套用所指定的屬性。</summary>
      <returns>一個或多個 <see cref="T:System.AttributeTargets" /> 值。預設為 All。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>當動態連結程式庫 (DLL) 或可執行程式的檔案映像無效時擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="inner" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和檔案名稱，初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>取得造成這個例外狀況的檔案名稱。</summary>
      <returns>具有無效影像的檔案名稱；如果沒有檔案名稱傳遞給目前執行個體的建構函式，則為 Null 參考。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>取得造成這個例外狀況的錯誤訊息和檔案名稱。</summary>
      <returns>字串，包含造成這個例外狀況的錯誤訊息和檔案名稱。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>傳回這個例外狀況的完整名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤。</summary>
      <returns>字串，包含這個例外狀況的完整名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.Boolean">
      <summary>表示布林值 (true 或 false)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>比較這個執行個體以及指定的 <see cref="T:System.Boolean" /> 物件，並傳回整數，這個整數表示兩個字串在排序次序中彼此的關聯性。</summary>
      <returns>帶正負號的整數 (Signed Integer)，表示這個執行個體 (Instance) 與 <paramref name="value" /> 的相對值。傳回值條件小於零這個執行個體是 false 而且 <paramref name="value" /> 是 true。零這個執行個體和 <paramref name="value" /> 相同 (同為 true 或為 false)。大於零這個執行個體是 true 而且 <paramref name="value" /> 是 false。</returns>
      <param name="value">要與此執行個體相比較的 <see cref="T:System.Boolean" /> 物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>傳回指示這個執行個體是否等於指定之 <see cref="T:System.Boolean" /> 物件的值。</summary>
      <returns>如果 <paramref name="obj" /> 與這個執行個體 (Instance) 具有相同的值，則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體 (Instance) 相比較的 <see cref="T:System.Boolean" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Boolean" /> and has the same value as this instance; otherwise, false.</returns>
      <param name="obj">與這個執行個體相比較的物件。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>將布林值 false 表示為字串。此欄位為唯讀。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.Boolean" /> 的雜湊程式碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>將指定之邏輯值的字串表示法轉換為相等的 <see cref="T:System.Boolean" />，或是在字串不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 的值時擲回例外狀況。</summary>
      <returns>如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.TrueString" /> 欄位的值則為 true，如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.FalseString" /> 欄位的值則為 false。</returns>
      <param name="value">字串，包含要轉換的值。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 欄位的值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="obj" /> 的相對順序。傳回值條件小於零這個執行個體是 false 而且 <paramref name="obj" /> 是 true。零這個執行個體和 <paramref name="obj" /> 相同 (同為 true 或為 false)。大於零這個執行個體是 true 而且 <paramref name="obj" /> 是 false。-或- <paramref name="obj" /> 為 null。</returns>
      <param name="obj">與這個執行個體相比較的物件，或 null。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>true 或 false。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>如果這個執行個體為 true，則為 1，否則為 0。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">嘗試將 <see cref="T:System.Boolean" /> 值轉換為 <see cref="T:System.Char" /> 值。不支援這個轉換。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">嘗試將 <see cref="T:System.Boolean" /> 值轉換為 <see cref="T:System.DateTime" /> 值。不支援這個轉換。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的描述，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>如果這個執行個體為 true，則為 1，否則為 0。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的描述，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>如果這個執行個體為 true，則為 1，否則為 0。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>如果這個執行個體為 true，則為 1，否則為 0。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>如果這個執行個體為 true，則為 1，否則為 0。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>如果這個執行個體為 true，則為 1，否則為 0。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>如果這個執行個體為 true，則為 1，否則為 0。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的描述，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>如果這個執行個體為 true，則為 1，否則為 0。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToString(System.IFormatProvider)"></member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>所指定型別的物件，其值等於這個 Boolean 物件的值。</returns>
      <param name="type">所要的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的文化特性 (Culture) 特定資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.InvalidCastException">不支援所要求的型別轉換。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>如果這個執行個體為 true，則為 1，否則為 0。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>如果這個執行個體為 true，則為 1，否則為 0。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>如果這個執行個體為 true，則為 1，否則為 0。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>將這個執行個體的值轉換為它的對等字串表示 ("True" 或 "False")。</summary>
      <returns>如果這個執行個體的值是 true，則為 <see cref="F:System.Boolean.TrueString" />；如果這個執行個體的值是 false，則為 <see cref="F:System.Boolean.FalseString" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>將布林值 true 表示為字串。此欄位為唯讀。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>嘗試將邏輯值的指定字串表示法轉換為其相等的 <see cref="T:System.Boolean" />。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 <paramref name="value" /> 轉換成功，則為 true，否則為 false。</returns>
      <param name="value">字串，包含要轉換的值。</param>
      <param name="result">如果轉換成功，則當 <paramref name="value" /> 等於 <see cref="F:System.Boolean.TrueString" />，這個方法會傳回 true；若 <paramref name="value" /> 等於 <see cref="F:System.Boolean.FalseString" />，則傳回 false。若轉換失敗，則包含 false。如果 <paramref name="value" /> 為 null，或不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 欄位的值，則轉換失敗。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Buffer">
      <summary>操作基本類型的陣列。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>在從特定位移 (Offset) 開始的來源陣列中，複製指定的位元組數到從特定位移開始的目的陣列上。</summary>
      <param name="src">來源緩衝區。</param>
      <param name="srcOffset">
        <paramref name="src" /> 中以零起始的位元組位移。</param>
      <param name="dst">目的緩衝區。</param>
      <param name="dstOffset">
        <paramref name="dst" /> 中以零起始的位元組位移。</param>
      <param name="count">要複製的位元組數目。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> 或 <paramref name="dst" /> 是 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> 或 <paramref name="dst" /> 不是基本的陣列。-或-<paramref name="src" /> 中的位元組數目小於 <paramref name="srcOffset" /> 加上 <paramref name="count" />。-或-<paramref name="dst" /> 中的位元組數目小於 <paramref name="dstOffset" /> 加上 <paramref name="count" />。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />、<paramref name="dstOffset" /> 或 <paramref name="count" /> 小於 0。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>傳回指定陣列中的位元組數目。</summary>
      <returns>陣列中的位元組數目。</returns>
      <param name="array">陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是原始的。 </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> 大於 2 GB。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>在指定陣列的指定位置擷取位元組。</summary>
      <returns>傳回陣列中的 <paramref name="index" /> 位元組。</returns>
      <param name="array">陣列。</param>
      <param name="index">陣列中的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是原始的。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 為負數或大於 <paramref name="array" /> 的長度。 </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> 大於 2 GB。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
      <summary>複製到另一個長整數值從記憶體中的一個位址為指定的位元組數目。</summary>
      <param name="source">若要複製的位元組的位址。</param>
      <param name="destination">目標位址。</param>
      <param name="destinationSizeInBytes">可用的目的地記憶體區塊中的位元組數目。</param>
      <param name="sourceBytesToCopy">要複製的位元組數目。  </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> 大於 <paramref name="destinationSizeInBytes" />。</exception>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
      <summary>會複製一個做為從記憶體中的一個地址不帶正負號的長整數值至另一個指定的位元組數目。</summary>
      <param name="source">若要複製的位元組的位址。</param>
      <param name="destination">目標位址。</param>
      <param name="destinationSizeInBytes">可用的目的地記憶體區塊中的位元組數目。</param>
      <param name="sourceBytesToCopy">要複製的位元組數目。   </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> 大於 <paramref name="destinationSizeInBytes" />。</exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>指派指定的值給指定陣列中特定位置的位元組。</summary>
      <param name="array">陣列。</param>
      <param name="index">陣列中的位置。</param>
      <param name="value">要指派的值。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是原始的。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 為負數或大於 <paramref name="array" /> 的長度。 </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> 大於 2 GB。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Byte">
      <summary>代表 8 位元不帶正負號的整數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>將這個執行個體與指定的 8 位元不帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比較的 8 位元不帶正負號的整數。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>傳回數值，指示這個執行個體和指定的 <see cref="T:System.Byte" /> 物件是否表示相同的值。</summary>
      <returns>如果 true 等於這個執行個體則為 <paramref name="obj" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Byte" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相比較的物件，或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.Byte" /> 的雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>表示 <see cref="T:System.Byte" /> 最大的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>表示 <see cref="T:System.Byte" /> 最小的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>將數字的字串表示，轉換為其相等的 <see cref="T:System.Byte" />。</summary>
      <returns>位元組值，該值相當於 <paramref name="s" /> 中包含的數字。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式中數字的字串表示轉換為其相等的 <see cref="T:System.Byte" />。</summary>
      <returns>位元組值，該值相當於 <paramref name="s" /> 中包含的數字。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定樣式和特定文化特性的格式) 轉換為其相等的 <see cref="T:System.Byte" />。</summary>
      <returns>位元組值，該值相當於 <paramref name="s" /> 中包含的數字。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供 <paramref name="s" /> 格式的相關特定文化特性資訊。如果 <paramref name="provider" /> 是 null，則會使用執行緒目前的文化特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>將使用指定特定文化特性格式之數字的字串表示轉換為其相等的 <see cref="T:System.Byte" />。</summary>
      <returns>位元組值，該值相當於 <paramref name="s" /> 中包含的數字。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <param name="provider">物件，提供 <paramref name="s" /> 的相關特定文化特性剖析資訊。如果 <paramref name="provider" /> 是 null，則會使用執行緒目前的文化特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Description Less than zero This instance precedes <paramref name="value" /> in the sort order. Zero This instance occurs in the same position as <paramref name="value" /> in the sort order. Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Byte" />. </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零，則為 true，否則為 false。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Byte" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>將目前 <see cref="T:System.Byte" /> 物件的值，轉換為其相等的字串表示。</summary>
      <returns>這個物件值的字串表示，由沒有零的前置字元且範圍從 0 到 9 的數字順序所組成。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將目前 <see cref="T:System.Byte" /> 物件的數值轉換為其相等的字串表示。</summary>
      <returns>這個物件值的字串表示，採用 <paramref name="provider" /> 參數所指定的格式。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>使用指定的格式，將目前 <see cref="T:System.Byte" /> 物件的值，轉換為其相等字串表示。</summary>
      <returns>目前 <see cref="T:System.Byte" /> 物件的字串表示，按照 <paramref name="format" /> 參數所指定來格式化。</returns>
      <param name="format">數值格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier.Supported format specifiers are listed in the Remarks section.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.Byte" /> 物件的值，轉換為其相等的字串表示。</summary>
      <returns>目前 <see cref="T:System.Byte" /> 物件的字串表示，按照 <paramref name="format" /> 及 <paramref name="provider" /> 參數所指定來格式化。</returns>
      <param name="format">標準或自訂數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier.Supported format specifiers are listed in the Remarks section.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>嘗試將數字的字串表示轉換成其相等的 <see cref="T:System.Byte" />，並傳回一個值表示轉換是否成功。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <param name="result">當這個方法傳回時，如果轉換成功，則會包含相當於 <see cref="T:System.Byte" /> 中所含之數字的 <paramref name="s" /> 值；如果轉換失敗則為零。這個參數未初始化便傳遞；<paramref name="result" /> 原始提供的任何值都將遭到覆寫。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>將數字的字串表示 (使用指定樣式和特定文化特性的格式) 轉換為其相等的 <see cref="T:System.Byte" />。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。如果 <paramref name="provider" /> 是 null，則會使用執行緒目前的文化特性。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 8 位元不帶正負號整數，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、不是正確格式，或是表示小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。這個參數未初始化便傳遞；<paramref name="result" /> 原始提供的任何值都將遭到覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Char">
      <summary>表示 UTF-16 程式碼單位 字元。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>比較這個執行個體與指定的 <see cref="T:System.Char" /> 物件，並且表示這個執行個體在排序次序中，位於所指定 <see cref="T:System.Char" /> 物件之前、之後或相同位置。</summary>
      <returns>帶正負號的數字，指出這個執行個體在排序順序中的位置與 <paramref name="value" /> 參數的相對關係。傳回值 描述 小於零 這個執行個體位於 <paramref name="value" /> 之前。零 這個執行個體在排序次序中的位置與 <paramref name="value" /> 相同。大於零 這個執行個體位於 <paramref name="value" /> 之後。</returns>
      <param name="value">要比較的 <see cref="T:System.Char" /> 物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.ConvertFromUtf32(System.Int32)">
      <summary>將指定之 Unicode 字碼指標轉換成 UTF-16 編碼的字串。</summary>
      <returns>由一個 <see cref="T:System.Char" /> 物件或 <see cref="T:System.Char" /> 物件的 Surrogate 字組所組成的字串，這些物件相當於 <paramref name="utf32" /> 參數所指定的字碼指標。</returns>
      <param name="utf32">21 位元 Unicode 字碼指標。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="utf32" /> 不是從 U+0 到 U+10FFFF 範圍的有效 21 位元 Unicode 字碼指標 (此範圍不包括從 U+D800 到 U+DFFF 範圍的 Surrogate 字組)。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.Char,System.Char)">
      <summary>將 UTF-16 編碼之 Surrogate 字組的值轉換成 Unicode 字碼指標。</summary>
      <returns>以 <paramref name="highSurrogate" /> 和 <paramref name="lowSurrogate" /> 參數代表的 21 位元 Unicode 字碼指標。</returns>
      <param name="highSurrogate">高 Surrogate 字碼單位 (也就是從 U+D800 到 U+DBFF 範圍內的字碼單位)。</param>
      <param name="lowSurrogate">低 Surrogate 字碼單位 (也就是從 U+DC00 到 U+DFFF 範圍內的字碼單位)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> 不在 U+D800 到 U+DBFF 的範圍內，或 <paramref name="lowSurrogate" /> 不在 U+DC00 到 U+DFFF 的範圍內。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.String,System.Int32)">
      <summary>將字串中指定之位置上的 UTF-16 編碼之字元或 Surrogate 字組的值轉換成 Unicode 字碼指標。</summary>
      <returns>21 位元 Unicode 字碼指標，以 <paramref name="s" /> 參數中由 <paramref name="index" /> 參數指定之位置處的字元或 Surrogate 字組來代表。</returns>
      <param name="s">包含字元或 Surrogate 字組的字串。</param>
      <param name="index">
        <paramref name="s" /> 中字元或 Surrogate 配對的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是在 <paramref name="s" /> 內的位置。</exception>
      <exception cref="T:System.ArgumentException">指定之索引位置包含 Surrogate 字組，而且此字組中的第一個字元不是有效的高 Surrogate，或是此字組中的第二個字元不是有效的低 Surrogate。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.Char" /> 物件。</summary>
      <returns>當 true 參數等於這個執行個體的值時為 <paramref name="obj" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Char" />，否則為 false。</returns>
      <param name="obj">與這個執行個體或 null 相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>將指定的數字 Unicode 字元轉換成雙精確度浮點數。</summary>
      <returns>如果該字元代表一個數字，則為 <paramref name="c" /> 的數值，否則為 -1.0。</returns>
      <param name="c">要轉換的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>將指定字串中指定位置的數字 Unicode 字元轉換成雙精確度浮點數。</summary>
      <returns>如果該字元代表一個數字，則為 <paramref name="index" /> 中 <paramref name="s" /> 位置處的字元數值，否則為 -1。</returns>
      <param name="s">
        <see cref="T:System.String" />。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為控制字元。</summary>
      <returns>當 true 是控制字元時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為控制字元。</summary>
      <returns>當 true 中位於 <paramref name="index" /> 的字元是控制字元時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為十進位數字。</summary>
      <returns>當 true 是十進位數字時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為十進位數字。</summary>
      <returns>當 true 中位於 <paramref name="index" /> 的字元是十進位數字時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.Char)">
      <summary>指出指定的 <see cref="T:System.Char" /> 物件是否為高 Surrogate。</summary>
      <returns>當 true 參數的數值範圍是從 U+D800 到 U+DBFF 時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.String,System.Int32)">
      <summary>表示字串中指定位置處的 <see cref="T:System.Char" /> 物件是否為高 Surrogate。</summary>
      <returns>當 true 參數中指定字元的數值範圍是從 U+D800 到 U+DBFF 時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是在 <paramref name="s" /> 內的位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>表示指定的 Unicode 字元是否分類為 Unicode 字母。</summary>
      <returns>當 true 是字母時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為 Unicode 字母。</summary>
      <returns>當 true 中位於 <paramref name="index" /> 的字元是字母時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為字母或十進位數字。</summary>
      <returns>當 true 是字母或十進位數字時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為字母或十進位數字。</summary>
      <returns>當 true 中位於 <paramref name="index" /> 的字元是字母或十進位數字時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為小寫字母。</summary>
      <returns>當 true 是小寫字母時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為小寫字母。</summary>
      <returns>當 true 中位在 <paramref name="index" /> 的字元是小寫字母時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.Char)">
      <summary>指出指定的 <see cref="T:System.Char" /> 物件是否為低 Surrogate。</summary>
      <returns>當 true 參數的數值範圍是從 U+DC00 到 U+DFFF 時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.String,System.Int32)">
      <summary>表示字串中指定位置處的 <see cref="T:System.Char" /> 物件是否為低 Surrogate。</summary>
      <returns>當 true 參數中指定字元的數值範圍是從 U+DC00 到 U+DFFF 時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是在 <paramref name="s" /> 內的位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為數字。</summary>
      <returns>當 true 是數字時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為數字。</summary>
      <returns>當 true 中位於 <paramref name="index" /> 的字元是數字時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為標點符號。</summary>
      <returns>當 true 是標點符號時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為標點符號。</summary>
      <returns>當 true 中位於 <paramref name="index" /> 的字元是標點符號時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為分隔符號字元。</summary>
      <returns>當 true 是分隔符號字元時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為分隔符號字元。</summary>
      <returns>當 true 中位於<paramref name="index" /> 的字元是分隔符號字元時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>指出指定的字元是否有 Surrogate 字碼單位。</summary>
      <returns>當 true 為高 Surrogate 或低 Surrogate 時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>指出位於指定的字串中指定位置處的字元是否有 Surrogate 字碼單位。</summary>
      <returns>當 true 中位於 <paramref name="index" /> 的字元為高 Surrogate 或低 Surrogate 時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>表示兩個指定的 <see cref="T:System.Char" /> 物件是否組成 Surrogate 字組。</summary>
      <returns>當 true 參數的數值範圍是從 U+D800 到 U+DBFF，且 <paramref name="highSurrogate" /> 參數的數值範圍是從 U+DC00 到 U+DFFF 時為 <paramref name="lowSurrogate" />，否則為 false。</returns>
      <param name="highSurrogate">要評估為 Surrogate 字組之高 Surrogate 的字元。</param>
      <param name="lowSurrogate">要評估為 Surrogate 字組之低 Surrogate 的字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>表示字串中指定位置處的兩個相鄰 <see cref="T:System.Char" /> 物件是否組成 Surrogate 字組。</summary>
      <returns>當 true 參數位於 <paramref name="s" /> 和 <paramref name="index" /> +1 時包含相鄰的字元，而且位於 <paramref name="index" /> 之字元的數值範圍是從 U+D800 到 U+DBFF，同時位於 <paramref name="index" /> +1 之字元的數值範圍是從 U+DC00 到 U+DFFF 時為 <paramref name="index" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中要評估之字元字組的開始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是在 <paramref name="s" /> 內的位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為符號字元。</summary>
      <returns>當 true 是符號字元時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為符號字元。</summary>
      <returns>當 true 中位於 <paramref name="index" /> 的字元是符號字元時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為大寫字母。</summary>
      <returns>當 true 是大寫字母時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為大寫字母。</summary>
      <returns>當 true 中位於 <paramref name="index" /> 的字元是大寫字母時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為泛空白字元。</summary>
      <returns>當 true 是空白字元時為 <paramref name="c" />，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為泛空白字元。</summary>
      <returns>當 true 中位於 <paramref name="index" /> 的字元是空白字元時為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>表示 <see cref="T:System.Char" /> 最大的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>表示 <see cref="T:System.Char" /> 最小的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.Parse(System.String)">
      <summary>將指定的字串值轉換成它的對等 Unicode 字元。</summary>
      <returns>Unicode 字元，相當於 <paramref name="s" /> 中的唯一字元。</returns>
      <param name="s">包含單一字元的字串，或 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的長度不為 1。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體在排序次序中與 <paramref name="value" /> 參數的相對位置。傳回值 描述 小於零 這個執行個體在排序次序中會在 <paramref name="value" /> 之前。零 這個執行個體在排序次序中的位置與 <paramref name="value" /> 相同。大於零 這個執行個體在排序順序中會跟在 <paramref name="value" /> 之後。-或- <paramref name="value" /> 為 null。</returns>
      <param name="value">要與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Char" /> 物件。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的值未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary> 如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary> 如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary> 如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToString(System.IFormatProvider)"></member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>指定類型的物件。</returns>
      <param name="type">
        <see cref="T:System.Type" /> 物件。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.InvalidCastException">目前 <see cref="T:System.Char" /> 物件的值不能轉換為 <paramref name="type" /> 參數指定的型別。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件。(指定 null，因為已忽略 <paramref name="provider" /> 參數。)</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件。(指定 null，因為已忽略 <paramref name="provider" /> 參數。)</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件。(指定 null，因為已忽略 <paramref name="provider" /> 參數。)</param>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>將 Unicode 字元值轉換成它的對等小寫。</summary>
      <returns>
        <paramref name="c" /> 的對等小寫；如果 <paramref name="c" /> 已經是小寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <param name="c">要轉換的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
      <summary>使用不因文化特性而異 (Invariant Culture) 的轉換規則，將 Unicode 字元的值轉換成其小寫的同等項目。</summary>
      <returns>
        <paramref name="c" /> 參數的對等小寫；如果 <paramref name="c" /> 已經是小寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <param name="c">要轉換的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToString">
      <summary>將這個執行個體的值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>將指定的 Unicode 字元轉換成它的對等字串表示。</summary>
      <returns>
        <paramref name="c" /> 值的字串表示。</returns>
      <param name="c">要轉換的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>將 Unicode 字元值轉換成它的對等大寫。</summary>
      <returns>
        <paramref name="c" /> 的對等大寫；如果 <paramref name="c" /> 已經是大寫、沒有對等大寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <param name="c">要轉換的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
      <summary>使用不因文化特性而異的轉換規則，將 Unicode 字元的值轉換成其大寫的同等項目。</summary>
      <returns>
        <paramref name="c" /> 參數的對等大寫；如果 <paramref name="c" /> 已經是大寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <param name="c">要轉換的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>將指定的字串值轉換成它的對等 Unicode 字元。傳回碼 (Return Code) 會指出轉換是成功或是失敗。</summary>
      <returns>如果 true 參數轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">包含單一字元的字串，或 null。</param>
      <param name="result">當這個方法傳回時，如果轉換成功則包含相當於 <paramref name="s" /> 中唯一字元的 Unicode 字元；如果轉換失敗，則為未定義的值。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <paramref name="s" /> 的長度不是 1。這個參數會以未初始化的狀態傳遞。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>指出程式項目是否符合 Common Language Specification (CLS) 標準。此類別無法被繼承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>使用布林值初始化 <see cref="T:System.CLSCompliantAttribute" /> 類別的執行個體，該布林值會指出指定的程式項目是否符合 CLS 標準。</summary>
      <param name="isCompliant">如果符合 CLS 標準，則為 true，否則為 false。</param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>取得布林值，表示指定程式項目是否符合 CLS 標準。</summary>
      <returns>如果程式項目符合 CLS 標準，則為 true，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Comparison`1">
      <summary>表示比較兩個相同型別之物件的方法。</summary>
      <typeparam name="T">要比較之物件的型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Comparison`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Comparison`1.BeginInvoke(`0,`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Comparison`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Comparison`1.Invoke(`0,`0)"></member>
    <member name="T:System.DateTime">
      <summary>表示時間的瞬間，通常以一天的日期和時間表示。若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月和日。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。-或- <paramref name="month" /> 是小于 1 或大于 12。-或- <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月、日、時、分和秒。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。-或- <paramref name="month" /> 是小于 1 或大于 12。-或- <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或- <paramref name="hour" /> 为小于 0 或大于 23。-或- <paramref name="minute" /> 为小于 0 或大于 59。-或- <paramref name="second" /> 为小于 0 或大于 59。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定年、月、日、時、分、秒以及國際標準時間 (UTC) 或本地時間。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="kind">指出 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 是指定本地時間或國際標準時間 (UTC)，或是兩者皆非的其中一個列舉值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。-或- <paramref name="month" /> 是小于 1 或大于 12。-或- <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或- <paramref name="hour" /> 为小于 0 或大于 23。-或- <paramref name="minute" /> 为小于 0 或大于 59。-或- <paramref name="second" /> 为小于 0 或大于 59。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月、日、時、分、秒和毫秒。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。-或- <paramref name="month" /> 是小于 1 或大于 12。-或- <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或- <paramref name="hour" /> 为小于 0 或大于 23。-或- <paramref name="minute" /> 为小于 0 或大于 59。-或- <paramref name="second" /> 为小于 0 或大于 59。-或- <paramref name="millisecond" /> 为小于 0 或大于 999。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定年、月、日、時、分、秒、毫秒以及國際標準時間 (UTC) 或本地時間。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="kind">指出 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="millisecond" /> 是指定本地時間或國際標準時間 (UTC)，或是兩者皆非的其中一個列舉值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。-或- <paramref name="month" /> 是小于 1 或大于 12。-或- <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或- <paramref name="hour" /> 为小于 0 或大于 23。-或- <paramref name="minute" /> 为小于 0 或大于 59。-或- <paramref name="second" /> 为小于 0 或大于 59。-或- <paramref name="millisecond" /> 为小于 0 或大于 999。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為刻度的指定數目。</summary>
      <param name="ticks">以 0001 年 1 月 1 日 00:00:00.000 (西曆) 以來經過的 100 奈秒間隔數表示的日期和時間。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的刻度數以及國際標準時間 (UTC) 或本地時間。</summary>
      <param name="ticks">以 0001 年 1 月 1 日 00:00:00.000 (西曆) 以來經過的 100 奈秒間隔數表示的日期和時間。</param>
      <param name="kind">指出 <paramref name="ticks" /> 是指定本地時間或國際標準時間 (UTC)，或是兩者皆非的其中一個列舉值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定之 <see cref="T:System.TimeSpan" /> 的值。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示時間間隔的總和。</returns>
      <param name="value">正數或負數時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的天數。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示天數的總和。</returns>
      <param name="value">整數和小數的天數。<paramref name="value" /> 參數可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的時數。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示時數的總和。</returns>
      <param name="value">整數和小數的時數。<paramref name="value" /> 參數可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的毫秒數。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示毫秒數的總和。</returns>
      <param name="value">整數和小數的毫秒數。<paramref name="value" /> 參數可以是負數或正數。請注意，這個值會四捨五入為最接近的整數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的分鐘數。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示分鐘數的總和。</returns>
      <param name="value">整數和小數的分鐘數。<paramref name="value" /> 參數可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的月數。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="months" /> 的總和。</returns>
      <param name="months">月份數。<paramref name="months" /> 參數可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。-或- <paramref name="months" /> 小于-120,000 或大于 120000。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的秒數。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示秒數的總和。</returns>
      <param name="value">整數和小數的秒數。<paramref name="value" /> 參數可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的刻度數。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示時間的總和。</returns>
      <param name="value">100 毫微秒刻度數。<paramref name="value" /> 參數可以是正數或負數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的年數。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示年數的總和。</returns>
      <param name="value">年份數。<paramref name="value" /> 參數可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 或產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>比較 <see cref="T:System.DateTime" /> 的兩個執行個體，並傳回整數，這個整數表示第一個執行個體早於、同於或晚於第二個執行個體。</summary>
      <returns>帶正負號的數字，該數字表示 <paramref name="t1" /> 和 <paramref name="t2" /> 的相對值。實值類型 條件 小於零 <paramref name="t1" /> 早於 <paramref name="t2" />。零 <paramref name="t1" /> 與 <paramref name="t2" /> 相同。大於零 <paramref name="t1" /> 晚於 <paramref name="t2" />。</returns>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>比較這個執行個體的值與指定的 <see cref="T:System.DateTime" /> 值，並且傳回一個整數，指出這個執行個體是早於、同於或晚於指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 參數的相對值。值 描述 小於零 這個執行個體早於 <paramref name="value" />。零 這個執行個體和 <paramref name="value" /> 相同。大於零 這個執行個體晚於 <paramref name="value" />。</returns>
      <param name="value">要與目前執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>取得這個執行個體的日期部分。</summary>
      <returns>新的物件，具有與這個執行個體相同的日期，並將時間值設定為午夜 12:00:00 (00:00:00)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>取得由這個執行個體表示的月份天數。</summary>
      <returns>日期元件，以 1 到 31 之間的值表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>取得由這個執行個體表示的一週天數。</summary>
      <returns>列舉的常數，表示這個 <see cref="T:System.DateTime" /> 值代表的是一週的哪一天。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>取得由這個執行個體表示的一年天數。</summary>
      <returns>一年中的日期，以 1 到 366 之間的值表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>傳回指定之月份和年份中的天數。</summary>
      <returns>指定 <paramref name="month" /> 的 <paramref name="year" /> 中的天數。例如，如果 <paramref name="month" /> 等於 2 (表示二月)，傳回值是 28 或 29 (根據 <paramref name="year" /> 是否為閏年)。</returns>
      <param name="year">年。</param>
      <param name="month">月 (範圍從 1 到 12 的數字)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 是小于 1 或大于 12。-或-<paramref name="year" /> 是小于 1 或大于 9999。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>傳回值，該值指出這個執行個體的值是否等於指定之 <see cref="T:System.DateTime" /> 執行個體的值。</summary>
      <returns>當 true 參數等於這個執行個體的值時為 <paramref name="value" />，否則為 false。</returns>
      <param name="value">與這個執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>傳回值，指出兩個 <see cref="T:System.DateTime" /> 執行個體是否有相同的日期和時間值。</summary>
      <returns>當兩個值相等時為 true，否則為 false。</returns>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="value" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.DateTime" />，否則為 false。</returns>
      <param name="value">與這個執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
      <summary>還原序列化 64 位元的二進位值，並重新建立原始的序列化 <see cref="T:System.DateTime" /> 物件。</summary>
      <returns>物件，與 <see cref="T:System.DateTime" /> 方法所序列化的 <see cref="M:System.DateTime.ToBinary" /> 物件相等。</returns>
      <param name="dateData">64 位元帶正負號的整數，可在 2 位元欄位中編碼 <see cref="P:System.DateTime.Kind" /> 屬性，並在 62 位元欄位中編碼 <see cref="P:System.DateTime.Ticks" /> 屬性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateData" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>將指定的 Windows 檔案時間轉換成相等的本地時間。</summary>
      <returns>物件，表示 <paramref name="fileTime" /> 參數所表示日期和時間的本地時間對應項。</returns>
      <param name="fileTime">Windows 檔案時間以刻度表示。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小於 0，或表示大於 <see cref="F:System.DateTime.MaxValue" /> 的時間。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>將指定的 Windows 檔案時間轉換成相等的 UTC 時間。</summary>
      <returns>物件，表示 <paramref name="fileTime" /> 參數所表示日期和時間的 UTC 時間對應項。</returns>
      <param name="fileTime">Windows 檔案時間以刻度表示。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小於 0，或表示大於 <see cref="F:System.DateTime.MaxValue" /> 的時間。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>將這個執行個體的值轉換為標準日期和時間格式規範所支援的所有字串表示。</summary>
      <returns>字串陣列，其中的每個項目都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>將這個執行個體的值轉換為指定的標準日期和時間格式規範所支援的所有字串表示。</summary>
      <returns>字串陣列，其中的每個項目都是這個執行個體的值使用 <paramref name="format" /> 標準日期和時間格式規範所格式化的表示。</returns>
      <param name="format">標準日期和時間格式字串 (請參閱＜備註＞)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的標準日期和時間格式規範字元。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>將這個執行個體的值轉換為指定的標準日期和時間格式規範和特定文化特性格式資訊所支援的所有字串表示。</summary>
      <returns>字串陣列，其中的每個項目都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
      <param name="format">日期和時間格式字串 (請參閱＜備註＞)。</param>
      <param name="provider">物件，提供關於這個執行個體的特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的標準日期和時間格式規範字元。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>將這個執行個體的值轉換為標準日期和時間格式規範和指定的特定文化特性格式資訊所支援的所有字串表示。</summary>
      <returns>字串陣列，其中的每個項目都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
      <param name="provider">物件，提供關於這個執行個體的特定文化特性格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>取得這個執行個體所表示日期的小時元件。</summary>
      <returns>小時元件，以 0 到 23 之間的值表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>指出這個 <see cref="T:System.DateTime" /> 執行個體是否在目前時區的日光節約時間範圍內。</summary>
      <returns>當 true 屬性的值為 <see cref="P:System.DateTime.Kind" /> 或 <see cref="F:System.DateTimeKind.Local" />，且這個 <see cref="F:System.DateTimeKind.Unspecified" /> 執行個體的值位於當地時區的日光節約時間範圍內時為 <see cref="T:System.DateTime" />；當 false 是 <see cref="P:System.DateTime.Kind" /> 時為 <see cref="F:System.DateTimeKind.Utc" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>傳回指定年份是否為閏年的指示。</summary>
      <returns>當 true 是閏年時為 <paramref name="year" />，否則為 false。</returns>
      <param name="year">4 位數的年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>取得值，指出這個執行個體表示的時間是根據本地時間、國際標準時間 (UTC)，或兩者皆非。</summary>
      <returns>一個列舉值，表示目前時間表示的是什麼時間。預設為 <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>代表 <see cref="T:System.DateTime" /> 最大的可能值。此欄位為唯讀。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>取得這個執行個體所表示日期的毫秒元件。</summary>
      <returns>毫秒元件，以 0 到 999 之間的值表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>取得這個執行個體所表示日期的分鐘元件。</summary>
      <returns>分鐘元件，以 0 到 59 之間的值表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>代表 <see cref="T:System.DateTime" /> 最小的可能值。此欄位為唯讀。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>取得這個執行個體所表示日期的月份元件。</summary>
      <returns>月份元件，以 1 到 12 之間的值表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>取得 <see cref="T:System.DateTime" /> 物件，此物件會設定為這部電腦上目前的日期和時間，以本地時間表示。</summary>
      <returns>物件，其值為目前的本地日期和時間。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>將指定的日期和時間加上指定的時間間隔，產生新的日期和時間。</summary>
      <returns>物件，這個物件是 <paramref name="d" /> 和 <paramref name="t" /> 之值的總和。</returns>
      <param name="d">要加上的日期和時間值。</param>
      <param name="t">要加入的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>判斷 <see cref="T:System.DateTime" /> 的兩個指定執行個體是否相等。</summary>
      <returns>當 true 和 <paramref name="d1" /> 代表相同的日期和時間時為 <paramref name="d2" />，否則為 false。</returns>
      <param name="d1">要比較的第一個物件。</param>
      <param name="d2">要比較的第二個物件。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>判斷某個指定的 <see cref="T:System.DateTime" /> 是否晚於另一個指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>當 true 晚於 <paramref name="t1" /> 時為 <paramref name="t2" />，否則為 false。</returns>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>判斷某個指定之 <see cref="T:System.DateTime" /> 表示的是同於還是晚於另一個指定之 <see cref="T:System.DateTime" /> 的日期和時間。</summary>
      <returns>當 true 與 <paramref name="t1" /> 為同時或更晚時為 <paramref name="t2" />，否則為 false。</returns>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>判斷 <see cref="T:System.DateTime" /> 的兩個指定執行個體是否不相等。</summary>
      <returns>當 true 和 <paramref name="d1" /> 不代表相同的日期和時間時為 <paramref name="d2" />，否則為 false。</returns>
      <param name="d1">要比較的第一個物件。</param>
      <param name="d2">要比較的第二個物件。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>判斷某個指定的 <see cref="T:System.DateTime" /> 是否早於另一個指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>當 true 早於 <paramref name="t1" /> 時為 <paramref name="t2" />，否則為 false。</returns>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>判斷某個指定之 <see cref="T:System.DateTime" /> 表示的是同於還是早於另一個指定之 <see cref="T:System.DateTime" /> 的日期和時間。</summary>
      <returns>當 true 與 <paramref name="t1" /> 為同時或更晚時為 <paramref name="t2" />，否則為 false。</returns>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>將另一個指定的日期和時間減去指定的日期和時間，並傳回時間間隔。</summary>
      <returns>
        <paramref name="d1" /> 和 <paramref name="d2" /> 之間的時間間隔，也就是 <paramref name="d1" /> 減 <paramref name="d2" />。</returns>
      <param name="d1">位於減號左邊的日期和時間值 (被減數)。</param>
      <param name="d2">位於減號右邊的日期和時間值 (減數)。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>將指定的日期和時間減去指定的時間間隔，並傳回新的日期和時間。</summary>
      <returns>物件，其值為 <paramref name="d" /> 值減掉 <paramref name="t" /> 值的差異值。</returns>
      <param name="d">位於減號左邊的日期和時間值。</param>
      <param name="t">要減去的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>將日期和時間的字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。</summary>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期和時間的有效字串表示。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>使用特定文化特性格式資訊，將日期和時間的字串表示轉換為其相等的 <see cref="T:System.DateTime" />。</summary>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="provider" /> 所指定。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之特定文化特性格式資訊的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期和時間的有效字串表示。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用特定文化特性格式資訊及格式樣式，將日期和時間的字串表示轉換為其相等的 <see cref="T:System.DateTime" />。</summary>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="provider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示可以在 <paramref name="s" /> 中出現使剖析作業成功，以及定義如何解譯剖析的日期與目前時區或目前日期之間關聯性的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期和時間的有效字串表示。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含無效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值組合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式以及特定文化特性的格式資訊，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，其定義 <paramref name="s" /> 所需的格式。如需詳細資訊，請參閱＜備註＞一節。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之特定文化特性格式資訊的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是空字串。-或- <paramref name="s" /> 不包含對應至 <paramref name="format" /> 中指定模式的日期和時間。-或-<paramref name="s" /> 中的小時元件和 AM/PM 指示項不一致。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。字串表示的格式必須完全符合指定的格式，否則會擲回例外狀況。</summary>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="format" />、<paramref name="provider" /> 和 <paramref name="style" /> 所指定。</returns>
      <param name="s">字串，含有要轉換的日期和時間。</param>
      <param name="format">格式規範，其定義 <paramref name="s" /> 所需的格式。如需詳細資訊，請參閱＜備註＞一節。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="style">列舉值的位元組合，提供有關 <paramref name="s" />、可以出現在 <paramref name="s" /> 中的樣式項目，或是從 <paramref name="s" /> 轉換成 <see cref="T:System.DateTime" /> 值的詳細資訊。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是空字串。-或- <paramref name="s" /> 不包含對應至 <paramref name="format" /> 中指定模式的日期和時間。-或-<paramref name="s" /> 中的小時元件和 AM/PM 指示項不一致。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含無效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值組合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。字串表示的格式必須至少完全符合其中一個指定的格式，否則會擲回例外狀況。</summary>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="formats" />、<paramref name="provider" /> 和 <paramref name="style" /> 所指定。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="formats">
        <paramref name="s" /> 允許的格式陣列。如需詳細資訊，請參閱＜備註＞一節。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之特定文化特性格式資訊的物件。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="formats" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 為空字串。-或- <paramref name="formats" /> 的某個項目是空字串。-或- <paramref name="s" /> 不包含對應至 <paramref name="formats" /> 任何項目的日期和時間。-或-<paramref name="s" /> 中的小時元件和 AM/PM 指示項不一致。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含無效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值組合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>取得這個執行個體所表示日期的秒數元件。</summary>
      <returns>秒數元件，以 0 到 59 之間的值表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>建立新的 <see cref="T:System.DateTime" /> 物件，此物件的刻度數與指定的 <see cref="T:System.DateTime" /> 相同，但依指定的 <see cref="T:System.DateTimeKind" /> 值所示，指定為本地時間、國際標準時間 (Coordinated Universal Time，UTC)，或兩者都不是。</summary>
      <returns>新物件，這個物件的刻度數與 <paramref name="value" /> 參數代表的物件相同，且具有 <see cref="T:System.DateTimeKind" /> 參數指定的 <paramref name="kind" /> 值。</returns>
      <param name="value">日期和時間。</param>
      <param name="kind">其中一個列舉值，表示新的物件表示本地時間、UTC，或兩者都不是。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>將這個執行個體減去指定的日期和時間。</summary>
      <returns>時間間隔，等於由此執行個體所表示的日期和時間減去由 <paramref name="value" /> 所表示的日期和時間。</returns>
      <param name="value">要減去的日期和時間。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">該結果小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>將這個執行個體減去指定的持續期間。</summary>
      <returns>物件，等於由此執行個體所表示的日期和時間減去由 <paramref name="value" /> 所表示的時間間隔。</returns>
      <param name="value">要減去的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">該結果小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示這個執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對順序。值 描述 小於零 這個執行個體在排序次序中會在 <paramref name="value" /> 之前。零 這個執行個體出現在排序次序中的位置和 <paramref name="value" /> 相同。大於零 在排序次序中，這個執行個體在 <paramref name="value" /> 的後面，或 <paramref name="value" /> 為 null。</returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.DateTime" />。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>傳回目前的 <see cref="T:System.DateTime" />物件。</summary>
      <returns>目前的物件。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>將目前的 <see cref="T:System.DateTime" /> 物件轉換為指定類型的物件。</summary>
      <returns>
        <paramref name="type" /> 參數所指定之類型的物件，包含相當於目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
      <param name="type">所要的類型。</param>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DateTime" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不使用這個參數；請指定 null)。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>取得表示這個執行個體日期和時間的刻度數目。</summary>
      <returns>刻度數目，表示這個執行個體的日期和時間。值介於 DateTime.MinValue.Ticks 和 DateTime.MaxValue.Ticks 之間。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>取得這個執行個體的一天時間。</summary>
      <returns>時間間隔，表示從午夜以來已經過的當天部分。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToBinary">
      <summary>將目前的 <see cref="T:System.DateTime" /> 物件序列化成 64 位元的二進位值，之後可以用這個值來重新建立 <see cref="T:System.DateTime" /> 物件。</summary>
      <returns>64 位元帶正負號的整數，可以編碼 <see cref="P:System.DateTime.Kind" /> 和 <see cref="P:System.DateTime.Ticks" /> 屬性。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>取得目前的日期。</summary>
      <returns>物件，設定為今天的日期，且時間元件設定為 00:00:00。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成 Windows 檔案時間。</summary>
      <returns>以 Windows 檔案時間表示的目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間將會表示在西元 1601 年 1 月 1 日午夜 12:00 以前的日期和時間，時區為 UTC。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成 Windows 檔案時間。</summary>
      <returns>以 Windows 檔案時間表示的目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間將會表示在西元 1601 年 1 月 1 日午夜 12:00 以前的日期和時間，時區為 UTC。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成本地時間。</summary>
      <returns>物件，其 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />，而其值為與目前 <see cref="T:System.DateTime" /> 物件的值相等的本地時間；如果轉換過的值太大，而無法由 <see cref="F:System.DateTime.MaxValue" /> 物件表示，則為 <see cref="T:System.DateTime" />；如果轉換過的值太小，而無法表示為 <see cref="F:System.DateTime.MinValue" /> 物件，則為 <see cref="T:System.DateTime" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值，轉換為其相等的字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出目前文化特性使用之行事曆所支援的日期範圍。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出 <paramref name="provider" /> 使用之日曆所支援的日期範圍。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>使用指定的格式，將目前 <see cref="T:System.DateTime" /> 物件的值，轉換為其相等字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如 <paramref name="format" /> 所指定。</returns>
      <param name="format">標準或自訂的日期和時間格式字串 (請參閱＜備註＞)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的長度為 1，而且不是為 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 所定義的格式規範字元之一。-或- <paramref name="format" /> 並沒不包含有效的自訂格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出目前文化特性使用之行事曆所支援的日期範圍。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.DateTime" /> 物件的值，轉換為其相等的字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如 <paramref name="format" /> 及 <paramref name="provider" />所指定。</returns>
      <param name="format">標準或自訂的日期和時間格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的長度為 1，而且不是為 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 所定義的格式規範字元之一。-或- <paramref name="format" /> 並沒不包含有效的自訂格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出 <paramref name="provider" /> 使用之日曆所支援的日期範圍。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成國際標準時間 (UTC)。</summary>
      <returns>物件，其 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Utc" />，而其值為與目前 <see cref="T:System.DateTime" /> 物件的值相等的 UTC 時間；如果轉換過的值太大，而無法由 <see cref="F:System.DateTime.MaxValue" /> 物件表示，則為 <see cref="T:System.DateTime" />；如果轉換過的值太小，而無法表示為 <see cref="F:System.DateTime.MinValue" /> 物件，則為 <see cref="T:System.DateTime" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />，並傳回一個值表示轉換是否成功。</summary>
      <returns>如果 true 參數轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，含有要轉換的日期和時間。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <see cref="T:System.DateTime" /> 中內含之日期與時間相等的 <paramref name="s" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 參數為 null、為空字串 ("") 或者不包含日期和時間的有效字串表示，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的特定文化特性格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其相等的 <see cref="T:System.DateTime" />，並傳回值，這個值表示轉換是否成功。</summary>
      <returns>如果 true 參數轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，含有要轉換的日期和時間。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，這個組合會定義如何根據目前時區或目前日期解譯已剖析的日期。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <see cref="T:System.DateTime" /> 中內含之日期與時間相等的 <paramref name="s" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 參數為 null、為空字串 ("") 或者不包含日期和時間的有效字串表示，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> 屬於中性的文化特性，而且不能用於剖析作業中。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。字串表示的格式必須完全符合指定的格式。此方法會傳回值，這個值表示轉換是否成功。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，含有要轉換的日期和時間。</param>
      <param name="format">
        <paramref name="s" /> 的必要格式。如需詳細資訊，請參閱＜備註＞一節。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="style">一個或多個列舉值的位元組合，表示 <paramref name="s" /> 的允許格式。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <see cref="T:System.DateTime" /> 中內含之日期與時間相等的 <paramref name="s" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 或 <paramref name="format" /> 參數為 null、空字串，或不包含與 <paramref name="format" /> 中指定之模式相對應的日期和時間，則此轉換作業會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者)。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。字串表示的格式必須至少完全符合其中一個指定格式。此方法會傳回值，這個值表示轉換是否成功。</summary>
      <returns>如果 true 參數轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="formats">
        <paramref name="s" /> 允許的格式陣列。如需詳細資訊，請參閱＜備註＞一節。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之特定文化特性格式資訊的物件。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <see cref="T:System.DateTime" /> 中內含之日期與時間相等的 <paramref name="s" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 或 <paramref name="formats" /> 為 null、<paramref name="s" /> 或 <paramref name="formats" /> 的一個項目為空字串，或是 <paramref name="s" /> 的格式沒有與 <paramref name="formats" /> 中的至少一個格式模式所指定的內容完全相同，則此轉換作業會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 兩者)。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>取得 <see cref="T:System.DateTime" /> 物件，此物件會設定為這部電腦上目前的日期和時間，以國際標準時間 (UTC) 表示。</summary>
      <returns>物件，其值為目前的 UTC 日期和時間。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>取得這個執行個體所表示日期的年份元件。</summary>
      <returns>年份，在 1 和 9999 之間。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>指定 <see cref="T:System.DateTime" /> 物件是否表示本地時間、Coordinated Universal Time (UTC) 或是兩者皆非。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>表示的時間為本地時間。</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>表示的時間既未指定為本地時間，也未指定為 Coordinated Universal Time (UTC)。</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>表示的時間為 UTC。</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>表示一個時間點，通常以一天的日期和時間表示 (相對於國際標準時間)。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="dateTime">日期和時間。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">因套用位移而產生的 Coordinated Universal Time (UTC) 日期和時間早於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-因套用位移而產生的 UTC 日期和時間晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="dateTime">日期和時間。</param>
      <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> 等於 <see cref="F:System.DateTimeKind.Utc" /> 且 <paramref name="offset" /> 不等於零。-或-<paramref name="dateTime.Kind" /> 等於 <see cref="F:System.DateTimeKind.Local" /> 且 <paramref name="offset" /> 不等於系統本地時區的位移。-或-<paramref name="offset" /> 未以整數分鐘數指定。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於 -14 小時或大於 14 小時。-或-<see cref="P:System.DateTimeOffset.UtcDateTime" /> 小於 <see cref="F:System.DateTimeOffset.MinValue" /> 或大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、時、分、秒、毫秒和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 不表示整數分鐘數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。-或-<paramref name="month" /> 小於 1 或大於 12。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。-或-<paramref name="millisecond" /> 小於 0 或大於 999。-或-<paramref name="offset" /> 小於 -14 或大於 14。-或-<see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性比 <see cref="F:System.DateTimeOffset.MinValue" /> 早，或比 <see cref="F:System.DateTimeOffset.MaxValue" /> 晚。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、時、分、秒和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 不表示整數分鐘數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。-或-<paramref name="month" /> 小於 1 或大於 12。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。-或-<paramref name="offset" /> 小於 -14 小時或大於 14 小時。-或-<see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性比 <see cref="F:System.DateTimeOffset.MinValue" /> 早，或比 <see cref="F:System.DateTimeOffset.MaxValue" /> 晚。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>使用指定數目的刻度和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="ticks">以 0001 年 1 月 1 日午夜 12:00:00 以來已經過的 100 奈秒間隔數表示的日期和時間。</param>
      <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 未以整數分鐘數指定。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性比 <see cref="F:System.DateTimeOffset.MinValue" /> 早，或比 <see cref="F:System.DateTimeOffset.MaxValue" /> 晚。-或-<paramref name="ticks" /> 小於 DateTimeOffset.MinValue.Ticks 或大於 DateTimeOffset.MaxValue.Ticks。-或-<paramref name="Offset" /> 小於 -14 小時或大於 14 小時。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>傳回新<see cref="T:System.DateTimeOffset" />將指定的時間間隔加入至這個執行個體值的物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="timeSpan" /> 所表示之時間間隔的總和。</returns>
      <param name="timeSpan">
        <see cref="T:System.TimeSpan" /> 物件，表示正的或負的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>傳回新<see cref="T:System.DateTimeOffset" />將這個執行個體的值加上指定的天數整數和小數部分的物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="days" /> 所表示之天數的總和。</returns>
      <param name="days">整數和小數的天數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>傳回新<see cref="T:System.DateTimeOffset" />將指定的數目的整數和小數時數加入至這個執行個體值的物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="hours" /> 所表示之小時數的總和。</returns>
      <param name="hours">整數和小數的時數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>傳回新<see cref="T:System.DateTimeOffset" />將指定的毫秒數加入至這個執行個體值的物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="milliseconds" /> 所表示之整數毫秒數的總和。</returns>
      <param name="milliseconds">整數和小數的毫秒數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>傳回新<see cref="T:System.DateTimeOffset" />將指定的整數和小數的分鐘數加入至這個執行個體值的物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="minutes" /> 所表示之分鐘數的總和。</returns>
      <param name="minutes">整數和小數的分鐘數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>傳回新<see cref="T:System.DateTimeOffset" />將指定之月數加入至這個執行個體值的物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="months" /> 所表示之月份數的總和。</returns>
      <param name="months">整數月份數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>傳回新<see cref="T:System.DateTimeOffset" />將指定的整數和小數秒數加入至這個執行個體值的物件。</summary>
      <returns>物件，其值為 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="seconds" /> 所表示之秒數的總和。</returns>
      <param name="seconds">整數和小數的秒數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>傳回新<see cref="T:System.DateTimeOffset" />將指定的刻度數加入至這個執行個體值的物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="ticks" /> 所表示之刻度數的總和。</returns>
      <param name="ticks">100 毫微秒刻度數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>傳回新<see cref="T:System.DateTimeOffset" />將指定的年數加入至這個執行個體值的物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期及時間加上 <paramref name="years" /> 所表示之年份數的總和。</returns>
      <param name="years">年份數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>比較兩個 <see cref="T:System.DateTimeOffset" /> 物件，並指出第一個日期是早於、等於還是晚於第二個日期。</summary>
      <returns>帶正負號的整數，表示 <paramref name="first" /> 參數的值是早於、晚於或等於 <paramref name="second" /> 參數的值，如下表所示。傳回值意義小於零<paramref name="first" /> 早於 <paramref name="second" />。零<paramref name="first" /> 等於 <paramref name="second" />。大於零<paramref name="first" /> 晚於 <paramref name="second" />。</returns>
      <param name="first">要比較的第一個物件。</param>
      <param name="second">要比較的第二個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件進行比較，並指示目前物件是早於、等於還是晚於第二個 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>帶正負號的整數，表示目前 <see cref="T:System.DateTimeOffset" /> 物件和 <paramref name="other" /> 之間的關係，如下表所示。傳回值描述小於零目前 <see cref="T:System.DateTimeOffset" /> 物件早於 <paramref name="other" />。零目前 <see cref="T:System.DateTimeOffset" /> 物件等於 <paramref name="other" />。大於零。目前 <see cref="T:System.DateTimeOffset" /> 物件晚於 <paramref name="other" />。</returns>
      <param name="other">要與目前 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期元件。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期元件。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之月份中的第幾天。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的天數元件，以 1 到 31 之間的數值表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示的星期幾。</summary>
      <returns>一個列舉值，表示目前 <see cref="T:System.DateTimeOffset" /> 物件的星期幾。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之一年中的第幾天。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件之一年中的第幾天，以 1 到 366 之間的數值表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>判斷目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間點。</summary>
      <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 true，否則為 false。</returns>
      <param name="other">要與目前的 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。   </param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間點。</summary>
      <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 true，否則為 false。</returns>
      <param name="first">要比較的第一個物件。</param>
      <param name="second">要比較的第二個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>判斷 <see cref="T:System.DateTimeOffset" /> 物件與指定的物件是否代表相同的時間點。</summary>
      <returns>如果 <paramref name="obj" /> 參數為 <see cref="T:System.DateTimeOffset" /> 物件且與目前 <see cref="T:System.DateTimeOffset" /> 物件代表相同的時間點，則為 true，否則為 false。</returns>
      <param name="obj">要與目前 <see cref="T:System.DateTimeOffset" /> 物件進行比較的物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>判斷目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間且具有相同的位移。</summary>
      <returns>如果目前 <see cref="T:System.DateTimeOffset" /> 物件與 <paramref name="other" /> 具有相同的日期和時間值以及相同的 <see cref="P:System.DateTimeOffset.Offset" /> 值，則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.DateTimeOffset" /> 物件進行比較的物件。 </param>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>將指定的 Windows 檔案時間轉換成相等的本地時間。</summary>
      <returns>物件，表示位移已經設定為本地時間位移之 <paramref name="fileTime" /> 的日期和時間。</returns>
      <param name="fileTime">Windows 檔案時間，以刻度表示。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> 小於零。-或-<paramref name="filetime" /> 大於 DateTimeOffset.MaxValue.Ticks。</exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)">
      <summary>將轉換 Unix 時間，以表示自 1970年以來所經過的毫秒數-01-01T00:00:00Z 至<see cref="T:System.DateTimeOffset" />值。</summary>
      <returns>日期和時間值，表示在同一時間做為 Unix 時間的時間。 </returns>
      <param name="milliseconds">自 1970-01-01T00:00:00Z (1970 年 1 月 1 日上午 12:00 UTC) 以來所經過的 Unix 時間 (以毫秒數表示)。若是在此日期之前的 Unix 時間點，其值為負數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> 小於 -62,135,596,800,000。-或-<paramref name="milliseconds" /> 大於 253,402,300,799,999。</exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)">
      <summary>將轉換 Unix 時間，以表示自 1970年以來所經過的秒數-01-01T00:00:00Z 至<see cref="T:System.DateTimeOffset" />值。</summary>
      <returns>日期和時間值，表示在同一時間做為 Unix 時間的時間。 </returns>
      <param name="seconds">自 1970-01-01T00:00:00Z (1970 年 1 月 1 日上午 12:00 UTC) 以來所經過的 Unix 時間 (以秒數表示)。若是在此日期之前的 Unix 時間點，其值為負數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> 小於 -62,135,596,800。-或-<paramref name="seconds" /> 大於 253,402,300,799。</exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>傳回目前 <see cref="T:System.DateTimeOffset" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件表示之時間的時數元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的時數元件。這個屬性使用 24 小時制，且值的範圍從 0 到 23。</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的本地日期和時間。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的當地日期和時間。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>表示 <see cref="T:System.DateTimeOffset" /> 的最大可能值。此欄位為唯讀。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> 已超出目前或指定的文化特性的預設行事曆範圍。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時間的毫秒數元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的毫秒數元件，以 0 到 999 之間的整數表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時間的分鐘數元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的分鐘數元件，以 0 到 59 之間的整數表示。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>表示最早的 <see cref="T:System.DateTimeOffset" /> 可能值。此欄位為唯讀。</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期的月份元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的月份元件，以 1 到 12 之間的整數表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>取得 <see cref="T:System.DateTimeOffset" /> 物件，這個物件的日期和時間已設定為目前電腦上的目前日期和時間，而位移已設定為本地時間相對於 Coordinated Universal Time (UTC) 的位移。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件，其日期和時間為目前本地時間，而位移為本地時區相對於 Coordinated Universal Time (UTC) 的位移。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>取得 Coordinated Universal Time (UTC) 的時間位移。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的時間值和 Coordinated Universal Time (UTC) 之間的時差。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>將指定的時間間隔加入至具有指定日期和時間的 <see cref="T:System.DateTimeOffset" /> 物件，並產生具有新日期和時間的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，其值為 <paramref name="dateTimeTz" /> 和 <paramref name="timeSpan" /> 值的總和。</returns>
      <param name="dateTimeOffset">要在其中加入時間間隔的物件。</param>
      <param name="timeSpan">要加入的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間點。</summary>
      <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 true，否則為 false。</returns>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否大於 (或晚於) 第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值晚於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 true，否則為 false。</returns>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否大於 (或等於) 第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值等於或晚於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 true，否則為 false。</returns>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>定義從 <see cref="T:System.DateTime" /> 物件到 <see cref="T:System.DateTimeOffset" /> 物件的隱含轉換。</summary>
      <returns>轉換的物件。</returns>
      <param name="dateTime">要進行轉換的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">因套用位移而產生的 Coordinated Universal Time (UTC) 日期和時間早於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-因套用位移而產生的 UTC 日期和時間晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否參照不同的時間點。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 true，否則為 false。</returns>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否小於第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 true，否則為 false。</returns>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否小於第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 true，否則為 false。</returns>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>從其他 <see cref="T:System.DateTimeOffset" /> 物件減去一個物件並產生時間間隔。</summary>
      <returns>物件，表示 <paramref name="left" /> 和 <paramref name="right" /> 之間的差。</returns>
      <param name="left">被減數。</param>
      <param name="right">減數。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>從指定的日期和時間減去指定的時間間隔，並產生新的日期和時間。</summary>
      <returns>物件，等於 <paramref name="dateTimeOffset" /> 減 <paramref name="timeSpan" /> 的值。</returns>
      <param name="dateTimeOffset">當做被減數的日期和時間物件。</param>
      <param name="timeSpan">要減去的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" /> 或大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>將日期、時間和位移之指定的字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="input" /> 包含位移值的字串表示 (不含日期或時間)。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等，如 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性專屬格式資訊。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="input" /> 包含位移值的字串表示 (不含日期或時間)。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的特定文化特性格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等，如 <paramref name="formatProvider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性專屬格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。-或-<paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<paramref name="styles" /> 包含不受支援的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<paramref name="styles" /> 包含無法同時使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="input" /> 包含位移值的字串表示 (不含日期或時間)。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式以及特定文化特性的格式資訊，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等，如 <paramref name="format" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，定義 <paramref name="input" /> 的預期格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" />為空字串 ("")。-或-<paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="format" /> 為空字串。-或-<paramref name="input" /> 中的小時元件和 AM/PM 指示項不一致。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>物件，與 <paramref name="input" /> 參數中包含的日期和時間相等，如 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，定義 <paramref name="input" /> 的預期格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性特定格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 的允許格式。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。-或-<paramref name="styles" /> 參數包含不受支援的值。-或-<paramref name="styles" /> 參數包含無法同時使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" />為空字串 ("")。-或-<paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="format" /> 為空字串。-或-<paramref name="input" /> 中的小時元件和 AM/PM 指示項不一致。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、文化特性特定格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>物件，與 <paramref name="input" /> 參數中包含的日期和時間相等，如 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formats">格式規範陣列，定義 <paramref name="input" /> 的預期格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性特定格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 的允許格式。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。-或-<paramref name="styles" /> 包含不受支援的值。-或-<paramref name="styles" /> 參數包含無法同時使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" />為空字串 ("")。-或-<paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="formats" /> 的項目都未包含有效的格式規範。-或-<paramref name="input" /> 中的小時元件和 AM/PM 指示項不一致。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時鐘時間的秒數元件。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件的秒數元件，以 0 到 59 之間的整數表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>從目前 <see cref="T:System.DateTimeOffset" /> 物件減去表示特定日期和時間的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>物件，指定兩個 <see cref="T:System.DateTimeOffset" /> 物件的間隔。</returns>
      <param name="value">物件，表示要減去的值。</param>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>從目前 <see cref="T:System.DateTimeOffset" /> 物件減去指定的時間間隔。</summary>
      <returns>物件，等於目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間減 <paramref name="value" /> 所表示之時間間隔。</returns>
      <param name="value">要減去的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值與相同型別的其他物件進行比較。</summary>
      <returns>32 位元帶正負號的整數，表示目前 <see cref="T:System.DateTimeOffset" /> 物件是小於、等於還是大於 <paramref name="obj" />。方法的傳回值依如下解譯：傳回值描述小於零目前 <see cref="T:System.DateTimeOffset" /> 物件小於 (早於) <paramref name="obj" />。零目前 <see cref="T:System.DateTimeOffset" /> 物件等於 <paramref name="obj" /> (時間點相同)。大於零目前 <see cref="T:System.DateTimeOffset" /> 物件大於 (晚於) <paramref name="obj" />。</returns>
      <param name="obj">要與目前 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>取得刻度數，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件之時鐘時間的日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件之時間的刻度數。</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件之一天中的時間。</summary>
      <returns>自午夜起已經過之目前日期的時間間隔。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換成 Windows 檔案時間。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的值，以 Windows 檔案時間表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間將會表示在西元 1601 年 1 月 1 日午夜以前的日期和時間，以 Coordinated Universal Time (UTC) 時間計算。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件轉換為表示本地時間的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，表示轉換為本地時間之目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為位移值指定的日期和時間。</summary>
      <returns>物件，等於起始 <see cref="T:System.DateTimeOffset" /> 物件 (即它們的 <see cref="M:System.DateTimeOffset.ToUniversalTime" /> 方法都會傳回相同的時間點) 但其 <see cref="P:System.DateTimeOffset.Offset" /> 屬性設定成 <paramref name="offset" />。</returns>
      <param name="offset">要將 <see cref="T:System.DateTimeOffset" /> 值轉換成的位移。</param>
      <exception cref="T:System.ArgumentException">產生之 <see cref="T:System.DateTimeOffset" /> 物件的 <see cref="P:System.DateTimeOffset.DateTime" /> 值早於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生之 <see cref="T:System.DateTimeOffset" /> 物件的 <see cref="P:System.DateTimeOffset.DateTime" /> 值晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於 -14 小時。-或-<paramref name="offset" /> 大於 14 小時。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>包含附加至字串尾端之位移的 <see cref="T:System.DateTimeOffset" /> 物件之字串表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出目前文化特性使用之行事曆所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>使用指定的文化特性特定格式資訊，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示 (如 <paramref name="formatProvider" /> 所指定)。</returns>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出 <paramref name="formatProvider" /> 使用之日曆所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>使用指定的格式，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示 (如 <paramref name="format" /> 所指定)。</returns>
      <param name="format">格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的長度為 1，而且不是針對 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 所定義的其中一個標準格式規範字元。-或-<paramref name="format" /> 並沒不包含有效的自訂格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出目前文化特性使用之行事曆所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示 (如 <paramref name="format" /> 和 <paramref name="provider" /> 所指定)。</returns>
      <param name="format">格式字串。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的長度為 1，而且不是針對 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 所定義的其中一個標準格式規範字元。-或-<paramref name="format" /> 並沒不包含有效的自訂格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出 <paramref name="formatProvider" /> 使用之日曆所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件轉換為表示 Coordinated Universal Time (UTC) 的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>物件，表示轉換為 Coordinated Universal Time (UTC) 之目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeMilliseconds">
      <summary>傳回自 1970年以來所經過的毫秒數-01-01T00:00:00.000Z。</summary>
      <returns>自 1970年以來所經過的毫秒數-01-01T00:00:00.000Z。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeSeconds">
      <summary>傳回自 1970年以來所經過的秒數-01-01T00:00:00Z。</summary>
      <returns>自 1970年以來所經過的秒數-01-01T00:00:00Z。</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>嘗試將日期和時間之指定的字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />，並傳回一個值，指示轉換是否成功。</summary>
      <returns>如果 <paramref name="input" /> 參數轉換成功，則為 true，否則為 false。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="result">當方法傳回時，如果轉換成功，內含的 <see cref="T:System.DateTimeOffset" /> 就等於 <paramref name="input" /> 的日期和時間，如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 參數為 null，或者不包含日期和時間的有效字串表示，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>嘗試將日期和時間之指定的字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />，並傳回一個值，指示轉換是否成功。</summary>
      <returns>如果 <paramref name="input" /> 參數轉換成功，則為 true，否則為 false。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formatProvider">提供關於 <paramref name="input" /> 的文化特性特定格式資訊的物件。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 的允許格式。</param>
      <param name="result">當方法傳回時，如果轉換成功，內含的 <see cref="T:System.DateTimeOffset" /> 值就等於 <paramref name="input" /> 的日期和時間，如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 參數為 null，或者不包含日期和時間的有效字串表示，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。-或-<paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>如果 <paramref name="input" /> 參數轉換成功，則為 true，否則為 false。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，定義 <paramref name="input" /> 的所需格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性特定格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 input 所允許的輸入格式。一般會指定的值是 None。</param>
      <param name="result">當方法傳回時，如果轉換成功，內含的 <see cref="T:System.DateTimeOffset" /> 就等於 <paramref name="input" /> 的日期和時間，如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 參數為 null，或者不包含由 <paramref name="format" /> 和 <paramref name="provider" /> 定義的預期格式之日期和時間的有效字串表示，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。-或-<paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>如果 <paramref name="input" /> 參數轉換成功，則為 true，否則為 false。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formats">陣列，定義 <paramref name="input" /> 的預期格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性特定格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 input 所允許的輸入格式。一般會指定的值是 None。</param>
      <param name="result">當方法傳回時，如果轉換成功，內含的 <see cref="T:System.DateTimeOffset" /> 就等於 <paramref name="input" /> 的日期和時間，如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 不包含日期和時間的有效字串表示，或者不包含 <paramref name="format" /> 定義之預期格式的日期和時間，或者 <paramref name="formats" /> 為 null，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。-或-<paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的 Coordinated Universal Time (UTC) 日期和時間。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的 Coordinated Universal Time (UTC) 日期和時間。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>取得 <see cref="T:System.DateTimeOffset" /> 物件，這個物件的日期和時間已設定為目前 Coordinated Universal Time (UTC) 日期和時間，且位移為 <see cref="F:System.TimeSpan.Zero" />。</summary>
      <returns>其日期和時間為目前 Coordinated Universal Time (UTC)，且其位移為 <see cref="F:System.TimeSpan.Zero" /> 的物件。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>取得刻度數，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件之 Coordinated Universal Time (UTC) 的日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件的 Coordinated Universal Time (UTC) 刻度數。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期的年份元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的年份元件，以 0 到 9999 之間的整數表示。</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>指定一週中的星期名稱。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>表示星期五。</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>表示星期一。</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>表示星期六。</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>表示星期天。</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>表示星期四。</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>表示星期二。</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>表示星期三。</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>代表十進位數值。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定雙精確度浮點數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.-or- <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定 32 位元帶正負號整數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>從指定執行個體組成部分的參數，初始化 <see cref="T:System.Decimal" /> 的新執行個體。</summary>
      <param name="lo">96 位元整數的低 32 位元。</param>
      <param name="mid">96 位元整數的中 32 位元。</param>
      <param name="hi">96 位元整數的高 32 位元。</param>
      <param name="isNegative">true 表示負數，false 表示正數。</param>
      <param name="scale">範圍從 0 到 28 的 10 乘冪。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> is greater than 28. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為以二進位表示並包含在指定陣列中的十進位值。</summary>
      <param name="bits">32 位元帶正負號整數的陣列，包含十進位值的表示。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="bits" /> is not 4.-or- The representation of the decimal value in <paramref name="bits" /> is not valid. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定 64 位元帶正負號整數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定單精確度浮點數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.-or- <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定 32 位元不帶正負號整數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定 64 位元不帶正負號整數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>加入兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>
        <paramref name="d1" /> 和 <paramref name="d2" /> 的總和。</returns>
      <param name="d1">要相加的第一個值。</param>
      <param name="d2">要相加的第二個值。</param>
      <exception cref="T:System.OverflowException">The sum of <paramref name="d1" /> and <paramref name="d2" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>傳回大於或等於指定之十進位數字的最小整數值。</summary>
      <returns>大於或等於 <paramref name="d" /> 參數的最小整數值。請注意，這個方法會傳回 <see cref="T:System.Decimal" />，而不是整數類型。</returns>
      <param name="d">十進位數字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>比較兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>帶正負號的數字，該數字表示 <paramref name="d1" /> 和 <paramref name="d2" /> 的相對值。Return value Meaning Less than zero <paramref name="d1" /> is less than <paramref name="d2" />. Zero <paramref name="d1" /> and <paramref name="d2" /> are equal. Greater than zero <paramref name="d1" /> is greater than <paramref name="d2" />. </returns>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>將這個執行個體與指定的 <see cref="T:System.Decimal" /> 物件相比較，並傳回其相對值的比較。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。Return value Meaning Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">與這個執行個體相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>除兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 的結果。</returns>
      <param name="d1">被除數。</param>
      <param name="d2">除數。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value (that is, the quotient) is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>傳回數值，指示這個執行個體和指定的 <see cref="T:System.Decimal" /> 物件是否表示相同的值。</summary>
      <returns>如果 true 等於這個執行個體則為 <paramref name="value" />，否則為 false。</returns>
      <param name="value">與這個執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>傳回數值，指出 <see cref="T:System.Decimal" /> 的兩個指定執行個體是否表示相同的值。</summary>
      <returns>如果 true 和 <paramref name="d1" /> 對等，則為 <paramref name="d2" />，否則為 false。</returns>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體和指定的 <see cref="T:System.Object" /> 是否表示相同的類型和值。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Decimal" />，並等於這個執行個體，則為 true；否則為 false。</returns>
      <param name="value">與這個執行個體相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字往負無限大方向捨入為最接近的整數。</summary>
      <returns>如果 <paramref name="d" /> 具有小數部分，則為往負無限大方向，小於 <paramref name="d" /> 的下一個 <see cref="T:System.Decimal" /> 整數。-或- 如果 <paramref name="d" /> 不具有小數部分，則傳回的 <paramref name="d" /> 不變更。請注意，方法會傳回 <see cref="T:System.Decimal" /> 類型的整數值。</returns>
      <param name="d">要捨入的值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>將 <see cref="T:System.Decimal" /> 的指定執行個體值轉換為其對等二進位表示。</summary>
      <returns>32 位元帶正負號的整數陣列，具有包含 <paramref name="d" /> 二進位表示的四個項目。</returns>
      <param name="d">要進行轉換的值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>代表 <see cref="T:System.Decimal" /> 最大的可能值。這個欄位是不變且唯讀的。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>表示數字負一 (-1)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>代表 <see cref="T:System.Decimal" /> 最小的可能值。這個欄位是不變且唯讀的。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>乘以兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>
        <paramref name="d1" /> 和 <paramref name="d2" /> 相乘的乘積。</returns>
      <param name="d1">被乘數。</param>
      <param name="d2">乘數。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>傳回指定的 <see cref="T:System.Decimal" /> 值乘以負一的乘積。</summary>
      <returns>
        <paramref name="d" /> 的十進位數值，但正負號相反。-或- 零 (如果 <paramref name="d" /> 是零)。</returns>
      <param name="d">要變換正負號的值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.One">
      <summary>表示數字一 (1)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>加入兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>
        <paramref name="d1" /> 與 <paramref name="d2" /> 相加的結果。</returns>
      <param name="d1">要相加的第一個值。</param>
      <param name="d2">要相加的第二個值。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>將 <see cref="T:System.Decimal" /> 運算元減一。</summary>
      <returns>
        <paramref name="d" /> 減一的值。</returns>
      <param name="d">要遞減的值。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>將兩個指定的 <see cref="T:System.Decimal" /> 值相除。</summary>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 的結果。</returns>
      <param name="d1">被除數。</param>
      <param name="d2">除數。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>傳回值，指出兩個 <see cref="T:System.Decimal" /> 值是否相等。</summary>
      <returns>如果 true 和 <paramref name="d1" /> 對等，則為 <paramref name="d2" />，否則為 false。</returns>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 8 位元帶正負號整數的明確轉換。</summary>
      <returns>8 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 64 位元帶正負號整數的明確轉換。</summary>
      <returns>64 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 16 位元不帶正負號整數的明確轉換。</summary>
      <returns>16 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 64 位元不帶正負號整數的明確轉換。</summary>
      <returns>64 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 32 位元不帶正負號整數的明確轉換。</summary>
      <returns>32 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 32 位元帶正負號整數的明確轉換。</summary>
      <returns>32 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 Unicode 字元的明確轉換。</summary>
      <returns>Unicode 字元，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 8 位元不帶正負號整數的明確轉換。</summary>
      <returns>8 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>定義從 <see cref="T:System.Decimal" /> 到單精確度浮點數的明確轉換。</summary>
      <returns>單精確度浮點數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 16 位元帶正負號整數的明確轉換。</summary>
      <returns>16 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>定義從 <see cref="T:System.Decimal" /> 到雙精確度浮點數的明確轉換。</summary>
      <returns>雙精確度浮點數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>定義從雙精確度浮點數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <returns>轉換的雙精確度浮點數。</returns>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.-or- <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>定義從單精確度浮點數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <returns>轉換的單精確度浮點數。</returns>
      <param name="value">要轉換的單精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.-or- <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Decimal" /> 是否大於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 true 大於 <paramref name="d1" /> 則為 <paramref name="d2" />，否則為 false。</returns>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Decimal" /> 是否大於或等於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 大於或等於 <paramref name="d2" />，則為 true，否則為 false。</returns>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>定義從 8 位元不帶正負號整數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <returns>轉換的 8 位元不帶正負號整數。</returns>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>定義從 Unicode 字元到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <returns>轉換過的 Unicode 字元。</returns>
      <param name="value">要轉換的 Unicode 字元。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>定義從 16 位元帶正負號的整數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <returns>轉換過的 16 位元帶正負號的整數。</returns>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>定義從 32 位元帶正負號的整數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <returns>轉換過的 32 位元帶正負號的整數。</returns>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>定義從 64 位元帶正負號的整數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <returns>轉換過的 64 位元帶正負號的整數。</returns>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>定義從 8 位元帶正負號整數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <returns>轉換過的 8 位元帶正負號的整數。</returns>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>定義從 16 位元不帶正負號的整數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <returns>轉換的 16 位元不帶正負號整數。</returns>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>定義從 32 位元不帶正負號的整數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <returns>轉換的 32 位元不帶正負號整數。</returns>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>定義從 64 位元不帶正負號的整數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <returns>轉換的 64 位元不帶正負號整數。</returns>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>將 <see cref="T:System.Decimal" /> 運算元加 1。</summary>
      <returns>加 1 的 <paramref name="d" /> 值。</returns>
      <param name="d">要遞增的值。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>傳回值，指出兩個 <see cref="T:System.Decimal" /> 物件是否有不同的值。</summary>
      <returns>如果 true 和 <paramref name="d1" /> 不相等，則為 <paramref name="d2" />，否則為 false。</returns>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Decimal" /> 是否小於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 小於 <paramref name="d2" />，則為 true；否則為 false。</returns>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Decimal" /> 是否小於或等於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 小於或等於 <paramref name="d2" />，則為 true；否則為 false。</returns>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>傳回從兩個指定的 <see cref="T:System.Decimal" /> 值相除所得的餘數。</summary>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 所得的餘數。</returns>
      <param name="d1">被除數。</param>
      <param name="d2">除數。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>將兩個指定的 <see cref="T:System.Decimal" /> 值相乘。</summary>
      <returns>
        <paramref name="d1" /> 乘以 <paramref name="d2" /> 的結果。</returns>
      <param name="d1">要相乘的第一個值。</param>
      <param name="d2">要相乘的第二個值。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>將兩個指定的 <see cref="T:System.Decimal" /> 值相減。</summary>
      <returns>
        <paramref name="d1" /> 減去 <paramref name="d2" /> 的結果。</returns>
      <param name="d1">被減數。</param>
      <param name="d2">減數。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 運算元值變換正負號。</summary>
      <returns>
        <paramref name="d" /> 乘以負一 (-1) 的乘積。</returns>
      <param name="d">要變換正負號的值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>傳回 <see cref="T:System.Decimal" /> 運算元的值 (運算元的正負號不變)。</summary>
      <returns>運算元 <paramref name="d" /> 的值。</returns>
      <param name="d">要傳回的運算元。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>將數字的字串表示，轉換為其相等的 <see cref="T:System.Decimal" />。</summary>
      <returns>與 <paramref name="s" /> 中包含的數字相等的值。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式中數字的字串表示轉換為其相等的 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於包含在 <paramref name="s" /> 中的數字，如同 <paramref name="style" /> 所指定。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，指出可出現在 <paramref name="s" /> 中的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>使用指定的樣式和特定文化特性格式，將數字的字串表示轉換為其對等的 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於包含在 <paramref name="s" /> 中的數字，如同 <paramref name="style" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，指出可出現在 <paramref name="s" /> 中的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件，提供關於 <paramref name="s" /> 格式的特定文化特性資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將數字的字串表示轉換為其對等的 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於包含在 <paramref name="s" /> 中的數字，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供關於 <paramref name="s" /> 的特定文化特性剖析資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>計算將兩個 <see cref="T:System.Decimal" /> 值相除後的餘數。</summary>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 後的餘數。</returns>
      <param name="d1">被除數。</param>
      <param name="d2">除數。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>將另一個值減去一個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>
        <paramref name="d1" /> 減去 <paramref name="d2" /> 的結果。</returns>
      <param name="d1">被減數。</param>
      <param name="d2">減數。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">要與這個執行個體比較的物件，或為 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Decimal" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零，則為 true，否則為 false。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不支援這個轉換。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不支援這個轉換。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">參數已忽略。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">將這個 <see cref="T:System.Decimal" /> 執行個體的值轉換成此類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關特定文化特性資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 8 位元不帶正負號整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">要轉換的十進位數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，等於 <paramref name="d" />。</returns>
      <param name="d">要轉換的十進位數字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 16 位元帶正負號整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">要轉換的十進位數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 32 位元帶正負號整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <param name="d">要轉換的十進位數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 64 位元帶正負號整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <param name="d">要轉換的十進位數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 8 位元帶正負號整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">要轉換的十進位數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="d" /> 的值。</returns>
      <param name="d">要轉換的十進位數字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>字串，表示這個執行個體的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱＜備註＞)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">數值格式字串 (請參閱＜備註＞)。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 16 位元不帶正負號整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">要轉換的十進位數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 32 位元不帶正負號整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <param name="d">要轉換的十進位數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 64 位元不帶正負號整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <param name="d">要轉換的十進位數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>傳回指定 <see cref="T:System.Decimal" /> 的整數數字；捨棄任何小數數字。</summary>
      <returns>將 <paramref name="d" /> 趨近零捨入為最接近之整數的結果。</returns>
      <param name="d">要截斷的十進位數字。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>將數字的字串表示，轉換為其相等的 <see cref="T:System.Decimal" />。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="result">傳回這個方法時，如果轉換成功，則包含 <see cref="T:System.Decimal" /> 數值 (相等於 <paramref name="s" /> 中包含的數值)，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、不是有效格式的數字，或者代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字，這項轉換就會失敗。此參數在未經初始化的情況下傳遞；<paramref name="result" /> 中原本提供的任何值都會被覆寫。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>使用指定的樣式和特定文化特性格式，將數字的字串表示轉換為其對等的 <see cref="T:System.Decimal" />。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">物件，提供 <paramref name="s" /> 的相關特定文化特性剖析資訊。</param>
      <param name="result">傳回這個方法時，如果轉換成功，則包含 <see cref="T:System.Decimal" /> 數值 (相等於 <paramref name="s" /> 中包含的數值)，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。此參數在未經初始化的情況下傳遞；<paramref name="result" /> 中原本提供的任何值都會被覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>表示數字零 (0)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Delegate">
      <summary>表示委派，它是參考靜態方法或該類別的類別執行個體和執行個體方法 (Instance Method) 的資料結構。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>串連兩個委派的引動過程清單。</summary>
      <returns>具有引動過程清單的新委派，此清單可以該順序串連 <paramref name="a" /> 和 <paramref name="b" /> 的引動過程清單。如果 <paramref name="b" /> 為 null，則會傳回 <paramref name="a" />；如果 <paramref name="a" /> 為 null 參考，則會傳回 <paramref name="b" />；如果 <paramref name="a" /> 和 <paramref name="b" /> 兩者都是 null 參考，則會傳回 null 參考。</returns>
      <param name="a">引動過程清單首先到達的委派。</param>
      <param name="b">引動過程清單最後到達的委派。</param>
      <exception cref="T:System.ArgumentException">Both <paramref name="a" /> and <paramref name="b" /> are not null, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>串連委派陣列的引動過程清單。</summary>
      <returns>具有引動過程清單的新委派，此清單可串連 <paramref name="delegates" /> 陣列中委派的引動過程清單。如果 <paramref name="delegates" /> 是 null、<paramref name="delegates" /> 包含零個元素，或者 <paramref name="delegates" /> 中的每個項目都是 null，則會傳回 null。</returns>
      <param name="delegates">要結合的委派陣列。</param>
      <exception cref="T:System.ArgumentException">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>動態叫用 (晚期繫結) 目前委派所表示的方法。</summary>
      <returns>物件，由委派所表示的方法傳回。</returns>
      <param name="args">物件的陣列，這些物件是要傳遞至目前委派所表示方法的引數。-或- 
如果目前委派所表示的方法不需要引數，則為 null。</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).-or- The number, order, or type of parameters listed in <paramref name="args" /> is invalid. </exception>
      <exception cref="T:System.ArgumentException">The method represented by the delegate is invoked on an object or a class that does not support it. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The method represented by the delegate is an instance method and the target object is null.-or- One of the encapsulated methods throws an exception. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>判斷指定的物件和目前的委派是否具有相同類型，並共用相同的目標、方法和引動過程清單。</summary>
      <returns>如果 <paramref name="obj" /> 和目前的委派具有相同的目標、方法和引動過程清單，則為 true，否則為 false。</returns>
      <param name="obj">要與目前委派相比較的物件。 </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>傳回委派的雜湊碼。</summary>
      <returns>委派的雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>傳回委派的引動過程清單。</summary>
      <returns>委派的陣列，表示目前委派的引動過程清單。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>判斷指定的委派是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 等於 <paramref name="d2" />，則為 true，否則為 false。</returns>
      <param name="d1">要比較的第一個委派。</param>
      <param name="d2">要比較的第二個委派。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>判斷指定的委派是否不相等。</summary>
      <returns>如果 <paramref name="d1" /> 不等於 <paramref name="d2" /> 則為 true，否則為 false。</returns>
      <param name="d1">要比較的第一個委派。</param>
      <param name="d2">要比較的第二個委派。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>從另一個委派的引動過程清單，移除委派的引動過程清單上最後一個項目。</summary>
      <returns>如果在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則為新委派 (其具有藉由取得 <paramref name="source" /> 的引動過程清單並移除 <paramref name="value" /> 的引動過程清單上最後一個項目所形成的引動過程清單)。如果 <paramref name="value" /> 是 null，或未在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則會傳回 <paramref name="source" />。如果 <paramref name="value" /> 的引動過程清單等於 <paramref name="source" /> 的引動過程清單，或是 <paramref name="source" /> 為 null 參考，則會傳回 null 參考。</returns>
      <param name="source">委派，要從其中移除 <paramref name="value" /> 的引動過程清單。</param>
      <param name="value">委派，提供要從 <paramref name="source" /> 的引動過程清單移除的引動過程清單。</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
      <summary>從另一個委派的引動過程清單，移除委派的引動過程清單上所有的項目。</summary>
      <returns>如果在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則為新委派 (其具有藉由取得 <paramref name="source" /> 的引動過程清單並移除 <paramref name="value" /> 的引動過程清單上所有項目所形成的引動過程清單)。如果 <paramref name="value" /> 是 null，或未在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則會傳回 <paramref name="source" />。如果 <paramref name="value" /> 的引動過程清單等於 <paramref name="source" /> 的引動過程清單、<paramref name="source" /> 只包含等於 <paramref name="value" /> 引動過程清單的一系列引動過程清單，或是 <paramref name="source" /> 為 null 參考時，會傳回 null 參考。</returns>
      <param name="source">委派，要從其中移除 <paramref name="value" /> 的引動過程清單。</param>
      <param name="value">委派，提供要從 <paramref name="source" /> 的引動過程清單移除的引動過程清單。</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>取得目前的委派在其中叫用執行個體方法的類別執行個體。</summary>
      <returns>如果目前的委派表示執行個體方法時，則為目前委派在其中叫用執行個體方法的物件；如果此委派表示靜態方法，則為 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>嘗試將整數或小數值除以零時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>初始化 <see cref="T:System.DivideByZeroException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.DivideByZeroException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.DivideByZeroException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Double">
      <summary>表示雙精度浮點數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>比較這個執行個體與雙精確度的浮點數值，並且傳回一個整數，指出這個執行個體的值是小於、等於或大於特定的雙精確度浮點數值。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />). </returns>
      <param name="value">要比較的雙精確度浮點數。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>代表大於零的最小正 <see cref="T:System.Double" /> 值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>傳回數值，指示這個執行個體和指定的 <see cref="T:System.Double" /> 物件是否表示相同的值。</summary>
      <returns>如果 true 等於這個執行個體則為 <paramref name="obj" />，否則為 false。</returns>
      <param name="obj">要與這個執行個體相比較的 <see cref="T:System.Double" /> 物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Double" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>傳回值，指出指定的數字是否計算結果為負或正的無限大。 </summary>
      <returns>如果 <paramref name="d" /> 計算結果為 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，則為 true，否則為 false。</returns>
      <param name="d">雙精確度浮點數。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>傳回值，這個值表示指定的值是否不是數字 (<see cref="F:System.Double.NaN" />)。</summary>
      <returns>如果 <paramref name="d" /> 計算結果為 <see cref="F:System.Double.NaN" />，則為 true；否則為 false。</returns>
      <param name="d">雙精確度浮點數。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>傳回值，指出指定的數字是否計算結果為負的無限大。</summary>
      <returns>如果 <paramref name="d" /> 計算結果為 <see cref="F:System.Double.NegativeInfinity" />，則為 true；否則為 false。</returns>
      <param name="d">雙精確度浮點數。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>傳回值，指出指定數字是否計算結果為正的無限大。</summary>
      <returns>如果 <paramref name="d" /> 計算結果為 <see cref="F:System.Double.PositiveInfinity" />，則為 true；否則為 false。</returns>
      <param name="d">雙精確度浮點數。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>表示 <see cref="T:System.Double" /> 最大的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>表示 <see cref="T:System.Double" /> 最小的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.NaN">
      <summary>代表不是數字 (NaN) 的值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>表示負無限大。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.op_Equality(System.Double,System.Double)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Double" /> 值是否相等。</summary>
      <returns>如果 true 和 <paramref name="left" /> 對等，則為 <paramref name="right" />，否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Double.op_GreaterThan(System.Double,System.Double)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Double" /> 值是否大於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 true 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Double" /> 值是否大於或等於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大於或等於 <paramref name="right" />，則為 true，否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Double.op_Inequality(System.Double,System.Double)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Double" /> 值是否不相等。</summary>
      <returns>如果 true 和 <paramref name="left" /> 不相等，則為 <paramref name="right" />，否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Double.op_LessThan(System.Double,System.Double)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Double" /> 值是否小於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小於 <paramref name="right" />，則為 true；否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Double" /> 值是否小於或等於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小於或等於 <paramref name="right" />，則為 true；否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>將數字的字串表示轉換為其相等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將數字的字串表示 (使用指定樣式) 轉換為其相等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 與 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>使用指定樣式和特定文化特性格式，將數字的字串表示轉換為其相等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的特定文化特性格式) 轉換為其相等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>表示正無限大。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Double" />. </exception>
    </member>
    <member name="M:System.Double.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零，則為 true，否則為 false。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" /></summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Double" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關特定文化特性資訊。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">這個參數已忽略。  </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Double.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>將數字的字串表示轉換為其相等的雙精確度浮點數。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法傳回時會包含相當於 <paramref name="s" /> 參數的雙精確度浮點數，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、不是有效格式的數字，或代表小於 <see cref="F:System.Double.MinValue" /> 或者大於 <see cref="F:System.Double.MaxValue" /> 的數字，這項轉換就會失敗。這個參數未初始化便傳遞；<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>使用指定樣式和特定文化特性格式，將數字的字串表示轉換為其相等的雙精確度浮點數。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，表示 <paramref name="s" /> 的允許格式。要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供 <paramref name="s" /> 的相關特定文化特性格式資訊。</param>
      <param name="result">當此方法傳回時，若轉換成功，包含相當於 <paramref name="s" /> 中包含之數值或符號的雙精確度浮點數；若轉換失敗，則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數是 null 或 <see cref="F:System.String.Empty" />、不是符合 <paramref name="style" /> 的格式、代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字，或 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 列舉常數的有效組合。這個參數未初始化便傳遞；<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Enum">
      <summary>提供列舉的基底類別。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>初始化 <see cref="T:System.Enum" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="target" /> 的相對值。值意義小於零這個執行個體的值小於 <paramref name="target" /> 的值。零這個執行個體的值等於 <paramref name="target" /> 的值。大於零這個執行個體的值大於 <paramref name="target" /> 的值。-或- <paramref name="target" /> 為 null。</returns>
      <param name="target">要比較的物件或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> and this instance are not the same type. </exception>
      <exception cref="T:System.InvalidOperationException">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是與這個執行個體具有相同類型及基礎值的列舉值則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體相比較的物件，或 null。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>根據指定的格式，將指定列舉類型的指定值轉換為相等的字串表示。</summary>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
      <param name="enumType">要轉換的數值列舉類型。</param>
      <param name="value">要轉換的值。</param>
      <param name="format">要使用的輸出格式。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.-or- The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.-or- The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />. </exception>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter contains an invalid value. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>傳回這個執行個體值的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>擷取有指定數值之指定列舉的常數名稱。</summary>
      <returns>字串 (包含值為 <paramref name="value" /> 之 <paramref name="enumType" /> 中的列舉常數名稱)；如果找不到這類常數，則為 null。</returns>
      <param name="enumType">列舉類型。</param>
      <param name="value">就其基礎類型而論的特定列舉常數值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>在指定的列舉中擷取常數名稱的陣列。</summary>
      <returns>在 <paramref name="enumType" /> 中的常數名稱字串陣列。</returns>
      <param name="enumType">列舉類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>傳回指定列舉的基礎類型。</summary>
      <returns>
        <paramref name="enumType" /> 的基礎類型。</returns>
      <param name="enumType">要擷取其基礎類型的列舉。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>在指定的列舉中擷取常數值的陣列。</summary>
      <returns>含有 <paramref name="enumType" /> 中之常數值的陣列。</returns>
      <param name="enumType">列舉類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />. </exception>
      <exception cref="T:System.InvalidOperationException">The method is invoked by reflection in a reflection-only context, -or-<paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
      <summary>判斷目前執行個體中是否設定一或多個位元欄位。</summary>
      <returns>如果目前執行個體中設定了 <paramref name="flag" /> 中設定的一或多個位元欄位，則為 true，否則為 false。</returns>
      <param name="flag">列舉值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> is a different type than the current instance.</exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>傳回具有指定數值的常數是否存在於指定列舉的指示。</summary>
      <returns>如果在 <paramref name="enumType" /> 中的常數有等於 <paramref name="value" /> 的數值，則為 true，否則為 false。</returns>
      <param name="enumType">列舉類型。</param>
      <param name="value">在 <paramref name="enumType" /> 中常數的數值或名稱。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an Enum.-or- The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.-or- The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。</summary>
      <returns>
        <paramref name="enumType" /> 類型的物件，其數值以 <paramref name="value" /> 表示。</returns>
      <param name="enumType">列舉類型。</param>
      <param name="value">字串，包含要轉換的名稱或數值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is either an empty string or only contains white space.-or- <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。參數會定義運算是否區分大小寫。</summary>
      <returns>
        <paramref name="enumType" /> 類型的物件，其數值以 <paramref name="value" /> 表示。</returns>
      <param name="enumType">列舉類型。</param>
      <param name="value">字串，包含要轉換的名稱或數值。 </param>
      <param name="ignoreCase">true 表示忽略大小寫，false 表示區分大小寫。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is either an empty string ("") or only contains white space.-or- <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成布林值 (Boolean)。</summary>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 8 位元不帶正負號的整數 (Unsigned Integer)。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 Unicode 字元。</summary>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 <see cref="T:System.DateTime" />。</summary>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 <see cref="T:System.Decimal" />。</summary>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成雙精確度浮點數。</summary>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 16 位元帶正負號的整數 (Signed Integer)。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 32 位元帶正負號的整數 (Signed Integer)。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 64 位元帶正負號的整數 (Signed Integer)。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 8 位元帶正負號的整數。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成單精確度浮點數。</summary>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換為字串。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成指定的類型。</summary>
      <returns>轉換的值。</returns>
      <param name="type">要轉換的目標類型。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 16 位元不帶正負號的整數。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 32 位元不帶正負號的整數。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 64 位元不帶正負號的整數。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>這個方法多載已過時，請改用 <see cref="M:System.Enum.ToString(System.String)" />。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">格式規格。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> does not contain a valid format specification. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>將具有整數值的指定物件轉換為列舉成員。</summary>
      <returns>值為 <paramref name="value" /> 的列舉物件。</returns>
      <param name="enumType">要傳回的列舉類型。</param>
      <param name="value">要轉換為列舉成員的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>將這個執行個體的值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> contains an invalid specification. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。參數會指定運算是否區分大小寫。指出轉換是否成功的傳回值。</summary>
      <returns>如果 <paramref name="value" /> 參數轉換成功，則為 true，否則為 false。</returns>
      <param name="value">要轉換之列舉名稱或基礎值的字串表示。</param>
      <param name="ignoreCase">true 以忽略大小寫，false 以區分大小寫。</param>
      <param name="result">如果剖析作業成功，這個方法傳回的 <paramref name="result" /> 會包含類型為 <paramref name="TEnum" /> 的物件，而物件的值會以 <paramref name="value" /> 表示。如果剖析作業失敗，則 <paramref name="result" /> 會包含 <paramref name="TEnum" /> 之基礎類型的預設值。請注意，這個值不一定要是 <paramref name="TEnum" /> 列舉的成員。這個參數會以未初始化的狀態傳遞。</param>
      <typeparam name="TEnum">
        <paramref name="value" /> 轉換所得的列舉類型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
      <summary>把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。指出轉換是否成功的傳回值。</summary>
      <returns>如果 <paramref name="value" /> 參數轉換成功，則為 true，否則為 false。</returns>
      <param name="value">要轉換之列舉名稱或基礎值的字串表示。</param>
      <param name="result">如果剖析作業成功，這個方法傳回的 <paramref name="result" /> 會包含類型為 <paramref name="TEnum" /> 的物件，而物件的值會以 <paramref name="value" /> 表示。如果剖析作業失敗，則 <paramref name="result" /> 會包含 <paramref name="TEnum" /> 之基礎類型的預設值。請注意，這個值不一定要是 <paramref name="TEnum" /> 列舉的成員。這個參數會以未初始化的狀態傳遞。</param>
      <typeparam name="TEnum">
        <paramref name="value" /> 轉換所得的列舉類型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
    </member>
    <member name="T:System.EventArgs">
      <summary>表示含有事件資料之類別的基底類別，並提供值以用於不包含事件資料的事件。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>初始化 <see cref="T:System.EventArgs" /> 類別的新執行個體。</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>提供值以搭配沒有事件資料的事件使用。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.EventHandler">
      <summary>代表處理不含事件資料之事件的方法。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventHandler.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.EventHandler.BeginInvoke(System.Object,System.EventArgs,System.AsyncCallback,System.Object)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.EventHandler.EndInvoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.EventHandler.Invoke(System.Object,System.EventArgs)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>代表事件提供資料時處理事件的方法。</summary>
      <typeparam name="TEventArgs">此事件所產生的事件資料型別。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventHandler`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.EventHandler`1.BeginInvoke(System.Object,`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.EventHandler`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.EventHandler`1.Invoke(System.Object,`0)"></member>
    <member name="T:System.Exception">
      <summary>表示應用程式執行期間所發生的錯誤。若要瀏覽此類型的 .NET Framework 原始程式碼，請參閱參考來源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 Nothing)。</param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>取得提供例外狀況之其他使用者定義相關資訊的索引鍵/值組集合。</summary>
      <returns>實作 <see cref="T:System.Collections.IDictionary" /> 介面的物件，含有由使用者定義之索引鍵/值組所組成的集合。預設為空集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>在衍生類別中覆寫時，傳回一或多個後續的例外狀況的根本原因 <see cref="T:System.Exception" />。</summary>
      <returns>例外狀況鏈中擲回的第一個例外狀況。如果目前的例外狀況的 <see cref="P:System.Exception.InnerException" /> 屬性為 null 參考 (在 Visual Basic 中為 Nothing)，則這個屬性會傳回目前的例外狀況。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>取得或設定與這個例外狀況相關聯的說明檔連結。</summary>
      <returns>統一資源名稱 (URN) 或統一資源定位器 (URL)。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>取得或設定 HRESULT，它是指派給特定例外狀況的編碼數值。</summary>
      <returns>HRESULT 值。</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>取得造成目前例外狀況的 <see cref="T:System.Exception" /> 執行個體。</summary>
      <returns>物件，描述造成目前例外狀況的錯誤。<see cref="P:System.Exception.InnerException" /> 屬性會傳回與傳遞到 <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> 建構函式中相同的值；如果沒有提供內部例外狀況值給建構函式，則傳回 null。這個屬性是唯讀的。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Exception.Message">
      <summary>取得描述目前例外狀況的訊息。</summary>
      <returns>解釋例外狀況原因的錯誤訊息，或空字串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Exception.Source">
      <summary>取得或設定造成錯誤的應用程式或物件的名稱。</summary>
      <returns>造成錯誤的應用程式或物件的名稱。</returns>
      <exception cref="T:System.ArgumentException">The object must be a runtime <see cref="N:System.Reflection" /> object</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>取得呼叫堆疊上即時運算框架的字串表示。</summary>
      <returns>字串，描述呼叫堆疊的立即框架。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>建立並傳回目前例外狀況的字串表示。</summary>
      <returns>目前例外狀況的字串表示。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>當嘗試存取類別內私用的或保護的欄位為不合法時，會擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.FieldAccessException.#ctor">
      <summary>初始化 <see cref="T:System.FieldAccessException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.FieldAccessException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.FieldAccessException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>指示可將列舉型別 (Enumeration) 視為位元欄位 (Bit Field)；也就是一組旗標。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.FlagsAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>引數無效時或者複合格式字串格式不正確時，擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.FormattableString">
      <summary>代表複合格式字串，以及要格式化的引數。</summary>
    </member>
    <member name="M:System.FormattableString.#ctor">
      <summary>執行個體化 <see cref="T:System.FormattableString" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.FormattableString.ArgumentCount">
      <summary>取得要格式化的引數數目。</summary>
      <returns>要格式化的引數數目。</returns>
    </member>
    <member name="P:System.FormattableString.Format">
      <summary>傳回複合格式字串。</summary>
      <returns>複合格式字串中。</returns>
    </member>
    <member name="M:System.FormattableString.GetArgument(System.Int32)">
      <summary>傳回位於指定的索引位置的引數。</summary>
      <returns>引數。</returns>
      <param name="index">引數的索引。其值的範圍可以從零到一的值小於<see cref="P:System.FormattableString.ArgumentCount" />。</param>
    </member>
    <member name="M:System.FormattableString.GetArguments">
      <summary>傳回物件陣列，其中包含一或多個要格式化的物件。</summary>
      <returns>物件陣列，其中包含一或多個要格式化的物件。</returns>
    </member>
    <member name="M:System.FormattableString.Invariant(System.FormattableString)">
      <summary>傳回格式化使用的文化特性而異的慣例的引數的結果字串。</summary>
      <returns>產生的結果從使用而異的文化特性的慣例來設定目前的執行個體的格式字串。</returns>
      <param name="formattable">要轉換的結果字串的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formattable" /> 為 null。</exception>
    </member>
    <member name="M:System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>傳回使用指定文化特性的格式化慣例來將格式字串及其引數格式化時，所產生的字串。</summary>
      <returns>字串格式化使用的慣例<paramref name="formatProvider" />參數。</returns>
      <param name="ignored">字串。忽略這個引數。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.FormattableString.ToString">
      <summary>傳回的結果使用目前文化特性的格式化慣例來格式化沿著複合格式字串，其引數的字串。</summary>
      <returns>使用目前文化特性的慣例來格式化的結果字串。</returns>
    </member>
    <member name="M:System.FormattableString.ToString(System.IFormatProvider)">
      <summary>傳回使用指定文化特性的格式化慣例來將複合格式字串及其引數格式化時，所產生的字串。</summary>
      <returns>結果字串格式化使用的慣例<paramref name="formatProvider" />。</returns>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="T:System.Func`1">
      <summary>封裝沒有參數並傳回 <paramref name="TResult" /> 參數所指定之型別值的方法。</summary>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Func`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`1.BeginInvoke(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`1.Invoke"></member>
    <member name="T:System.Func`10">
      <summary>封裝具有九個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`10.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`10.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`10.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`10.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8)"></member>
    <member name="T:System.Func`11">
      <summary>封裝具有 10 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`11.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`11.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`11.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`11.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)"></member>
    <member name="T:System.Func`12">
      <summary>封裝具有 11 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`12.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`12.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`12.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`12.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)"></member>
    <member name="T:System.Func`13">
      <summary>封裝具有 12 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`13.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`13.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`13.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`13.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)"></member>
    <member name="T:System.Func`14">
      <summary>封裝具有 13 個參數的方法，並傳回 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`14.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`14.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`14.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`14.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)"></member>
    <member name="T:System.Func`15">
      <summary>封裝具有 14 個參數的方法，並傳回 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`15.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`15.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`15.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`15.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)"></member>
    <member name="T:System.Func`16">
      <summary>封裝具有 15 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">這個委派所封裝方法之第 15 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`16.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`16.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`16.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`16.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)"></member>
    <member name="T:System.Func`17">
      <summary>封裝具有 16 個參數的方法，並傳回 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">這個委派所封裝方法之第 15 個參數的型別。</typeparam>
      <typeparam name="T16">這個委派所封裝方法之第 16 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`17.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`17.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`17.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`17.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)"></member>
    <member name="T:System.Func`2">
      <summary>封裝具有一個參數並傳回 <paramref name="TResult" /> 參數指定類型之值的方法。若要瀏覽這種類型的 .NET Framework 原始程式碼，請參閱參考原始程式碼。</summary>
      <typeparam name="T">這個委派所封裝之方法的參數類型。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之類型。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`2.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`2.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`2.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`2.Invoke(`0)"></member>
    <member name="T:System.Func`3">
      <summary>封裝具有兩個參數的方法，並傳回 <paramref name="TResult" /> 參數所指定的型別值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`3.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`3.BeginInvoke(`0,`1,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`3.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`3.Invoke(`0,`1)"></member>
    <member name="T:System.Func`4">
      <summary>封裝具有三個參數並傳回 <paramref name="TResult" /> 參數所指定之型別值的方法。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`4.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`4.BeginInvoke(`0,`1,`2,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`4.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`4.Invoke(`0,`1,`2)"></member>
    <member name="T:System.Func`5">
      <summary>封裝具有四個參數並傳回 <paramref name="TResult" /> 參數所指定之型別值的方法。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`5.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`5.BeginInvoke(`0,`1,`2,`3,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`5.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`5.Invoke(`0,`1,`2,`3)"></member>
    <member name="T:System.Func`6">
      <summary>封裝具有五個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`6.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`6.BeginInvoke(`0,`1,`2,`3,`4,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`6.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`6.Invoke(`0,`1,`2,`3,`4)"></member>
    <member name="T:System.Func`7">
      <summary>封裝具有六個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`7.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`7.BeginInvoke(`0,`1,`2,`3,`4,`5,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`7.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`7.Invoke(`0,`1,`2,`3,`4,`5)"></member>
    <member name="T:System.Func`8">
      <summary>封裝具有七個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`8.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`8.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`8.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`8.Invoke(`0,`1,`2,`3,`4,`5,`6)"></member>
    <member name="T:System.Func`9">
      <summary>封裝具有八個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`9.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`9.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`9.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`9.Invoke(`0,`1,`2,`3,`4,`5,`6,`7)"></member>
    <member name="T:System.GC">
      <summary>控制系統記憶體回收行程，它是自動回收未使用之記憶體的服務。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.GC.AddMemoryPressure(System.Int64)">
      <summary>告知執行階段，在排定記憶體回收時應考慮的大量 Unmanaged 記憶體配置。</summary>
      <param name="bytesAllocated">已配置的 Unmanaged 記憶體累加數量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> 小於或等於 0。-或-在 32 位元電腦上，<paramref name="bytesAllocated" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.GC.Collect">
      <summary>強制立即執行所有層代的記憶體回收。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>強制立即執行層代 0 至指定層代的記憶體回收。</summary>
      <param name="generation">要進行記憶體回收的最舊層代數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 無效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode)">
      <summary>在 <see cref="T:System.GCCollectionMode" /> 值所指定的時間，強制執行層代 0 至指定層代的記憶體回收。</summary>
      <param name="generation">要進行記憶體回收的最舊層代數目。</param>
      <param name="mode">列舉值，指定是要強制記憶體回收 (<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />) 還是進行最佳化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 無效。-或-<paramref name="mode" /> 不是其中一個 <see cref="T:System.GCCollectionMode" /> 值。</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
      <summary>在 <see cref="T:System.GCCollectionMode" /> 值 (含有指定是否應該封鎖回收作業的值) 所指定的時間，強制執行從層代 0 到指定之層代的記憶體回收。</summary>
      <param name="generation">要進行記憶體回收的最舊層代數目。</param>
      <param name="mode">列舉值，指定是要強制記憶體回收 (<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />) 還是進行最佳化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</param>
      <param name="blocking">true 表示要執行封鎖記憶體回收，false 表示要盡可能執行背景記憶體回收。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 無效。-或-<paramref name="mode" /> 不是其中一個 <see cref="T:System.GCCollectionMode" /> 值。</exception>
    </member>
    <member name="M:System.GC.CollectionCount(System.Int32)">
      <summary>傳回指定物件層代已發生記憶體回收的次數。</summary>
      <returns>自從啟動處理程序之後，指定層代已發生記憶體回收的次數。</returns>
      <param name="generation">要判斷記憶體回收計數的物件層代。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 小於 0。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.GetGeneration(System.Object)">
      <summary>傳回指定物件的目前層代編號。</summary>
      <returns>
        <paramref name="obj" /> 的目前層代編號。</returns>
      <param name="obj">要為其擷取層代資訊的物件。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>擷取目前被視為已配置的位元組數。參數會指出這個方法是否可以先等待短暫間隔後再傳回，以便讓系統回收記憶體和最終處理物件。</summary>
      <returns>數目，為目前配置於 Managed 記憶體中位元組的最佳可用近似數目。</returns>
      <param name="forceFullCollection">如果這個方法可以等待記憶體回收發生後再傳回則為 true，否則為 false。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>參考指定的物件，使它從目前常式的開始至呼叫這個方法時都不適合記憶體回收。</summary>
      <param name="obj">要參考的物件。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>取得系統目前支援的最大層代編號。</summary>
      <returns>範圍從零至所支援最大層代編號的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.RemoveMemoryPressure(System.Int64)">
      <summary>告知執行階段，Unmanaged 記憶體已釋放，所以排定記憶體回收時不需要再考慮它。</summary>
      <param name="bytesAllocated">已釋放的 Unmanaged 記憶體數量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> 小於或等於 0。-或- 在 32 位元電腦上，<paramref name="bytesAllocated" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>要求系統為指定物件 (先前已經為其呼叫 <see cref="M:System.GC.SuppressFinalize(System.Object)" />) 呼叫完成項。</summary>
      <param name="obj">必須呼叫完成項的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 為 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>要求 Common Language Runtime 不要為指定之物件呼叫完成項。</summary>
      <param name="obj">完成項不得執行的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 為 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>暫止目前的執行緒，直到處理完成項佇列的執行緒已經清空該佇列為止。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.GCCollectionMode">
      <summary>指定強制記憶體回收的行為。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.GCCollectionMode.Default">
      <summary>這個列舉型別 (Enumeration) 的預設值，目前為 <see cref="F:System.GCCollectionMode.Forced" />。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Forced">
      <summary>強制立即執行記憶體回收。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Optimized">
      <summary>允許記憶體回收以判斷現在是否為回收物件的最佳時間。</summary>
    </member>
    <member name="T:System.Guid">
      <summary>表示全域唯一識別項 (GUID)。若要瀏覽此類型的.NET Framework 原始碼，請參閱參考來源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>使用指定的位元組陣列，初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <param name="b">16 個元素位元組陣列，包含要用來初始化 GUID 的值。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> 為 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> 的長度不是 16 個位元組。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的整數和位元組，初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <param name="a">GUID 的前 4 個位元組。</param>
      <param name="b">GUID 接下來的 2 個位元組。</param>
      <param name="c">GUID 接下來的 2 個位元組。</param>
      <param name="d">GUID 的下一個位元組。</param>
      <param name="e">GUID 的下一個位元組。</param>
      <param name="f">GUID 的下一個位元組。</param>
      <param name="g">GUID 的下一個位元組。</param>
      <param name="h">GUID 的下一個位元組。</param>
      <param name="i">GUID 的下一個位元組。</param>
      <param name="j">GUID 的下一個位元組。</param>
      <param name="k">GUID 的下一個位元組。</param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>使用指定的整數和位元組陣列，初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <param name="a">GUID 的前 4 個位元組。</param>
      <param name="b">GUID 接下來的 2 個位元組。</param>
      <param name="c">GUID 接下來的 2 個位元組。</param>
      <param name="d">GUID 剩餘的 8 個位元組。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 為 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 的長度不是 8 個位元組。 </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>使用指定字串表示的值，初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <param name="g">字串，包含下列格式之一的 GUID ("d" 代表十六進位數字，忽略大小寫)：32 個連續數字：dddddddddddddddddddddddddddddddd-或-8、4、4、4 和 12 個數字的群組，其間以短破折號相隔。整個 GUID 可以選擇性地用對稱的大括號或括號括起來：dddddddd-dddd-dddd-dddd-dddddddddddd-或-{dddddddd-dddd-dddd-dddd-dddddddddddd}-或-(dddddddd-dddd-dddd-dddd-dddddddddddd)-或-8、4 和 4 個數字的群組，與一個 2 個數字形成之八個群組的子集，而每個群組都以 "0x" 或 "0X" 做為字首，並且以逗號分隔。整個 GUID 和子集都用對稱的大括號括起來︰{0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}所有的大括號、逗號和 "0x" 都是必要的。所有內嵌的空白都會被忽略。群組中所有前置的零都會被忽略。群組中所顯示的數字是可以出現在群組中有意義的數字數目上限。您可以指定從 1 到群組所顯示的數字數目。所指定的數字會假設為群組的低序位數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="g" /> 格式無效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="g" /> 格式無效。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定不帶正負號的整數 (Unsigned Integer) 和位元組，初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <param name="a">GUID 的前 4 個位元組。</param>
      <param name="b">GUID 接下來的 2 個位元組。</param>
      <param name="c">GUID 接下來的 2 個位元組。</param>
      <param name="d">GUID 的下一個位元組。</param>
      <param name="e">GUID 的下一個位元組。</param>
      <param name="f">GUID 的下一個位元組。</param>
      <param name="g">GUID 的下一個位元組。</param>
      <param name="h">GUID 的下一個位元組。</param>
      <param name="i">GUID 的下一個位元組。</param>
      <param name="j">GUID 的下一個位元組。</param>
      <param name="k">GUID 的下一個位元組。</param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>將這個執行個體與指定的 <see cref="T:System.Guid" /> 物件相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述負整數這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。正整數這個執行個體大於 <paramref name="value" />。</returns>
      <param name="value">與這個執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>
        <see cref="T:System.Guid" /> 結構的唯讀執行個體，其值全為零。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>傳回數值，指示這個執行個體和指定的 <see cref="T:System.Guid" /> 物件是否表示相同的值。</summary>
      <returns>true if <paramref name="g" /> is equal to this instance; otherwise, false.</returns>
      <param name="g">與這個執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <returns>如果 <paramref name="o" /> 是與這個執行個體有相同值的 <see cref="T:System.Guid" />，則為 true，否則為 false。</returns>
      <param name="o">與這個執行個體相互比較的物件。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <returns>新的 GUID 物件。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>表示兩個指定之 <see cref="T:System.Guid" /> 物件的值是否相等。</summary>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 相等，則為 true，否則為 false。</returns>
      <param name="a">要比較的第一個物件。</param>
      <param name="b">要比較的第二個物件。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>表示兩個指定之 <see cref="T:System.Guid" /> 物件的值是否不相等。</summary>
      <returns>true if <paramref name="a" /> and <paramref name="b" /> are not equal; otherwise, false.</returns>
      <param name="a">要比較的第一個物件。</param>
      <param name="b">要比較的第二個物件。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Guid.Parse(System.String)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 結構。</summary>
      <returns>包含所剖析之值的結構。</returns>
      <param name="input">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不是可辨認的格式。</exception>
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 結構，但字串必須是指定的格式。</summary>
      <returns>包含所剖析之值的結構。</returns>
      <param name="input">要轉換的 GUID。</param>
      <param name="format">下列其中一個規範，表示在解譯 <paramref name="input" /> 時要使用的確切格式："N"、"D"、"B"、"P" 或 "X"。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" />不在指定的格式<paramref name="format" />。</exception>
    </member>
    <member name="M:System.Guid.System#IComparable#CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述負整數這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。正整數這個執行個體大於 <paramref name="value" />，或者 <paramref name="value" /> 是 null。 </returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Guid" />。</exception>
    </member>
    <member name="M:System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>根據提供的格式規範，傳回這個執行個體值的字串表示。</summary>
      <returns>這個 <see cref="T:System.Guid" /> 的值，其按照指定的格式，以一系列小寫的十六進位數字來表示。</returns>
      <param name="format">單一格式的規範，指示如何格式化 <see cref="T:System.Guid" /> 的值。<paramref name="format" /> 參數可能是 "N"、"D"、"B"、"P" 或 "X"。如果 <paramref name="format" /> 是 null 或空字串 ("")，則使用 "D"。</param>
      <param name="provider">(保留) 物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" />的值不是null、空字串 ("")，或下列其中一個單一格式規範："N"、"D"、"B"、"P"或"X"。</exception>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>傳回 16 個元素的位元組陣列，位元組陣列會包含這個執行個體的值。</summary>
      <returns>16 個元素的位元組陣列。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>以登錄格式傳回這個執行個體的值的字串表示。</summary>
      <returns>這個<see cref="T:System.Guid" />的值，已使用 "D" 格式規範來格式化，如下所示： xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 其中的 GUID 值是以一系列小寫的十六進位數字表示，按照 8、4、4、4 和 12 位數分組，以連字號分開。傳回值的範例是 "382c74c3-721d-4f34-80e5-57657b6cbc27"。若要將從 a 到 f 的十六進位數字轉換為大寫，請呼叫所傳回之字串的 <see cref="M:System.String.ToUpper" /> 方法。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>根據提供的格式規範，傳回這個 <see cref="T:System.Guid" /> 執行個體的值的字串表示。</summary>
      <returns>這個 <see cref="T:System.Guid" /> 的值，其按照指定的格式，以一系列小寫的十六進位數字來表示。</returns>
      <param name="format">單一格式的規範，指示如何格式化這個 <see cref="T:System.Guid" /> 的值。<paramref name="format" /> 參數可能是 "N"、"D"、"B"、"P" 或 "X"。如果 <paramref name="format" /> 是 null 或空字串 ("")，則使用 "D"。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的值不是 null、空字串 ("")、"N"、"D"、"B"、"P" 或 "X"。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 結構。</summary>
      <returns>如果剖析作業成功則為 true，否則為 false。</returns>
      <param name="input">要轉換的 GUID。</param>
      <param name="result">要包含所剖析之值的結構。如果方法傳回 true，則 <paramref name="result" /> 包含有效的 <see cref="T:System.Guid" />。如果方法會傳回 false，則 <paramref name="result" /> 等於 <see cref="F:System.Guid.Empty" />。</param>
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 結構，但字串必須是指定的格式。</summary>
      <returns>如果剖析作業成功則為 true，否則為 false。</returns>
      <param name="input">要轉換的 GUID。</param>
      <param name="format">下列其中一個規範，表示在解譯 <paramref name="input" /> 時要使用的確切格式："N"、"D"、"B"、"P" 或 "X"。</param>
      <param name="result">要包含所剖析之值的結構。如果方法傳回 true，則 <paramref name="result" /> 包含有效的 <see cref="T:System.Guid" />。如果方法會傳回 false，則 <paramref name="result" /> 等於 <see cref="F:System.Guid.Empty" />。</param>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>表示非同步作業 (Asynchronous Operation) 的狀態。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>取得符合或包含非同步作業資訊的使用者定義的物件。</summary>
      <returns>使用者定義的物件，其符合或包含非同步作業的資訊。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>取得 <see cref="T:System.Threading.WaitHandle" />，用於等候非同步作業完成。</summary>
      <returns>
        <see cref="T:System.Threading.WaitHandle" />，用於等候非同步作業完成。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>取得指出非同步作業是否同步完成的值。</summary>
      <returns>如果非同步作業同步完成，則為 true，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>取得指出非同步作業是否已經完成的值。</summary>
      <returns>如果作業已完成，則為 true，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IComparable">
      <summary>定義通用的型別特定比較方法，實值型別 (Value Type) 或類別 (Class) 會實作這個方法，以排列或排序其執行個體。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>將目前的執行個體與相同型別的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>值，表示所比較之物件的相對順序。傳回值具有這些意義：值意義小於零這個執行個體在排序次序中會在 <paramref name="obj" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。大於零這個執行個體在排序次序中會跟隨在 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 與這個執行個體的型別不同。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IComparable`1">
      <summary>定義通用的比較方法，實值類型或類別會實作這個方法，以建立特定類型的比較方法來排序其執行個體。</summary>
      <typeparam name="T">要比較之物件的類型。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>值，表示所比較之物件的相對順序。傳回值具有這些意義：值意義小於零這個執行個體在排序次序中會在 <paramref name="other" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。大於零這個執行個體在排序次序中會跟隨在 <paramref name="other" /> 之後。 </returns>
      <param name="other">與這個執行個體相互比較的物件。</param>
    </member>
    <member name="T:System.IConvertible">
      <summary>定義方法，該方法會將實作參考的值或實值型別 (Value Type) 轉換成具有等值的 Common Language Runtime 型別。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>傳回這個執行個體的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數，該常數是實作這個介面的類型或實值型別的 <see cref="T:System.TypeCode" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>使用指定的特定文化特性 (Culture) 之格式資訊，將這個執行個體的值轉換為相等的布林 (Boolean) 值。</summary>
      <returns>布林值，等於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>8 位元不帶正負號的整數，相當於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 Unicode 字元。</summary>
      <returns>Unicode 字元，等於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 執行個體，等於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>等於這個執行個體值的 <see cref="T:System.Decimal" /> 數字。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，等於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，相當於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，相當於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，相當於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，相當於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" /> 執行個體，等於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為具有等值的指定 <see cref="T:System.Type" /> 的 <see cref="T:System.Object" />。</summary>
      <returns>型別 <paramref name="conversionType" /> 的 <see cref="T:System.Object" /> 執行個體，其值等於這個執行個體的值。</returns>
      <param name="conversionType">這個執行個體的值要轉換成的 <see cref="T:System.Type" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，相當於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，相當於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，相當於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>定義可支援物件值之自訂格式的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性 (Culture) 的格式資訊，將指定物件值轉換成相等的字串表示。</summary>
      <returns>
        <paramref name="arg" /> 值的字串表示，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 根據指示格式化。</returns>
      <param name="format">格式字串，包含格式規格。</param>
      <param name="arg">要格式化的物件。</param>
      <param name="formatProvider">物件，可提供目前的執行個體相關格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IDisposable">
      <summary>提供用於釋放 Unmanaged 資源的機制。若要瀏覽這種類型的 .NET Framework 原始程式碼，請參閱參考原始程式碼。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之應用程式定義的工作。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>定義實值型別或類別所實作的一般方法，藉以建立型別特定的方法來判斷執行個體是否相等。</summary>
      <typeparam name="T">要比較之物件的型別。</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>指出目前的物件是否等於另一個具有相同型別的物件。</summary>
      <returns>如果目前的物件等於 <paramref name="other" /> 參數，則為 true，否則為 false。</returns>
      <param name="other">要與這個物件相互比較的物件。</param>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>提供機制來擷取要控制格式的物件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>傳回物件，這個物件為所指定型別提供格式化服務。</summary>
      <returns>如果 <see cref="T:System.IFormatProvider" /> 實作可以提供該型別的物件則為 <paramref name="formatType" /> 所指定的物件執行個體，否則為 null。</returns>
      <param name="formatType">物件，指定要傳回的格式化物件的型別。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IFormattable">
      <summary>提供將物件的值格式化成以字串表示的功能。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式，格式化目前執行個體的值。</summary>
      <returns>目前執行個體的值，使用指定的格式。</returns>
      <param name="format">要使用的格式。-或-Null 參考 (在 Visual Basic 中為 Nothing)，用於使用針對 <see cref="T:System.IFormattable" /> 實作而定義的預設格式。</param>
      <param name="formatProvider">用來將值格式化的提供者。-或-Null 參考 (在 Visual Basic 中為 Nothing)，用於取得作業系統目前地區設定中的數值格式資訊。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>嘗試使用陣列或集合以外的索引來存取陣列或集合的項目時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.InsufficientExecutionStackException">
      <summary>當沒有足夠可用的執行堆疊以允許大部分的方法執行時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor">
      <summary>初始化 <see cref="T:System.InsufficientExecutionStackException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.InsufficientExecutionStackException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.InsufficientExecutionStackException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Int16">
      <summary>表示 16 位元帶正負號的整數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>比較這個執行個體與指定的 16 位元帶正負號整數，並且傳回整數，這個整數表示這個執行個體的值小於、等於或大於所指定 16 位元帶正負號整數的值。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比較的整數。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.Int16" /> 值。</summary>
      <returns>如果 true 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Int16" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Int16" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>代表 <see cref="T:System.Int16" /> 最大的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>代表 <see cref="T:System.Int16" /> 最小的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成它的對等 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供 <paramref name="s" /> 的相關特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>將指定特定文化特性格式之數字的字串表示轉換成它的對等 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供 <paramref name="s" /> 的相關特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Int16" />. </exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零，則為 true，否則為 false。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Int16" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，包含減號 (如果數值為負) 及一連串範圍由 0 到 9 的數字 (沒有前置字元零)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和文化特性特定的格式資訊，將這個執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 16 位元帶正負號的整數。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">當這個方法傳回時，如果轉換成功便包含相對於 <paramref name="s" /> 中所含數字的 16 位元帶正負號的整數，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。這個參數未初始化便已傳遞；<paramref name="result" /> 中原本提供的任何值都將會被覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>將數字的字串表示轉換成它的對等 16 位元帶正負號的整數。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">當這個方法傳回時，如果轉換成功便包含相對於 <paramref name="s" /> 中所含數字的 16 位元帶正負號的整數，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、不是正確格式，或是表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。這個參數未初始化便已傳遞；<paramref name="result" /> 中原本提供的任何值都將會被覆寫。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Int32">
      <summary>表示 32 位元帶正負號的整數。若要瀏覽此類型的 .NET Framework 原始程式碼，請參閱參考來源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>將這個執行個體與指定的 32 元帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比較的整數。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.Int32" /> 值。</summary>
      <returns>如果 true 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Int32" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Int32" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>代表 <see cref="T:System.Int32" /> 最大的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>代表 <see cref="T:System.Int32" /> 最小的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成它的對等 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供 <paramref name="s" /> 格式的相關特定文化特性資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>將指定特定文化特性格式之數字的字串表示轉換成它的對等 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int32" />. </exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零，則為 true，否則為 false。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Int32" /> 值轉換所得的類型。</param>
      <param name="provider">物件，可提供傳回值的格式相關資訊。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，包含減號 (如果數值為負) 及沒有零的前置字元且範圍從 0 到 9 的數字順序所組成。。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 32 位元帶正負號的整數。傳回指示轉換是否成功的值。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 32 位元帶正負號整數，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。這個參數未初始化便傳遞；<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>將數字的字串表示轉換成它的對等 32 位元帶正負號的整數。傳回指示轉換是否成功的值。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 32 位元帶正負號整數，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、不是正確格式，或是表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。這個參數未初始化便傳遞；<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Int64">
      <summary>表示 64 位元帶正負號的整數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>將這個執行個體與指定的 64 元帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比較的整數。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.Int64" /> 值。</summary>
      <returns>如果 true 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Int64" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的執行個體，且等於這個執行個體的值，則為 <see cref="T:System.Int64" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>代表 Int64 最大的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>代表 Int64 的最小可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成它的對等 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，表示 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.-or-<paramref name="style" /> supports fractional digits but <paramref name="s" /> includes non-zero fractional digits. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供 <paramref name="s" /> 的相關特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. -or-<paramref name="style" /> supports fractional digits, but <paramref name="s" /> includes non-zero fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>將指定特定文化特性格式之數字的字串表示轉換成它的對等 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int64" />. </exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零，則為 true，否則為 false。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Int64" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，包含減號 (如果數值為負) 及一連串範圍由 0 到 9 的數字 (沒有前置字元零)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供關於這個執行個體的特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 64 位元帶正負號的整數。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 64 位元帶正負號整數，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>將數字的字串表示轉換成它的對等 64 位元帶正負號的整數。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 64 位元帶正負號整數，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、不是正確格式，或是表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IntPtr">
      <summary>特定平台專用的型別，用來代表指標或控制代碼。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>使用指定的 32 位元指標或控制代碼來初始化 <see cref="T:System.IntPtr" /> 的新執行個體。</summary>
      <param name="value">包含在 32 位元帶正負號整數中的指標或控制代碼。</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>使用指定的 64 位元指標來初始化 <see cref="T:System.IntPtr" /> 的新執行個體。</summary>
      <param name="value">包含在 64 位元帶正負號整數中的指標或控制代碼。</param>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大或太小，以致於無法表示為 <see cref="T:System.IntPtr" />。</exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>使用未指定型別的指定指標來初始化 <see cref="T:System.IntPtr" /> 的新執行個體。</summary>
      <param name="value">未指定型別的指標。</param>
    </member>
    <member name="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
      <summary>將指標的值加上位移。</summary>
      <returns>新的指標，反映將 <paramref name="pointer" /> 加上 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要加上位移的指標。</param>
      <param name="offset">要加入的位移。</param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.IntPtr" /> 的執行個體，並且等於這個執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體或 null 相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
      <summary>將指標的值加上位移。</summary>
      <returns>新的指標，反映將 <paramref name="pointer" /> 加上 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要加上位移的指標。</param>
      <param name="offset">要加入的位移。</param>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>判斷 <see cref="T:System.IntPtr" /> 的兩個指定之執行個體是否相等。</summary>
      <returns>如果 <paramref name="value1" /> 等於 <paramref name="value2" /> 則為 true，否則為 false。</returns>
      <param name="value1">要比較的第一個指標或控點。</param>
      <param name="value2">要比較的第二個指標或控點。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>將 32 位元帶正負號整數的值轉換為 <see cref="T:System.IntPtr" />。</summary>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 的新執行個體。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>將 64 位元帶正負號整數的值轉換為 <see cref="T:System.IntPtr" />。</summary>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 的新執行個體。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大，以致於無法代表 <see cref="T:System.IntPtr" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>將指定的 <see cref="T:System.IntPtr" /> 值轉換為 64 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">要轉換的指標或控點。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>將指定的 <see cref="T:System.IntPtr" /> 值轉換為未指定型別的指標。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">要轉換的指標或控點。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>將指定的 <see cref="T:System.IntPtr" /> 值轉換為 32 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">要轉換的指標或控點。</param>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，<paramref name="value" /> 的值太大，以致於無法表示為 32 位元帶正負號的整數。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>將未指定型別的指定指標轉換為 <see cref="T:System.IntPtr" />。</summary>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 的新執行個體。</returns>
      <param name="value">未指定型別的指標。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>判斷 <see cref="T:System.IntPtr" /> 的兩個指定之執行個體是否不相等。</summary>
      <returns>如果 <paramref name="value1" /> 不等於 <paramref name="value2" />，則為 true，否則為 false。</returns>
      <param name="value1">要比較的第一個指標或控點。</param>
      <param name="value2">要比較的第二個指標或控點。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
      <summary>將指標的值減去移位。</summary>
      <returns>新的指標，反映將 <paramref name="pointer" /> 減去 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要減去位移的指標。</param>
      <param name="offset">要減去的位移。</param>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>取得這個執行個體的大小。</summary>
      <returns>這個處理序中的指標或控制代碼的大小，以位元組為單位。這個屬性的值在 32 位元處理序中為 4，而在 64 位元處理序中為 8。您可以定義程序類型，方法是在使用 C# 和 Visual Basic 編譯器編譯程式碼時，設定 /platform 參數。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
      <summary>將指標的值減去移位。</summary>
      <returns>新的指標，反映將 <paramref name="pointer" /> 減去 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要減去位移的指標。</param>
      <param name="offset">要減去的位移。</param>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>將這個執行個體的值轉換為 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於這個執行個體的值。</returns>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，這個執行個體的值太大或太小，以致於無法表示為 32 位元帶正負號的整數。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>將這個執行個體的值轉換為 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於這個執行個體的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>將這個執行個體的值轉換為未指定型別的指標。</summary>
      <returns>
        <see cref="T:System.Void" /> 的指標，也就是含有未指定型別資料的記憶體指標。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>將目前 <see cref="T:System.IntPtr" /> 物件的數值轉換為它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToString(System.String)">
      <summary>將目前 <see cref="T:System.IntPtr" /> 物件的數值轉換為它的對等字串表示。</summary>
      <returns>目前 <see cref="T:System.IntPtr" /> 物件值的字串表示。</returns>
      <param name="format">格式的規格會管理如何轉換目前 <see cref="T:System.IntPtr" /> 物件。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>表示已經初始化為零的指標或控制代碼的唯讀欄位。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>無效的轉型 (Casting) 或明確轉換所擲回的例外狀況。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Int32)">
      <summary>使用指定訊息和錯誤碼，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
      <param name="message">訊息，指出例外狀況發生的原因。</param>
      <param name="errorCode">與這個例外狀況相關聯的錯誤碼 (HRESULT) 值。</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>當方法呼叫對物件的目前狀態無效時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>例外狀況，當程式包含無效的 Microsoft Intermediate Language (MSIL) 或中繼資料 (Metadata) 時會擲回這個例外狀況。通常，這表示在產生程式的編譯中有錯誤。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.InvalidProgramException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.InvalidProgramException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.InvalidProgramException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>時區資訊無效時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>使用系統提供的訊息，初始化 <see cref="T:System.InvalidTimeZoneException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>使用指定的訊息字串，初始化 <see cref="T:System.InvalidTimeZoneException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的字串。</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.InvalidTimeZoneException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的字串。</param>
      <param name="innerException">導致目前例外狀況的例外。</param>
    </member>
    <member name="T:System.IObservable`1">
      <summary>定義推入型通知的提供者。</summary>
      <typeparam name="T">提供通知資訊的物件。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
    </member>
    <member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
      <summary>通知提供者有觀察器要接收通知。</summary>
      <returns>介面的參考，這個介面允許觀察器在提供者完成通知的傳送前停止接收通知。</returns>
      <param name="observer">要接收通知的物件。</param>
    </member>
    <member name="T:System.IObserver`1">
      <summary>提供接收推入型通知的機制。</summary>
      <typeparam name="T">提供通知資訊的物件。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
    </member>
    <member name="M:System.IObserver`1.OnCompleted">
      <summary>向觀察器告知提供者已完成推入型通知的傳送。</summary>
    </member>
    <member name="M:System.IObserver`1.OnError(System.Exception)">
      <summary>向觀察器告知提供者已發生錯誤狀況。</summary>
      <param name="error">物件，提供錯誤的其他相關資訊。</param>
    </member>
    <member name="M:System.IObserver`1.OnNext(`0)">
      <summary>提供新的資料給觀察器。</summary>
      <param name="value">目前通知資訊。</param>
    </member>
    <member name="T:System.IProgress`1">
      <summary>定義進度更新的提供者。</summary>
      <typeparam name="T">進度更新值的型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
    </member>
    <member name="M:System.IProgress`1.Report(`0)">
      <summary>報告進度更新。</summary>
      <param name="value">已更新的進度的值。</param>
    </member>
    <member name="T:System.Lazy`1">
      <summary>提供延遲初始設定的支援。</summary>
      <typeparam name="T">要延遲初始化之物件的類型。</typeparam>
    </member>
    <member name="M:System.Lazy`1.#ctor">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。當延遲初始設定發生時，會使用目標型別的預設建構函式。</summary>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。當延遲初始設定發生時，會使用目標型別的預設建構函式和指定的初始設定模式。</summary>
      <param name="isThreadSafe">true 表示這個執行個體可供多個執行緒同時使用，false 表示執行個體一次只能供一個執行緒使用。</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。當延遲初始設定發生時，會使用指定的初始設定函式。</summary>
      <param name="valueFactory">委派，在需要時會呼叫它來產生延遲初始化的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 為 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。當延遲初始設定發生時，會使用指定的初始設定函式和初始設定模式。</summary>
      <param name="valueFactory">委派，在需要時會呼叫它來產生延遲初始化的值。</param>
      <param name="isThreadSafe">true 表示這個執行個體可供多個執行緒同時使用，false 表示這個執行個體一次只能供一個執行緒使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 為 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新行個體，這個執行個體會使用指定的初始設定函式和執行緒安全模式。</summary>
      <param name="valueFactory">委派，在需要時會呼叫它來產生延遲初始化的值。</param>
      <param name="mode">指定執行緒安全模式的其中一個列舉值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 為 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體，這個執行個體會使用 <paramref name="T" /> 的預設建構函式和指定的執行緒安全模式。</summary>
      <param name="mode">指定執行緒安全模式的其中一個列舉值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
    </member>
    <member name="P:System.Lazy`1.IsValueCreated">
      <summary>取得值，這個值表示是否已建立此 <see cref="T:System.Lazy`1" /> 執行個體的值。</summary>
      <returns>如果已建立此 <see cref="T:System.Lazy`1" /> 執行個體的值則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Lazy`1.ToString">
      <summary>建立並傳回這個執行個體之 <see cref="P:System.Lazy`1.Value" /> 屬性的字串表示。</summary>
      <returns>針對此執行個體在 <see cref="P:System.Lazy`1.Value" /> 屬性上呼叫 <see cref="M:System.Object.ToString" /> 方法的結果，前提是已經建立此值 (也就是說，如果 <see cref="P:System.Lazy`1.IsValueCreated" /> 屬性傳回 true)。否則，尚未建立表示此值的字串。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="P:System.Lazy`1.Value" /> 屬性為 null。</exception>
    </member>
    <member name="P:System.Lazy`1.Value">
      <summary>取得目前 <see cref="T:System.Lazy`1" /> 執行個體的延遲初始化值。</summary>
      <returns>目前 <see cref="T:System.Lazy`1" /> 執行個體的延遲初始化值。</returns>
      <exception cref="T:System.MemberAccessException">
        <see cref="T:System.Lazy`1" /> 執行個體已初始化為使用延遲初始化型別的預設建構函式，而且存取建構函式的使用權限已遺失。</exception>
      <exception cref="T:System.MissingMemberException">
        <see cref="T:System.Lazy`1" /> 執行個體已初始化為使用延遲初始化型別的預設建構函式，而且該型別沒有公用無參數的建構函式。</exception>
      <exception cref="T:System.InvalidOperationException">初始設定函式嘗試存取這個執行個體的 <see cref="P:System.Lazy`1.Value" />。</exception>
    </member>
    <member name="T:System.Lazy`2">
      <summary>提供對物件和其相關聯中繼資料的延遲間接參考，供 Managed Extensibility Framework 使用。</summary>
      <typeparam name="T">參考之物件的型別。</typeparam>
      <typeparam name="TMetadata">中繼資料的型別。</typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
      <summary>使用指定的中繼資料初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體，這個執行個體會使用指定的函數來取得參考的物件。</summary>
      <param name="valueFactory">函數，傳回參考的物件。</param>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
      <summary>使用指定的中繼資料和執行緒安全值初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體，這個執行個體會使用指定的函數來取得參考的物件。</summary>
      <param name="valueFactory">函數，傳回參考的物件。</param>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
      <param name="isThreadSafe">表示建立的 <see cref="T:System.Lazy`2" /> 物件是否會具備執行緒安全。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
      <summary>使用指定的中繼資料和執行緒同步處理模式，初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體，這個執行個體會使用指定的函數來取得參考的物件。</summary>
      <param name="valueFactory">函數，傳回參考的物件。</param>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
      <param name="mode">執行緒同步處理模式。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1)">
      <summary>使用指定的中繼資料，初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體。</summary>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
      <summary>使用指定的中繼資料和執行緒安全值，初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體。</summary>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
      <param name="isThreadSafe">表示建立的 <see cref="T:System.Lazy`2" /> 物件是否會具備執行緒安全。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
      <summary>使用指定的中繼資料和執行緒同步處理模式，初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體。</summary>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
      <param name="mode">執行緒同步處理模式。</param>
    </member>
    <member name="P:System.Lazy`2.Metadata">
      <summary>取得與參考之物件相關聯的中繼資料。</summary>
      <returns>與參考之物件相關聯的中繼資料。</returns>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>嘗試存取類別成員失敗時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>初始化 <see cref="T:System.MemberAccessException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.MemberAccessException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.MemberAccessException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>當嘗試存取某個方法 (例如，從部分信任的程式碼中存取私用方法) 而無效時，所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>初始化 <see cref="T:System.MethodAccessException" /> 類別的新執行個體，設定新執行個體的 <see cref="P:System.Exception.Message" /> 屬性為描述錯誤的系統提供訊息，例如「嘗試存取方法失敗」。這個訊息會考量目前系統的文化特性。</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.MethodAccessException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.MethodAccessException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>當嘗試動態存取不存在的欄位時，所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>初始化 <see cref="T:System.MissingFieldException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.MissingFieldException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.MissingFieldException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>取得顯示遺漏欄位的簽章、類別名稱和欄位名稱的文字字串。這個屬性是唯讀的。</summary>
      <returns>錯誤訊息字串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>當嘗試動態存取不存在的類別成員時，所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>初始化 <see cref="T:System.MissingMemberException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.MissingMemberException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況根本原因的內部例外參考，初始化 <see cref="T:System.MissingMemberException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前 Exception 的 <see cref="T:System.Exception" /> 的執行個體。如果 <paramref name="inner" /> 不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理 <paramref name="inner" /> 的 Catch 區塊中引發目前的 Exception。</param>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>取得顯示類別名稱、成員名稱和遺漏成員簽章的文字字串。</summary>
      <returns>錯誤訊息字串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>當嘗試動態存取不存在的方法時，所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>初始化 <see cref="T:System.MissingMethodException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.MissingMethodException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.MissingMethodException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>取得顯示類別名稱、方法名稱和遺漏方法簽章的文字字串。這個屬性是唯讀的。</summary>
      <returns>錯誤訊息字串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.MTAThreadAttribute">
      <summary>表示應用程式的 COM 執行緒模型為多執行緒 Apartment (Multithreaded Apartment，MTA)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.MTAThreadAttribute.#ctor">
      <summary>初始化 <see cref="T:System.MTAThreadAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>表示多點傳送委派；也就是說，委派可以在它的引動過程清單中包含一個以上的項目。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>判斷這個多點傳送委派和指定的物件是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 和這個執行個體具有相同的引動過程清單，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。 </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>依照引動過程的順序，傳回這個多點傳送委派的引動過程清單。</summary>
      <returns>委派陣列，其引動過程清單完全符合這個執行個體的引動過程清單。</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>判斷兩個 <see cref="T:System.MulticastDelegate" /> 物件是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 具有相同的引動過程清單，則為 true，否則為 false。</returns>
      <param name="d1">左運算元。</param>
      <param name="d2">右運算元。 </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>判定兩個 <see cref="T:System.MulticastDelegate" /> 物件是否不相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 不具有相同的引動過程清單，則為 true，否則為 false。</returns>
      <param name="d1">左運算元。</param>
      <param name="d2">右運算元。 </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>當要求的方法或作業不實作時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.NotImplementedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.NotImplementedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.NotImplementedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>當不支援叫用的方法，或是嘗試讀取、搜尋或寫入不支援叫用功能的資料流時，所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>初始化 <see cref="T:System.NotSupportedException" /> 類別的新執行個體，設定該新執行個體的 <see cref="P:System.Exception.Message" /> 屬性為描述錯誤的系統提供訊息。這個訊息會考量目前系統的文化特性。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.NotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.NotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Nullable">
      <summary>支援可以指派 null 的實值類型。此類別無法被繼承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>比較兩個 <see cref="T:System.Nullable`1" /> 物件的相對值。</summary>
      <returns>整數，表示 <paramref name="n1" /> 和 <paramref name="n2" /> 參數的相對值。傳回值描述小於零<paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，並且 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true。-或-<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 true，並且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值小於 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值。Zero<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 false。-或-<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 true，並且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值等於 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值。大於零<paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，並且 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false。-或-<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 true，並且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值大於 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值。</returns>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 參數的基礎實值型別。</typeparam>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>指出兩個指定的 <see cref="T:System.Nullable`1" /> 物件是否相等。</summary>
      <returns>如果 <paramref name="n1" /> 參數等於 <paramref name="n2" /> 參數，則為 true，否則為 false。傳回值取決於兩個比較參數的 <see cref="P:System.Nullable`1.HasValue" /> 和 <see cref="P:System.Nullable`1.Value" /> 屬性。傳回值描述true<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 false。-或-<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 true，並且參數的 <see cref="P:System.Nullable`1.Value" /> 屬性相等。false某個參數的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，另一個參數則為 false。-或-<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 true，並且參數的 <see cref="P:System.Nullable`1.Value" /> 屬性不相等。</returns>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 參數的基礎實值型別。</typeparam>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>傳回已指定可為 null 型別的基礎型別引數。</summary>
      <returns>如果 <paramref name="nullableType" /> 參數是封閉式泛型可為 null 的型別，則為 <paramref name="nullableType" /> 參數的型別引數，否則為 null。</returns>
      <param name="nullableType">
        <see cref="T:System.Type" /> 物件，描述封閉式泛型可為 null 的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> 為 null。</exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>表示可以指派 null 的實值類型。</summary>
      <typeparam name="T">
        <see cref="T:System.Nullable`1" /> 泛型型別的基礎實值型別。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>將 <see cref="T:System.Nullable`1" /> 結構的新執行個體初始化為指定值。</summary>
      <param name="value">實值型別。</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>指出目前的 <see cref="T:System.Nullable`1" /> 物件是否等於指定的物件。</summary>
      <returns>如果 <paramref name="other" /> 參數等於目前的 <see cref="T:System.Nullable`1" /> 物件，則為 true；否則為 false。下表描述如何為比較值定義相等比較： 傳回值描述true<see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，而 <paramref name="other" /> 參數為 null。也就是說，兩個 null 值在定義上是相等的。-或-<see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，而 <see cref="P:System.Nullable`1.Value" /> 屬性所傳回的值與 <paramref name="other" /> 參數相等。false目前 <see cref="P:System.Nullable`1.HasValue" /> 結構的 <see cref="T:System.Nullable`1" /> 屬性為 true，而 <paramref name="other" /> 參數為 null。-或-目前 <see cref="P:System.Nullable`1.HasValue" /> 結構的 <see cref="T:System.Nullable`1" /> 屬性為 false，而 <paramref name="other" /> 參數不是 null。-或-目前 <see cref="P:System.Nullable`1.HasValue" /> 結構的 <see cref="T:System.Nullable`1" /> 屬性為 true，而 <see cref="P:System.Nullable`1.Value" /> 屬性所傳回的值與 <paramref name="other" /> 參數不相等。</returns>
      <param name="other">物件。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>擷取 <see cref="P:System.Nullable`1.Value" /> 屬性所傳回之物件的雜湊碼。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，則為 <see cref="P:System.Nullable`1.Value" /> 屬性所傳回之物件的雜湊碼，或是如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，則為零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>擷取目前 <see cref="T:System.Nullable`1" /> 物件的值，或物件的預設值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，則為 <see cref="P:System.Nullable`1.Value" /> 屬性的值；否則為目前 <see cref="T:System.Nullable`1" /> 物件的預設值。預設值的型別是目前 <see cref="T:System.Nullable`1" /> 物件的型別引數，並且其值只由二進位零組成。</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>擷取目前 <see cref="T:System.Nullable`1" /> 物件的值，或指定的預設值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，則為 <see cref="P:System.Nullable`1.Value" /> 屬性的值；否則為 <paramref name="defaultValue" /> 參數。</returns>
      <param name="defaultValue">如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，則為要傳回的值。</param>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>取得值，指出目前的 <see cref="T:System.Nullable`1" /> 物件是否具有其基礎類型的有效值。</summary>
      <returns>如果目前 <see cref="T:System.Nullable`1" /> 物件有值，則為 true；如果目前 <see cref="T:System.Nullable`1" /> 物件沒有值，則為 false。</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0">
      <summary>定義 <see cref="T:System.Nullable`1" /> 執行個體的明確轉換至其底層值。</summary>
      <returns>
        <paramref name="value" /> 參數之 <see cref="P:System.Nullable`1.Value" /> 屬性的值。</returns>
      <param name="value">可為 Null 的值。</param>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}">
      <summary>建立已經初始化為指定值的新 <see cref="T:System.Nullable`1" /> 物件。</summary>
      <returns>
        <see cref="T:System.Nullable`1" /> 物件，其 <see cref="P:System.Nullable`1.Value" /> 屬性已經使用 <paramref name="value" /> 參數加以初始化。</returns>
      <param name="value">實值型別。</param>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>傳回目前 <see cref="T:System.Nullable`1" /> 物件值的文字表示。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，則為目前 <see cref="T:System.Nullable`1" /> 物件值的文字表示；如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，則為空字串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>取得目前 <see cref="T:System.Nullable`1" /> 物件的值，如果這個物件已有指派的有效基礎值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，則為目前 <see cref="T:System.Nullable`1" /> 物件的值。如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，則會擲回例外狀況。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false。</exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>當嘗試對 Null 物件取值時，所擲回的例外狀況。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>初始化 <see cref="T:System.NullReferenceException" /> 類別的新執行個體，設定該新執行個體的 <see cref="P:System.Exception.Message" /> 屬性為描述錯誤的系統提供訊息，例如「當需要物件的執行個體時，找到 'Null' 值」。這個訊息會考量目前系統的文化特性。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.NullReferenceException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.NullReferenceException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Object">
      <summary>支援 .NET Framework 類別階層架構中的所有類別，提供衍生類別的低階服務。這是 .NET Framework 中所有類別的超基底類別，是類別階層架構的根。若要瀏覽這種類型的 .NET Framework 原始程式碼，請參閱參考原始程式碼。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>初始化 <see cref="T:System.Object" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的物件。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>判斷指定的物件執行個體是否視為相等。</summary>
      <returns>如果物件被視為相等則為 true，否則為 false。如果 <paramref name="objA" /> 和 <paramref name="objB" /> 都是 null，則這個方法會傳回 true。</returns>
      <param name="objA">要比較的第一個物件。</param>
      <param name="objB">要比較的第二個物件。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>在記憶體回收開始前，允許物件嘗試釋放資源，並執行其他清除作業。</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>做為預設雜湊函式。</summary>
      <returns>目前物件的雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.GetType">
      <summary>取得目前實例 <see cref="T:System.Type" /> 的屬性。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>建立目前 <see cref="T:System.Object" /> 的淺層複製 (Shallow Copy) 。</summary>
      <returns>目前 <see cref="T:System.Object" /> 的淺層複製 (Shallow Copy) 。</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 執行個體是否為相同的執行個體。</summary>
      <returns>如果 <paramref name="objA" /> 與 <paramref name="objB" /> 為相同的執行個體或兩者皆為 null，則為 true，否則為 false。</returns>
      <param name="objA">要比較的第一個物件。</param>
      <param name="objB">要比較的第二個物件。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>當作業在處置的物件上執行時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>使用含有處置物件的名稱來初始化 <see cref="T:System.ObjectDisposedException" /> 類別的新執行個體。</summary>
      <param name="objectName">字串，包含處置物件的名稱。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.ObjectDisposedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="innerException" /> 不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>使用指定的物件名稱和訊息來初始化 <see cref="T:System.ObjectDisposedException" /> 類別的新執行個體。</summary>
      <param name="objectName">已配置物件的名稱。</param>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>取得描述錯誤的訊息。</summary>
      <returns>描述錯誤的字串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>取得處置物件的名稱。</summary>
      <returns>字串，包含處置物件的名稱。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>標記不再使用的程式項目。此類別無法被繼承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.ObsoleteAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>使用指定的運算訊息來初始化 <see cref="T:System.ObsoleteAttribute" /> 類別的新執行個體。</summary>
      <param name="message">說明其他運算的文字字串。</param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>使用運算訊息和指示使用已過時項目是否視為錯誤的布林值 (Boolean)，來初始化 <see cref="T:System.ObsoleteAttribute" /> 類別的新執行個體。</summary>
      <param name="message">說明其他運算的文字字串。</param>
      <param name="error">布林值，表示使用已過時項目是否視為錯誤。</param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>取得指示編譯器 (Compiler) 是否將使用已過時程式項目視為錯誤的布林值。</summary>
      <returns>如果使用已過時項目視為錯誤，則為 true，否則為 false。預設為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>取得運算訊息，包含其他程式項目的說明。</summary>
      <returns>運算的文字字串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>當沒有足夠的記憶體繼續執行程式時，所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.OverflowException">
      <summary>當檢查內容中的算數、轉型 (Casting) 或轉換作業發生溢位時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>初始化 <see cref="T:System.OverflowException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.OverflowException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.OverflowException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>表示方法將允許在引動過程中使用不定數目的引數。此類別無法被繼承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.ParamArrayAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>當某功能不在特定平台上執行時擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.PlatformNotSupportedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.PlatformNotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">文字訊息，說明例外狀況的原因。</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.PlatformNotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>表示定義一組準則的方法，並判斷指定的物件是否符合這些準則。</summary>
      <typeparam name="T">要比較之物件的型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Predicate`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Predicate`1.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Predicate`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Predicate`1.Invoke(`0)"></member>
    <member name="T:System.RankException">
      <summary>當將錯誤維度 (Dimension) 數目的陣列傳遞給方法時，所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>初始化 <see cref="T:System.RankException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.RankException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.RankException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>使用內部中繼資料 (Metadata) 語彙基元 (Token) 來表示欄位。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>指出目前執行個體和指定的物件是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeFieldHandle" />，並且等於目前執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">要與目前執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>指出目前的執行個體和指定的 <see cref="T:System.RuntimeFieldHandle" /> 是否相等。</summary>
      <returns>如果 <paramref name="handle" /> 的值和目前執行個體的值相等，則為 true，否則為 false。</returns>
      <param name="handle">要與目前執行個體相比較的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指出兩個 <see cref="T:System.RuntimeFieldHandle" /> 結構是否相等。</summary>
      <returns>如果 <paramref name="left" /> 等於 <paramref name="right" />，則為 true，否則為 false。</returns>
      <param name="left">要和 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">要和 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指出兩個 <see cref="T:System.RuntimeFieldHandle" /> 結構是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 不等於 <paramref name="right" /> 則為 true，否則為 false。</returns>
      <param name="left">要和 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">要和 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> 是方法內部中繼資料表示的控制碼。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>指出這個執行個體是否等於指定的物件。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeMethodHandle" />，並且等於這個執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體比較的 <see cref="T:System.Object" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>指出這個執行個體是否等於指定的 <see cref="T:System.RuntimeMethodHandle" />。</summary>
      <returns>如果 <paramref name="handle" /> 等於這個執行個體的值，則為 true，否則為 false。</returns>
      <param name="handle">與這個執行個體比較的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指出 <see cref="T:System.RuntimeMethodHandle" /> 的兩個執行個體是否相等。</summary>
      <returns>如果 <paramref name="left" /> 的值等於 <paramref name="right" /> 的值，則為 true，否則為 false。</returns>
      <param name="left">與 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">與 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指出 <see cref="T:System.RuntimeMethodHandle" /> 的兩個執行個體是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 的值不等於 <paramref name="right" /> 的值，則為 true，否則為 false。</returns>
      <param name="left">與 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">與 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>使用內部中繼資料 (Metadata) 語彙基元 (Token) 來表示型別。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>指出指定的物件是否等於目前的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 結構，並且等於這個執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>指出指定的 <see cref="T:System.RuntimeTypeHandle" /> 結構是否等於目前的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</summary>
      <returns>如果 <paramref name="handle" /> 的值等於這個執行個體的值，則為 true，否則為 false。</returns>
      <param name="handle">要與目前執行個體相比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)">
      <summary>指出物件和 <see cref="T:System.RuntimeTypeHandle" /> 結構是否相等。</summary>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 結構，並且等於 <paramref name="right" />，則為 true，否則為 false。</returns>
      <param name="left">要與 <paramref name="right" /> 相比較的物件。</param>
      <param name="right">要與 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>指出 <see cref="T:System.RuntimeTypeHandle" /> 結構是否等於物件。</summary>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" />，並且等於 <paramref name="left" />，則為 true，否則為 false。</returns>
      <param name="left">要與 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <param name="right">要與 <paramref name="left" /> 相比較的物件。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)">
      <summary>指出物件和 <see cref="T:System.RuntimeTypeHandle" /> 結構是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" />，並且不等於 <paramref name="right" />，則為 true，否則為 false。</returns>
      <param name="left">要與 <paramref name="right" /> 相比較的物件。</param>
      <param name="right">要與 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>指出 <see cref="T:System.RuntimeTypeHandle" /> 結構是否不等於物件。</summary>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 結構，並且不等於 <paramref name="left" />，則為 true，否則為 false。</returns>
      <param name="left">要與 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <param name="right">要與 <paramref name="left" /> 相比較的物件。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.SByte">
      <summary>代表 8 位元帶正負號的整數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>將這個執行個體與指定的 8 元帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比較的 8 位元帶正負號的整數。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.SByte" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.SByte" /> 值。</summary>
      <returns>如果 true 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.SByte" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>代表 <see cref="T:System.SByte" /> 最大的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>代表 <see cref="T:System.SByte" /> 最小的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，這個整數等於 <paramref name="s" /> 參數中所包含的數字。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成它的對等 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，這個整數等於 <paramref name="s" /> 中所指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的樣式和特定文化特性的格式) 轉換成它的對等 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的位元組值，等於 <paramref name="s" /> 參數中所指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。如果 <paramref name="provider" /> 是 null，則會使用執行緒目前的文化特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.-or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.-or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>將指定特定文化特性格式之數字的字串表示轉換成它的對等 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，這個整數等於 <paramref name="s" /> 中所指定的數字。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。如果 <paramref name="provider" /> 是 null，則會使用執行緒目前的文化特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="obj">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.SByte" />. </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零，則為 true，否則為 false。</returns>
      <param name="provider">不使用這個參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">不使用這個參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不支援這個轉換。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">不使用這個參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為類型為 <paramref name="type" /> 的物件。</returns>
      <param name="type">此 <see cref="T:System.Type" /> 值轉換所得的 <see cref="T:System.SByte" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，包含減號 (如果數值為負) 及沒有零的前置字元且範圍從 0 到 9 的數字順序所組成。。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>使用指定的文化特性特定格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.SByte" />，並傳回值，這個值表示轉換是否成功。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">當這個方法傳回時，如果轉換成功便包含相對於 <paramref name="s" /> 中所含數字的 8 位元帶正負號的整數，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。這個參數未初始化便傳遞；<paramref name="result" /> 原始提供的任何值都將遭到覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>嘗試將數字的字串表示轉換成其相等的 <see cref="T:System.SByte" />，並傳回一個值表示轉換是否成功。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 8 位元帶正負號整數，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、不是正確的格式，或是代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字，則轉換會失敗。這個參數未初始化便傳遞；<paramref name="result" /> 原始提供的任何值都將遭到覆寫。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Single">
      <summary>表示單精確度浮點數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>比較這個執行個體與指定的單精確度浮點數，並且傳回整數，這個整數表示這個執行個體的值是小於、等於或大於指定的單精確度浮點數。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />). </returns>
      <param name="value">要比較的單精確度浮點數。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>代表大於零的最小正 <see cref="T:System.Single" /> 值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Single" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>傳回數值，指示這個執行個體和指定的 <see cref="T:System.Single" /> 物件是否表示相同的值。</summary>
      <returns>如果 true 等於這個執行個體則為 <paramref name="obj" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>傳回值，指出指定的數字是否計算結果為負或正的無限大。</summary>
      <returns>如果 <paramref name="f" /> 計算結果為 <see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />，則為 true，否則為 false。</returns>
      <param name="f">單精確度浮點數。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>傳回值，這個值表示指定的值是否不是數字 (<see cref="F:System.Single.NaN" />)。</summary>
      <returns>如果 <paramref name="f" /> 的計算結果為非數值 (<see cref="F:System.Single.NaN" />)，則為 true，否則為 false。</returns>
      <param name="f">單精確度浮點數。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>傳回值，指出指定的數字是否計算結果為負的無限大。</summary>
      <returns>如果 <paramref name="f" /> 計算結果為 <see cref="F:System.Single.NegativeInfinity" />，則為 true；否則為 false。</returns>
      <param name="f">單精確度浮點數。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>傳回值，指出指定數字是否計算結果為正的無限大。</summary>
      <returns>如果 <paramref name="f" /> 計算結果為 <see cref="F:System.Single.PositiveInfinity" />，則為 true；否則為 false。</returns>
      <param name="f">單精確度浮點數。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>代表 <see cref="T:System.Single" /> 最大的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>代表 <see cref="T:System.Single" /> 最小的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.NaN">
      <summary>代表非數值 (NaN)。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>表示負無限大。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.op_Equality(System.Single,System.Single)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Single" /> 值是否相等。</summary>
      <returns>如果 true 和 <paramref name="left" /> 對等，則為 <paramref name="right" />，否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Single.op_GreaterThan(System.Single,System.Single)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Single" /> 值是否大於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 true 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Single" /> 值是否大於或等於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大於或等於 <paramref name="right" />，則為 true，否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Single.op_Inequality(System.Single,System.Single)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Single" /> 值是否不相等。</summary>
      <returns>如果 true 和 <paramref name="left" /> 不相等，則為 <paramref name="right" />，否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Single.op_LessThan(System.Single,System.Single)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Single" /> 值是否小於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小於 <paramref name="right" />，則為 true；否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Single" /> 值是否小於或等於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小於或等於 <paramref name="right" />，則為 true；否則為 false。</returns>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>將數字的字串表示轉換為其對等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，相當於 <paramref name="s" /> 中指定的數值或符號。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將數字的字串表示 (使用指定樣式) 轉換為其對等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，相當於 <paramref name="s" /> 中指定的數值或符號。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定樣式和的特定文化特性格式) 轉換為其對等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，相當於 <paramref name="s" /> 中指定的數值或符號。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的特定文化特性格式) 轉換為其對等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，相當於 <paramref name="s" /> 中指定的數值或符號。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>表示正無限大。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Single" />. </exception>
    </member>
    <member name="M:System.Single.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零，則為 true，否則為 false。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Single" /> 值轉換所得的類型。</param>
      <param name="provider">物件，可提供傳回值格式的相關資訊。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.Single.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>將數字的字串表示 (使用指定樣式和的特定文化特性格式) 轉換為其對等的單精確度浮點數。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">當這個方法傳回時，如果轉換成功，則包含相當於 <paramref name="s" /> 中所包含之數值或符號的單精確度浮點數；如果轉換失敗，則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數是 null 或 <see cref="F:System.String.Empty" />、不是符合 <paramref name="style" /> 的格式、代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字，或 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 列舉常數的有效組合。此參數在未經初始化的情況下傳遞；<paramref name="result" /> 中原本提供的任何值都會被覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>將數字的字串表示轉換為其對等的單精確度浮點數。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">當這個方法傳回時，如果轉換成功，則包含相當於 <paramref name="s" /> 中所包含之數值或符號的單精確度浮點數；如果轉換失敗，則為零。如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、不是有效格式的數字，或者代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字，這項轉換就會失敗。此參數在未經初始化的情況下傳遞；<paramref name="result" /> 中原本提供的任何值都會被覆寫。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>指示應用程式的 COM 執行緒模型為單一執行緒 Apartment (Single-Threaded Apartment，STA)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>初始化 <see cref="T:System.STAThreadAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.String">
      <summary>將文字表示為一系列的 Unicode 字元。若要瀏覽此類型的 .NET Framework 原始程式碼，請參閱參考來源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列的指定指標所指示的值。</summary>
      <param name="value">Unicode 字元之 Null 終端陣列的指標。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current process does not have read access to all the addressed characters.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> specifies an address less than 64000.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列、在陣列內起始字元的位置以及長度等等的指定指標所指示的值。</summary>
      <param name="value">Unicode 字元陣列的指標。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <param name="length">
        <paramref name="value" /> 內要使用的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero, <paramref name="value" /> + <paramref name="startIndex" /> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> + <paramref name="startIndex" /> specifies an address less than 64000.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為由重複指定次數的指定 Unicode 字元所指示的值。</summary>
      <param name="c">Unicode 字元。</param>
      <param name="count">
        <paramref name="c" /> 發生的次數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列所指示的值。</summary>
      <param name="value">Unicode 字元陣列。</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列、在陣列內起始字元的位置和長度等等所指示的值。</summary>
      <param name="value">Unicode 字元陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <param name="length">
        <paramref name="value" /> 內要使用的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or- The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />. </exception>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>取得目前 <see cref="T:System.Char" /> 物件中指定位置的 <see cref="T:System.String" /> 物件。</summary>
      <returns>在 <paramref name="index" /> 位置的物件。</returns>
      <param name="index">目前字串中的位置。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is greater than or equal to the length of this object or less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>比較兩個指定的 <see cref="T:System.String" /> 物件子字串，並傳回一個整數，指出它們在排序順序中的相對位置。</summary>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。Value Condition Less than zero The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order. Zero The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero. Greater than zero The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">要用於比較中的第一個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的位置。</param>
      <param name="strB">要用於比較的第二個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的位置。</param>
      <param name="length">要比較之子字串的字元數上限。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. -or-Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>使用指定的規則比較兩個指定之 <see cref="T:System.String" /> 物件的子字串，並傳回一個整數，表示兩者在排序順序中的相對位置。</summary>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。Value Condition Less than zero The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.Zero The substrings occur in the same position in the sort order, or the <paramref name="length" /> parameter is zero. Greater than zero The substring in <paramref name="strA" /> follllows the substring in <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">要用於比較中的第一個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的位置。</param>
      <param name="strB">要用於比較的第二個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的位置。</param>
      <param name="length">要比較之子字串的字元數上限。</param>
      <param name="comparisonType">其中一個列舉值，指定要用於比較的規則。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. -or-Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>比較兩個指定的 <see cref="T:System.String" /> 物件，並傳回一個整數，指出它們在排序順序中的相對位置。</summary>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。Value Condition Less than zero <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order. Zero <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order. Greater than zero <paramref name="strA" /> follows <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">要比較的第一個字串。</param>
      <param name="strB">要比較的第二個字串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
      <summary>比較兩個指定的 <see cref="T:System.String" /> 物件，忽略或區分兩者的大小寫，並傳回一個整數，表示兩者在排序順序中的相對位置。</summary>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。Value Condition Less than zero <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order. Zero <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order. Greater than zero <paramref name="strA" /> follows <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">要比較的第一個字串。</param>
      <param name="strB">要比較的第二個字串。</param>
      <param name="ignoreCase">若要在比較時忽略大小寫，則為 true，否則為 false。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>使用指定的規則比較兩個指定的 <see cref="T:System.String" /> 物件，並傳回一個整數，表示兩者在排序順序中的相對位置。</summary>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。Value Condition Less than zero <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order. Zero <paramref name="strA" /> is in the same position as <paramref name="strB" /> in the sort order. Greater than zero <paramref name="strA" /> follows <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">要比較的第一個字串。</param>
      <param name="strB">要比較的第二個字串。</param>
      <param name="comparisonType">其中一個列舉值，指定要用於比較的規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.StringComparison" /> is not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>藉由評估每個子字串中對應的 <see cref="T:System.String" /> 物件之數字值，比較兩個指定的 <see cref="T:System.Char" /> 物件之子字串。</summary>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。ValueCondition Less than zero The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />. Zero The substrings are equal, or <paramref name="length" /> is zero. Greater than zero The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. </returns>
      <param name="strA">要用於比較中的第一個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的起始索引。</param>
      <param name="strB">要用於比較的第二個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的起始索引。</param>
      <param name="length">要比較之子字串的字元數上限。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="strA" /> is not null and <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="strB" /> is not null and<paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>藉由評估每個字串中對應的 <see cref="T:System.String" /> 物件之數字值，比較兩個指定 <see cref="T:System.Char" /> 物件。</summary>
      <returns>整數，表示兩個比較元 (Comparand) 之間的語彙關係。ValueCondition Less than zero <paramref name="strA" /> is less than <paramref name="strB" />. Zero <paramref name="strA" /> and <paramref name="strB" /> are equal. Greater than zero <paramref name="strA" /> is greater than <paramref name="strB" />. </returns>
      <param name="strA">要比較的第一個字串。</param>
      <param name="strB">要比較的第二個字串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>比較這個執行個體與指定的 <see cref="T:System.String" /> 物件，並且表示這個執行個體在排序次序中，位於所指定字串之前、之後或相同位置。</summary>
      <returns>32 位元帶正負號的整數，指出這個執行個體在排序次序中，位於 <paramref name="strB" /> 參數之前、之後或相同位置。Value Condition Less than zero This instance precedes <paramref name="strB" />. Zero This instance has the same position in the sort order as <paramref name="strB" />. Greater than zero This instance follows <paramref name="strB" />.-or- <paramref name="strB" /> is null. </returns>
      <param name="strB">要和這個執行個體比較的字串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
      <summary>串連類型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 之已建構的 <see cref="T:System.String" /> 集合的成員。</summary>
      <returns>
        <paramref name="values" /> 中的串連字串。</returns>
      <param name="values">集合物件，這個物件實作 <see cref="T:System.Collections.Generic.IEnumerable`1" />，且其泛型類型引數為 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>串連 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 實作的成員。</summary>
      <returns>
        <paramref name="values" /> 中的串連成員。</returns>
      <param name="values">集合物件，這個物件實作 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 介面。</param>
      <typeparam name="T">
        <paramref name="values" /> 之成員的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>建立指定之物件的字串表示。</summary>
      <returns>
        <paramref name="arg0" /> 值的字串表示；如果 <see cref="F:System.String.Empty" /> 為 <paramref name="arg0" />，則為 null。</returns>
      <param name="arg0">要表示的物件，或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>串連兩個指定之物件的字串表示。</summary>
      <returns>
        <paramref name="arg0" /> 和 <paramref name="arg1" /> 之值的串連字串表示。</returns>
      <param name="arg0">要串連的第一個物件。</param>
      <param name="arg1">要串連的第二個物件。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>串連三個指定之物件的字串表示。</summary>
      <returns>
        <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 之值的串連字串表示。</returns>
      <param name="arg0">要串連的第一個物件。</param>
      <param name="arg1">要串連的第二個物件。</param>
      <param name="arg2">要串連的第三個物件。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>串連指定之 <see cref="T:System.Object" /> 陣列中項目的字串表示法。</summary>
      <returns>
        <paramref name="args" /> 中之項目值的串連字串表示。</returns>
      <param name="args">包含要串連之項目的物件陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> is null. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>串連 <see cref="T:System.String" /> 的兩個指定執行個體。</summary>
      <returns>
        <paramref name="str0" /> 和 <paramref name="str1" /> 的串連。</returns>
      <param name="str0">要串連的第一個字串。</param>
      <param name="str1">要串連的第二個字串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>串連 <see cref="T:System.String" /> 的三個指定執行個體。</summary>
      <returns>
        <paramref name="str0" />、<paramref name="str1" /> 和 <paramref name="str2" /> 的串連。</returns>
      <param name="str0">要串連的第一個字串。</param>
      <param name="str1">要串連的第二個字串。</param>
      <param name="str2">要串連的第三個字串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>串連 <see cref="T:System.String" /> 的四個指定執行個體。</summary>
      <returns>
        <paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" /> 和 <paramref name="str3" /> 的串連。</returns>
      <param name="str0">要串連的第一個字串。</param>
      <param name="str1">要串連的第二個字串。</param>
      <param name="str2">要串連的第三個字串。</param>
      <param name="str3">要串連的第四個字串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>串連指定 <see cref="T:System.String" /> 陣列中的項目。</summary>
      <returns>
        <paramref name="values" /> 的串連項目。</returns>
      <param name="values">字串執行個體的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>傳回值，這個值表示指定的子字串是否會出現在這個字串內。</summary>
      <returns>如果 true 參數出現在這個字串內，或是 <paramref name="value" /> 為空字串 ("")，則為 <paramref name="value" />，否則為 false。</returns>
      <param name="value">要搜尋的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>將字元的指定數目從這個執行個體的指定位置，複製到 Unicode 字元陣列的指定位置。</summary>
      <param name="sourceIndex">這個要複製的執行個體中第一個字元的索引。</param>
      <param name="destination">複製這個執行個體之字元的目標 Unicode 字元陣列。</param>
      <param name="destinationIndex">在 <paramref name="destination" /> 中開始複製作業的索引。</param>
      <param name="count">這個執行個體中要複製到 <paramref name="destination" /> 的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative -or- <paramref name="sourceIndex" /> does not identify a position in the current instance. -or-<paramref name="destinationIndex" /> does not identify a valid index in the <paramref name="destination" /> array. -or-<paramref name="count" /> is greater than the length of the substring from <paramref name="startIndex" /> to the end of this instance -or- <paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of the <paramref name="destination" /> array. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.String.Empty">
      <summary>表示空字串。此欄位為唯讀。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>判斷這個字串執行個體的結尾是否符合指定的字串。</summary>
      <returns>如果 true 符合這個執行個體的結尾，則為 <paramref name="value" />，否則為 false。</returns>
      <param name="value">要在這個執行個體結束時，與子字串比較的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>判斷當使用指定的比較選項進行比較時，這個字串執行個體的結尾是否符合指定的字串。</summary>
      <returns>如果 true 參數符合這個字串的結尾，則為 <paramref name="value" />，否則為 false。</returns>
      <param name="value">要在這個執行個體結束時，與子字串比較的字串。</param>
      <param name="comparisonType">列舉值之一，指定這個字串和 <paramref name="value" /> 的比較方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>判斷這個執行個體和指定的物件 (同時還必須是 <see cref="T:System.String" /> 物件) 是否具有相同的值。</summary>
      <returns>如果 true 是 <paramref name="obj" />，且其值與這個執行個體相同，則為 <see cref="T:System.String" />，否則為 false。如果 <paramref name="obj" /> 是 null，則方法會傳回 false。</returns>
      <param name="obj">要與這個執行個體比較的字串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>判斷這個執行個體和另一個指定的 <see cref="T:System.String" /> 物件是否具有相同的值。</summary>
      <returns>如果 true 參數的值與這個執行個體的值相同，則為 <paramref name="value" />，否則為 false。如果 <paramref name="value" /> 是 null，則方法會傳回 false。</returns>
      <param name="value">要與這個執行個體比較的字串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>判斷兩個指定的 <see cref="T:System.String" /> 物件是否具有相同的值。</summary>
      <returns>如果 true 的值與 <paramref name="a" /> 的值相同，則為 <paramref name="b" />，否則為 false。如果 <paramref name="a" /> 和 <paramref name="b" /> 都是 null，則這個方法會傳回 true。</returns>
      <param name="a">要比較的第一個字串，或是 null。</param>
      <param name="b">要比較的第二個字串，或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>判斷兩個指定的 <see cref="T:System.String" /> 物件是否具有相同的值。參數可指定用於比較的文化特性、大小寫及排序規則。</summary>
      <returns>如果 true 參數的值等於 <paramref name="a" /> 參數的值，則為 <paramref name="b" />，否則為 false。</returns>
      <param name="a">要比較的第一個字串，或是 null。</param>
      <param name="b">要比較的第二個字串，或 null。</param>
      <param name="comparisonType">其中一個列舉值，指定比較的規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>判斷這個字串和指定的 <see cref="T:System.String" /> 物件是否具有相同的值。參數可指定用於比較的文化特性、大小寫及排序規則。</summary>
      <returns>如果 true 參數的值與這個字串相同，則為 <paramref name="value" />，否則為 false。</returns>
      <param name="value">要與這個執行個體比較的字串。</param>
      <param name="comparisonType">其中一個列舉值，指定字串的比較方式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
      <summary>以對應物件的字串表示，取代指定之字串中的一或多個格式項目。參數提供特定文化特性格式資訊。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的一或多個格式項目已由 <paramref name="arg0" /> 的字串表示取代。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="arg0" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to one. </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>以兩個指定之物件的字串表示，取代指定之字串中的格式項目。參數提供特定文化特性格式資訊。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字串表示取代。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />, <paramref name="arg0" />, or <paramref name="arg1" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to two. </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>以三個指定之物件的字串表示，取代指定之字串中的格式項目。參數提供特定文化特性格式資訊。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字串表示取代。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <param name="arg2">要格式化的第三個物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />, <paramref name="arg0" />, <paramref name="arg1" />, or <paramref name="arg2" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to three. </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>以指定陣列中對應物件的字串表示，取代指定之字串中的格式項目。參數提供特定文化特性格式資訊。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="args" /> 中對應物件的字串表示取代。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="args">物件陣列，包含零或多個要格式化的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>以指定之物件的字串表示，取代指定之字串中的一或多個格式項目。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的所有格式項目已由 <paramref name="arg0" /> 的字串表示取代。</returns>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">The format item in <paramref name="format" /> is invalid.-or- The index of a format item is not zero. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>以兩個指定之物件的字串表示，取代指定之字串中的格式項目。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字串表示取代。</returns>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is not zero or one. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>以三個指定之物件的字串表示，取代指定之字串中的格式項目。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字串表示取代。</returns>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <param name="arg2">要格式化的第三個物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than two. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>以指定陣列中對應物件的字串表示，取代指定之字串中的格式項目。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="args" /> 中對應物件的字串表示取代。</returns>
      <param name="format">複合格式字串。</param>
      <param name="args">物件陣列，包含零或多個要格式化的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>傳回這個字串的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>報告這個字串中指定之 Unicode 字元第一次出現時的所在索引 (以零為起始)。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 以零為起始的索引位置，如果找不到為 -1。</returns>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>報告這個字串中指定之 Unicode 字元第一次出現時的所在索引 (以零為起始)。搜尋從指定的字元位置開始。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 以零為起始的索引位置，如果找不到為 -1。</returns>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of the string. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>報告這個執行個體中指定之字元第一次出現時的所在索引 (以零為起始)。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 以零為起始的索引位置，如果找不到為 -1。</returns>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this string.-or-<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>回報這個執行個體中指定之字串第一次出現時的所在索引 (以零為起始)。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 以零為起始的索引位置，如未找到，則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 0。</returns>
      <param name="value">要搜尋的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>回報這個執行個體中指定之字串第一次出現時的所在索引 (以零為起始)。搜尋從指定的字元位置開始。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 以零為起始的索引位置，如未找到，則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>回報這個執行個體中指定之字串第一次出現時的所在索引 (以零為起始)。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 以零為起始的索引位置，如未找到，則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this string.-or-<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串第一次出現時的所在索引 (以零為起始)。參數會指定目前字串中的開始搜尋位置、目前字串中要搜尋的字元數目，以及要用於指定字串的搜尋類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數的以零為起始的索引位置，否則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this instance.-or-<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串第一次出現時的所在索引 (以零為起始)。參數會指定目前字串中的開始搜尋位置和要用於指定字串的搜尋類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數的以零為起始的索引位置，否則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串第一次出現時的所在索引 (以零為起始)。參數會指定要用於指定字串的搜尋類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的索引位置，如果沒有找到，則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 0。</returns>
      <param name="value">要搜尋的字串。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>報告指定的 Unicode 字元陣列中，任何字元在這個執行個體中第一次出現時的所在索引 (以零為起始)。</summary>
      <returns>在此執行個體中，<paramref name="anyOf" /> 中的任何字元第一次出現的所在索引位置 (以零為起始)，如果找不到 <paramref name="anyOf" /> 中的字元，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>報告指定的 Unicode 字元陣列中，任何字元在這個執行個體中第一次出現時的所在索引 (以零為起始)。搜尋從指定的字元位置開始。</summary>
      <returns>在此執行個體中，<paramref name="anyOf" /> 中的任何字元第一次出現的所在索引位置 (以零為起始)，如果找不到 <paramref name="anyOf" /> 中的字元，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the number of characters in this instance. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>報告指定的 Unicode 字元陣列中，任何字元在這個執行個體中第一次出現時的所在索引 (以零為起始)。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <returns>在此執行個體中，<paramref name="anyOf" /> 中的任何字元第一次出現的所在索引位置 (以零為起始)，如果找不到 <paramref name="anyOf" /> 中的字元，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>傳回新字串，其中已在這個執行個體中指定的索引位置插入指定的字串。</summary>
      <returns>與這個執行個體相等的新字串，但是在 <paramref name="value" /> 位置插入了 <paramref name="startIndex" />。</returns>
      <param name="startIndex">插入的索引位置 (以零為起始)。</param>
      <param name="value">要插入的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative or greater than the length of this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>表示指定的字串是否為 null 或 <see cref="F:System.String.Empty" /> 字串。</summary>
      <returns>如果 true 參數為 <paramref name="value" /> 或空字串 ("")，則為 null，否則為 false。</returns>
      <param name="value">要測試的字串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
      <summary>表示指定的字串是否為 null、空白，或只由空白字元組成的字串。</summary>
      <returns>如果 true 參數是 <paramref name="value" /> 或 null，或者 <see cref="F:System.String.Empty" /> 完全由空白字元組成，則為 <paramref name="value" />。</returns>
      <param name="value">要測試的字串。</param>
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>串連類型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 之已建構的 <see cref="T:System.String" /> 集合的成員，並在每個成員之間使用指定的分隔符號。</summary>
      <returns>字串，由 <paramref name="values" /> 中的成員組成，且每個成員之間都會以 <paramref name="separator" /> 字串分隔。如果 <paramref name="values" /> 沒有成員，方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要當做分隔符號的字串。只有在 <paramref name="values" /> 的元素有一個以上時，<paramref name="separator" /> 才會包含在傳回的字串中。</param>
      <param name="values">包含要串連之字串的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>串連集合的成員，並在每個成員之間使用指定的分隔符號。</summary>
      <returns>字串，由 <paramref name="values" /> 中的成員組成，且每個成員之間都會以 <paramref name="separator" /> 字串分隔。如果 <paramref name="values" /> 沒有成員，方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要當做分隔符號的字串。只有在 <paramref name="values" /> 的元素有一個以上時，<paramref name="separator" /> 才會包含在傳回的字串中。</param>
      <param name="values">包含要串連之物件的集合。</param>
      <typeparam name="T">
        <paramref name="values" /> 之成員的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
      <summary>串連物件陣列的項目，並在每個項目之間使用指定的分隔符號。</summary>
      <returns>字串，由 <paramref name="values" /> 的項目組成，且每個項目之間都會以 <paramref name="separator" /> 字串分隔。如果 <paramref name="values" /> 為空陣列，則方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要當做分隔符號的字串。只有在 <paramref name="values" /> 的元素有一個以上時，<paramref name="separator" /> 才會包含在傳回的字串中。</param>
      <param name="values">含有要串連之項目的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>串連字串陣列的所有項目，並在每個項目之間使用指定的分隔符號。</summary>
      <returns>字串，由 <paramref name="value" /> 中的項目組成，且每個項目之間都會以 <paramref name="separator" /> 字串分隔。如果 <paramref name="value" /> 為空陣列，則方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要當做分隔符號的字串。只有在 <paramref name="value" /> 的元素有一個以上時，<paramref name="separator" /> 才會包含在傳回的字串中。</param>
      <param name="value">含有要串連之項目的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>串連字串陣列的指定項目，並在每個項目之間使用指定的分隔符號。</summary>
      <returns>由 <paramref name="value" /> 中之字串組成的字串，每個字串之間都以 <paramref name="separator" /> 字串隔開。-或-如果 <see cref="F:System.String.Empty" /> 為零、<paramref name="count" /> 沒有任何項目，或 <paramref name="value" /> 和 <paramref name="separator" /> 的所有項目都是 <paramref name="value" />，則為 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要當做分隔符號的字串。只有在 <paramref name="value" /> 的元素有一個以上時，<paramref name="separator" /> 才會包含在傳回的字串中。</param>
      <param name="value">含有要串連之項目的陣列。</param>
      <param name="startIndex">
        <paramref name="value" /> 中要使用的第一個項目。</param>
      <param name="count">要使用的 <paramref name="value" /> 項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than 0.-or- <paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>報告這個執行個體中指定之 Unicode 字元最後一次出現時的所在索引 (以零為起始)。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 以零為起始的索引位置，如果找不到為 -1。</returns>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>報告這個執行個體中指定之 Unicode 字元最後一次出現時的所在索引 (以零為起始)。搜尋會從指定的字元位置開始，然後反向朝字串的開頭進行。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 的以零為起始索引位置，如果找不到該字元或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <param name="startIndex">搜尋的開始位置。搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>報告這個執行個體的子字串中，指定的 Unicode 字元最後一次出現時的所在索引 (以零為起始)。搜尋會從指定的字元位置開始，然後反向朝字串開頭指定數目的字元位置進行。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 的以零為起始索引位置，如果找不到該字元或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <param name="startIndex">搜尋的開始位置。搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" />
                 - <paramref name="count" /> + 1 is less than zero.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>回報這個執行個體中指定之字串最後一次出現時的所在索引 (以零為起始)。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 以零為起始的起始索引位置，如未找到，則為 -1。如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值為這個執行個體中的最後一個索引位置。</returns>
      <param name="value">要搜尋的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>回報這個執行個體中指定之字串最後一次出現時的所在索引 (以零為起始)。搜尋會從指定的字元位置開始，然後反向朝字串的開頭進行。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的以零為起始索引位置，如果找不到該字串或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" /> 或這個執行個體之最後索引位置，取兩者中較小者。</returns>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance. -or-The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>回報這個執行個體中指定之字串最後一次出現時的所在索引 (以零為起始)。搜尋會從指定的字元位置開始，然後反向朝字串開頭指定數目的字元位置進行。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的以零為起始索引位置，如果找不到該字串或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" /> 或這個執行個體之最後索引位置，取兩者中較小者。</returns>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and  <paramref name="startIndex" /> is negative.-or- The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" />
                 - <paramref name="count" /> + 1 specifies a position that is not within this instance. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>回報這個執行個體中指定之字串最後一次出現時的所在索引 (以零為起始)。搜尋會從指定的字元位置開始，然後反向朝字串開頭指定數目的字元位置進行。參數會指定搜尋指定字串時要執行的比較類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數以零為起始的索引位置，如果找不到該字串或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" /> 或這個執行個體之最後索引位置，取兩者中較小者。</returns>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.-or- The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> specifies a position that is not within this instance. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串最後一次出現時的所在索引 (以零為起始)。搜尋會從指定的字元位置開始，然後反向朝字串的開頭進行。參數會指定搜尋指定字串時要執行的比較類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數以零為起始的索引位置，如果找不到該字串或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" /> 或這個執行個體之最後索引位置，取兩者中較小者。</returns>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance. -or-The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串最後一次出現時的所在索引 (以零為起始)。參數會指定要用於指定字串的搜尋類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數的以零為起始的起始索引位置，否則為 -1。如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值為這個執行個體中的最後一個索引位置。</returns>
      <param name="value">要搜尋的字串。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>報告 Unicode 陣列中的一或多個指定的字元，在這個執行個體中最後一次出現時的所在索引 (以零為起始)。</summary>
      <returns>這個執行個體中最後項目的索引位置，其中找到了 <paramref name="anyOf" /> 中的任何字元，如果 <paramref name="anyOf" /> 中沒有找到任何字元，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>報告 Unicode 陣列中的一或多個指定的字元，在這個執行個體中最後一次出現時的所在索引 (以零為起始)。搜尋會從指定的字元位置開始，然後反向朝字串的開頭進行。</summary>
      <returns>所找到之 <paramref name="anyOf" /> 的任何字元，在這個執行個體中最後一次出現的索引位置；如果找不到 <paramref name="anyOf" /> 中的字元，或目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋開始位置。搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> specifies a position that is not within this instance. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>報告 Unicode 陣列中的一或多個指定的字元，在這個執行個體中最後一次出現時的所在索引 (以零為起始)。搜尋會從指定的字元位置開始，然後反向朝字串開頭指定數目的字元位置進行。</summary>
      <returns>所找到之 <paramref name="anyOf" /> 的任何字元，在這個執行個體中最後一次出現的索引位置；如果找不到 <paramref name="anyOf" /> 中的字元，或目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋開始位置。搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> minus <paramref name="count" /> + 1 is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.String.Length">
      <summary>取得目前 <see cref="T:System.String" /> 物件中字元的數目。</summary>
      <returns>目前字串中的字元數。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>判斷兩個指定的字串是否具有相同的值。</summary>
      <returns>如果 true 的值與 <paramref name="a" /> 的值相同，則為 <paramref name="b" />，否則為 false。</returns>
      <param name="a">要比較的第一個字串，或是 null。</param>
      <param name="b">要比較的第二個字串，或 null。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>判斷兩個指定的字串是否具有不同的值。</summary>
      <returns>如果 true 的值與 <paramref name="a" /> 的值不同，則為 <paramref name="b" />，否則為 false。</returns>
      <param name="a">要比較的第一個字串，或是 null。</param>
      <param name="b">要比較的第二個字串，或 null。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>傳回新字串，此字串會以空格填補左側至指定的總長度，靠右對齊這個執行個體中的字元。</summary>
      <returns>與這個執行個體相等的新字串，但為靠右對齊，並在左側視需要填補若干空間來建立 <paramref name="totalWidth" /> 的長度。但是，如果 <paramref name="totalWidth" /> 小於這個執行個體的長度，此方法會傳回現有執行個體的參考。如果 <paramref name="totalWidth" /> 等於這個執行個體的長度，此方法會傳回等於這個執行個體的新字串。</returns>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>傳回新字串，此字串會以指定的 Unicode 字元填補左側至指定的總長度，靠右對齊這個執行個體中的字元。</summary>
      <returns>與這個執行個體相等的新字串，但為靠右對齊，並在左側視需要填補若干 <paramref name="paddingChar" /> 字元來建立 <paramref name="totalWidth" /> 的長度。但是，如果 <paramref name="totalWidth" /> 小於這個執行個體的長度，此方法會傳回現有執行個體的參考。如果 <paramref name="totalWidth" /> 等於這個執行個體的長度，此方法會傳回等於這個執行個體的新字串。</returns>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <param name="paddingChar">Unicode 填補字元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>傳回新字串，此字串會以空格填補右側至指定的總長度，靠左對齊這個字串中的字元。</summary>
      <returns>與這個執行個體相等的新字串，但為靠左對齊，並在右側視需要填補若干空間來建立 <paramref name="totalWidth" /> 的長度。但是，如果 <paramref name="totalWidth" /> 小於這個執行個體的長度，此方法會傳回現有執行個體的參考。如果 <paramref name="totalWidth" /> 等於這個執行個體的長度，此方法會傳回等於這個執行個體的新字串。</returns>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>傳回新字串，此字串會以指定的 Unicode 字元填補右側至指定的總長度，靠左對齊這個字串中的字元。</summary>
      <returns>與這個執行個體相等的新字串，但為靠左對齊，並在右側視需要填補若干 <paramref name="paddingChar" /> 字元來建立 <paramref name="totalWidth" /> 的長度。但是，如果 <paramref name="totalWidth" /> 小於這個執行個體的長度，此方法會傳回現有執行個體的參考。如果 <paramref name="totalWidth" /> 等於這個執行個體的長度，此方法會傳回等於這個執行個體的新字串。</returns>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <param name="paddingChar">Unicode 填補字元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>傳回新字串，其中已刪除目前執行個體中的所有字元 (從指定位置開始到最後一個位置為止)。</summary>
      <returns>新字串，除了已移除的字元以外，其餘部分都與這個字串相等。</returns>
      <param name="startIndex">要開始刪除字元之以零為起始的位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero.-or- <paramref name="startIndex" /> specifies a position that is not within this string. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>傳回新字串，其中已刪除在目前執行個體中指定位置開始之指定數目的字元。</summary>
      <returns>新字串，除了已移除的字元以外，其餘部分都與這個執行個體相等。</returns>
      <param name="startIndex">要開始刪除字元之以零為起始的位置。</param>
      <param name="count">要刪除的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>傳回新字串，其中這個執行個體中所有出現的指定 Unicode 字元都取代成其他指定的 Unicode 字元。</summary>
      <returns>相當於這個執行個體的字串，只是 <paramref name="oldChar" /> 的所有執行個體都會取代成 <paramref name="newChar" />。如果在目前的執行個體中找不到 <paramref name="oldChar" />，則方法傳回未變更的目前執行個體。</returns>
      <param name="oldChar">要被取代的 Unicode 字元。</param>
      <param name="newChar">要用來取代所有出現之 <paramref name="oldChar" /> 的 Unicode 字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>傳回新字串，其中目前執行個體中所有出現的指定字串，都取代成其他指定的字串。</summary>
      <returns>相當於目前字串的字串，只是 <paramref name="oldValue" /> 的所有執行個體都會取代成 <paramref name="newValue" />。如果在目前的執行個體中找不到 <paramref name="oldValue" />，則方法傳回未變更的目前執行個體。</returns>
      <param name="oldValue">要被取代的字串。</param>
      <param name="newValue">用來取代所有出現之 <paramref name="oldValue" /> 的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> is the empty string (""). </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>傳回字串陣列，這個陣列包含這個執行個體中，由指定的 Unicode 字元陣列之項目所分隔的子字串。</summary>
      <returns>陣列，其項目中包含了這個執行個體中的子字串，由 <paramref name="separator" /> 內的一或多個字元分隔。如需詳細資訊，請參閱＜備註＞一節。</returns>
      <param name="separator">Unicode 字元陣列 (可分隔這個執行個體中的子字串)、不包含分隔符號的空陣列、或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>傳回字串陣列，這個陣列包含這個執行個體中，由指定的 Unicode 字元陣列之項目所分隔的子字串。參數可指定要傳回的子字串數目的最大值。</summary>
      <returns>陣列，其項目中包含了這個執行個體中的子字串，由 <paramref name="separator" /> 內的一或多個字元分隔。如需詳細資訊，請參閱＜備註＞一節。</returns>
      <param name="separator">Unicode 字元陣列 (可分隔這個執行個體中的子字串)、不包含分隔符號的空陣列、或 null。</param>
      <param name="count">要傳回的子字串之最大數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
      <summary>傳回字串陣列，這個陣列包含這個字串中，由指定的 Unicode 字元陣列之項目所分隔的子字串。參數指定傳回的子字串最大數目，以及是否傳回空的陣列項目。</summary>
      <returns>陣列，其項目包含了這個字串中由 <paramref name="separator" /> 內的一或多個字元所分隔的子字串。如需詳細資訊，請參閱＜備註＞一節。</returns>
      <param name="separator">Unicode 字元陣列 (可分隔這個執行個體中的子字串)、不包含分隔符號的空陣列、或 null。</param>
      <param name="count">要傳回的子字串之最大數目。</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示要省略傳回陣列中的空陣列項目，否則 <see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空陣列項目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>傳回字串陣列，這個陣列包含這個字串中，由指定的 Unicode 字元陣列之項目所分隔的子字串。參數指定是否傳回空白的陣列項目。</summary>
      <returns>陣列，其項目包含了這個字串中由 <paramref name="separator" /> 內的一或多個字元所分隔的子字串。如需詳細資訊，請參閱＜備註＞一節。</returns>
      <param name="separator">Unicode 字元陣列 (可分隔這個執行個體中的子字串)、不包含分隔符號的空陣列、或 null。</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示要省略傳回陣列中的空陣列項目，否則 <see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空陣列項目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
      <summary>傳回字串陣列，這個陣列包含這個字串中，由指定的字串陣列之項目所分隔的子字串。參數指定傳回的子字串最大數目，以及是否傳回空的陣列項目。</summary>
      <returns>陣列，其項目包含了這個字串中由 <paramref name="separator" /> 內的一或多個字串所分隔的子字串。如需詳細資訊，請參閱＜備註＞一節。</returns>
      <param name="separator">字串陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空陣列，或 null。</param>
      <param name="count">要傳回的子字串之最大數目。</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示要省略傳回陣列中的空陣列項目，否則 <see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空陣列項目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>傳回字串陣列，這個陣列包含這個字串中，由指定的字串陣列之項目所分隔的子字串。參數指定是否傳回空白的陣列項目。</summary>
      <returns>陣列，其項目包含了這個字串中由 <paramref name="separator" /> 內的一或多個字串所分隔的子字串。如需詳細資訊，請參閱＜備註＞一節。</returns>
      <param name="separator">字串陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空陣列，或 null。</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示要省略傳回陣列中的空陣列項目，否則 <see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空陣列項目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>判斷這個字串執行個體的開頭是否符合指定的字串。</summary>
      <returns>如果 true 符合這個字串的開頭，則為 <paramref name="value" />，否則為 false。</returns>
      <param name="value">要比較的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>判斷當使用指定之比較選項進行比較時，這個字串執行個體的開頭是否符合指定的字串。</summary>
      <returns>如果這個執行個體以 true 為開頭，則為 <paramref name="value" />，否則為 false。</returns>
      <param name="value">要比較的字串。</param>
      <param name="comparisonType">列舉值之一，指定這個字串和 <paramref name="value" /> 的比較方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>從這個執行個體擷取子字串。子字串會在指定的字元位置開始並繼續到字串的結尾。</summary>
      <returns>與這個執行個體中從 <paramref name="startIndex" /> 開始之子字串相等的字串；如果 <see cref="F:System.String.Empty" /> 等於這個執行個體的長度，則為 <paramref name="startIndex" />。</returns>
      <param name="startIndex">這個執行個體中子字串之以零為起始的起始字元位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>從這個執行個體擷取子字串。子字串起始於指定的字元位置，並且具有指定的長度。</summary>
      <returns>與長度為 <paramref name="length" /> 且在這個執行個體中從 <paramref name="startIndex" /> 開始之子字串相等的字串；如果 <see cref="F:System.String.Empty" /> 等於這個執行個體的長度且 <paramref name="startIndex" /> 為零，則為 <paramref name="length" />。</returns>
      <param name="startIndex">這個執行個體中子字串之以零為起始的起始字元位置。</param>
      <param name="length">子字串中的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.-or- <paramref name="startIndex" /> or <paramref name="length" /> is less than zero. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回列舉值，可逐一查看目前的 <see cref="T:System.String" /> 物件。</summary>
      <returns>類型 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 的 <see cref="T:System.Char" />，可由於逐一查看目前的 <see cref="T:System.String" /> 物件。</returns>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回列舉值，可逐一查看目前的 <see cref="T:System.String" /> 物件。</summary>
      <returns>可用來逐一查看目前字串的列舉程式。</returns>
    </member>
    <member name="M:System.String.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.String" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前字串的值為 true，則為 <see cref="F:System.Boolean.TrueString" />；如果目前字串的值為 false，則為 <see cref="F:System.Boolean.FalseString" />。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.FormatException">The value of the current string is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件中位於索引 0 的字元。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToString(System.IFormatProvider)"></member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="type">傳回的物件之類型。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>將這個執行個體中的字元複製到 Unicode 字元陣列中。</summary>
      <returns>Unicode 字元陣列，其項目是這個執行個體的個別字元。如果這個執行個體是空字串，則傳回的陣列會是空的且長度為零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>將這個執行個體的指定子字串字元複製到 Unicode 字元陣列。</summary>
      <returns>Unicode 字元陣列，其項目是從 <paramref name="length" /> 字元位置起始的這個執行個體中的 <paramref name="startIndex" /> 字元數。</returns>
      <param name="startIndex">這個執行個體中的子字串開始位置。</param>
      <param name="length">這個執行個體中的子字串長度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="length" /> is greater than the length of this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToLower">
      <summary>傳回此字串轉換為小寫的版本。</summary>
      <returns>小寫的字串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <summary>使用不因文化特性而異的大小寫規則，傳回轉換成小寫的這個 <see cref="T:System.String" /> 物件之複本。</summary>
      <returns>目前字串的小寫對應項。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToString">
      <summary>傳回這個 <see cref="T:System.String" /> 執行個體；不會實際執行轉換。</summary>
      <returns>目前的字串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>傳回此字串轉換為大寫的版本。</summary>
      <returns>目前字串的大寫對應項。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <summary>使用不因文化特性而異的大小寫規則，傳回轉換成大寫的這個 <see cref="T:System.String" /> 物件之複本。</summary>
      <returns>目前字串的大寫對應項。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.Trim">
      <summary>從目前的 <see cref="T:System.String" /> 物件中移除所有的開頭和結尾空白字元。</summary>
      <returns>從目前字串的開頭和結尾移除所有空白字元後，所保留下來的字串。如果在目前的執行個體中無法修剪任何字元，則方法傳回未變更的目前執行個體。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>從目前的 <see cref="T:System.String" /> 物件中移除陣列中指定之一組字元的所有開頭和結尾指定項目。</summary>
      <returns>從目前的字串開頭和結尾處移除 <paramref name="trimChars" /> 參數中所有出現的字元後，所保留下來的字串。如果 <paramref name="trimChars" /> 是 null 或空陣列，則反而會移除空白字元。如果在目前的執行個體中無法修剪任何字元，則方法傳回未變更的目前執行個體。</returns>
      <param name="trimChars">要移除的 Unicode 字元陣列或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>從目前的 <see cref="T:System.String" /> 物件中移除陣列中指定之一組字元的所有結尾指定項目。</summary>
      <returns>從目前的字串結尾處移除 <paramref name="trimChars" /> 參數中所有出現的字元後，所保留下來的字串。如果 <paramref name="trimChars" /> 是 null 或空陣列，則反而會移除 Unicode 空白字元。如果在目前的執行個體中無法修剪任何字元，則方法傳回未變更的目前執行個體。</returns>
      <param name="trimChars">要移除的 Unicode 字元陣列或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>從目前的 <see cref="T:System.String" /> 物件中移除陣列中指定之一組字元的所有開頭指定項目。</summary>
      <returns>從目前的字串開頭處移除 <paramref name="trimChars" /> 參數中所有出現的字元後，所保留下來的字串。如果 <paramref name="trimChars" /> 是 null 或空陣列，則反而會移除空白字元。</returns>
      <param name="trimChars">要移除的 Unicode 字元陣列或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.StringComparison">
      <summary>指定 <see cref="M:System.String.Compare(System.String,System.String)" /> 與 <see cref="M:System.String.Equals(System.Object)" /> 方法的某些多載形式所使用的文化特性、大小寫與排序規則。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>比較使用區分文化特性排序規則和使用目前文化特性的字串。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>比較使用區分文化特性排序規則和使用目前文化特性的字串，並忽略所比較字串的大小寫。</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>採用序數排序規則比較字串。</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>採用序數排序規則比較字串，並忽略所比較字串的大小寫。</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>指定適用的 <see cref="Overload:System.String.Split" /> 方法多載是否會加入或省略傳回值中的空子字串。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>此傳回值會加入包含了空字串的陣列元素。</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>此傳回值不會加入包含了空字串的陣列元素。</summary>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>指示每個執行緒的靜態欄位值是唯一的。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ThreadStaticAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>分配給處理或作業的時間已經過期時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>初始化 <see cref="T:System.TimeoutException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.TimeoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和內部例外狀況，來初始化 <see cref="T:System.TimeoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>表示時間間隔。若要瀏覽這種類型的 .NET Framework 原始程式碼，請參閱參考來源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.TimeSpan" /> 結構的新執行個體初始化為指定的時數、分鐘數和秒數。</summary>
      <param name="hours">時數。</param>
      <param name="minutes">分鐘數。</param>
      <param name="seconds">秒數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.TimeSpan" /> 結構的新執行個體初始化為指定的天數、時數、分鐘數和秒數。</summary>
      <param name="days">天數。</param>
      <param name="hours">時數。</param>
      <param name="minutes">分鐘數。</param>
      <param name="seconds">秒數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.TimeSpan" /> 結構的新執行個體初始化為指定的天數、時數、分鐘數、秒數和毫秒數。</summary>
      <param name="days">天數。</param>
      <param name="hours">時數。</param>
      <param name="minutes">分鐘數。</param>
      <param name="seconds">秒數。</param>
      <param name="milliseconds">毫秒數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>將 <see cref="T:System.TimeSpan" /> 結構的新執行個體初始化為刻度的指定數目。</summary>
      <param name="ticks">以 100 奈秒為單位所表示的時段。</param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>傳回新的 <see cref="T:System.TimeSpan" /> 物件，它的值為指定之 <see cref="T:System.TimeSpan" /> 物件與這個執行個體的總和。</summary>
      <returns>新的物件，表示這個執行個體的值加上 <paramref name="ts" /> 的值。</returns>
      <param name="ts">要加入的時間間隔。</param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>比較兩個 <see cref="T:System.TimeSpan" /> 值並傳回整數，這個整數會指出第一個值比第二個值短、等長或較長。</summary>
      <returns>下列其中一個值。值描述 -1 <paramref name="t1" /> 短於 <paramref name="t2" />。 0 <paramref name="t1" /> 等於 <paramref name="t2" />。 1 <paramref name="t1" /> 長於 <paramref name="t2" />。</returns>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>比較這個執行個體和指定的 <see cref="T:System.TimeSpan" /> 物件，並傳回一個整數，表示這個執行個體短於、等於或長於 <see cref="T:System.TimeSpan" /> 物件。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。值描述負整數這個執行個體短於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。正整數這個執行個體長於 <paramref name="value" />。</returns>
      <param name="value">與這個執行個體相比較的物件。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的天數元件。</summary>
      <returns>這個執行個體的天數元件。傳回值可以為正數或是負數。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>傳回新的 <see cref="T:System.TimeSpan" /> 物件，其值為目前 <see cref="T:System.TimeSpan" /> 物件的絕對值。</summary>
      <returns>新的物件，其值為目前 <see cref="T:System.TimeSpan" /> 物件的絕對值。</returns>
      <exception cref="T:System.OverflowException">The value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.TimeSpan" /> 物件，表示與目前的 <see cref="T:System.TimeSpan" /> 結構有相同時間間隔，則為 true，否則為 false。</returns>
      <param name="value">與這個執行個體相互比較的物件。 </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>傳回表示這個執行個體是否等於指定 <see cref="T:System.TimeSpan" /> 物件的值。</summary>
      <returns>如果 <paramref name="obj" /> 表示的時間間隔與這個執行個體相同，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。 </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.TimeSpan" /> 執行個體是否相等。</summary>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值相等，則為 true，否則為 false。</returns>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。 </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>傳回表示指定天數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
      <param name="value">精確度達到最接近毫秒數的天數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. -or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>傳回表示指定時數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
      <param name="value">精確度達到最接近毫秒數的時數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. -or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>傳回表示指定毫秒數的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
      <param name="value">毫秒數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>傳回表示指定分鐘數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
      <param name="value">精確度達到最接近毫秒數的分鐘數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>傳回表示指定秒數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
      <param name="value">精確度達到最接近毫秒數的秒數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>傳回表示指定時間的 <see cref="T:System.TimeSpan" />，其規格是以刻度為單位。</summary>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
      <param name="value">表示時間的刻度數。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的時數元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的時數元件。傳回值範圍從 -23 到 23。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>表示最大 <see cref="T:System.TimeSpan" /> 值。此欄位為唯讀。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的毫秒數元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的毫秒數元件。傳回值範圍從 -999 到 999。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的分鐘數元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的分鐘數元件。傳回值範圍從 -59 到 59。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>表示最小 <see cref="T:System.TimeSpan" /> 值。此欄位為唯讀。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>傳回新 <see cref="T:System.TimeSpan" /> 物件，其值是這個執行個體的相反值。</summary>
      <returns>新的物件，其數值與這個執行個體相同，但是正負號相反。</returns>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>加入兩個指定的 <see cref="T:System.TimeSpan" /> 執行個體。</summary>
      <returns>物件，其值為 <paramref name="t1" /> 和 <paramref name="t2" /> 值的總和。</returns>
      <param name="t1">要加入的第一個時間間隔。</param>
      <param name="t2">要加入的第二個時間間隔。</param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>表示兩個 <see cref="T:System.TimeSpan" /> 執行個體是否相等。</summary>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值相等，則為 true，否則為 false。</returns>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否大於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值大於 <paramref name="t2" /> 的值，則為 true，否則為 false。</returns>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否大於或等於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值大於或等於 <paramref name="t2" /> 的值，則為 true，否則為 false。</returns>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>表示兩個 <see cref="T:System.TimeSpan" /> 執行個體是否不相等。</summary>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值不相等，則為 true，否則為 false。</returns>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否小於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值小於 <paramref name="t2" /> 的值，則為 true，否則為 false。</returns>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否小於或等於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值小於或等於 <paramref name="t2" /> 的值，則為 true，否則為 false。</returns>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>將指定的 <see cref="T:System.TimeSpan" /> 從另一個指定的 <see cref="T:System.TimeSpan" /> 減掉。</summary>
      <returns>物件，其值為 <paramref name="t1" /> 值減去 <paramref name="t2" /> 值的結果。</returns>
      <param name="t1">被減數。</param>
      <param name="t2">減數。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>傳回 <see cref="T:System.TimeSpan" />，其值是指定執行個體的相反值。</summary>
      <returns>與這個執行個體具有相同數值的物件，但正負號相反。</returns>
      <param name="t">要成為相反值的時間間隔。</param>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>傳回 <see cref="T:System.TimeSpan" /> 的指定執行個體。</summary>
      <returns>
        <paramref name="t" /> 指定的時間間隔。</returns>
      <param name="t">要傳回的時間間隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>將時間間隔的字串表示，轉換成與其相等的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>時間間隔，對應至 <paramref name="s" />。</returns>
      <param name="s">字串，指定要轉換的時間間隔。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components is outside its valid range. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>時間間隔，對應至 <paramref name="input" />，如 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定之格式和特定文化特性格式資訊，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="format" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="format">標準或自訂格式字串，其定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定之格式、特定文件特性格式資訊和樣式，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="format">標準或自訂格式字串，其定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，這個組合定義 <paramref name="input" /> 中可以存在的樣式項目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>使用指定之格式字串的陣列和特定文件特性格式資訊，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="formats" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formats">標準或自訂格式字串的陣列，這個陣列定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定之格式、特定文件特性格式資訊和樣式，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formats">標準或自訂格式字串的陣列，這個陣列定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，這個組合定義 Input 中可以存在的樣式項目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的秒數元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的秒數元件。傳回值範圍從 -59 到 59。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>傳回新的 <see cref="T:System.TimeSpan" /> 物件，它的值為指定之 <see cref="T:System.TimeSpan" /> 物件與這個執行個體的差。</summary>
      <returns>新的時間間隔，其值是這個執行個體的值減去 <paramref name="ts" /> 的值之結果。</returns>
      <param name="ts">要減去的時間間隔。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。傳回值意義小於零這個執行個體在排序順序中會在 <paramref name="value" /> 之前。零這個執行個體出現在排序順序中的位置和 <paramref name="value" /> 相同。大於零這個執行個體在排序順序中會跟在 <paramref name="value" /> 之後。-或- <paramref name="value" /> 為 null。 </returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.TimeSpan" /> object. </exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>取得刻度數，表示目前 <see cref="T:System.TimeSpan" /> 結構的值。</summary>
      <returns>這個執行個體中包含的刻度數。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>表示 1 天中的刻度數。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>表示 1 小時中的刻度數。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>表示 1 毫秒中的刻度數。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>表示 1 分鐘中的刻度數。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>表示 1 秒中的刻度數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>將目前 <see cref="T:System.TimeSpan" /> 物件的值，轉換為其相等的字串表示。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 值的字串表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
      <summary>使用指定的格式，將目前 <see cref="T:System.TimeSpan" /> 物件的值，轉換為其相等字串表示。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 值的字串表示，採用 <paramref name="format" /> 參數所指定的格式。</returns>
      <param name="format">標準或自訂 <see cref="T:System.TimeSpan" /> 格式字串。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文件特性格式資訊，將目前 <see cref="T:System.TimeSpan" /> 物件的值，轉換為其相等的字串表示。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 值的字串表示，如 <paramref name="format" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="format">標準或自訂 <see cref="T:System.TimeSpan" /> 格式字串。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，這個值以整數和小數的天數表示。</summary>
      <returns>這個執行個體表示的完整天數。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，這個值以整數和小數的時數表示。</summary>
      <returns>這個執行個體表示的完整時數。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，這個值以整數和小數的毫秒數表示。</summary>
      <returns>這個執行個體表示的完整毫秒數。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，這個值以整數和小數的分鐘數表示。</summary>
      <returns>這個執行個體表示的完整分鐘數。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，這個值以整數和小數的秒數表示。</summary>
      <returns>這個執行個體表示的完整秒數。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的特定文件特性格式資訊，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。</summary>
      <returns>如果 <paramref name="input" /> 轉換成功，則為 true，否則為 false。如果 <paramref name="input" /> 參數是 null 或 <see cref="F:System.String.Empty" />、具有無效格式、代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的時間間隔，或是其天數、時數、分鐘數或秒數項目至少有一個超出有效範圍，這項作業就會傳回 false。</returns>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="input" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>將時間間隔的字串表示，轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回一個值表示轉換是否成功。</summary>
      <returns>如果 <paramref name="s" /> 轉換成功，則為 true，否則為 false。如果 <paramref name="s" /> 參數是 null 或 <see cref="F:System.String.Empty" />、具有無效格式、代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的時間間隔，或是其天數、時數、分鐘數或秒數項目至少有一個超出有效範圍，這項作業就會傳回 false。</returns>
      <param name="s">字串，指定要轉換的時間間隔。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="s" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、特定文件特性格式資訊和樣式，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>如果 <paramref name="input" /> 轉換成功，則為 true，否則為 false。</returns>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="format">標準或自訂格式字串，其定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="styles">一或多個列舉值，這些值會指出 <paramref name="input" /> 的樣式。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="input" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的格式和特定文件特性格式資訊，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>如果 <paramref name="input" /> 轉換成功，則為 true，否則為 false。</returns>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="format">標準或自訂格式字串，其定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="input" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、特定文件特性格式資訊和樣式，將指定的時間間隔字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>如果 <paramref name="input" /> 轉換成功，則為 true，否則為 false。</returns>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formats">標準或自訂格式字串的陣列，這些格式字串定義可接受的 <paramref name="input" /> 格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="styles">一或多個列舉值，這些值會指出 <paramref name="input" /> 的樣式。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="input" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的格式和特定文件特性格式資訊，將指定的時間間隔字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>如果 <paramref name="input" /> 轉換成功，則為 true，否則為 false。</returns>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formats">標準或自訂格式字串的陣列，這些格式字串定義可接受的 <paramref name="input" /> 格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="input" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>表示零 <see cref="T:System.TimeSpan" /> 值。此欄位為唯讀。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>表示世界的任意時區。</summary>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>取得目前時區標準時間與 Coordinated Universal Time (UTC) 的時差。</summary>
      <returns>物件，表示目前時區標準時間與 Coordinated Universal Time (UTC) 的時差。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>將時間轉換為特定時區的時間。</summary>
      <returns>目的地時區中的日期與時間。</returns>
      <param name="dateTime">要轉換的日期和時間。</param>
      <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 參數值表示無效的時間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 參數的值為 null。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
      <summary>將時間從一個時區轉換為另一個時區。</summary>
      <returns>目的時區中的日期和時間，對應至來源時區中的 <paramref name="dateTime" /> 參數。</returns>
      <param name="dateTime">要轉換的日期和時間。</param>
      <param name="sourceTimeZone">
        <paramref name="dateTime" /> 的時區。</param>
      <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 參數的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />，但是 <paramref name="sourceTimeZone" /> 參數不等於 <see cref="F:System.DateTimeKind.Local" />。如需詳細資訊，請參閱＜備註＞一節。-或-<paramref name="dateTime" /> 參數的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Utc" />，但是 <paramref name="sourceTimeZone" /> 參數不等於 <see cref="P:System.TimeZoneInfo.Utc" />。-或-<paramref name="dateTime" /> 參數是無效的時間 (亦即，它表示因時區調整規則而不存在的時間)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZone" /> 參數為 null。-或-<paramref name="destinationTimeZone" /> 參數為 null。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>將時間轉換為特定時區的時間。</summary>
      <returns>目的地時區中的日期與時間。</returns>
      <param name="dateTimeOffset">要轉換的日期和時間。</param>
      <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 參數的值為 null。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>取得目前時區日光節約時間的顯示名稱。</summary>
      <returns>時區之日光節約時間的顯示名稱。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>取得表示時區的一般顯示名稱。</summary>
      <returns>時區的一般顯示名稱。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>判斷目前的 <see cref="T:System.TimeZoneInfo" /> 物件和另一個 <see cref="T:System.TimeZoneInfo" /> 物件是否相等。</summary>
      <returns>如果兩個 <see cref="T:System.TimeZoneInfo" /> 物件相等則為 true，否則為 false。</returns>
      <param name="other">要和目前物件比較的第二個物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)">
      <summary>根據其識別項從登錄擷取 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
      <returns>其識別項是 <paramref name="id" /> 參數之值的物件。</returns>
      <param name="id">對應於 <see cref="P:System.TimeZoneInfo.Id" /> 屬性的時區識別項。</param>
      <exception cref="T:System.OutOfMemoryException">系統沒有足夠的記憶體，無法保存時區的相關資訊。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 參數為 null。</exception>
      <exception cref="T:System.TimeZoneNotFoundException">找不到 <paramref name="id" /> 指定的時區識別項。這表示沒有名稱與 <paramref name="id" /> 相符的登錄機碼，或者該機碼雖然存在，但不含任何時區資料。</exception>
      <exception cref="T:System.Security.SecurityException">處理序沒有權限讀取包含時區資訊的登錄機碼。</exception>
      <exception cref="T:System.InvalidTimeZoneException">找到時區識別項，但登錄資料已損毀。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>傳回不明確的日期和時間可能對應的日期和時間相關資訊。</summary>
      <returns>物件的陣列，表示特定日期和時間可對應的可能 Coordinated Universal Time (UTC) 位移。</returns>
      <param name="dateTime">日期和時間。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 不是模稜兩可的時間。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>傳回不明確的日期和時間可能對應的日期和時間相關資訊。</summary>
      <returns>物件的陣列，表示特定日期和時間可對應的可能 Coordinated Universal Time (UTC) 位移。</returns>
      <param name="dateTimeOffset">日期和時間。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 不是模稜兩可的時間。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>做為雜湊函式，用於雜湊演算法和資料結構，例如雜湊資料表。</summary>
      <returns>32 位元帶正負號的整數，表示這個 <see cref="T:System.TimeZoneInfo" /> 物件的雜湊程式碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetSystemTimeZones">
      <summary>傳回本機系統上有其資訊之所有時區的排序集合。</summary>
      <returns>
        <see cref="T:System.TimeZoneInfo" /> 物件的唯讀集合。</returns>
      <exception cref="T:System.OutOfMemoryException">記憶體不足，無法儲存所有時區資訊。</exception>
      <exception cref="T:System.Security.SecurityException">使用者沒有讀取包含時區資訊之登錄機碼所需的權限。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>計算這個時區與 Coordinated Universal Time (UTC) 在特定日期和時間的位移和差異。</summary>
      <returns>物件，表示兩個時區間的時差。</returns>
      <param name="dateTime">判斷其位移的日期和時間。</param>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>計算這個時區與 Coordinated Universal Time (UTC) 在特定日期和時間的位移和差異。</summary>
      <returns>物件，表示 Coordinated Universal Time (UTC) 與目前時區的時差。</returns>
      <param name="dateTimeOffset">判斷其位移的日期和時間。</param>
    </member>
    <member name="P:System.TimeZoneInfo.Id">
      <summary>取得時區識別項。</summary>
      <returns>時區識別項。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>判斷特定時區中的特定日期和時間是否模稜兩可，以及是否可對應到兩個或多個 Coordinated Universal Time (UTC) 時間。</summary>
      <returns>如果 <paramref name="dateTime" /> 參數模稜兩可則為 true，否則為 false。</returns>
      <param name="dateTime">日期和時間值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />，且 <paramref name="dateTime" /> 是無效的時間。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>判斷特定時區中的特定日期和時間是否模稜兩可，以及是否可對應到兩個或多個 Coordinated Universal Time (UTC) 時間。</summary>
      <returns>如果目前時區中的 <paramref name="dateTimeOffset" /> 參數模稜兩可則為 true，否則為 false。</returns>
      <param name="dateTimeOffset">日期和時間。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>指出所指定日期和時間是否在目前 <see cref="T:System.TimeZoneInfo" /> 物件之時區的日光節約時間範圍內。</summary>
      <returns>如果 <paramref name="dateTime" /> 參數為日光節約時間則為 true，否則為 false。</returns>
      <param name="dateTime">日期和時間值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />，且 <paramref name="dateTime" /> 是無效的時間。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>指出所指定日期和時間是否在目前 <see cref="T:System.TimeZoneInfo" /> 物件之時區的日光節約時間範圍內。</summary>
      <returns>如果 <paramref name="dateTimeOffset" /> 參數為日光節約時間則為 true，否則為 false。</returns>
      <param name="dateTimeOffset">日期和時間值。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>指出特定日期和時間是否無效。</summary>
      <returns>如果 <paramref name="dateTime" /> 無效則為 true，否則為 false。</returns>
      <param name="dateTime">日期和時間值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>取得表示本地時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
      <returns>表示本地時區的物件。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>取得時區標準時間的顯示名稱。</summary>
      <returns>時區的標準時間之名稱。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>取得值，這個值表示時區是否具有任何日光節約時間規則。</summary>
      <returns>如果時區支援日光節約時間則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>傳回目前 <see cref="T:System.TimeZoneInfo" /> 物件的顯示名稱。</summary>
      <returns>目前 <see cref="T:System.TimeZoneInfo" /> 物件的 <see cref="P:System.TimeZoneInfo.DisplayName" /> 屬性值。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>取得表示 Coordinated Universal Time (UTC) 時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
      <returns>表示 Coordinated Universal Time (UTC) 時區的物件。</returns>
    </member>
    <member name="T:System.Tuple">
      <summary>提供用於建立 Tuple 物件的靜態方法。若要瀏覽這種類型的 .NET Framework 原始程式碼，請參閱參考原始程式碼。</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
      <summary>建立新的 1-Tuple 或單一 (Singleton) 物件。</summary>
      <returns>值為 (<paramref name="item1" />) 的 Tuple。</returns>
      <param name="item1">Tuple 之唯一元件的值。</param>
      <typeparam name="T1">Tuple 之唯一元件的類型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
      <summary>建立新的 2-Tuple 或雙重 (Pair) 物件。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />) 的 2-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的類型。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的類型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
      <summary>建立新的 3-Tuple 或三重 (Triple) 物件。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />) 的 3-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的類型。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的類型。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的類型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
      <summary>建立新的 4-Tuple 或四重 (Quadruple) 物件。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />) 的 4-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的類型。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的類型。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的類型。</typeparam>
      <typeparam name="T4">Tuple 中第 4 個元件的類型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>建立新的 5-Tuple 或五重 (Quintuple) 物件。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />) 的 5-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的類型。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的類型。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的類型。</typeparam>
      <typeparam name="T4">Tuple 中第 4 個元件的類型。</typeparam>
      <typeparam name="T5">Tuple 中第 5 個元件的類型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>建立新的 6-Tuple 或六重 (Sextuple) 物件。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />、<paramref name="item6" />) 的 6-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的類型。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的類型。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的類型。</typeparam>
      <typeparam name="T4">Tuple 中第 4 個元件的類型。</typeparam>
      <typeparam name="T5">Tuple 中第 5 個元件的類型。</typeparam>
      <typeparam name="T6">Tuple 中第 6 個元件的類型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>建立新的 7-Tuple 或七重 (Septuple) 物件。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />、<paramref name="item6" />、<paramref name="item7" />) 的 7-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 之第七個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的類型。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的類型。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的類型。</typeparam>
      <typeparam name="T4">Tuple 中第 4 個元件的類型。</typeparam>
      <typeparam name="T5">Tuple 中第 5 個元件的類型。</typeparam>
      <typeparam name="T6">Tuple 中第 6 個元件的類型。</typeparam>
      <typeparam name="T7">Tuple 之第七個元件的類型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>建立新的 8-tuple 或八重 (Octuple) 物件。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />、<paramref name="item6" />、<paramref name="item7" />、<paramref name="item8" />) 的 8-Tuple (octuple)。 </returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 之第七個元件的值。</param>
      <param name="item8">Tuple 之第 8 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的類型。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的類型。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的類型。</typeparam>
      <typeparam name="T4">Tuple 中第 4 個元件的類型。</typeparam>
      <typeparam name="T5">Tuple 中第 5 個元件的類型。</typeparam>
      <typeparam name="T6">Tuple 中第 6 個元件的類型。</typeparam>
      <typeparam name="T7">Tuple 之第七個元件的類型。</typeparam>
      <typeparam name="T8">Tuple 之第 8 個元件的類型。</typeparam>
    </member>
    <member name="T:System.Tuple`1">
      <summary>表示 1-Tuple 或單一 (Singleton) 物件。</summary>
      <typeparam name="T1">Tuple 之唯一元件的型別。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.Tuple`1" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 之唯一元件的值。</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`1" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`1" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
      <summary>取得 <see cref="T:System.Tuple`1" /> 物件之單一元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`1" /> 物件之單一元件的值。</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`1" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="other" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`1" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`1" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`1" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`1" /> 物件之雜湊碼的物件。</param>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`1" /> 物件與指定的物件進行比較，並且傳回一個整數，指出目前物件在排序順序中，究竟在指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="obj" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`1" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`1.ToString">
      <summary>傳回表示這個 <see cref="T:System.Tuple`1" /> 執行個體之值的字串。</summary>
      <returns>這個 <see cref="T:System.Tuple`1" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`2">
      <summary>表示 2-Tuple 或雙重 (Pair) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
      <summary>初始化 <see cref="T:System.Tuple`2" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`2" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`2" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`2" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`2" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`2" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`2" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`2" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="other" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`2" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`2" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`2" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`2" /> 物件之雜湊碼的物件。</param>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`2" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前物件在排序順序中位於指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="obj" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`2" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`2.ToString">
      <summary>傳回表示這個 <see cref="T:System.Tuple`2" /> 執行個體之值的字串。</summary>
      <returns>這個 <see cref="T:System.Tuple`2" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`3">
      <summary>表示 3-Tuple 或三重 (Triple) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
      <summary>初始化 <see cref="T:System.Tuple`3" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`3" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`3" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`3" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`3" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`3" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`3" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`3" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`3" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`3" /> 物件和指定的物件進行比較，並且傳回整數，這個整數表示目前的物件在排序次序中位於指定之物件的前面、後面還是相的位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="other" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`3" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`3" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`3" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`3" /> 物件之雜湊碼的物件。</param>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`3" /> 物件和指定的物件進行比較，並且傳回整數，這個整數表示目前物件在排序次序中位於指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="obj" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`3" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`3.ToString">
      <summary>傳回表示這個 <see cref="T:System.Tuple`3" /> 執行個體之值的字串。</summary>
      <returns>這個 <see cref="T:System.Tuple`3" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`4">
      <summary>表示 4-Tuple 或四重 (Quadruple) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
      <summary>初始化 <see cref="T:System.Tuple`4" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`4" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`4" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第四個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第四個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`4" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="other" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`4" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`4" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`4" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`4" /> 物件之雜湊碼的物件。</param>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`4" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前物件在排序順序中位於指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="obj" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`4" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`4.ToString">
      <summary>傳回表示這個 <see cref="T:System.Tuple`4" /> 執行個體之值的字串。</summary>
      <returns>這個 <see cref="T:System.Tuple`4" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`5">
      <summary>表示 5-Tuple 或五重 (Quintuple) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>初始化 <see cref="T:System.Tuple`5" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`5" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`5" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第四個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第四個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第五個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第五個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`5" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="other" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`5" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`5" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`5" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`5" /> 物件之雜湊碼的物件。</param>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`5" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前物件在排序順序中位於指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="obj" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`5" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`5.ToString">
      <summary>傳回表示這個 <see cref="T:System.Tuple`5" /> 執行個體之值的字串。</summary>
      <returns>這個 <see cref="T:System.Tuple`5" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`6">
      <summary>表示 6-Tuple 或六重 (Sextuple) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>初始化 <see cref="T:System.Tuple`6" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`6" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`6" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第四個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第四個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第五個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第五個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第六個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第六個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`6" /> 物件和指定的物件進行比較，並且傳回整數，表示目前的物件在排序次序中位於指定之物件的前面、後面還是相同的位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="other" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`6" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`6" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`6" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`6" /> 物件之雜湊碼的物件。</param>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`6" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前物件在排序順序中位於指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="obj" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`6" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`6.ToString">
      <summary>傳回表示這個 <see cref="T:System.Tuple`6" /> 執行個體之值的字串。</summary>
      <returns>這個 <see cref="T:System.Tuple`6" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`7">
      <summary>表示 7-Tuple 或七重 (Septuple) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
      <typeparam name="T7">Tuple 第 7 個元件的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>初始化 <see cref="T:System.Tuple`7" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 第 7 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`7" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`7" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第四個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第四個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第五個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第五個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第六個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第六個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第七個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第七個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`7" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="other" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`7" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`7" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`7" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <param name="comparer">物件，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`7" /> 物件的雜湊碼。</param>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`7" /> 物件和指定的物件進行比較，並且傳回整數，這個整數表示目前物件在排序次序中位於指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="obj" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`7" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`7.ToString">
      <summary>傳回表示這個 <see cref="T:System.Tuple`7" /> 執行個體之值的字串。</summary>
      <returns>這個 <see cref="T:System.Tuple`7" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`8">
      <summary>表示 n-Tuple，其中 n 等於或大於 8。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
      <typeparam name="T7">Tuple 第 7 個元件的型別。</typeparam>
      <typeparam name="TRest">定義 Tuple 其餘元件的類型的任何泛型 Tuple 物件。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>初始化 <see cref="T:System.Tuple`8" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 第 7 個元件的值。</param>
      <param name="rest">包含 Tuple 其餘元件之值的任何泛型 Tuple 物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> 不是泛型 Tuple 物件。</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`8" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
      <summary>計算目前 <see cref="T:System.Tuple`8" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第四個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第四個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第五個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第五個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第六個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第六個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第七個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第七個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件的其餘元件。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件的其餘元件。</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`8" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="other" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`8" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`8" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於所指定的物件，則為 true，否則為 false。</returns>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`8" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`8" /> 物件之雜湊碼的物件。</param>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`8" /> 物件和指定的物件進行比較，並且傳回整數，這個整數表示目前物件在排序次序中位於指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值描述負整數這個執行個體位於 <paramref name="obj" /> 之前。Zero這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`8" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`8.ToString">
      <summary>傳回表示這個 <see cref="T:System.Tuple`8" /> 執行個體之值的字串。</summary>
      <returns>這個 <see cref="T:System.Tuple`8" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Type">
      <summary>代表類型宣告：類別類型、介面類型、陣列類型、值類型、列舉類型、類型參數、泛型類型定義，以及開放式或封閉式的建構泛型類型。若要瀏覽此類型的 .NET Framework 原始程式碼，請參閱參考來源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>取得類型的組件限定名稱，包含載入 <see cref="T:System.Type" /> 的組件名稱。</summary>
      <returns>
        <see cref="T:System.Type" /> 的組件限定名稱，包含載入 <see cref="T:System.Type" /> 的組件名稱，如果目前的執行個體表示泛型類型參數，則為 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>取得宣告目前巢狀類型或泛型類型參數的類型。</summary>
      <returns>若目前的類型是巢狀類型，即為表示封入類型的 <see cref="T:System.Type" /> 物件，若目前的類型是泛型類型的類型參數，則為泛型類型定義，而若目前的類型是泛型方法的類型參數，則為宣告泛型方法的類型，若以上皆否，便為 null。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>表示 <see cref="T:System.Type" /> 類型的空陣列。此欄位為唯讀。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>判斷目前 <see cref="T:System.Type" /> 的基礎系統類型，是否與指定的 <see cref="T:System.Object" /> 之基礎系統類型相同。</summary>
      <returns>如果 true 的基礎系統類型與目前 <paramref name="o" /> 的基礎系統類型相同，則為 <see cref="T:System.Type" />否則為 false。如果 false 參數所指定的物件不是 <paramref name="o" />，這個方法也會傳回 Type。</returns>
      <param name="o">其基礎系統類型將與目前 <see cref="T:System.Type" /> 的基礎系統類型比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>判斷目前 <see cref="T:System.Type" /> 的基礎系統類型，是否與指定的 <see cref="T:System.Type" /> 之基礎系統類型相同。</summary>
      <returns>如果 true 的基礎系統類型與目前 <paramref name="o" /> 的基礎系統類型相同，則為 <see cref="T:System.Type" />否則為 false。</returns>
      <param name="o">其基礎系統類型將與目前 <see cref="T:System.Type" /> 的基礎系統類型比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.FullName">
      <summary>取得類型的完整名稱 (包括其命名空間，但不包括其組件)。</summary>
      <returns>類型的完整名稱 (包括其命名空間，但不包括其組件)；如果目前執行個體代表泛型類型參數、陣列類型、指標類型、根據類型參數的 null 類型，或不是泛型類型定義但包含未解析類型參數的泛型類型，則為 byref。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>當 <see cref="T:System.Type" /> 物件表示泛型類型或泛型方法的類型參數時，在宣告參數的泛型類型或泛型方法之類型參數清單中，取得類型參數的位置。</summary>
      <returns>類型參數在宣告參數的泛型類型或方法之類型參數清單中的位置。位置編號從 0 開始。</returns>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a type parameter.That is, <see cref="P:System.Type.IsGenericParameter" /> returns false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.GenericTypeArguments">
      <summary>取得此類型之泛型類型引數的陣列。</summary>
      <returns>這個類型之泛型類型引數的陣列。</returns>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>取得陣列中的維度數目。</summary>
      <returns>包含目前類型中之維度數目的整數。</returns>
      <exception cref="T:System.NotSupportedException">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead. </exception>
      <exception cref="T:System.ArgumentException">The current type is not an array. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>在衍生類別中覆寫時，傳回由目前陣列、指標或參考類型所包含或參考物件的 <see cref="T:System.Type" />。</summary>
      <returns>目前的陣列、指標或參考類型所內含或參考之物件的 <see cref="T:System.Type" />，如果目前的 null 不是陣列或指標、未以傳址方式傳遞，或表示泛型類型或泛型類型或泛型方法定義中之類型參數，則為 <see cref="T:System.Type" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>傳回代表泛型類型定義的 <see cref="T:System.Type" /> 物件，利用此泛型類型定義就可以建構出目前的泛型類型。</summary>
      <returns>代表泛型類型的 <see cref="T:System.Type" /> 物件，利用此泛型類型就可以建構出目前的類型。</returns>
      <exception cref="T:System.InvalidOperationException">The current type is not a generic type.That is, <see cref="P:System.Type.IsGenericType" /> returns false.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.Derived classes must provide an implementation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>取得具有指定名稱的 <see cref="T:System.Type" />，執行區分大小寫的搜尋。</summary>
      <returns>具有指定名稱的類型 (如有找到)，否則為 null。</returns>
      <param name="typeName">要取得之類型的組件限定名稱。請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。如果此類型位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的類型名稱便已足夠。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>取得具有指定名稱的 <see cref="T:System.Type" />，執行區分大小寫的搜尋，並設定找不到該類型時，是否應擲回例外狀況。</summary>
      <returns>具有指定名稱的類型。如果找不到該類型，<paramref name="throwOnError" /> 參數會指定是要傳回 null 或是擲回例外狀況。在某些情況下，不論 <paramref name="throwOnError" /> 的值為何，都會擲回例外狀況。請參閱＜例外狀況＞一節。</returns>
      <param name="typeName">要取得之類型的組件限定名稱。請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。如果此類型位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的類型名稱便已足夠。</param>
      <param name="throwOnError">true 表示找不到該類型時擲回例外狀況，而 false 則表示傳回 null。指定 false 也會隱藏其他某些例外狀況條件，但並不是全部。請參閱＜例外狀況＞一節。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. -or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> is an empty string.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> represents an array type with an invalid size. -or-<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid syntax.For example, "MyType[,*,]".-or- <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is true and the assembly or one of its dependencies was not found. </exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>取得具有指定名稱的 <see cref="T:System.Type" />，指定找不到類型時是否要擲回例外狀況，以及是否要執行區分大小寫的搜尋。</summary>
      <returns>具有指定名稱的類型。如果找不到該類型，<paramref name="throwOnError" /> 參數會指定是要傳回 null 或是擲回例外狀況。在某些情況下，不論 <paramref name="throwOnError" /> 的值為何，都會擲回例外狀況。請參閱＜例外狀況＞一節。</returns>
      <param name="typeName">要取得之類型的組件限定名稱。請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。如果此類型位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的類型名稱便已足夠。</param>
      <param name="throwOnError">true 表示找不到該類型時擲回例外狀況，而 false 則表示傳回 null。指定 false 還會隱藏一些其他例外情況，但不是全部。請參閱＜例外狀況＞一節。</param>
      <param name="ignoreCase">為 true 執行不區分大小寫的搜尋，則為 <paramref name="typeName" />；為 false 執行區分大小寫的搜尋，則為 <paramref name="typeName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. -or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> is an empty string.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> represents an array type with an invalid size. -or-<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid syntax.For example, "MyType[,*,]".-or- <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is true and the assembly or one of its dependencies was not found. </exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>取得指定的類型控制代碼所參考的類型。</summary>
      <returns>由指定 <see cref="T:System.RuntimeTypeHandle" /> 參考的類型，如果 null 的 <see cref="P:System.RuntimeTypeHandle.Value" /> 屬性為 <paramref name="handle" /> 則為 null。</returns>
      <param name="handle">參考類型的物件。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>取得值，指出目前 <see cref="T:System.Type" /> 是否內含或參考其他類型；也就是說，目前 <see cref="T:System.Type" /> 是否為陣列、指標或以傳址方式傳遞。</summary>
      <returns>如果 true 是陣列、指標或以傳址方式傳遞，則為 <see cref="T:System.Type" />，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>取得值，以表示類型是否為陣列。</summary>
      <returns>如果目前的類型是陣列則為 true，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否以傳址方式傳遞。</summary>
      <returns>如果 true 是以傳址方式傳遞，則為 <see cref="T:System.Type" />，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsConstructedGenericType">
      <summary>取得值，指出這個物件是否表示建構的泛型類型。您可以建立已建構之泛型類型的執行個體。</summary>
      <returns>如果這個物件代表建構的泛型類型，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsGenericParameter">
      <summary>取得值，指出目前的 <see cref="T:System.Type" /> 是否表示泛型類型或泛型方法定義中的類型參數。</summary>
      <returns>如果 true 物件表示泛型類型或泛型方法定義中的類型參數，則為 <see cref="T:System.Type" />，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNested">
      <summary>取得值，表示目前的 <see cref="T:System.Type" /> 物件代表的類型之定義是否位於另一個類型的定義內部。</summary>
      <returns>如果 true 巢狀於另一個類型中，則為 <see cref="T:System.Type" />，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為指標。</summary>
      <returns>如果 true 是指標，則為 <see cref="T:System.Type" />，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.Derived classes must provide an implementation.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成且為指定維度個數的陣列。</summary>
      <returns>物件，代表由目前類型組成且為指定維度個數的陣列。</returns>
      <param name="rank">陣列的維度數目。這個數字必須小於或等於 32。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is invalid.For example, 0 or negative.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.-or-<paramref name="rank" /> is greater than 32.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，當做 ref (Visual Basic 中的 ByRef) 參數傳遞時，代表目前的類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，當做 ref 參數 (在 Visual Basic 中為 ByRef 參數) 傳遞時，代表目前的類型。</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>用類型陣列的項目取代目前泛型類型定義的類型參數，並傳回代表所得結果建構類型的 <see cref="T:System.Type" /> 物件。</summary>
      <returns>
        <see cref="T:System.Type" />，表示用 <paramref name="typeArguments" /> 的項目取代目前泛型類型之類型參數所得到的建構類型。</returns>
      <param name="typeArguments">由類型組成的陣列，用來取代目前泛型類型的類型參數。</param>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a generic type definition.That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns false.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is null.-or- Any element of <paramref name="typeArguments" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.-or- Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. -or- <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns true), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns true), or <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表指向目前類型的指標。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表指向目前類型的指標。</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Type.Missing">
      <summary>表示在 <see cref="T:System.Type" /> 資訊中的遺漏值。此欄位為唯讀。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.Name"></member>
    <member name="P:System.Type.Namespace">
      <summary>取得 <see cref="T:System.Type" /> 的命名空間。</summary>
      <returns>
        <see cref="T:System.Type" /> 的命名空間；如果目前執行個體沒有命名空間或代表泛型參數，則為 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.ToString">
      <summary>傳回表示目前 String 的名稱的 Type。</summary>
      <returns>表示目前 <see cref="T:System.String" /> 的名稱的 <see cref="T:System.Type" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>取得目前 <see cref="T:System.Type" /> 的控制代碼。</summary>
      <returns>目前 <see cref="T:System.Type" /> 的控制代碼。</returns>
      <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this property.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.TypeAccessException">
      <summary>當方法嘗試使用其無權存取的類型時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.TypeAccessException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.TypeAccessException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.TypeAccessException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性當地語系化。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.TypeCode">
      <summary>指定物件的型別。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>表示 true 或 false 的布林值的簡單型別。</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>表示不帶正負號的 8 位元整數的整數型別，其值介於 0 和 255 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>表示不帶正負號的 16 位元整數的整數型別，其值介於 0 和 65535 之間。<see cref="F:System.TypeCode.Char" /> 型別的可能值集合對應於 Unicode 字元集。</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>表示日期和時間值的型別。</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>簡單型別，表示具有 28-29 個有效位數、從 1.0 x 10 -28 到大約 7.9 x 10 -28 的數值範圍。</summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>浮點型別，表示具有 15-16 位數精確度、從 5.0 x 10 -324 到大約 1.7 x 10 308 的數值範圍。</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>null 參考。</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>表示帶正負號的 16 位元整數的整數型別，其值介於 -32768 和 32767 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>表示帶正負號的 32 位元整數的整數型別，其值介於 -2147483648 和 2147483647 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>表示帶正負號的 64 位元整數的整數型別，其值介於 -9223372036854775808 和 9223372036854775807 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>一般型別，表示未由另一個 TypeCode 明確表示的任何參考或實值型別 (Value Type)。</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>表示帶正負號的 8 位元整數的整數型別，其值介於 -128 和 127 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>浮點型別，表示具有 7 位數精確度、從 1.5 x 10 -45 到大約 3.4 x 10 38 的數值範圍。</summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>表示 Unicode 字元字串的密封類別型別。</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>表示不帶正負號的 16 位元整數的整數型別，其值介於 0 和 65535 之間。</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>表示不帶正負號的 32 位元整數的整數型別，其值介於 0 和 4294967295 之間。</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>表示不帶正負號的 64 位元整數的整數型別，其值介於 0 和 18446744073709551615 之間。</summary>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>因為當做類別初始設定式 (Class Initializer) 所擲回例外狀況的包裝函式，所擲回的例外狀況。此類別無法被繼承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>使用預設的錯誤訊息、特定的型別名稱和造成這個例外狀況根本原因的內部例外的參考，初始化 <see cref="T:System.TypeInitializationException" /> 類別的新執行個體。</summary>
      <param name="fullTypeName">初始化失敗之型別的完整名稱。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>取得初始化失敗之型別的完整名稱。</summary>
      <returns>初始化失敗之型別的完整名稱。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>當發生型別載入錯誤時，所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>初始化 <see cref="T:System.TypeLoadException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.TypeLoadException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.TypeLoadException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>取得這個例外狀況的錯誤訊息。</summary>
      <returns>錯誤訊息字串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>取得造成例外狀況之型別的完整名稱。</summary>
      <returns>完整型別名稱。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.UInt16">
      <summary>表示 16 位元不帶正負號的整數 (Unsigned Integer)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>將這個執行個體與指定的 16 位元不帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比較的不帶正負號整數。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.UInt16" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.UInt16" /> 值。</summary>
      <returns>如果 true 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 false。</returns>
      <param name="obj">和這個執行個體比較之 16 位元不帶正負號的整數。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>代表 <see cref="T:System.UInt16" /> 最大的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>代表 <see cref="T:System.UInt16" /> 最小的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成其對等 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">指定 <paramref name="s" /> 可以使用的格式之列舉值的位元組合。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成其對等 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>將指定之特定文化特性格式數字的字串表示轉換成它的對等 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt16" /> object. </exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零，則為 true，否則為 false。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的值，已轉換成 <see cref="T:System.Int32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，已轉換成 <see cref="T:System.Single" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，已轉換成 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.UInt16" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，由 0 到 9 的數字順序所組成，沒有正負號或為零的前置字元。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，由 0 到 9 的數字順序所組成，沒有正負號或為零的前置字元。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>使用指定的格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>嘗試將指定之樣式及特定文化特性格式資訊數字的字串表示，轉換為它的 16 位元不帶正負號的整數對應項。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 16 位元不帶正負號整數，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。這個參數未初始化便傳遞；<paramref name="result" /> 原始提供的任何值都將遭到覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>嘗試將數字的字串表示轉換為 16 位元不帶正負號的整數。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 16 位元不帶正負號整數，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />，或者不是正確的格式，則轉換會失敗。，或代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。這個參數未初始化便傳遞；<paramref name="result" /> 原始提供的任何值都將遭到覆寫。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UInt32">
      <summary>表示 32 位元不帶正負號的整數 (Unsigned Integer)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>將這個執行個體與指定的 32 位元不帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。Return value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比較的不帶正負號整數。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.UInt32" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.UInt32" />。</summary>
      <returns>如果 true 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 false。</returns>
      <param name="obj">要和這個執行個體比較的值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>代表 <see cref="T:System.UInt32" /> 最大的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>代表 <see cref="T:System.UInt32" /> 最小的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成其對等 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">指定 <paramref name="s" /> 可以使用的格式之列舉值的位元組合。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成其對等 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>將指定之特定文化特性格式數字的字串表示轉換成它的對等 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct style. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt32" /> object. </exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零，則為 true，否則為 false。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.UInt32" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關特定文化特性資訊。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，由範圍從 0 到 9，沒有正負號或為零的前置字元的數字順序所組成。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，由 0 到 9 的數字順序所組成，沒有正負號或為零的前置字元。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>使用指定的格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供關於這個執行個體的特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>嘗試將指定之樣式及特定文化特性格式資訊數字的字串表示，轉換為它的 32 位元不帶正負號的整數對應項。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 32 位元不帶正負號整數，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、格式和 <paramref name="style" /> 不相容，或是代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字，則轉換會失敗。這個參數未初始化便已傳遞；<paramref name="result" /> 中原本提供的任何值都將會被覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>嘗試將數字的字串表示轉換為 32 位元不帶正負號的整數。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 32 位元不帶正負號整數，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、不是正確的格式，或是代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字，則轉換會失敗。這個參數未初始化便已傳遞；<paramref name="result" /> 中原本提供的任何值都將會被覆寫。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UInt64">
      <summary>表示 64 位元不帶正負號的整數 (Unsigned Integer)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>將這個執行個體與指定的 64 位元不帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比較的不帶正負號整數。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.UInt64" />，否則為 false。</returns>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.UInt64" /> 值。</summary>
      <returns>如果 true 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.UInt64" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>代表 <see cref="T:System.UInt64" /> 最大的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>代表 <see cref="T:System.UInt64" /> 最小的可能值。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成其對等 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">指定 <paramref name="s" /> 可以使用的格式之列舉值的位元組合。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成其對等 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>將指定之特定文化特性格式數字的字串表示轉換成它的對等 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct style. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt64" /> object. </exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零，則為 true，否則為 false。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援這個轉換。沒有傳回值。</returns>
      <param name="provider">這個參數已忽略。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.UInt64" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">這個參數已忽略。</param>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，由範圍從 0 到 9，沒有正負號或為零的前置字元的數字順序所組成。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，由沒有正負號或前置字元為零以及範圍從 0 到 9 的數字順序所組成。 </returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>使用指定的格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供關於這個執行個體的特定文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>嘗試將指定之樣式及特定文化特性格式資訊數字的字串表示，轉換為它的 64 位元不帶正負號的整數對應項。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 64 位元不帶正負號整數，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。這個參數未初始化便傳遞；<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>嘗試將數字的字串表示轉換為 64 位元不帶正負號的整數。傳回值會指出轉換成功或失敗。</summary>
      <returns>如果 true 轉換成功，則為 <paramref name="s" />，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 64 位元不帶正負號整數，如果轉換失敗則為零。轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 null 或 <see cref="F:System.String.Empty" />、不是正確格式，或是表示小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。這個參數未初始化便傳遞；<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UIntPtr">
      <summary>特定平台專用的型別，用來代表指標或控制代碼。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>使用指定的 32 位元指標或控制代碼來初始化 <see cref="T:System.UIntPtr" /> 結構的新執行個體。</summary>
      <param name="value">包含在 32 位元不帶正負號整數中的指標或控制代碼。</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>使用指定的 64 位元指標或控制代碼來初始化 <see cref="T:System.UIntPtr" /> 的新執行個體。</summary>
      <param name="value">包含在 64 位元不帶正負號整數中的指標或控制代碼。</param>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大，以致於無法代表 <see cref="T:System.UIntPtr" />。</exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>使用未指定型別的指定指標來初始化 <see cref="T:System.UIntPtr" /> 的新執行個體。</summary>
      <param name="value">未指定型別的指標。</param>
    </member>
    <member name="M:System.UIntPtr.Add(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值加上位移。</summary>
      <returns>新的不帶正負號指標，反映將 <paramref name="pointer" /> 加上 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要加上位移的不帶正負號指標。</param>
      <param name="offset">要加入的位移。</param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.UIntPtr" /> 的執行個體，並且等於這個執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與這個執行個體或 null 相互比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值加上位移。</summary>
      <returns>新的不帶正負號指標，反映將 <paramref name="pointer" /> 加上 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要加上位移的不帶正負號指標。</param>
      <param name="offset">要加入的位移。</param>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>判斷 <see cref="T:System.UIntPtr" /> 的兩個指定之執行個體是否相等。</summary>
      <returns>如果 <paramref name="value1" /> 等於 <paramref name="value2" /> 則為 true，否則為 false。</returns>
      <param name="value1">要比較的第一個指標或控點。</param>
      <param name="value2">要比較的第二個指標或控點。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>將 32 位元不帶正負號整數的值轉換為 <see cref="T:System.UIntPtr" />。</summary>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 的新執行個體。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>將 64 位元不帶正負號整數的值轉換為 <see cref="T:System.UIntPtr" />。</summary>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 的新執行個體。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大，以致於無法代表 <see cref="T:System.UIntPtr" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>將指定的 <see cref="T:System.UIntPtr" /> 值轉換為 64 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">要轉換的指標或控點。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>將指定的 <see cref="T:System.UIntPtr" /> 值轉換為未指定型別的指標。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">要轉換的指標或控點。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>將指定的 <see cref="T:System.UIntPtr" /> 值轉換為 32 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">要轉換的指標或控點。</param>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，<paramref name="value" /> 的值太大，以致於無法代表 32 位元不帶正負號的整數。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>將未指定型別的指定指標轉換為 <see cref="T:System.UIntPtr" />。</summary>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 的新執行個體。</returns>
      <param name="value">未指定型別的指標。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>判斷 <see cref="T:System.UIntPtr" /> 的兩個指定之執行個體是否不相等。</summary>
      <returns>如果 <paramref name="value1" /> 不等於 <paramref name="value2" />，則為 true，否則為 false。</returns>
      <param name="value1">要比較的第一個指標或控點。</param>
      <param name="value2">要比較的第二個指標或控點。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值減去位移。</summary>
      <returns>新的不帶正負號指標，反映將 <paramref name="pointer" /> 減去 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要減去位移的不帶正負號指標。</param>
      <param name="offset">要減去的位移。</param>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>取得這個執行個體的大小。</summary>
      <returns>這個平台上的指標或控制代碼的大小，以位元組為單位。這個屬性的值在 32 位元平台上為 4，而在 64 位元平台上為 8。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值減去位移。</summary>
      <returns>新的不帶正負號指標，反映將 <paramref name="pointer" /> 減去 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要減去位移的不帶正負號指標。</param>
      <param name="offset">要減去的位移。</param>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>將這個執行個體的值轉換為未指定型別的指標。</summary>
      <returns>
        <see cref="T:System.Void" /> 的指標，也就是含有未指定型別資料的記憶體指標。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>將這個執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>將這個執行個體的值轉換為 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於這個執行個體的值。</returns>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，這個執行個體的值太大，以致於無法表示為 32 位元不帶正負號的整數。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>將這個執行個體的值轉換為 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於這個執行個體的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>表示已經初始化為零的指標或控制代碼的唯讀欄位。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>當作業系統因為 I/O 錯誤或特定類型的安全性錯誤而拒絕存取時，所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>初始化 <see cref="T:System.UnauthorizedAccessException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.UnauthorizedAccessException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.UnauthorizedAccessException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Uri">
      <summary>提供統一資源識別元 (URI) 的物件表示，以及對 URI 各部分的簡易存取。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>使用指定的 URI，初始化 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="uriString">URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 為 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。<paramref name="uriString" /> 是空的。-或- <paramref name="uriString" /> 中指定的配置語式不正確。请参阅 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。-或- <paramref name="uriString" /> 含有太多斜線。-或- <paramref name="uriString" /> 中指定的密碼無效。-或- <paramref name="uriString" /> 中指定的主機名稱無效。-或- <paramref name="uriString" /> 中指定的檔案名稱無效。-或- <paramref name="uriString" /> 中指定的使用者名稱無效。-或- <paramref name="uriString" /> 中指定的主機或授權名稱不得以反斜線結尾。-或- <paramref name="uriString" /> 中指定的連接埠編號無效或無法剖析。-或- 长度 <paramref name="uriString" /> 超过 65519 个字符。-或- <paramref name="uriString" /> 中指定的配置長度超過 1023 個字元。-或- <paramref name="uriString" /> 中的字元序列無效。-或- <paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>使用指定的 URI，初始化 <see cref="T:System.Uri" /> 類別的新執行個體。這個建構函式可讓您指定 URI 字串是相對 URI、絕對 URI 或是不定。</summary>
      <param name="uriString">字串，指定要由 <see cref="T:System.Uri" /> 執行個體代表的資源。</param>
      <param name="uriKind">指定 URI 字串是相對 URI、絕對 URI 或是不定。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 為 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。<paramref name="uriString" /> 包含相對 URI，並且 <paramref name="uriKind" /> 是 <see cref="F:System.UriKind.Absolute" />。或<paramref name="uriString" /> 包含絕對 URI，並且 <paramref name="uriKind" /> 是 <see cref="F:System.UriKind.Relative" />。或<paramref name="uriString" /> 是空的。-或- <paramref name="uriString" /> 中指定的配置語式不正確。请参阅 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。-或- <paramref name="uriString" /> 含有太多斜線。-或- <paramref name="uriString" /> 中指定的密碼無效。-或- <paramref name="uriString" /> 中指定的主機名稱無效。-或- <paramref name="uriString" /> 中指定的檔案名稱無效。-或- <paramref name="uriString" /> 中指定的使用者名稱無效。-或- <paramref name="uriString" /> 中指定的主機或授權名稱不得以反斜線結尾。-或- <paramref name="uriString" /> 中指定的連接埠編號無效或無法剖析。-或- 长度 <paramref name="uriString" /> 超过 65519 个字符。-或- <paramref name="uriString" /> 中指定的配置長度超過 1023 個字元。-或- <paramref name="uriString" /> 中的字元序列無效。-或- <paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>根據指定的基底 URI 和相對 URI 字串，初始化 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="baseUri">基底 URI。</param>
      <param name="relativeUri">要加入基底 URI 的相對 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 是空的，或只包含空格。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的配置無效。-或- 以合併 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 的方式形成的 URI 含有太多斜線。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的密碼無效。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的主機名稱無效。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的檔案名稱無效。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的使用者名稱無效。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的主機或授權名稱不得以反斜線結尾。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的連接埠編號無效或無法剖析。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 長度超過 65519 個字元。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的配置長度超過 1023 個字元。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，字元序列無效。-或- <paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>根據指定的基底 <see cref="T:System.Uri" /> 執行個體和相對 <see cref="T:System.Uri" /> 執行個體的組合，初始化 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="baseUri">絕對 <see cref="T:System.Uri" />，是新 <see cref="T:System.Uri" /> 執行個體的基底。</param>
      <param name="relativeUri">與 <see cref="T:System.Uri" /> 結合的相對 <paramref name="baseUri" /> 執行個體。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseUri" /> 不是絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 是空的，或只包含空格。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的配置無效。-或- 以合併 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 的方式形成的 URI 含有太多斜線。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的密碼無效。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的主機名稱無效。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的檔案名稱無效。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的使用者名稱無效。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的主機或授權名稱不得以反斜線結尾。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的連接埠編號無效或無法剖析。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 長度超過 65519 個字元。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的配置長度超過 1023 個字元。-或- 結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，字元序列無效。-或- <paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>取得 URI 的絕對路徑。</summary>
      <returns>
        <see cref="T:System.String" />，包含資源的絕對路徑。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>取得絕對 URI。</summary>
      <returns>
        <see cref="T:System.String" />，包含整個 URI。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>取得伺服器的網域名稱系統 (DNS) 主機名稱或 IP 位址，以及連接埠編號。</summary>
      <returns>
        <see cref="T:System.String" />，包含這個執行個體所代表之 URI 的授權元件。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>判斷指定的主機名稱是否為有效的 DNS 名稱。</summary>
      <returns>
        <see cref="T:System.UriHostNameType" />，表示主機名稱的類型。當無法判斷主機名稱類型，或主機名稱為 null 或長度為零的字串時，這個方法會傳回 <see cref="F:System.UriHostNameType.Unknown" />。</returns>
      <param name="name">要驗證的主機名稱。這可以是 IPv4 或 IPv6 位址或網際網路主機名稱。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>判斷指定的配置名稱是否有效。</summary>
      <returns>如果配置名稱有效，則 <see cref="T:System.Boolean" /> 值為 true，否則為 false。</returns>
      <param name="schemeName">要驗證的配置名稱。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>使用指定的比較規則，比較兩個 URI 的指定部分。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，表示所比較之 <see cref="T:System.Uri" /> 元件間的語彙關聯性。值意義小於零<paramref name="uri1" /> 小於 <paramref name="uri2" />。零<paramref name="uri1" />等於 <paramref name="uri2" />。大於零<paramref name="uri1" /> 大於 <paramref name="uri2" />。</returns>
      <param name="uri1">第一個 <see cref="T:System.Uri" />。</param>
      <param name="uri2">第二個 <see cref="T:System.Uri" />。</param>
      <param name="partsToCompare">
        <see cref="T:System.UriComponents" /> 值的位元組合，指定要比較之 <paramref name="uri1" /> 和 <paramref name="uri2" /> 的部分。</param>
      <param name="compareFormat">
        <see cref="T:System.UriFormat" /> 值之一，指定比較 URI 元件時所使用的字元逸出方式。</param>
      <param name="comparisonType">其中一個 <see cref="T:System.StringComparison" /> 值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>取得可安全使用於 DNS 解析的未經逸出主機名稱。</summary>
      <returns>
        <see cref="T:System.String" />，包含適用於 DNS 解析之 URI 中，未經逸出的主機部分，或原始未經逸出的主機字串 (如可解析)。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>比較兩個 <see cref="T:System.Uri" /> 執行個體是否相等。</summary>
      <returns>如果兩個執行個體代表相同 URI，則 <see cref="T:System.Boolean" /> 值為 true，否則為 false。</returns>
      <param name="comparand">與目前之執行個體相比較的 <see cref="T:System.Uri" /> 執行個體或 URI 識別項。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>將字串轉換成它的逸出表示。</summary>
      <returns>
        <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的逸出表示。</returns>
      <param name="stringToEscape">要逸出的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 為 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。长度 <paramref name="stringToEscape" /> 超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>將 URI 字串轉換成它的逸出表示。</summary>
      <returns>
        <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的逸出表示。</returns>
      <param name="stringToEscape">要逸出的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 為 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。长度 <paramref name="stringToEscape" /> 超过 32766 个字符。</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>取得逸出的 URI 片段。</summary>
      <returns>
        <see cref="T:System.String" />，包含任何 URI 片段資訊。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>針對特殊字元使用指定的逸出方式，取得目前執行個體的指定元件。</summary>
      <returns>包含元件的 <see cref="T:System.String" />。</returns>
      <param name="components">
        <see cref="T:System.UriComponents" /> 值的位元組合，指定目前的執行個體中，要回傳給呼叫端的部分。</param>
      <param name="format">
        <see cref="T:System.UriFormat" /> 值之一，控制特殊字元的逸出方式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> 不是有效 <see cref="T:System.UriComponents" /> 值的結合。</exception>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Uri" /> 不是絕對 URI。相對 URI 不能用於這個方法。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>取得 URI 的雜湊碼。</summary>
      <returns>
        <see cref="T:System.Int32" />，包含為這個 URI 所產生的雜湊值。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Host">
      <summary>取得這個執行個體的主機元件。</summary>
      <returns>
        <see cref="T:System.String" />，包含主機名稱。這通常是伺服器的 DNS 主機名稱或 IP 位址。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>取得 URI 中所指定主機名稱的類型。</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> 列舉的成員。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IdnHost">
      <summary>主機之符合 RFC 3490 標準的國際網域名稱，並適當地使用 Punycode。</summary>
      <returns>傳回根據 IDN 標準以 Punycode 格式化的主機名稱。<see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>取得 <see cref="T:System.Uri" /> 執行個體是否為絕對。</summary>
      <returns>如果 <see cref="T:System.Boolean" /> 執行個體為絕對，則 true 值為 <see cref="T:System.Uri" />，否則為 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>判斷目前 <see cref="T:System.Uri" /> 執行個體是否為指定之 <see cref="T:System.Uri" /> 執行個體的基底。</summary>
      <returns>如果目前 true 執行個體是 <see cref="T:System.Uri" /> 的基底則為 <paramref name="uri" />，否則為 false。</returns>
      <param name="uri">指定要測試的 <see cref="T:System.Uri" /> 執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 為 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>取得 URI 的通訊埠值是否為這個配置的預設值。</summary>
      <returns>如果 <see cref="T:System.Boolean" /> 屬性的值是這個配置的預設通訊埠，則 true 值為 <see cref="P:System.Uri.Port" />，否則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>取得表示指定的 <see cref="T:System.Uri" /> 是否為檔案 URI 的值。</summary>
      <returns>如果 <see cref="T:System.Boolean" /> 是檔案 URI，則 true 值為 <see cref="T:System.Uri" />，否則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>取得指定的 <see cref="T:System.Uri" /> 是否參考本端主機。</summary>
      <returns>如果這個 <see cref="T:System.Boolean" /> 參考本端主機，則 true 值為 <see cref="T:System.Uri" />，否則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>取得指定的 <see cref="T:System.Uri" /> 是否為通用命名慣例 (Universal Naming Convention，UNC) 路徑。</summary>
      <returns>如果 <see cref="T:System.Boolean" /> 是 UNC 路徑，則 true 值為 <see cref="T:System.Uri" />，否則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>表示用以建構此 <see cref="T:System.Uri" /> 之字串的語式是否正確，而且不需要進一步逸出。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，當字串的語式正確時為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>透過嘗試建構包含此字串的 URI 來表示字串的格式是否正確，且確保該字串不需要進一步逸出。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，當字串的語式正確時為 true ，否則為 false。</returns>
      <param name="uriString">用於嘗試建構 <see cref="T:System.Uri" /> 的字串。</param>
      <param name="uriKind">
        <see cref="T:System.Uri" /> 中 <paramref name="uriString" /> 的類型。</param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>取得檔案名稱的本機作業系統表示。</summary>
      <returns>
        <see cref="T:System.String" />，包含檔案名稱在本機作業系統上的表示。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>判斷兩個 <see cref="T:System.Uri" /> 執行個體之間的差別。</summary>
      <returns>如果這個 URI 執行個體的主機名稱和配置與 <paramref name="uri" /> 相同，則這個方法會傳回相對 <see cref="T:System.Uri" />，當將這個相對值附加到目前的 URI 執行個體時，會產生 <paramref name="uri" />。如果主機名稱或配置不同，則這個方法會傳回代表 <see cref="T:System.Uri" /> 參數的 <paramref name="uri" />。</returns>
      <param name="uri">要與目前之 URI 比較的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>判斷兩個 <see cref="T:System.Uri" /> 執行個體的值是否相同。</summary>
      <returns>如果 <see cref="T:System.Boolean" /> 執行個體相等，則 true 值為 <see cref="T:System.Uri" />，否則為 false。</returns>
      <param name="uri1">要與 <see cref="T:System.Uri" /> 相比較的 <paramref name="uri2" /> 執行個體。</param>
      <param name="uri2">要與 <see cref="T:System.Uri" /> 相比較的 <paramref name="uri1" /> 執行個體。</param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>判斷兩個 <see cref="T:System.Uri" /> 執行個體的值是否不同。</summary>
      <returns>如果兩個 <see cref="T:System.Boolean" /> 執行個體不相等，則 true 值為 <see cref="T:System.Uri" />，否則為 false。如果其中一個參數是 null，則這個方法會傳回 true。</returns>
      <param name="uri1">要與 <see cref="T:System.Uri" /> 相比較的 <paramref name="uri2" /> 執行個體。</param>
      <param name="uri2">要與 <see cref="T:System.Uri" /> 相比較的 <paramref name="uri1" /> 執行個體。</param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>取得傳遞給 <see cref="T:System.Uri" /> 建構函式的原始 URI 字串。</summary>
      <returns>包含建構這個執行個體時所指定之 URI 的 <see cref="T:System.String" />，否則為 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>取得以問號 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 屬性。</summary>
      <returns>
        <see cref="T:System.String" />，包含以問號 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 屬性。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Port">
      <summary>取得這個 URI 的連接埠編號。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，包含這個 URI 的通訊埠編號。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Query">
      <summary>取得指定的 URI 所包含的任何查詢資訊。</summary>
      <returns>
        <see cref="T:System.String" />，包含指定 URI 中所包含的任何查詢資訊。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>取得這個 URI 的配置名稱。</summary>
      <returns>
        <see cref="T:System.String" />，包含這個 URI 的配置 (已轉換成小寫)。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>取得陣列，包含構成指定 URI 的路徑區段。</summary>
      <returns>
        <see cref="T:System.String" /> 陣列，包含構成指定 URI 的路徑片段。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>取得指定之 <see cref="T:System.Uri" /> 執行個體的標準字串表示。</summary>
      <returns>
        <see cref="T:System.String" /> 執行個體，包含 <see cref="T:System.Uri" /> 執行個體未逸出的標準表示。除了 #、? 和 % 以外，不逸出所有字元。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>使用指定的 <see cref="T:System.Uri" /> 執行個體和 <see cref="T:System.String" />，建立新的 <see cref="T:System.UriKind" />。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，當成功建立 true 時為 <see cref="T:System.Uri" />，否則為 false。</returns>
      <param name="uriString">
        <see cref="T:System.String" />，代表 <see cref="T:System.Uri" />。</param>
      <param name="uriKind">URI 的類型。</param>
      <param name="result">這個方法傳回時，會包含建構的 <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>使用指定的基底和相對 <see cref="T:System.Uri" /> 執行個體，建立新的 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，當成功建立 true 時為 <see cref="T:System.Uri" />，否則為 false。</returns>
      <param name="baseUri">基底 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">相對 <see cref="T:System.Uri" />，代表為要加入基底 <see cref="T:System.String" /> 的 <see cref="T:System.Uri" />。</param>
      <param name="result">當這個方法傳回時，會包含從 <see cref="T:System.Uri" /> 和 <paramref name="baseUri" /> 建構的 <paramref name="relativeUri" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>使用指定的基底和相對 <see cref="T:System.Uri" /> 執行個體，建立新的 <see cref="T:System.Uri" />。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，當成功建立 true 時為 <see cref="T:System.Uri" />，否則為 false。</returns>
      <param name="baseUri">基底 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">要加入基底 <see cref="T:System.Uri" /> 的相對 <see cref="T:System.Uri" />。</param>
      <param name="result">當這個方法傳回時，會包含從 <see cref="T:System.Uri" /> 和 <paramref name="baseUri" /> 建構的 <paramref name="relativeUri" />。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 為 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>將字串轉換成它的未逸出表示。</summary>
      <returns>
        <see cref="T:System.String" />，包含 <paramref name="stringToUnescape" /> 的未逸出表示。</returns>
      <param name="stringToUnescape">不要逸出的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> 為 null。</exception>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>表示 URI 字串在 <see cref="T:System.Uri" /> 執行個體建立之前即已完全逸出。</summary>
      <returns>如果在建立 <see cref="T:System.Boolean" /> 執行個體時，true 參數設定為 <paramref name="dontEscape" />，則 true 值為 <see cref="T:System.Uri" />，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>取得與指定 URI 關聯的使用者名稱、密碼或其他使用者特定的資訊。</summary>
      <returns>
        <see cref="T:System.String" />，包含 URI 相關聯的使用者資訊。傳回值不包含 '@' 保留字元，它是用來分隔 URI 的使用者資訊部分。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.UriComponents">
      <summary>指定 <see cref="T:System.Uri" /> 的組件。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、<see cref="P:System.Uri.Query" /> 和 <see cref="P:System.Uri.Fragment" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
        <see cref="P:System.Uri.Fragment" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
        <see cref="P:System.Uri.Host" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
        <see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 資料。如果 Uri 中沒有連接埠資料，並且已經指派預設連接埠給 <see cref="P:System.Uri.Scheme" />，則會傳回預設連接埠。如果沒有預設連接埠，則會傳回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>指定分隔符號應包含在內。</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>
        <see cref="P:System.Uri.Host" /> 的正規化格式。</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 資料。請參閱<see cref="P:System.Uri.PathAndQuery" />。</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
        <see cref="P:System.Uri.Port" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
        <see cref="P:System.Uri.Query" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
        <see cref="P:System.Uri.Scheme" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>URI 序列化程式所需要的完整 <see cref="T:System.Uri" /> 內容。內容中包含了 IPv6 範圍。</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
        <see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 資料。如果 <see cref="T:System.Uri" /> 中沒有連接埠資料，並且已經指派預設連接埠給 <see cref="P:System.Uri.Scheme" />，則會傳回預設連接埠。如果沒有預設連接埠，則會傳回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
        <see cref="P:System.Uri.Port" /> 資料。如果 <see cref="T:System.Uri" /> 中沒有連接埠資料，並且已經指派預設連接埠給 <see cref="P:System.Uri.Scheme" />，則會傳回預設連接埠。如果沒有預設連接埠，則會傳回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
        <see cref="P:System.Uri.UserInfo" /> 資料。</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>控制 URI 資訊的逸出方式。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>在所要求的 URI 元件中，有保留意義的字元仍維持逸出。其他字元則不逸出。請參閱＜備註＞。</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>不執行逸出。</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>依據 RFC 2396 規則執行逸出。</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>當偵測到無效的統一資源識別元 (URI) 時，所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>初始化 <see cref="T:System.UriFormatException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>使用指定的訊息來初始化 <see cref="T:System.UriFormatException" /> 類別的新執行個體。</summary>
      <param name="textString">錯誤訊息字串。</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.UriFormatException" /> 類別的新執行個體。</summary>
      <param name="textString">說明例外狀況的訊息。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
      <param name="e">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>定義 <see cref="M:System.Uri.CheckHostName(System.String)" /> 方法的主機名稱類型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>主機已設定，但是無法判斷類型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>主機名稱為網域名稱系統 (DNS) 型別主機名稱。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>主機名稱是網際網路通訊協定 (IP) 4 版主機位址。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>主機名稱是網際網路通訊協定 (IP) 6 版主機位址。</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>無法提供主機名稱類型。</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>為 <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" /> 和數個 <see cref="Overload:System.Uri.#ctor" /> 方法，定義 <see cref="T:System.Uri" /> 種類。</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>Uri 是絕對 Uri。</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>Uri 是相對 Uri。</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>Uri 類型不定。</summary>
    </member>
    <member name="T:System.ValueType">
      <summary>提供實值型別 (Value Type) 的基底類別。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>初始化 <see cref="T:System.ValueType" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>指示這個執行個體和指定的物件是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 和這個執行個體為同型別並表示相同的值，則為 true，否則為 false。</returns>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數 (Signed Integer)，其為這個執行個體的雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>傳回這個執行個體的完整型別名稱。</summary>
      <returns>包含完整型別名稱的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Version">
      <summary>表示組件的版本號碼、作業系統或 Common Language Runtime。此類別無法被繼承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>使用指定的主要和次要值，初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="major">主要版本號碼。</param>
      <param name="minor">次要版本號碼。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> or <paramref name="minor" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主要、次要和建置值，初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="major">主要版本號碼。</param>
      <param name="minor">次要版本號碼。</param>
      <param name="build">組建編號。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, or <paramref name="build" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主要、次要、組建和修訂編號，初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="major">主要版本號碼。</param>
      <param name="minor">次要版本號碼。</param>
      <param name="build">組建編號。</param>
      <param name="revision">修訂編號。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, <paramref name="build" />, or <paramref name="revision" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>以指定的字串初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="version">包含主要、次要、組建和修訂編號的字串，其中每個編號以句點字元 ('.') 隔開。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> has fewer than two components or more than four components. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A major, minor, build, or revision component is less than zero. </exception>
      <exception cref="T:System.FormatException">At least one component of <paramref name="version" /> does not parse to an integer. </exception>
      <exception cref="T:System.OverflowException">At least one component of <paramref name="version" /> represents a number greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之組建元件值。</summary>
      <returns>組建編號；如果組建編號未定義，則為 -1。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>將目前 <see cref="T:System.Version" /> 物件與指定的 <see cref="T:System.Version" /> 物件相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的整數，表示兩個物件的相對值，如下表所示。傳回值意義小於零目前的 <see cref="T:System.Version" /> 物件是 <paramref name="value" /> 之前的版本。零目前的 <see cref="T:System.Version" /> 物件與 <paramref name="value" /> 是相同版本。大於零目前的 <see cref="T:System.Version" /> 物件是 <paramref name="value" /> 的後續版本。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要與目前 <see cref="T:System.Version" /> 物件比較的 <see cref="T:System.Version" /> 物件，或為 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>傳回值，指出目前的 <see cref="T:System.Version" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前 <see cref="T:System.Version" /> 物件和 <paramref name="obj" /> 都是 <see cref="T:System.Version" /> 物件，並且目前 <see cref="T:System.Version" /> 物件的每個元件都符合 <paramref name="obj" /> 的相對應元件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前的 <see cref="T:System.Version" /> 物件比較的物件，否則null。 </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>傳回值，指出目前的 <see cref="T:System.Version" /> 物件和指定的 <see cref="T:System.Version" /> 物件是否表示相同的值。</summary>
      <returns>如果目前 <see cref="T:System.Version" /> 物件的每個元件都符合 <paramref name="obj" /> 參數的相對應元件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前 <see cref="T:System.Version" /> 物件比較的 <see cref="T:System.Version" /> 物件，或為 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Version" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Version.Major">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之主要元件值。</summary>
      <returns>主要版本號碼。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Version.MajorRevision">
      <summary>取得修訂編號的高 16 位元。</summary>
      <returns>16 位元帶正負號的整數。</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之次要元件值。</summary>
      <returns>次要版本號碼。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Version.MinorRevision">
      <summary>取得修訂編號的低 16 位元。</summary>
      <returns>16 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>判斷兩個指定的 <see cref="T:System.Version" /> 物件是否相等。</summary>
      <returns>如果 <paramref name="v1" /> 等於 <paramref name="v2" /> 則為 true，否則為 false。</returns>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>判斷第一個指定的 <see cref="T:System.Version" /> 物件是否大於第二個指定的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>如果 <paramref name="v1" /> 大於 <paramref name="v2" />，則為 true，否則為 false。</returns>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>判斷第一個指定的 <see cref="T:System.Version" /> 物件是否大於或等於第二個指定的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>如果 <paramref name="v1" /> 大於或等於 <paramref name="v2" /> 則為 true，否則為 false。</returns>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>判斷兩個指定的 <see cref="T:System.Version" /> 物件是否不相等。</summary>
      <returns>如果 <paramref name="v1" /> 不等於 <paramref name="v2" />，則為 true，否則為 false。</returns>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>判斷第一個指定的 <see cref="T:System.Version" /> 物件是否小於第二個指定的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>如果 <paramref name="v1" /> 小於 <paramref name="v2" />，則為 true，否則為 false。</returns>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>判斷第一個指定的 <see cref="T:System.Version" /> 物件是否小於或等於第二個 <see cref="T:System.Version" /> 物件。</summary>
      <returns>如果 <paramref name="v1" /> 小於或等於 <paramref name="v2" /> 則為 true，否則為 false。</returns>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.Parse(System.String)">
      <summary>將版本號碼的字串表示轉換為相等的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>物件，相當於 <paramref name="input" /> 參數中指定的版本號碼。</returns>
      <param name="input">字串，包含要轉換的版本號碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> has fewer than two or more than four version components.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">At least one component in <paramref name="input" /> is less than zero.</exception>
      <exception cref="T:System.FormatException">At least one component in <paramref name="input" /> is not an integer.</exception>
      <exception cref="T:System.OverflowException">At least one component in <paramref name="input" /> represents a number that is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之修訂元件值。</summary>
      <returns>修訂編號；如果修訂編號未定義，則為 -1。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的執行個體與相同類型的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。傳回值意義小於零這個執行個體在排序順序中會在 <paramref name="value" /> 之前。零這個執行個體出現在排序順序中的位置和 <paramref name="value" /> 相同。大於零這個執行個體在排序順序中會跟在 <paramref name="value" /> 之後。-或- <paramref name="value" /> 為 null。 </returns>
      <param name="version">與這個執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Version" /> object. </exception>
    </member>
    <member name="M:System.Version.ToString">
      <summary>將目前 <see cref="T:System.Version" /> 物件的值，轉換為其相等的 <see cref="T:System.String" /> 表示。</summary>
      <returns>目前 <see cref="T:System.Version" /> 物件的主要、次要、組建和修訂元件值的 <see cref="T:System.String" /> 表示，如下列格式所述。每個元件是以句點字元 ('.') 隔開。方括號 ('[' 和 ']') 指示如果未定義則不會在傳回值中出現的元件：major.minor[.build[.revision]]例如，如果您使用建構函式 Version(1,1) 建立 <see cref="T:System.Version" /> 物件，則傳回字串是 "1.1"。如果您使用建構函式 Version(1,3,4,2) 建立 <see cref="T:System.Version" /> 物件，則傳回字串是 "1.3.4.2"。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>將目前 <see cref="T:System.Version" /> 物件的值，轉換為其相等的 <see cref="T:System.String" /> 表示。指定的計數指示要傳回的元件數目。</summary>
      <returns>目前 <see cref="T:System.Version" /> 物件的主要、次要、組建和修訂元件值的 <see cref="T:System.String" /> 表示，每個元件都以句點字元 ('.') 隔開。<paramref name="fieldCount" /> 參數會判斷有多少元件傳回。fieldCount傳回值0 空字串 ("")。1 major2 major.minor3 major.minor.build4 major.minor.build.revision例如，如果您使用建構函式 Version(1,3,5) 建立 <see cref="T:System.Version" /> 物件，則 ToString(2) 會傳回 "1.3"，ToString(4) 則會擲回例外狀況。</returns>
      <param name="fieldCount">要傳回的元件數目。<paramref name="fieldCount" /> 的範圍從 0 到 4。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> is less than 0, or more than 4.-or- <paramref name="fieldCount" /> is more than the number of components defined in the current <see cref="T:System.Version" /> object. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
      <summary>嘗試將版本號碼的字串表示轉換為相等的 <see cref="T:System.Version" /> 物件，並傳回表示轉換是否成功的值。</summary>
      <returns>如果 <paramref name="input" /> 參數轉換成功，則為 true，否則為 false。</returns>
      <param name="input">字串，包含要轉換的版本號碼。</param>
      <param name="result">當這個方法傳回時，如果轉換成功，會包含與 <paramref name="input" /> 中所包含之數字相等的 <see cref="T:System.Version" />，如果轉換失敗，則包含主要和次要版本號碼都是 0 的 <see cref="T:System.Version" /> 物件。如果 <paramref name="input" /> 是 null 或 <see cref="F:System.String.Empty" />，則方法傳回的 <paramref name="result" /> 會是 null。</param>
    </member>
    <member name="T:System.Void">
      <summary>為不傳回任何值的方法指定傳回實值型別 (Value Type)。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.WeakReference">
      <summary>表示弱式參考，即在參考物件的同時，仍允許系統透過記憶體回收來回收該物件。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>參考指定的物件，初始化 <see cref="T:System.WeakReference" /> 類別的新執行個體。</summary>
      <param name="target">要追蹤的物件或 null。</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>參考指定的物件，並使用指定的重新恢復狀態追蹤 (Tracking)，初始化 <see cref="T:System.WeakReference" /> 類別的新執行個體。</summary>
      <param name="target">要追蹤的物件。</param>
      <param name="trackResurrection">指示何時停止追蹤物件。如果是 true，則會在最終處理之後追蹤物件；如果是 false，則只會追蹤物件到最終處理為止。</param>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>捨棄對目前 <see cref="T:System.WeakReference" /> 物件所表示之目標的參考。</summary>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>取得目前 <see cref="T:System.WeakReference" /> 物件所參考的物件是否已進行記憶體回收的指示。</summary>
      <returns>如果目前 <see cref="T:System.WeakReference" /> 物件所參考的物件尚未進行記憶體回收，且仍可存取，則為 true，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>取得或設定目前 <see cref="T:System.WeakReference" /> 物件所參考的物件 (目標)。</summary>
      <returns>如果目前 <see cref="T:System.WeakReference" /> 物件所參考的物件已進行記憶體回收，則為 null，否則為目前 <see cref="T:System.WeakReference" /> 物件所參考的物件參考。</returns>
      <exception cref="T:System.InvalidOperationException">目標物件的參考無效。如果值是 null 參考，或者如果物件已在設定作業期間做最終處理，在設定這項屬性的同時，可能會傳回這個例外狀況。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>取得指示，了解是否要對目前 <see cref="T:System.WeakReference" /> 物件所參考的物件，在執行最終處理之後再進行追蹤。</summary>
      <returns>如果目前 <see cref="T:System.WeakReference" /> 物件所參考的物件在執行最終處理之後會受到追蹤，則為 true，如果只針對該物件追蹤到最終處理為止，則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.WeakReference`1">
      <summary>表示具型別的弱式參考，即在參考物件的同時，仍允許系統透過記憶體回收來回收該物件。</summary>
      <typeparam name="T">參考之物件的型別。</typeparam>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.WeakReference`1" /> 類別的新執行個體，這個類別會參考指定的物件。</summary>
      <param name="target">要參考的物件或 null。</param>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
      <summary>初始化 <see cref="T:System.WeakReference`1" /> 類別的新執行個體，此類別會參考指定的物件，並使用指定的重新恢復狀態追蹤。</summary>
      <param name="target">要參考的物件或 null。</param>
      <param name="trackResurrection">true 表示在最終處理之後追蹤物件，false 表示只會追蹤物件到最終處理為止。</param>
    </member>
    <member name="M:System.WeakReference`1.Finalize">
      <summary>捨棄對目前 <see cref="T:System.WeakReference`1" /> 物件所表示之目標的參考。</summary>
    </member>
    <member name="M:System.WeakReference`1.SetTarget(`0)">
      <summary>設定這個 <see cref="T:System.WeakReference`1" /> 物件所參考的目標物件。</summary>
      <param name="target">新的目標物件。</param>
    </member>
    <member name="M:System.WeakReference`1.TryGetTarget(`0@)">
      <summary>嘗試擷取目前 <see cref="T:System.WeakReference`1" /> 物件所參考的目標物件。</summary>
      <returns>如果已收到目標，則為 true，否則為 false。</returns>
      <param name="target">這個方法傳回時，會包含目標物件 (如果有的話)。這個參數會被視為未初始化。</param>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>定義可設定或擷取的字典索引鍵/值組配對。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>初始化具有指定索引鍵和值之 <see cref="T:System.Collections.DictionaryEntry" /> 型別的執行個體。</summary>
      <param name="key">在每個索引鍵/值組配對中定義的物件。</param>
      <param name="value">與 <paramref name="key" /> 關聯的定義。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null，而且 .NET Framework 版本為 1.0 或 1.1。</exception>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>取得或設定索引鍵/值組配對中的索引鍵。</summary>
      <returns>索引鍵/值組配對中的索引鍵。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>取得或設定索引鍵/值組配對中的值。</summary>
      <returns>索引鍵/值組配對中的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>定義所有非泛型集合的大小、列舉值和同步方法。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，複製 <see cref="T:System.Collections.ICollection" /> 項目至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源 <see cref="T:System.Collections.ICollection" /> 項目的數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>取得 <see cref="T:System.Collections.ICollection" /> 中所包含的項目數。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中所包含的項目數。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果對 <see cref="T:System.Collections.ICollection" /> 的存取為同步 (安全執行緒)，則為 true，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>取得可用來同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用來同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>公開比較兩個物件的方法。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>比較兩個物件並傳回值，指出其中一個物件為小於、等於或大於另一個物件。</summary>
      <returns>帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。值意義小於零<paramref name="x" /> 小於 <paramref name="y" />。Zero<paramref name="x" /> 等於 <paramref name="y" />。大於零<paramref name="x" /> 大於 <paramref name="y" />。</returns>
      <param name="x">要比較的第一個物件。</param>
      <param name="y">要比較的第二個物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 都不實作 <see cref="T:System.IComparable" /> 介面。-或-<paramref name="x" /> 和 <paramref name="y" /> 是不同的型別，而且二者都不能處理與另外一方的比較。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>表示索引鍵/值組的非泛型集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>將隨附有索引鍵和值的項目加入至 <see cref="T:System.Collections.IDictionary" /> 物件。</summary>
      <param name="key">
        <see cref="T:System.Object" />，用做要加入之項目的索引鍵。</param>
      <param name="value">
        <see cref="T:System.Object" />，用做要加入之項目的值。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">具有相同索引鍵的項目已經存在 <see cref="T:System.Collections.IDictionary" /> 物件中。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 是唯讀的。-或-<see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>將所有項目從 <see cref="T:System.Collections.IDictionary" /> 物件移除。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 物件是唯讀的。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IDictionary" /> 物件是否包含具有指定索引鍵的項目。</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.</returns>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 物件中尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IDictionary" /> 物件的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 物件的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>取得代表 <see cref="T:System.Collections.IDictionary" /> 物件是否具有固定大小的值。</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Collections.IDictionary" /> 物件是否唯讀。</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>取得或設定具有指定索引鍵的項目。</summary>
      <returns>具有指定的索引鍵的項目，或是如果索引鍵不存在，則為 null。</returns>
      <param name="key">要取得或設定之項目的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">已設定該屬性，<see cref="T:System.Collections.IDictionary" /> 物件是唯讀的。-或-屬性已設定，<paramref name="key" /> 不存在於集合中，而且 <see cref="T:System.Collections.IDictionary" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>取得 <see cref="T:System.Collections.ICollection" /> 物件，其中包含 <see cref="T:System.Collections.IDictionary" /> 物件的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 物件，其中包含 <see cref="T:System.Collections.IDictionary" /> 物件的索引鍵。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>將有指定索引鍵的項目從 <see cref="T:System.Collections.IDictionary" /> 物件移除。</summary>
      <param name="key">要移除的項目索引鍵。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 物件是唯讀的。-或-<see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>取得 <see cref="T:System.Collections.ICollection" /> 物件，其中含有 <see cref="T:System.Collections.IDictionary" /> 物件中的值。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 物件，其中含有 <see cref="T:System.Collections.IDictionary" /> 物件中的值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>列舉非泛型字典的元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>取得目前字典項目的索引鍵和值。</summary>
      <returns>
        <see cref="T:System.Collections.DictionaryEntry" />，含有目前字典元素的索引鍵和值。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 位於字典的第一個元素之前，或最後一個元素之後。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>取得目前字典項目的索引鍵。</summary>
      <returns>列舉型別目前元素的索引鍵。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 位於字典的第一個元素之前，或最後一個元素之後。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>取得目前字典項目的值。</summary>
      <returns>列舉型別目前元素的值。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 位於字典的第一個元素之前，或最後一個元素之後。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>公開能逐一查看非泛型集合內容一次的列舉程式。若要瀏覽此類型的 .NET Framework 原始程式碼，請參閱參考來源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，可用於逐一查看集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>支援非泛型集合上的簡單反覆運算。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>取得集合中目前的項目。</summary>
      <returns>集合中目前的項目。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>將列舉值往前推至下集合中的下一個項目。</summary>
      <returns>如果列舉值成功地前移至下一個項目，則為 true，如果列舉值已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>設定列舉值至它的初始位置，這是在集合中第一個項目之前。</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>定義支援物件之相等比較的方法。</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>判斷指定的物件是否相等。</summary>
      <returns>如果指定的物件相等則為 true，否則為 false。</returns>
      <param name="x">要比較的第一個物件。</param>
      <param name="y">要比較的第二個物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 是不同的型別，而且二者都不能處理與另外一方的比較。</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>傳回指定物件的雜湊碼。</summary>
      <returns>指定物件的雜湊碼。</returns>
      <param name="obj">要傳回雜湊碼的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的型別是參考型別，而 <paramref name="obj" /> 為 null。</exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>表示可以個別由索引存取之物件的非泛型集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <returns>插入新項目的位置，如果是 -1 則表示項目並未插入集合中。</returns>
      <param name="value">要加入 <see cref="T:System.Collections.IList" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。-或-<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>將所有項目從 <see cref="T:System.Collections.IList" /> 移除。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，則為 true，否則為 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中特定項目的索引。</summary>
      <returns>如果可在清單中找到，則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的物件。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>將項目插入位於指定索引處的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">應該插入 <paramref name="value" /> 之以零起始的索引。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。-或-<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 是 <see cref="T:System.Collections.IList" /> 中的 null 參考。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 有固定大小，則為 true，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 是唯讀，則為 true，否則為 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>取得或設定指定之索引處的項目。</summary>
      <returns>在指定之索引處的項目。</returns>
      <param name="index">要取得或設定之以零起始的項目索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定，而且 <see cref="T:System.Collections.IList" /> 是唯讀的。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="value">要從 <see cref="T:System.Collections.IList" /> 中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。-或-<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>移除指定之索引處的 <see cref="T:System.Collections.IList" /> 項目。</summary>
      <param name="index">要移除項目之以零啟始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。-或-<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>支援集合物件的結構比較。</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>判斷目前的集合物件在排序次序中位於另一個物件之前、相同位置或之後。</summary>
      <returns>整數，表示目前集合物件與 <paramref name="other" /> 的關聯性，如下表所示。傳回值說明-1目前的執行個體在 <paramref name="other" /> 之前。0目前的執行個體與 <paramref name="other" /> 相等。1目前的執行個體在 <paramref name="other" /> 之後。</returns>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">物件，此物件會比較目前集合物件的成員與對應的 <paramref name="other" /> 成員。</param>
      <exception cref="T:System.ArgumentException">這個執行個體和 <paramref name="other" /> 屬於不相同的型別。</exception>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>定義支援物件之結構相等比較的方法。</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>判斷物件與目前的執行個體在結構上是否相等。</summary>
      <returns>如果兩個物件相等則為 true，否則為 false。</returns>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">物件，判斷目前的執行個體與 <paramref name="other" /> 是否相等。</param>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>傳回目前執行個體的雜湊程式碼。</summary>
      <returns>目前執行個體的雜湊程式碼。</returns>
      <param name="comparer">物件，會計算目前物件的雜湊程式碼。</param>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>定義管理泛型集合的方法。</summary>
      <typeparam name="T">集合中的項目型別。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <param name="item">要加入 <see cref="T:System.Collections.Generic.ICollection`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>將所有項目從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中尋找的物件。</param>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，複製 <see cref="T:System.Collections.Generic.ICollection`1" /> 項目至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.ICollection`1" /> 複製過來之項目的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的項目數量大於從 <paramref name="arrayIndex" /> 到目的端 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" /> 中所包含的元素數。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 中所包含的項目數。</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除特定物件的第一個相符項目。</summary>
      <returns>如果 <paramref name="item" /> 已成功從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除，則為 true，否則為 false。如果在原本的 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="item" />，則這個方法也會傳回 false。</returns>
      <param name="item">要從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的。</exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>定義型別會實作其以比較兩個物件的方法。</summary>
      <typeparam name="T">要比較之物件的型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>比較兩個物件並傳回值，指出其中一個物件為小於、等於或大於另一個物件。</summary>
      <returns>帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。值意義小於零<paramref name="x" /> 小於 <paramref name="y" />。Zero<paramref name="x" /> 等於 <paramref name="y" />。大於零<paramref name="x" /> 大於 <paramref name="y" />。</returns>
      <param name="x">要比較的第一個物件。</param>
      <param name="y">要比較的第二個物件。</param>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>表示索引鍵/值組的泛型集合。</summary>
      <typeparam name="TKey">字典中之索引鍵的類型。</typeparam>
      <typeparam name="TValue">字典中之值的類型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>將具有提供索引鍵和值的元素加入至 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <param name="key">做為要加入項目之索引鍵的物件。</param>
      <param name="value">做為要加入項目之值的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">具有相同索引鍵的元素已經存在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否包含具有指定之索引鍵的項目。</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>取得或設定具有指定索引鍵的項目。</summary>
      <returns>具有指定索引鍵的項目。</returns>
      <param name="key">要取得或設定之項目的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">屬性已擷取，並且找不到 <paramref name="key" />。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定，而且 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>將有指定索引鍵的元素從 <see cref="T:System.Collections.Generic.IDictionary`2" /> 移除。</summary>
      <returns>如果成功移除項目，則為 true，否則為 false。This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <param name="key">要移除的項目索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>取得與指定索引鍵關聯的值。</summary>
      <returns>如果實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件包含具有指定索引鍵的元素，則為 true，否則為 false。</returns>
      <param name="key">要取得其值的索引鍵。</param>
      <param name="value">這個方法傳回時，如果找到索引鍵，則為與指定索引鍵關聯的值，否則為 <paramref name="value" /> 參數的型別預設值。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>公開支援指定類型集合上簡單反覆運算的列舉值。若要瀏覽此類型的.NET Framework 原始碼，請參閱參考來源。</summary>
      <typeparam name="T">要列舉之物件的類型。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>支援泛型集合上的簡單反覆運算。</summary>
      <typeparam name="T">要列舉之物件的類型。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>取得集合中位於列舉值目前位置的元素。</summary>
      <returns>位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>定義支援物件之相等比較的方法。</summary>
      <typeparam name="T">要比較之物件的型別。這個類型參數是 Contravariant。換言之，您可以使用所指定的類型或是衍生程度較小的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>判斷指定的物件是否相等。</summary>
      <returns>如果指定的物件相等則為 true，否則為 false。</returns>
      <param name="x">要比較之型別 <paramref name="T" /> 的第一個物件。</param>
      <param name="y">要比較之型別 <paramref name="T" /> 的第二個物件。</param>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>傳回指定物件的雜湊碼。</summary>
      <returns>指定物件的雜湊碼。</returns>
      <param name="obj">要傳回雜湊碼的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的型別是參考型別，而 <paramref name="obj" /> 為 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>表示可以個別由索引存取之物件的集合。</summary>
      <typeparam name="T">清單中元素的型別。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.IList`1" /> 中特定項目的索引。</summary>
      <returns>如果可在清單中找到則為 <paramref name="item" /> 的索引，否則為 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.IList`1" /> 中尋找的物件。</param>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>將項目插入位於指定索引的 <see cref="T:System.Collections.Generic.IList`1" />。</summary>
      <param name="index">應該插入 <paramref name="item" /> 之以零起始的索引。</param>
      <param name="item">要插入 <see cref="T:System.Collections.Generic.IList`1" /> 的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>取得或設定指定之索引處的項目。</summary>
      <returns>在指定之索引處的項目。</returns>
      <param name="index">要取得或設定之以零起始的項目索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定，而且 <see cref="T:System.Collections.Generic.IList`1" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>移除指定之索引處的 <see cref="T:System.Collections.Generic.IList`1" /> 項目。</summary>
      <param name="index">要移除項目之以零啟始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 是唯讀的。</exception>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
      <summary>表示項目的強型別、唯讀集合。</summary>
      <typeparam name="T">項目的型別。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
      <summary>取得集合中的項目數目。</summary>
      <returns>集合中的項目數目。</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
      <summary>表示索引鍵/值組的唯讀集合。</summary>
      <typeparam name="TKey">唯讀字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">唯讀字典中值的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>判斷唯讀字典是否包含具有指定索引鍵的項目。</summary>
      <returns>如果唯讀字典中包含有指定之索引鍵的項目，則為 true，否則為 false。</returns>
      <param name="key">要尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
      <summary>取得在唯讀字典中擁有指定索引鍵的項目。</summary>
      <returns>在唯讀字典中擁有指定索引鍵的項目。</returns>
      <param name="key">要尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">屬性已擷取，並且找不到 <paramref name="key" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
      <summary>取得可列舉集合，其中包含唯讀字典中的索引鍵。</summary>
      <returns>包含唯讀字典中索引鍵的可列舉集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>取得與指定之索引鍵相關聯的值。</summary>
      <returns>如果實作 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 介面之物件包含具有指定之索引鍵的項目，則為 true，否則為 false。</returns>
      <param name="key">要尋找的索引鍵。</param>
      <param name="value">這個方法傳回時，如果找到索引鍵，則為與指定索引鍵關聯的值，否則為 <paramref name="value" /> 參數的型別預設值。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
      <summary>取得可列舉集合，其中包含唯讀字典中的值。</summary>
      <returns>包含唯讀字典中之值的可列舉集合。</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyList`1">
      <summary>表示可由索引存取之項目的唯讀集合。</summary>
      <typeparam name="T">唯讀清單中的項目類型。這個類型參數是 Covariant。換言之，您可以使用所指定的類型或是衍生程度較大的任一類型。如需共變數與反變數的詳細資訊，請參閱泛型中的共變數和反變數。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
      <summary>取得唯讀清單中指定索引處的項目。</summary>
      <returns>唯讀清單中指定索引處的項目。</returns>
      <param name="index">要取得之項目的以零為起始的索引。</param>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>為資料集的抽象提供基底介面。</summary>
      <typeparam name="T">資料集中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>將項目加入至目前資料集，並傳回表示是否成功加入項目的值。</summary>
      <returns>如果項目加入至資料集，則為 true，如果項目已經在資料集中，則為 false。</returns>
      <param name="item">要加入至集合的項目。</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的資料集中，移除指定之集合內的所有項目。</summary>
      <param name="other">要從資料集移除的項目集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含同時也在指定之集合中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的適當 (嚴格) 子集。</summary>
      <returns>如果目前資料集是 <paramref name="other" /> 的正確子集，則為 true，否則為 false。</returns>
      <param name="other">要與目前資料組比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的適當 (嚴格) 超集。</summary>
      <returns>如果目前資料集是 <paramref name="other" /> 的正確超集，則為 true，否則為 false。</returns>
      <param name="other">要與目前資料組比較的集合。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷資料集是否為指定之集合的子集。</summary>
      <returns>如果目前資料集是 <paramref name="other" /> 的子集，則為 true，否則為 false。</returns>
      <param name="other">要與目前資料組比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的超集。</summary>
      <returns>如果目前資料集是 <paramref name="other" /> 的超集，則為 true，否則為 false。</returns>
      <param name="other">要與目前資料組比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否與指定的集合重疊。</summary>
      <returns>如果目前的資料集和 <paramref name="other" /> 至少共用一個通用項目，則為 true，否則為 false。</returns>
      <param name="other">要與目前資料組比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集和指定的集合是否包含相同項目。</summary>
      <returns>如果目前的資料集等於 <paramref name="other" />，則為 true，否則為 false。</returns>
      <param name="other">要與目前資料組比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其包含目前資料集和 (或) 指定之集合中出現的所有項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>當為存取集合中的項目所指定的索引鍵與集合中的任何索引鍵都不相符時，擲回的例外狀況。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>使用預設的屬性值，初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>定義可設定或擷取的索引鍵/值組。</summary>
      <typeparam name="TKey">索引鍵的類型。</typeparam>
      <typeparam name="TValue">值的類型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>使用指定的索引鍵和值，初始化 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構的新執行個體。</summary>
      <param name="key">在每個索引鍵/值組配對中定義的物件。</param>
      <param name="value">與 <paramref name="key" /> 關聯的定義。</param>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>取得索引鍵/值組中的索引鍵。</summary>
      <returns>
        <paramref name="TKey" />，其為 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>使用索引鍵和值的字串表示，傳回 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字串表示。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字串表示，包含索引鍵和值的字串表示。</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>取得索引鍵/值組中的值。</summary>
      <returns>
        <paramref name="TValue" />，其為 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的值。</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>提供泛型集合的基底類別。</summary>
      <typeparam name="T">集合中的項目型別。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 類別的新執行個體，這個執行個體是空的。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 類別的新執行個體，將其當做指定清單的包裝函式。</summary>
      <param name="list">由新的集合所包裝的清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>將物件加入至 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的結尾。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 結尾的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>將所有項目從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 移除。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>將所有項目從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 移除。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>判斷某項目是否在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>從目標陣列之指定的索引開始，將整個 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 複製到相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 複製過來之項目的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 項目的數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>取得 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中實際包含的項目數目。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中實際包含的項目數目。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>傳回在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中第一個相符項目之以零起始的索引。</summary>
      <returns>整個 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中 <paramref name="item" /> 第一次出現之以零起始的索引 (如果找得到的話)，否則為 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>將項目插入 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中指定的索引處。</summary>
      <param name="index">應該插入 <paramref name="item" /> 之以零起始的索引。</param>
      <param name="item">要插入的物件。參考型別的值可以是 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>將項目插入 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中指定的索引處。</summary>
      <param name="index">應該插入 <paramref name="item" /> 之以零起始的索引。</param>
      <param name="item">要插入的物件。參考型別的值可以是 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>取得或設定指定之索引處的項目。</summary>
      <returns>在指定之索引處的項目。</returns>
      <param name="index">要取得或設定之以零起始的項目索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>取得 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 周圍的 <see cref="T:System.Collections.Generic.IList`1" /> 包裝函式。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 周圍的 <see cref="T:System.Collections.Generic.IList`1" /> 包裝函式。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 移除特定物件的第一個相符項目。</summary>
      <returns>如果成功移除 <paramref name="item" /> 則為 true，否則為 false。如果在原始的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中找不到 <paramref name="item" />，則這個方法也會傳回 false。</returns>
      <param name="item">要從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中指定之索引處的項目。</summary>
      <param name="index">要移除項目之以零起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中指定之索引處的項目。</summary>
      <param name="index">要移除項目之以零起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>取代指定之索引處的項目。</summary>
      <param name="index">要取代的項目之以零起始的索引。</param>
      <param name="item">指定之索引處的項目新值。參考型別的值可以是 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，這個屬性永遠會傳回 false。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，複製 <see cref="T:System.Collections.ICollection" /> 項目至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.ICollection" /> 項目的數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果對 <see cref="T:System.Collections.ICollection" /> 的存取為同步 (安全執行緒)，則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，這個屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用來同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回會逐一查看集合的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <returns>插入新項目的位置。</returns>
      <param name="value">要加入至 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，則為 true，否則為 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中特定項目的索引。</summary>
      <returns>如果可在清單中找到，則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入 <see cref="T:System.Collections.IList" /> 中指定的索引處。</summary>
      <param name="index">應該插入 <paramref name="value" /> 之以零起始的索引。</param>
      <param name="value">要插入至 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 有固定大小，則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，這個屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 是唯讀，則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，這個屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>取得或設定指定之索引處的項目。</summary>
      <returns>在指定之索引處的項目。</returns>
      <param name="index">要取得或設定之以零起始的項目索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">屬性已設定，且 <paramref name="value" /> 具有無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="value">要從 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>提供泛型唯讀集合的基底類別。</summary>
      <typeparam name="T">集合中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 類別的新執行個體，這個執行個體是指定之清單周圍的唯讀包裝函式。</summary>
      <param name="list">要包裝的清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>判斷某項目是否在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中找到 <paramref name="value" />，則為 true，否則為 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中尋找的物件。參考類型的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>從目標陣列的指定索引開始，複製整個 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 至相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 複製過來之項目的目的端。<see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>取得 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中所包含的項目數。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 執行個體中所包含的項目數。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>傳回在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中第一個出現之以零為起始的索引。</summary>
      <returns>整個 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中第一個出現 <paramref name="item" /> 之以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。參考類型的值可以是 null。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>取得位在指定索引處的項目。</summary>
      <returns>在指定索引上的項目。</returns>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" />. </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>傳回 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 所包裝的 <see cref="T:System.Collections.Generic.IList`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 所包裝的 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" />。這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要加入 <see cref="T:System.Collections.Generic.ICollection`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>將所有項目從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除。這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 為唯讀，則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，這個屬性一律會傳回 true。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除特定物件的第一個相符項目。這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>如果 <paramref name="value" /> 已成功從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除，則為 true，否則為 false.</returns>
      <param name="value">要從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>將項目插入位於指定索引處的 <see cref="T:System.Collections.Generic.IList`1" />。這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">應插入 <paramref name="value" /> 之以零為起始的索引。</param>
      <param name="value">要插入 <see cref="T:System.Collections.Generic.IList`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>取得位在指定索引處的項目。如果您嘗試在指定索引處設定項目，就會發生 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>在指定索引上的項目。</returns>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">Always thrown if the property is set.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除指定之索引處的 <see cref="T:System.Collections.Generic.IList`1" /> 項目。這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。<see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果對 <see cref="T:System.Collections.ICollection" /> 的存取為同步 (安全執行緒)，則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，這個屬性一律會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，這個屬性一律會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>插入新項目的位置。</returns>
      <param name="value">要加入至 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>將所有項目從 <see cref="T:System.Collections.IList" /> 移除。這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，則為 true，否則為 false.</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中特定項目的索引。</summary>
      <returns>如果可在清單中找到，則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入位於指定索引處的 <see cref="T:System.Collections.IList" />。這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">應插入 <paramref name="value" /> 之以零為起始的索引。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 有固定大小，則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，這個屬性一律會傳回 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 為唯讀，則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，這個屬性一律會傳回 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>取得位在指定索引處的項目。如果您嘗試在指定索引處設定項目，就會發生 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>在指定索引上的項目。</returns>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">Always thrown if the property is set.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件的第一個相符項目。這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要從 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定之索引處的 <see cref="T:System.Collections.IList" /> 項目。這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>指定屬性的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>使用 <see cref="T:System.Boolean" /> 值來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 <see cref="T:System.Boolean" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>使用 8 位元不帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>使用 Unicode 字元來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 Unicode 字元。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>使用雙精確度浮點數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的雙精確度浮點數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>使用 16 位元帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>使用 32 位元帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>使用 64 位元帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 64 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">表示預設值的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>使用單精確度浮點數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的單精確度浮點數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>使用 <see cref="T:System.String" /> 來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>將指定的值轉換為指定型別，並使用不變文化特性 (Invariant Culture) 做為轉譯內容，初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="type">要數值轉換成的 <see cref="T:System.Type" />。</param>
      <param name="value">
        <see cref="T:System.String" />，可以使用型別的 <see cref="T:System.ComponentModel.TypeConverter" /> 和美式英語文化特性來轉換為該型別。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>傳回值，該值指出指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DefaultValueAttribute" />。</summary>
      <returns>如果指定的物件值等於目前的值，則為 true，否則為 false。</returns>
      <param name="obj">測試其數值相等的物件。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>取得這個屬性 (Attribute) 所繫結之屬性 (Property) 的預設值。</summary>
      <returns>
        <see cref="T:System.Object" />，表示這個屬性 (Attribute) 所繫結之屬性 (Property) 的預設值。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>指定在編輯器中可檢視的屬性或方法。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>使用 <see cref="T:System.ComponentModel.EditorBrowsableState" />，初始化 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 類別的新執行個體。</summary>
      <param name="state">
        <see cref="T:System.ComponentModel.EditorBrowsableState" />，以設定 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />。</summary>
      <returns>如果指定的物件值等於目前的值，則為 true，否則為 false。</returns>
      <param name="obj">測試其數值相等的物件。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>取得屬性或方法的可瀏覽狀態。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EditorBrowsableState" />，屬性或方法的可瀏覽狀態。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>從編輯器中指定屬性或方法的可瀏覽狀態。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>屬性或方法是只有進階使用者能看到的功能。編輯器可以顯示或是隱藏這樣的屬性。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>屬性或方法可以從編輯器中瀏覽。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>屬性或方法永遠無法從編輯器中瀏覽。</summary>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>指示編譯器 (Compiler) 應該忽略方法呼叫或屬性 (Attribute)，除非已定義指定的條件式編譯符號。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 類別的新執行個體。</summary>
      <param name="conditionString">字串，指定與此屬性相關聯之區分大小寫的條件式編譯符號。</param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>取得與 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 屬性相關聯的條件式編譯符號。</summary>
      <returns>字串，指定與 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 屬性相關聯之區分大小寫的條件式編譯符號。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>修改 Runtime Just-In-Time (JIT) 偵錯的程式碼產生。此類別無法被繼承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>用指定的 JIT (just-in-time) 編譯器偵錯模式，將 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 類別的新執行個體初始化。</summary>
      <param name="modes">由各種 <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> 值經過逐一位元合併組成的結果，代表 JIT 編譯器的偵錯模式。</param>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>指定 Just-In-Time (JIT) 編譯器的偵錯模式。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>指示 Just-In-Time (JIT) 編譯器使用其預設行為，這些行為包括啟用最佳化設定、停用編輯後繼續支援，以及使用符號存放區的序列點 (如果有的話)。在 .NET Framework 2.0 版中，永遠會產生 JIT 追蹤資訊 (方法中的 Microsoft Intermediate Language (MSIL) 位移 (Offset) 至原生程式碼位移)。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>停用編譯器執行的最佳化，可讓您的輸出檔案變得更小、更快、更有效率。最佳化是在輸出檔案中程式碼重新排列所產生的結果，它可能會造成偵錯困難。一般來說，偵錯時應該停用最佳化。在 2.0 (含) 以後版本中，這個值與 Default (Default | DisableOptimizations) 結合以啟用 JIT 追蹤並停用最佳化。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>啟用 [編輯後繼續]。[編輯後繼續] 可以讓您在程式處於中斷模式時，變更您的原始程式碼。編輯後繼續的功能與編譯器有相依性。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>使用隱含式 MSIL 序列點，不是程式資料庫 (PDB) 序列點。符號資訊通常會為每個來源行包括至少一個 Microsoft Intermediate Language (MSIL) 位移。Just-In-Time (JIT) 編譯器要編譯方法時，會為應該保留的 MSIL 位移清單要求逐步分析服務。這些 MSIL 位移稱為「序列點」。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>在 .NET Framework 2.0 版中，永遠會產生 JIT 追蹤資訊，而且這個旗標與 <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" /> 的作用相同，唯一的不同之處是 <see cref="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled" /> 屬性為 false (在 2.0 版中沒有意義)。</summary>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>定義格式化選項，這些選項會自訂一些日期和時間剖析方法的字串剖析。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>日期和時間會以 Coordinated Universal Time (UTC) 表示。如果輸入字串代表當地時間 (透過時區規範或 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />)，則日期和時間會從當地時區轉換成 UTC。如果輸入字串代表 UTC 時間 (透過時區規範或 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)，則不會進行轉換。如果輸入字串不是代表當地或 UTC 時間，則不會進行轉換，而且產生的 <see cref="P:System.DateTime.Kind" /> 屬性是 <see cref="F:System.DateTimeKind.Unspecified" />。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>除非字串中間的額外空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>除非前置空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>除非結尾空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>除非字串中任意位置的額外空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。這個值是 <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> 值的組合。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>如果未在剖析字串中指定時區，則會假設字串是代表當地時間。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>如果未在剖析字串中指定時區，則會假設字串是代表 UTC。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>如果受剖析字串只含時間而未含日期，則剖析方法會假設為西曆日期，其中年 = 1、月 = 1 而日 = 1。如果未使用這個值，則假設為目前日期。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>必須使用預設格式化選項。這個值表示 <see cref="M:System.DateTime.Parse(System.String)" />、<see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> 和 <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> 方法的預設樣式。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>使用 "o" 或 "r" 標準格式規範將 <see cref="T:System.DateTime" /> 物件轉換為字串，再將字串轉換回 <see cref="T:System.DateTime" /> 物件時，會保留日期的 <see cref="T:System.DateTimeKind" /> 欄位。</summary>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>決定數值字串引數中允許的樣式，這些引數是傳遞給整數及浮點數值型別的 Parse 和 TryParse 方法。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>指出數字字串是否可以包含貨幣符號。有效貨幣符號是由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> 屬性來決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>指示數值字串可以有小數點。如果 <see cref="T:System.Globalization.NumberStyles" /> 值包含 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 旗標，且剖析的值包含貨幣符號，則十進位分隔符號字元由<see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> 屬性決定。否則，小數分隔符號字元是由 <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" /> 屬性所決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>指示數值字串可以採用指數標記法。<see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 旗標允許剖析的字串包含以 "E" 或 "e" 字元開頭，後面跟著選擇性正負號和整數的指數。換句話說，它能成功剖析 nnnExx， nnnE+xx 和 nnnE-xx 形式的字串。它不允許有效數字或尾數中的小數分隔符號或正負號。為了要讓字串中的這些項目得以剖析，請使用 <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 旗標，或是使用包含這些個別旗標的複合樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>指示數值字串會表示十六進位值。有效十六進位值包括數值位數 0-9 和十六進位位數 A-F 和 a-f，使用這個樣式剖析的字串不可在前端加上 "0x" 或 "&amp;h"。使用 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 樣式剖析的字串一定會解譯為十六進位值。其他可合併的旗標僅限 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />。<see cref="T:System.Globalization.NumberStyles" /> 列舉包含 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 複合樣式，此樣式是由這三個旗標所組成。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>指示數值字串可以有前置正負號。有效前置正負號字元是由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 屬性所決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>表示前置空白字元可以出現在剖析的字串中。有效泛空白字元有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。請注意，這是字元的子集，<see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法會針對此子集傳回 true。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>指示數值字串可以有一對括住數字的括弧。括號表示要剖析的字串代表負數。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>表示數值字串可以有群組分隔符號 (例如，隔開百位與千位的符號)。如果 <see cref="T:System.Globalization.NumberStyles" /> 值包含 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 旗標，且要剖析的字串包含貨幣符號，則有效群組分隔符號字元由<see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> 屬性決定，且每個群組中的位數由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> 屬性決定。否則，有效群組分隔符號字元是由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> 屬性所決定，而每個群組中的位數則由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" /> 屬性所決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>指示數值字串可以有尾端正負號。有效尾端正負號字元由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 屬性所決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>表示尾端空白字元可以出現在剖析的字串中。有效泛空白字元有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。請注意，這是字元的子集，<see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法會針對此子集傳回 true。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>指示使用除了 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 之外的所有樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>指示使用除了 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 之外的所有樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>表示剖析的字串中不可出現樣式元素，例如前置或尾端空白、千分位分隔符號或十分位分隔符號。要剖析的字串必須只能由整數位數和小數位數組成。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
      <summary>定義格式化選項，這些格式化選項自訂 <see cref="Overload:System.TimeSpan.ParseExact" /> 和 <see cref="Overload:System.TimeSpan.TryParseExact" /> 方法的字串剖析。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
      <summary>表示一律將輸入解譯為負時間間隔。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
      <summary>表示只有在負號存在時，才將輸入解譯為負時間間隔。</summary>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
      <summary>找不到檔案或目錄的一部分時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
      <summary>將其訊息字串設定為系統提供的訊息且將其 HRESULT 設定為 COR_E_DIRECTORYNOTFOUND，初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" /> 和其 HRESULT 設定為 COR_E_DIRECTORYNOTFOUND，初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.IO.FileLoadException">
      <summary>找到 Managed 組件但是無法載入時，所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor">
      <summary>初始化 <see cref="T:System.IO.FileLoadException" /> 類別的新執行個體，將新執行個體的 <see cref="P:System.Exception.Message" /> 屬性設定為系統提供的說明錯誤的訊息，例如「無法載入指定的檔案」。這個訊息會考量目前系統的文化特性。</summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.IO.FileLoadException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.IO.FileLoadException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和無法載入的檔案名稱，初始化 <see cref="T:System.IO.FileLoadException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
      <param name="fileName">
        <see cref="T:System.String" />，包含未載入的檔案名稱。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息、無法載入的檔案名稱和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.IO.FileLoadException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
      <param name="fileName">
        <see cref="T:System.String" />，包含未載入的檔案名稱。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="P:System.IO.FileLoadException.FileName">
      <summary>取得造成這個例外狀況的檔案名稱。</summary>
      <returns>包含具有無效影像的檔案名稱的 <see cref="T:System.String" />，如果沒有檔案名稱傳遞給目前執行個體的建構函式，則為 null 參考。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
      <summary>取得造成這個例外狀況的錯誤訊息和檔案名稱。</summary>
      <returns>字串，包含造成這個例外狀況的錯誤訊息和檔案名稱。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
      <summary>傳回目前例外狀況的完整名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤。</summary>
      <returns>字串，包含這個例外狀況的完整名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤 (視使用哪個 <see cref="T:System.IO.FileLoadException" /> 建構函式而定)。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>嘗試存取不存在於磁碟上的檔案失敗時所擲回的例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>將其訊息字串設定為系統提供的訊息並將其 HRESULT 設定為 COR_E_FILENOTFOUND，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" /> 和其 HRESULT 設定為 COR_E_FILENOTFOUND，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況之內部例外狀況的參考，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" />、指定找不到的檔案名稱和其 HRESULT 設定為 COR_E_FILENOTFOUND，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況之內部例外狀況的參考，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.FileName">
      <summary>取得找不到的檔案名稱。</summary>
      <returns>檔案名稱，如果沒有傳遞檔案名稱給這個執行個體的建構函式，則為 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message">
      <summary>取得解釋例外狀況原因的錯誤訊息。</summary>
      <returns>錯誤訊息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>傳回這個例外狀況的完整名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤。</summary>
      <returns>這個例外狀況的完整名稱、可能的錯誤訊息、內部例外狀況的名稱和堆疊追蹤。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.IO.IOException">
      <summary>當 I/O 錯誤發生時所擲回的例外狀況。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>使用其訊息字串設定為空字串 ("")、其 HRESULT 設定為 COR_E_IO 和其內部例外狀況設定為 Null 參考，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" />、其 HRESULT 設定為 COR_E_IO 和其內部例外狀況設定為 null，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
      <summary>使用其訊息字串設定為 <paramref name="message" /> 和其使用者定義的 HRESULT，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
      <param name="hresult">識別已發生錯誤的整數。</param>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>當路徑或檔名的長度大於系統定義的最大長度時，就會擲回這個例外狀況。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>使用其 HRESULT 設定為 COR_E_PATHTOOLONG，初始化 <see cref="T:System.IO.PathTooLongException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" /> 和其 HRESULT 設定為 COR_E_PATHTOOLONG，初始化 <see cref="T:System.IO.PathTooLongException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.IO.PathTooLongException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。這個建構函式的呼叫端必須確保這個字串已經為目前系統的文化特性當地語系化。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的公司名稱自訂屬性 (Attribute)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> 類別的新執行個體。</summary>
      <param name="company">公司名稱資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>取得公司名稱資訊。</summary>
      <returns>字串，包含公司名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>指定組件的組建組態，例如正式版本或偵錯。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> 類別的新執行個體。</summary>
      <param name="configuration">組件組態。</param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>取得組件組態資訊。</summary>
      <returns>字串，包含組件組態資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的著作權自訂屬性 (Attribute)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> 類別的新執行個體。</summary>
      <param name="copyright">著作權資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>取得著作權資訊。</summary>
      <returns>字串，包含著作權資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>指定組件所支援的文化特性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>以使用屬性的組件所支援的文化特性，初始化 <see cref="T:System.Reflection.AssemblyCultureAttribute" /> 類別的新執行個體。</summary>
      <param name="culture">文化特性，由使用屬性的組件所支援。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>取得使用屬性的組件所支援的文化特性。</summary>
      <returns>字串，含有所支援的文化特性的名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的易記預設別名 (Alias)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> 類別的新執行個體。</summary>
      <param name="defaultAlias">組件預設別名資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>取得預設別名資訊。</summary>
      <returns>字串，包含預設別名資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>指定建立組件 (Assembly) 時不要完整簽署。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDelaySignAttribute" /> 類別的新執行個體。</summary>
      <param name="delaySign">如果啟動這個屬性所表示的功能，則為 true，否則為 false。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>取得數值，指示屬性的狀態。</summary>
      <returns>如果這個組件已經建置為延遲簽署，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>提供組件的文字描述。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> 類別的新執行個體。</summary>
      <param name="description">組件描述。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>取得組件描述資訊。</summary>
      <returns>字串，包含組件描述。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>指示編譯器使用 Win32 檔案版本資源的指定版本號碼。Win32 檔案版本不需要與組件的版本號碼相同。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> 類別的新執行個體，指定檔案版本。</summary>
      <param name="version">檔案版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 為 null。</exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>取得 Win32 檔案版本資源名稱。</summary>
      <returns>字串，包含檔案版本資源名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>為組件 (Assembly) 指定 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的位元組合，描述 Just-In-Time (JIT) 編譯器選項、組件是否可重定目標，以及組件是否具有完整或 Token 化的公開金鑰 (Public Key)。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>使用指定的 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標組合，來初始化 <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> 類別的新執行個體。</summary>
      <param name="assemblyFlags">
        <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的位元組合，表示 Just-In-Time (JIT) 編譯器選項、壽命、組件是否可重定目標，以及組件是否具有完整或 Token 化的公開金鑰。</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>取得整數值，表示 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的組合，而這些旗標是在建立此屬性執行個體時所指定。</summary>
      <returns>整數值，表示 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的位元組合。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 其他的版本資訊。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> 類別的新執行個體。</summary>
      <param name="informationalVersion">組件版本資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>取得版本資訊。</summary>
      <returns>字串，包含版本資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>指定檔案的名稱，該檔案包含用來產生強式名稱 (Strong Name) 的金鑰組 (Key Pair)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>使用檔案名稱來初始化 AssemblyKeyFileAttribute 類別的新執行個體，該檔案包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <param name="keyFile">包含金鑰組的檔案名稱。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>取得檔案的名稱，該檔案包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <returns>字串，含有包含金鑰組的檔案名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>指定 CSP 內金鑰容器 (Container) 的名稱，該容器包含用來產生強式名稱的金鑰組 (Key Pair)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>使用容器名稱來初始化 <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> 類別的新執行個體，該容器包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <param name="keyName">包含金鑰組的容器名稱。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>取得容器的名稱，該容器包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <returns>字串，包含具有相關金鑰組之容器的名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyMetadataAttribute">
      <summary>定義裝飾組件的中繼資料索引鍵/值組。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyMetadataAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的中繼資料金鑰和值，初始化 <see cref="T:System.Reflection.AssemblyMetadataAttribute" /> 類別的新執行個體。</summary>
      <param name="key">中繼資料索引鍵。</param>
      <param name="value">中繼資料值。</param>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Key">
      <summary>取得中繼資料索引鍵。</summary>
      <returns>中繼資料索引鍵。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Value">
      <summary>取得中繼資料值。</summary>
      <returns>中繼資料值。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>提供有關 <see cref="T:System.Reflection.Assembly" /> 參考的資訊。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>指定沒有旗標作用中。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>指定公開金鑰是由完整公開金鑰而非公開金鑰語彙基元 (Token) 所形成。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>指定組件可以在執行階段重定成不同發行者 (Publisher) 的組件。這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的產品名稱自訂屬性 (Attribute)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyProductAttribute" /> 類別的新執行個體。</summary>
      <param name="product">產品名稱資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>取得產品名稱資訊。</summary>
      <returns>字串，包含產品名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblySignatureKeyAttribute">
      <summary>從舊的、較簡單的強式名稱金鑰移轉到具有較強的雜湊演算法、較大的金鑰。</summary>
    </member>
    <member name="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的公開金鑰和副署，建立 <see cref="T:System.Reflection.AssemblySignatureKeyAttribute" /> 類別的新執行個體。</summary>
      <param name="publicKey">公開或識別金鑰。</param>
      <param name="countersignature">副署，也就是強式名稱金鑰的簽章金鑰部分。</param>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
      <summary>取得這個組件的強式名稱副署。</summary>
      <returns>此簽章金鑰的副署。</returns>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey">
      <summary>取得用來簽署組件之強式名稱的公開金鑰。</summary>
      <returns>這個組件的公開金鑰。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>指定組件的說明。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTitleAttribute" /> 類別的新執行個體。</summary>
      <param name="title">組件標題。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>取得組件標題資訊。</summary>
      <returns>組件標題。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的商標自訂屬性 (Attribute)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> 類別的新執行個體。</summary>
      <param name="trademark">商標資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>取得商標資訊。</summary>
      <returns>String，包含商標資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>指定使用屬性之組件的版本。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>使用正在屬性化之組件的版本號碼，初始化 AssemblyVersionAttribute 類別的新執行個體。</summary>
      <param name="version">使用屬性之組件的版本號碼。</param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>取得使用屬性之組件的版本號碼。</summary>
      <returns>字串，包含組件的版本號碼。</returns>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>定義 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 所使用之預設成員的型別成員。</summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 類別的新執行個體。</summary>
      <param name="memberName">String，含有要叫用 (Invoke) 的成員名稱。這可能是建構函式、方法、屬性或欄位。叫用成員時，必須指定適合的引動過程屬性。類別的預設成員可以藉由將空 String 傳遞為成員名稱的方式來指定。型別的預設成員可以使用 DefaultMemberAttribute 自訂屬性來標記，或以一般方式在 COM 中標記。</param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>從屬性取得名稱。</summary>
      <returns>表示成員名稱的字串。</returns>
    </member>
    <member name="T:System.Reflection.ProcessorArchitecture">
      <summary>識別可執行檔之目標平台的處理器以及每個字組的位元 (Bits-per-word)。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Amd64">
      <summary>僅限 64 位元的 AMD 處理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Arm">
      <summary>ARM 處理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.IA64">
      <summary>僅限 64 位元的 Intel 處理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.MSIL">
      <summary>相對於處理器和每個字組的位元而言是中性的。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.None">
      <summary>處理器和每個字組的位元組合是未知或尚未指定的。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.X86">
      <summary>32 位元的 Intel 處理器 (原生或位於 64 位元平台 (WOW64) 的 Windows on Windows 環境中)。</summary>
    </member>
    <member name="T:System.Runtime.GCLargeObjectHeapCompactionMode">
      <summary>[在 .NET Framework 4.5.1 及更新版本中支援]表示下一個封鎖記憶體回收是否壓縮大型物件堆積 (LOH)。</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce">
      <summary>在下一個封鎖層代 2 記憶體回收期間將會壓縮大型物件堆積 (LOH)。</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.Default">
      <summary>不會壓縮大型物件堆積 (LOH)。</summary>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>調整記憶體回收行程干擾應用程式的時間。  </summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>停用記憶體回收並行並回收批次呼叫中的物件。這是干擾最大的模式。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>可讓記憶體回收並行，並且在應用程式執行時回收物件。這是工作站的預設記憶體回收模式，而且干擾較 <see cref="F:System.Runtime.GCLatencyMode.Batch" /> 少。它會在回應速度與處理量間取得平衡。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>啟用回收物件時較為保守的記憶體回收。只有在系統記憶體不足才會出現完整回收，同時層代 0 和層代 1 回收頻率可能會變高</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.SustainedLowLatency">
      <summary>啟用嘗試在長時間上將延遲縮減到最短的記憶體回收。收集器只會嘗試執行層代 0、層代 1 和並行層代 2 回收。如果系統處於記憶體壓力下，仍然可能發生完整封鎖回收。</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>指定目前處理序的記憶體回收設定。</summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>取得值，這個值表示伺服器記憶體回收是否已啟用。</summary>
      <returns>如果伺服器記憶體回收已啟用，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode">
      <summary>[在 .NET Framework 4.5.1 及更新版本中支援]取得或設定值，這個值表示完整的封鎖記憶體回收是否壓縮大型物件堆積 (LOH)。</summary>
      <returns>其中一個表示完整封鎖記憶體回收是否壓縮 LOH 的列舉值。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>為記憶體回收取得或設定目前的延遲模式。</summary>
      <returns>一個列舉值，指定延遲模式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Runtime.GCSettings.LatencyMode" />屬性設為無效的值。-或-<see cref="P:System.Runtime.GCSettings.LatencyMode" />屬性無法設定為<see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" />。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>指定存取屬性 (Property) 欄位的屬性名稱。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>使用要存取屬性欄位的屬性名稱，初始化 AccessedThroughPropertyAttribute 類別的新執行個體。</summary>
      <param name="propertyName">用來存取屬性欄位的屬性名稱。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>取得用來存取屬性欄位的屬性名稱。</summary>
      <returns>用來存取屬性欄位的屬性名稱。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute">
      <summary>表示方法是以 Async (Visual Basic) 還是以 async (C# 參考) 修飾詞做為標記。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute" /> 類別的新執行個體。</summary>
      <param name="stateMachineType">基礎狀態機器類型的類型物件，該類型會被用來實作狀態機器方法。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
      <summary>可讓您取得包含呼叫端的原始程式檔完整路徑。這是在編譯時的檔案路徑。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerFilePathAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
      <summary>可讓您取得在原始程式檔中呼叫此方法之處的行號。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerLineNumberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
      <summary>可讓您取得方法呼叫端的方法或屬性名稱。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>控制由 Common Language Runtime 的 Just-In-Time (JIT) 編譯器所產生之程式碼的嚴格程度。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>使用指定的編譯 (Compilation) 寬鬆度，初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> 類別的新執行個體。</summary>
      <param name="relaxations">編譯 (Compilation) 寬鬆度。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>取得在建構目前的物件時所指定的編譯 (Compilation) 寬鬆度。</summary>
      <returns>在建構目前的物件時所指定的編譯 (Compilation) 寬鬆度。將 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 列舉型別與 <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> 屬性搭配使用。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>區別編譯器產生的項目與使用者產生的項目。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
      <summary>讓編譯器動態地將物件欄位附加至 Managed 物件。</summary>
      <typeparam name="TKey">欄位所附加至的參考類型。</typeparam>
      <typeparam name="TValue">欄位的類型。這必須是參考類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
      <summary>將索引鍵加入至表格。</summary>
      <param name="key">要加入的索引鍵。<paramref name="key" /> 表示屬性所附加至的物件。</param>
      <param name="value">索引鍵的屬性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 已存在。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize">
      <summary>確保釋放資源，而且當記憶體回收行程回收時，會執行其他清除作業<see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" />物件。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
      <summary>以不可分割方式搜尋表格中的指定索引鍵並傳回對應值。如果索引鍵不存在於表格中，則此方法會叫用代表表格值之類別的預設建構函式，以建立繫結至指定索引鍵的值。</summary>
      <returns>如果 <paramref name="key" /> 已存在於表格中，則為對應於 <paramref name="key" /> 的值，否則為 <paramref name="TValue" /> 泛型型別參數定義之類別的預設建構函式所建立的新值。</returns>
      <param name="key">要搜尋的索引鍵。<paramref name="key" /> 表示屬性所附加至的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.MissingMethodException">在適用於 Windows 市集應用程式的 .NET 或可攜式類別庫中，反而要攔截基底類別例外狀況 <see cref="T:System.MissingMemberException" />。代表資料表之值的類別沒有定義預設的建構函式。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
      <summary>以不可分割方式搜尋表格中的指定索引鍵並傳回對應值。如果索引鍵不存在於表格中，則此方法會叫用回呼方法來建立繫結至指定索引鍵的值。</summary>
      <returns>如果 <paramref name="key" /> 已存在於表格中，則為附加至 <paramref name="key" /> 的值，否則為 <paramref name="createValueCallback" /> 委派所傳回的新值。</returns>
      <param name="key">要搜尋的索引鍵。<paramref name="key" /> 表示屬性所附加至的物件。</param>
      <param name="createValueCallback">方法的委派，可針對指定的 <paramref name="key" /> 建立值。它具有型別為 <paramref name="TKey" /> 的單一參數，並且會傳回 <paramref name="TValue" /> 型別的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="createValueCallback" /> 是 null。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
      <summary>從表格移除索引鍵和其值。</summary>
      <returns>如果已找到並移除索引鍵則為 true，否則為 false。</returns>
      <param name="key">要移除的索引鍵。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
      <summary>取得指定之索引鍵的值。</summary>
      <returns>如果找到 <paramref name="key" /> 則為 true，否則為 false。</returns>
      <param name="key">索引鍵，代表具有附加屬性的物件。</param>
      <param name="value">這個方法傳回的內容會包含附加的屬性值。如果找不到 <paramref name="key" />，則 <paramref name="value" /> 會包含預設值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
      <summary>表示方法，這個方法會建立非預設值，以做為索引鍵/值組的一部分加入至 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 物件。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.Invoke(`0)"></member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>定義編譯器可以保存 (Persist) 之欄位或方法參數的常數值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>取得這個屬性 (Attribute) 儲存的常數值。</summary>
      <returns>這個屬性儲存的常數值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>保存 (Persist) 欄位或參數的 8 位元組 <see cref="T:System.DateTime" /> 常數。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>使用表示這個執行個體 (Instance) 日期和時間的 100 奈秒 (Nanosecond) 刻度數字，初始化 DateTimeConstantAttribute 類別的新執行個體。</summary>
      <param name="ticks">100 奈秒刻度數字，表示這個執行個體的日期和時間。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>取得表示這個執行個體日期和時間的 100 奈秒刻度數字。</summary>
      <returns>100 奈秒刻度數字，表示這個執行個體的日期和時間。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>將 <see cref="T:System.Decimal" /> 常數值儲存於中繼資料 (Metadata) 中。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的帶正負號的整數 (Signed Integer) 值，初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 類別的新執行個體。</summary>
      <param name="scale">10 次方的縮放比例，表示小數點右方的數字數目。有效值為 0 到 28 之間 (含)。</param>
      <param name="sign">0 的值表示正值，而 1 的值表示負值。</param>
      <param name="hi">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個高位元。</param>
      <param name="mid">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中間 32 個位元。</param>
      <param name="low">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個低位元。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>使用指定的不帶正負號的整數 (Unsigned Integer) 值，初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 類別的新執行個體。</summary>
      <param name="scale">10 次方的縮放比例，表示小數點右方的數字數目。有效值為 0 到 28 之間 (含)。</param>
      <param name="sign">0 的值表示正值，而 1 的值表示負值。</param>
      <param name="hi">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個高位元。</param>
      <param name="mid">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中間 32 個位元。</param>
      <param name="low">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個低位元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> &gt; 28。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>取得儲存在這個屬性中的十進位常數。</summary>
      <returns>儲存在這個屬性中的十進位常數。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute">
      <summary>表示包含在組件的型別中任何私用成員不能使用反映。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute.#ctor">
      <summary>初始化的新執行個體<see cref="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute" />類別。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>表示方法是擴充方法，或表示類別或組件包含擴充方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>表示欄位應該被視為包含指定之基本型別 (Primitive Type) 的固定項目數。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> 類別的新執行個體。</summary>
      <param name="elementType">緩衝區中包含的項目型別。</param>
      <param name="length">緩衝區中的項目數。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>取得固定緩衝區中包含的項目型別。</summary>
      <returns>項目的型別。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>取得固定緩衝區中的項目數。</summary>
      <returns>固定緩衝區中的項目數。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.FormattableStringFactory">
      <summary>提供靜態方法，從複合格式字串和其引數建立 <see cref="T:System.FormattableString" /> 物件。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FormattableStringFactory.Create(System.String,System.Object[])">
      <summary>從複合格式字串和其引數建立 <see cref="T:System.FormattableString" /> 執行個體。</summary>
      <returns>表示複合格式字串和其引數的物件。</returns>
      <param name="format">複合格式字串。</param>
      <param name="arguments">其字串表示要插入結果字串中的引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。-或-<paramref name="arguments" /> 為 null。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>在不直接支援索引子 (Indexer) 的程式語言中指示可藉以得知索引子的名稱。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> 類別的新執行個體。</summary>
      <param name="indexerName">索引子的名稱，當顯示給其他語言時。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>將通常只有在目前組件中可見的類型，指定為指定組件中可見的。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>使用指定的 Friend 組件名稱，初始化 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> 類別的新執行個體。</summary>
      <param name="assemblyName">Friend 組件的名稱。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>取得 Friend 組件的名稱，此組件將會看見標記 internal 關鍵字的所有類型和類型成員。</summary>
      <returns>表示 friend 組件之名稱的字串。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsConst">
      <summary>表示修改的型別具有 const 修飾詞。此類別無法被繼承。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>定義屬性，以存取物件所參考的值。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>取得或設定物件所參考的值。</summary>
      <returns>物件所參考的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>標記欄位為 Volatile。此類別無法被繼承。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute">
      <summary>指出 Visual Basic 的方法是否以 Iterator 修飾詞標記。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute" /> 類別的新執行個體。</summary>
      <param name="stateMachineType">基礎狀態機器類型的類型物件，該類型會被用來實作狀態機器方法。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>指定方法實作方式的詳細資料。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，初始化 <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> 類別的新執行個體。</summary>
      <param name="methodImplOptions">
        <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，指定屬性化 (Attributed) 方法的屬性 (Property)。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>取得描述屬性方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</summary>
      <returns>描述屬性方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>定義方法實作方式的詳細資料。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining">
      <summary>此方法應該是內嵌 (可能的話)。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>方法無法被內嵌。內嵌是以方法主體取代方法呼叫的最佳化。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>偵錯可能的程式碼產生問題時，Just-In-Time (JIT) 編譯器或機器碼產生 (請參閱 Ngen.exe) 不會最佳化方法。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>方法簽章正如所宣告的方式匯出。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
      <summary>識別做為參考組件的組件，這個組件包含中繼資料但沒有可執行程式碼。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
      <summary>使用指定的描述，初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> 類別的新執行個體。</summary>
      <param name="description">參考組件的描述。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
      <summary>取得參考組件的描述。</summary>
      <returns>參考組件的描述。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>指定是否使用 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 物件來包裝不是衍生自 <see cref="T:System.Exception" /> 類別的例外狀況。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>取得或設定值，指出是否使用 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 物件來包裝不是衍生自 <see cref="T:System.Exception" /> 類別的例外狀況。</summary>
      <returns>如果不是衍生自 <see cref="T:System.Exception" /> 類別的例外狀況應該包裝在 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 物件中，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>提供支援編譯器的靜態方法和屬性。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack">
      <summary>確保其餘的堆疊空間夠大，足以執行一般的 .NET Framework 功能。</summary>
      <exception cref="T:System.InsufficientExecutionStackException">可用的堆疊空間不足，無法執行平均 .NET Framework 函式。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>做為特定物件的雜湊函式，適合在使用雜湊碼之雜湊演算法及資料結構中使用。</summary>
      <returns>由 <paramref name="o" /> 參數所識別之物件的雜湊碼。</returns>
      <param name="o">要為其擷取雜湊碼的物件。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>對實值型別進行 Box 動作。</summary>
      <returns>如果是值類別，則為 <paramref name="obj" /> Boxed 複本，否則為 <paramref name="obj" /> 本身。</returns>
      <param name="obj">要進行 Box 的實值型別。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>提供從儲存在模組中的資料初始化陣列的快速方式。</summary>
      <param name="array">要初始化的陣列。</param>
      <param name="fldHandle">一種欄位控制代碼，可指定用來初始化陣列的資料位置。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>取得指定字串中資料的位移 (以位元組為單位)。</summary>
      <returns>從 <see cref="T:System.String" /> 物件開始到字串中之第一個字元的位元組位移。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>執行指定類別建構函式 (Constructor) 方法。</summary>
      <param name="type">一種類型控制代碼，可指定要執行的類別建構函式方法。</param>
      <exception cref="T:System.TypeInitializationException">類別初始設定式擲回例外狀況。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.StateMachineAttribute">
      <summary>可讓您判斷方法是否為狀態機器方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.StateMachineAttribute" /> 類別的新執行個體。</summary>
      <param name="stateMachineType">基礎狀態機器型別的型別物件，編譯器產生此型別以實作狀態機器方法。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType">
      <summary>傳回基礎狀態機器型別的型別物件，編譯器產生此型別以實作狀態機器方法。</summary>
      <returns>取得基礎狀態機器型別的型別物件，編譯器產生此型別以實作狀態機器方法。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>儲存值的參考。</summary>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考值的型別。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>初始化新的 StrongBox，用於參考呼叫時可接收值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>使用提供的值來初始化 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 類別的新執行個體。</summary>
      <param name="value">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 將參考的值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>取得或設定 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考的值。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考的值。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>表示 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考的值。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>指定另一個組件中的來源 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" /> 類別的新執行個體。</summary>
      <param name="assemblyFullName">另一個組件中的來源 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFullName" /> 是 null 或空的。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>取得來源型別的組件限定名稱。</summary>
      <returns>來源型別的組件限定名稱。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>指定另一個組件中的目的 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> 類別的新執行個體，並指定目的 <see cref="T:System.Type" />。</summary>
      <param name="destination">另一個組件中的目的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>取得另一個組件中的目的 <see cref="T:System.Type" />。</summary>
      <returns>另一個組件中的目的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>指定某個型別含有可能會溢位的 Unmanaged 陣列。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
      <summary>表示在程式碼中某一點擷取其狀態的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
      <summary>建立表示在程式碼目前作業點上指定之例外狀況的 <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> 物件。</summary>
      <returns>表示在程式碼中目前作業點上指定之例外狀況的物件。</returns>
      <param name="source">例外狀況的狀態已擷取，並用傳回的物件表示。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
      <summary>取得目前執行個體所表示的例外狀況。</summary>
      <returns>目前執行個體所表示的例外狀況。</returns>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
      <summary>在還原擷取例外狀況時所儲存的狀態之後，擲回目前<see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" />物件表示的例外狀況。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>指定應使用哪些封送處理字串的字元組。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>將字串當做多位元組字元字串來封送處理。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>封送處理字串為 Unicode 2 個位元組字元。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>控制對於個別 Managed 型別或成員，或組件中所有型別到 COM 的存取範圍。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>初始化 ComVisibleAttribute 類別的新執行個體。</summary>
      <param name="visibility">若為 COM 可見的型別，為 true，否則為 false。預設值為 true。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>取得值，表示 COM 型別是否為可見。</summary>
      <returns>若為可見的型別，為 true，否則為 false。預設值是 true。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>指出在類別或結構的 Unmanaged 表示中欄位的實際位置。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>使用結構到欄位起始處的位移，初始化 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> 類別的新執行個體。</summary>
      <param name="offset">結構起始處到欄位起始處的位元組位移。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>取得結構起始處到欄位起始處的位移。</summary>
      <returns>取得從結構起始處到欄位起始處的位移。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>在匯出至 Unmanaged 程式碼時控制物件的配置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>執行階段會自動選擇 Unmanaged 記憶體中物件成員的適當配置。使用這個列舉成員定義的物件不可以在 Managed 程式碼以外公開。嘗試這麼做會產生例外狀況。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>Unmanaged 記憶體中每個物件成員的精確位置是被明確地控制（受制於<see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />欄位的設定）。每個成員必須使用 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" />，表示該欄位在型別中的位置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>物件的成員是依序配置的，其順序即是將它們匯出至 Unmanaged 記憶體時所出現的順序。成員是根據 <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> 中所指定的封裝來配置。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>指示資料應從被呼叫端封送處理 (Marshal) 回呼叫端。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.OutAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>讓您控制記憶體中類別或結構之資料欄位的實際配置。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 列舉成員初始化 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 類別的新執行個體。</summary>
      <param name="layoutKind">其中一個列舉值，指定類別或結構的排列方式。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>表示根據預設，類別中的字串資料欄位應該封送處理為 LPWSTR，還是 LPSTR。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>控制記憶體中類別或結構之資料欄位的對齊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>指示結構或類別的絕對大小。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>取得 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值，指定類別或結構的排列方式。</summary>
      <returns>其中一個列舉值，指定類別或結構的排列方式。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
      <summary>辨識編譯特定組件時使用的 .NET Framework 版本。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
      <summary>藉由指定建置組件時使用的 .NET Framework 版本，以初始化 <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" /> 類別的執行個體。</summary>
      <param name="frameworkName">建置組件時使用的 .NET Framework 版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> 為 null。</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
      <summary>取得建置組件時使用之 .NET Framework 版本的顯示名稱。</summary>
      <returns>.NET Framework 版本的顯示名稱。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
      <summary>取得建置特定組件時使用之 .NET Framework 版本的名稱。</summary>
      <returns>建置組件時使用之 .NET Framework 版本的名稱。</returns>
    </member>
    <member name="T:System.Security.AllowPartiallyTrustedCallersAttribute">
      <summary>允許部分信任程式碼呼叫組件。如果沒有這個宣告，則只有完全信任呼叫端才能使用此組件。此類別無法被繼承。</summary>
    </member>
    <member name="M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
      <summary>指定執行重視安全性之作業的程式碼或組件。</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityCriticalAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>當偵測到安全性錯誤時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前例外狀況的例外。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>傳回目前 <see cref="T:System.Security.SecurityException" /> 的表示。</summary>
      <returns>目前 <see cref="T:System.Security.SecurityException" /> 的字串表示。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
      <summary>將型別或成員識別為重視安全性而且可由透明程式碼進行安全的存取。</summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecuritySafeCriticalAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
      <summary>指定組件不可以導致權限的提升。</summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityTransparentAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>例外狀況，是當安全性原則要求程式碼為型別安全 (Type-Safe) 而驗證處理序無法驗證程式碼為型別安全時被擲回。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Security.VerificationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>使用闡明的訊息初始化 <see cref="T:System.Security.VerificationException" /> 類別的新執行個體。</summary>
      <param name="message">指示例外狀況發生原因的訊息。</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.Security.VerificationException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">導致目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>表示可變動的字元字串。此類別無法被繼承。若要瀏覽此類型的.NET Framework 原始碼，請參閱參考來源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>使用指定的容量來初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="capacity">這個執行個體建議的起始大小。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體，將從指定的容量開始並且可以增加至指定的最大值。</summary>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 建議的起始大小。</param>
      <param name="maxCapacity">目前字串可以包含的最大字元數。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> 小於一、<paramref name="capacity" /> 小於零或 <paramref name="capacity" /> 大於 <paramref name="maxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>以指定的字串初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="value">用來初始化執行個體值的字串。如果 <paramref name="value" /> 為 null，新的 <see cref="T:System.Text.StringBuilder" /> 將包含空字串 (即包含 <see cref="F:System.String.Empty" />)。</param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>使用指定的字串和容量，來初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="value">用來初始化執行個體值的字串。如果 <paramref name="value" /> 為 null，新的 <see cref="T:System.Text.StringBuilder" /> 將包含空字串 (即包含 <see cref="F:System.String.Empty" />)。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 建議的起始大小。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>以指定的子字串和容量初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="value">字串，包含用來初始化此執行個體值的子字串。如果 <paramref name="value" /> 為 null，新的 <see cref="T:System.Text.StringBuilder" /> 將包含空字串 (即包含 <see cref="F:System.String.Empty" />)。</param>
      <param name="startIndex">在 <paramref name="value" /> 內子字串開始的位置。</param>
      <param name="length">子字串中的字元數。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 建議的起始大小。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。-或- <paramref name="startIndex" /> 加上 <paramref name="length" /> 不是 <paramref name="value" /> 內的位置。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>將指定的布林 (Boolean) 值之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的布林值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>將指定的 Unicode 字元之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的 Unicode 字元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char*,System.Int32)">
      <summary>將附加開頭指定的位址，這個執行個體的 Unicode 字元的陣列。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。 </returns>
      <param name="value">為字元陣列指標。</param>
      <param name="valueCount">陣列中的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> 小於零。-或-加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。 </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" />為 null 指標。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>將 Unicode 字元其字串表示的指定複本數附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的字元。</param>
      <param name="repeatCount">要附加 <paramref name="value" /> 的次數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> 小於零。-或-加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <exception cref="T:System.OutOfMemoryException">記憶體不足。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>將指定陣列中的 Unicode 字元的字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的字元陣列。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>將 Unicode 字元之指定子陣列的字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">字元陣列。</param>
      <param name="startIndex">
        <paramref name="value" /> 中的起始位置。</param>
      <param name="charCount">要附加的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是 null，而 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不是零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小於零。-或- <paramref name="startIndex" /> 小於零。-或- <paramref name="startIndex" /> + <paramref name="charCount" /> 大於 <paramref name="value" /> 的長度。-或-加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>將指定的小數位數之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>將指定的雙精度浮點數之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>將指定的 16 位元帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>將指定物件的字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>將指定的單精確度浮點數之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>將指定字串的複本附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的字串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>將指定子字串的複本附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">包含要附加之子字串的字串。</param>
      <param name="startIndex">
        <paramref name="value" /> 中子字串的開始位置。</param>
      <param name="count">
        <paramref name="value" /> 中要附加的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是 null，而 <paramref name="startIndex" /> 和 <paramref name="count" /> 不是零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於零-或- <paramref name="startIndex" /> 小於零-或- <paramref name="startIndex" /> + <paramref name="count" /> 大於 <paramref name="value" /> 的長度。-或-加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。使用指定的格式提供者，將每個格式項目取代為單一引數的字串表示。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。附加作業之後，此執行個體包含後置字元為一份的作業之前就存在的任何資料<paramref name="format" />在哪一種任何格式規格已取代的字串表示法<paramref name="arg0" />。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串 (請參閱＜備註＞)。</param>
      <param name="arg0">要格式化的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。-或-格式項目的索引小於 0 (零)，或者大於或等於一 (1)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開字串的長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。使用指定的格式提供者，將每個格式項目取代為兩個引數中的其中一個字串表示。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。在附加作業之後，此執行個體會包含此作業之前已存在的所有資料，並後置有 <paramref name="format" /> 的複本，其中的任何格式規格都會由對應物件引數的字串表示所取代。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串 (請參閱＜備註＞)。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。-或-格式項目的索引小於 0 (零)，或大於或等於 2 (兩個)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開字串的長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。使用指定的格式提供者，將每個格式項目取代為三個引數中的其中一個字串表示。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。在附加作業之後，此執行個體會包含此作業之前已存在的所有資料，並後置有 <paramref name="format" /> 的複本，其中的任何格式規格都會由對應物件引數的字串表示所取代。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串 (請參閱＜備註＞)。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <param name="arg2">要格式化的第三個物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。-或-格式項目的索引小於 0 (零)，或大於或等於 3 (三個)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開字串的長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。每一個格式項目會由參數陣列 (此參數陣列使用所指定的格式提供者) 中對應之物件引數的字串表示所取代。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。在附加作業之後，此執行個體會包含此作業之前已存在的所有資料，並後置有 <paramref name="format" /> 的複本，其中的任何格式規格都會由對應物件引數的字串表示所取代。</returns>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串 (請參閱＜備註＞)。</param>
      <param name="args">要格式化的物件陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。-或-格式項目的索引小於 0 (零)，或者大於或等於 <paramref name="args" /> 陣列的長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開字串的長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。每一個格式項目都會取代為單一引數的字串表示。</summary>
      <returns>附加 <paramref name="format" /> 的執行個體參考。<paramref name="format" /> 中的每一個格式項目都會取代為 <paramref name="arg0" /> 的字串表示。</returns>
      <param name="format">複合格式字串 (請參閱＜備註＞)。</param>
      <param name="arg0">要格式化的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。-或-格式項目的索引小於 0 (零) 或大於或等於 1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開字串的長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。每一個格式項目都會取代為兩個引數中任一個的字串表示。</summary>
      <returns>附加 <paramref name="format" /> 的執行個體參考。<paramref name="format" /> 中的每一個格式項目會由對應之物件引數的字串表示所取代。</returns>
      <param name="format">複合格式字串 (請參閱＜備註＞)。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。-或-格式項目的索引小於 0 (零) 或大於或等於 2。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開字串的長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。每一個格式項目都會取代為三個引數中任一個的字串表示。</summary>
      <returns>附加 <paramref name="format" /> 的執行個體參考。<paramref name="format" /> 中的每一個格式項目會由對應之物件引數的字串表示所取代。</returns>
      <param name="format">複合格式字串 (請參閱＜備註＞)。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <param name="arg2">要格式化的第三個物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。-或-格式項目的索引小於 0 (零) 或大於或等於 3。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開字串的長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。每一個格式項目會由參數陣列中對應之引數的字串表示所取代。</summary>
      <returns>附加 <paramref name="format" /> 的執行個體參考。<paramref name="format" /> 中的每一個格式項目會由對應之物件引數的字串表示所取代。</returns>
      <param name="format">複合格式字串 (請參閱＜備註＞)。</param>
      <param name="args">要格式化的物件陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 是 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。-或-格式項目的索引小於 0 (零)，或者大於或等於 <paramref name="args" /> 陣列的長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開字串的長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>將預設行結束字元附加至目前 <see cref="T:System.Text.StringBuilder" /> 物件的尾端。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>將後面接著預設行結束字元的指定字串複本附加至目前的 <see cref="T:System.Text.StringBuilder" /> 物件結尾。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <param name="value">要附加的字串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>取得或設定由目前執行個體配置的記憶體可以包含的最大字元數。</summary>
      <returns>目前執行個體配置的記憶體可以包含的最大字元數。其值的範圍可以從<see cref="P:System.Text.StringBuilder.Length" />至<see cref="P:System.Text.StringBuilder.MaxCapacity" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業指定的值小於這個執行個體的目前長度。-或-設定作業指定的值大於最大容量。 </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>取得或設定這個執行個體中指定字元位置的字元。</summary>
      <returns>位置 <paramref name="index" /> 上的 Unicode 字元。</returns>
      <param name="index">字元的位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">設定字元時，<paramref name="index" /> 在這個執行個體的界限外。 </exception>
      <exception cref="T:System.IndexOutOfRangeException">取得字元時，<paramref name="index" /> 在這個執行個體的界限外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>從目前的 <see cref="T:System.Text.StringBuilder" /> 執行個體移除所有字元。</summary>
      <returns>
        <see cref="P:System.Text.StringBuilder.Length" /> 為 0 (零) 的物件。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>將此執行個體指定區段中的字元複製到目的端 <see cref="T:System.Char" /> 陣列的指定區段。</summary>
      <param name="sourceIndex">此執行個體中的開始位置，為字元的複製來源。索引以零為起始。</param>
      <param name="destination">將複製其中字元的陣列。</param>
      <param name="destinationIndex">
        <paramref name="destination" /> 中開始複製字元的位置。索引以零為起始。</param>
      <param name="count">要複製的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="sourceIndex" /> 大於這個執行個體的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> + <paramref name="count" /> 大於這個執行個體的長度。-或-<paramref name="destinationIndex" /> + <paramref name="count" /> 大於 <paramref name="destination" /> 的長度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>請確定這個 <see cref="T:System.Text.StringBuilder" /> 其執行個體的容量至少是某一指定的值。</summary>
      <returns>這個執行個體的新容量。</returns>
      <param name="capacity">要確定的最大容量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。-或-加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <returns>如果這個執行個體和 <paramref name="sb" /> 具有相同的字串、<see cref="P:System.Text.StringBuilder.Capacity" /> 和 <see cref="P:System.Text.StringBuilder.MaxCapacity" /> 值，則為 true，否則是 false。</returns>
      <param name="sb">與這個執行個體相比較的物件，或 null。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>在指定的字元位置上將 Boolean 值的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>在指定的字元位置上將指定的 8 位元不帶正負號的整數之字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>在指定的字元位置上將指定的 Unicode 字元之字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。-或-加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。 </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>在指定的字元位置上將指定的 Unicode 字元陣列之字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的字元陣列。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。-或-加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>在指定的字元位置上將 Unicode 字元之指定子陣列的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">字元陣列。</param>
      <param name="startIndex">
        <paramref name="value" /> 內的起始位置。</param>
      <param name="charCount">要插入的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是 null，而 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不是零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />、<paramref name="startIndex" /> 或 <paramref name="charCount" /> 小於零。-或- <paramref name="index" /> 大於這個執行個體的長度。-或- <paramref name="startIndex" /> 加上 <paramref name="charCount" /> 不是 <paramref name="value" /> 內的位置。-或-加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>在指定的字元位置上將小數位數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>在指定的字元位置上將雙精度浮點數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>在指定的字元位置，將所指定帶正負號之 16 位元整數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>在指定的字元位置，將所指定帶正負號之 32 位元整數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>在指定的字元位置上將指定的 64 位元帶正負號的整數之字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>在指定的字元位置上將物件的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的物件或 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>在指定的字元位置，將所指定帶正負號之 8 位元整數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>在指定的字元位置上將單精確度浮點數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>在指定的字元位置上將字串插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的字串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體目前的長度。-或-此 <see cref="T:System.Text.StringBuilder" /> 物件的目前長度加上 <paramref name="value" /> 的長度超過了 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>在指定的字元位置上將指定字串的一或多個複本插入這個執行個體。</summary>
      <returns>插入作業完成後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的字串。</param>
      <param name="count">要插入 <paramref name="value" /> 的次數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體目前的長度。-或- <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.OutOfMemoryException">此 <see cref="T:System.Text.StringBuilder" /> 物件的目前長度加上 <paramref name="value" /> 乘以 <paramref name="count" /> 的長度超過了 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>在指定的字元位置，將所指定不帶正負號的 16 位元整數之字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>在指定的字元位置，將所指定不帶正負號的 32 位元整數之字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>在指定的字元位置，將所指定不帶正負號的 64 位元整數之字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>取得或設定目前 <see cref="T:System.Text.StringBuilder" /> 物件的長度。</summary>
      <returns>這個執行個體的長度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業指定的值小於零或大於 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>取得這個執行個體的最大容量。</summary>
      <returns>這個執行個體可以容納的最大字元數。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>從這個執行個體移除指定的字元範圍。</summary>
      <returns>移除作業完成後，這個執行個體的參考。</returns>
      <param name="startIndex">這個執行個體中開始移除且以零起始的位置。</param>
      <param name="length">要移除的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">如果 <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零，或 <paramref name="startIndex" /> + <paramref name="length" /> 大於這個執行個體的長度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>以另一個指定的字元，取代這個執行個體中指定字元的所有項目。</summary>
      <returns>
        <paramref name="oldChar" /> 已由 <paramref name="newChar" /> 取代的這個執行個體參考。</returns>
      <param name="oldChar">要取代的字元。</param>
      <param name="newChar">取代 <paramref name="oldChar" /> 的字元。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>將這個執行個體的子字串內所有出現的指定字元，取代為另一個指定的字元。</summary>
      <returns>參考這個執行個體，但 <paramref name="oldChar" /> 換成 <paramref name="newChar" />，範圍是 <paramref name="startIndex" /> 到 <paramref name="startIndex" /> + <paramref name="count" /> -1。</returns>
      <param name="oldChar">要取代的字元。</param>
      <param name="newChar">取代 <paramref name="oldChar" /> 的字元。</param>
      <param name="startIndex">這個執行個體中子字串開始的位置。</param>
      <param name="count">子字串的長度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 加上 <paramref name="count" /> 大於這個執行個體值的長度。-或- <paramref name="startIndex" /> 或 <paramref name="count" /> 小於零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>將這個執行個體中所有出現的指定字串取代為另一個指定字串。</summary>
      <returns>這個執行個體的參考，但 <paramref name="oldValue" /> 的所有執行個體遭取代成 <paramref name="newValue" />。</returns>
      <param name="oldValue">要取代的字串。</param>
      <param name="newValue">取代 <paramref name="oldValue" /> 的字串或 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>將這個執行個體的子字串內所有出現的指定字串，取代為另一個指定的字串。</summary>
      <returns>
        <paramref name="oldValue" /> 的所有執行個體從 <paramref name="startIndex" /> 至 <paramref name="startIndex" /> + <paramref name="count" /> - 1 範圍已由 <paramref name="newValue" /> 取代的這個執行個體的參考。</returns>
      <param name="oldValue">要取代的字串。</param>
      <param name="newValue">取代 <paramref name="oldValue" /> 的字串或 null。</param>
      <param name="startIndex">這個執行個體中子字串開始的位置。</param>
      <param name="count">子字串的長度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 的長度為零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小於零。-或- <paramref name="startIndex" /> 加上 <paramref name="count" /> 表示不在這個執行個體中的字元位置。-或-加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>將這個執行個體的值轉換為 <see cref="T:System.String" />。</summary>
      <returns>其值和這個執行個體相同的字串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>將這個執行個體的子字串值轉換為 <see cref="T:System.String" />。</summary>
      <returns>字串，此字串值與這個執行個體的指定子字串值相同。</returns>
      <param name="startIndex">這個執行個體中的子字串開始位置。</param>
      <param name="length">子字串的長度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="length" /> 的總和大於目前執行個體的長度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>指定 <see cref="T:System.Lazy`1" /> 執行個體如何同步處理多個執行緒進行的存取。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>使用鎖定來確保只有單一執行緒能夠以安全執行緒方式初始化 <see cref="T:System.Lazy`1" /> 執行個體。如果初始設定方法 (如果沒有初始設定方法則為預設建構函式) 在內部使用鎖定，可能會發生死結。如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式指定初始化方法 (<paramref name="valueFactory" /> 參數)，而且當您初次呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時，該初始化方法擲回例外狀況 (或無法處理例外狀況)，則會快取此例外狀況，並在後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時再次擲回此例外狀況。如果您使用未指定初始設定方法的 <see cref="T:System.Lazy`1" /> 建構函式，則不會快取 <paramref name="T" /> 的預設建構函式擲回的例外狀況。在此情況下，後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性可能會成功初始化 <see cref="T:System.Lazy`1" /> 執行個體。如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則會擲回 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>
        <see cref="T:System.Lazy`1" /> 執行個體不具備執行緒安全：如果從多個執行緒存取此執行個體，則此執行個體會展現非預料的行為。只有在高度重視效能且絕對不會從多個執行緒初始化 <see cref="T:System.Lazy`1" /> 執行個體時，才能使用此模式。如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式指定初始化方法 (<paramref name="valueFactory" /> 參數)，而且當您初次呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時，該初始化方法擲回例外狀況 (或無法處理例外狀況)，則會快取此例外狀況，並在後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時再次擲回此例外狀況。如果您使用未指定初始設定方法的 <see cref="T:System.Lazy`1" /> 建構函式，則不會快取 <paramref name="T" /> 的預設建構函式擲回的例外狀況。在此情況下，後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性可能會成功初始化 <see cref="T:System.Lazy`1" /> 執行個體。如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則會擲回 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>當多個執行緒同時嘗試初始化 <see cref="T:System.Lazy`1" /> 執行個體時，允許所有執行緒執行初始設定方法 (如果沒有初始設定方法則為預設建構函式)。第一個完成初始設定的執行緒會設定 <see cref="T:System.Lazy`1" /> 執行個體的值。該值會傳回給任何其他同時執行初始設定方法的執行緒 (除非初始設定方法在這些執行緒上擲回例外狀況)。由這其他執行緒所建立的 <paramref name="T" /> 執行個體都會遭到捨棄。如果初始化方法在任何執行緒上擲回例外狀況，該例外狀況會傳播至該執行緒上的 <see cref="P:System.Lazy`1.Value" /> 屬性之外。例外狀況不會受到快取。<see cref="P:System.Lazy`1.IsValueCreated" /> 屬性的值會保持為 false，且後續無論是由擲回例外狀況所在的執行緒或是其他執行緒呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性，都會再次執行初始設定方法。如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則不會擲回例外狀況。</summary>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>包含會指定無限逾時間隔的常數。此類別無法被繼承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>用來為接受 <see cref="T:System.Int32" /> 參數之執行緒方法指定無限等候期間的常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Threading.Timeout.InfiniteTimeSpan">
      <summary>用來為接受 <see cref="T:System.TimeSpan" /> 參數之方法指定無限等候期間的常數。</summary>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>將等候共用資源獨佔存取權限的特定作業系統物件封裝起來。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>初始化 <see cref="T:System.Threading.WaitHandle" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>將 <see cref="T:System.Threading.WaitHandle" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>當在衍生類別中覆寫時，釋放 <see cref="T:System.Threading.WaitHandle" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="explicitDisposing">true 表示釋放 Managed 和 Unmanaged 資源，false 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>代表無效的原生作業系統控制代碼。此欄位為唯讀。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>等候指定陣列中的所有項目都收到信號。</summary>
      <returns>當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 true；否則絕不會傳回這個方法。</returns>
      <param name="waitHandles">WaitHandle 陣列，包含目前執行個體將等候的物件。這個陣列不能包含相同物件的多個參考。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array are null. -or-<paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.Int32" /> 值來指定時間間隔。</summary>
      <returns>當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 true；否則為 false。</returns>
      <param name="waitHandles">WaitHandle 陣列，包含目前執行個體將等候的物件。這個陣列無法包含相同物件 (複本) 的多個參考。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or- One or more of the objects in the <paramref name="waitHandles" /> array is null. -or-<paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 值來指定時間間隔。</summary>
      <returns>當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 true；否則為 false。</returns>
      <param name="waitHandles">WaitHandle 陣列，包含目前執行個體將等候的物件。這個陣列不能包含相同物件的多個參考。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表要等候的毫秒數；或是 <see cref="T:System.TimeSpan" />，代表永遠等候的 -1 毫秒。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null. -or- One or more of the objects in the <paramref name="waitHandles" /> array is null. -or-<paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>等候指定陣列中有任何項目收到信號。</summary>
      <returns>滿足等候條件之物件的陣列索引。</returns>
      <param name="waitHandles">WaitHandle 陣列，包含目前執行個體將等候的物件。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>等候指定之陣列中有任何項目收到信號，使用 32 位元帶正負號的整數以指定時間間隔。</summary>
      <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="millisecondsTimeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <param name="waitHandles">WaitHandle 陣列，包含目前執行個體將等候的物件。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔。</summary>
      <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="timeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <param name="waitHandles">WaitHandle 陣列，包含目前執行個體將等候的物件。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>封鎖目前的執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到訊號為止。</summary>
      <returns>如果目前的執行個體有收到訊號，則為 true。如果目前的執行個體一直沒有收到訊號，<see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> 就一定不會傳回。</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>封鎖目前執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到信號為止，使用 32 位元帶正負號的整數來指定時間間隔 (以毫秒為單位)。</summary>
      <returns>如果目前的執行個體收到訊號，則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>封鎖目前執行緒，直到目前執行個體收到信號為止，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔。</summary>
      <returns>如果目前的執行個體收到訊號，則為 true，否則為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.-or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>表示 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 作業在發出任何等候控制代碼信號之前便已逾時。這個欄位是常數。</summary>
      <filterpriority>1</filterpriority>
    </member>
  </members>
</doc>