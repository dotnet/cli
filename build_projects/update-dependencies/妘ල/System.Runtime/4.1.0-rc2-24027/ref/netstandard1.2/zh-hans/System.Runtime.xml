<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime</name>
  </assembly>
  <members>
    <member name="T:System.Action">
      <summary>封装一个方法，该方法不具有参数并且不返回值。</summary>
    </member>
    <member name="M:System.Action.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action.BeginInvoke(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action.Invoke"></member>
    <member name="T:System.Action`1">
      <summary>封装一个方法，该方法只有一个参数并且不返回值。若要浏览此类型的 .NET Framework 源代码，请参阅引用源。</summary>
      <typeparam name="T">此委托封装的方法的参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Action`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`1.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`1.Invoke(`0)"></member>
    <member name="T:System.Action`10">
      <summary>封装一个方法，该方法具有 10 个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`10.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`10.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`10.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`10.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)"></member>
    <member name="T:System.Action`11">
      <summary>封装一个方法，该方法具有 11 个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`11.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`11.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`11.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`11.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)"></member>
    <member name="T:System.Action`12">
      <summary>封装一个方法，该方法具有 12 个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`12.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`12.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`12.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`12.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)"></member>
    <member name="T:System.Action`13">
      <summary>封装一个方法，该方法具有 13 个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`13.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`13.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`13.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`13.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)"></member>
    <member name="T:System.Action`14">
      <summary>封装一个方法，该方法具有 14 个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`14.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`14.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`14.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`14.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)"></member>
    <member name="T:System.Action`15">
      <summary>封装一个方法，该方法具有 15 个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`15.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`15.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`15.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`15.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)"></member>
    <member name="T:System.Action`16">
      <summary>封装一个方法，该方法具有 16 个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`16.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`16.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`16.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`16.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)"></member>
    <member name="T:System.Action`2">
      <summary>封装一个方法，该方法具有两个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`2.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`2.BeginInvoke(`0,`1,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`2.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`2.Invoke(`0,`1)"></member>
    <member name="T:System.Action`3">
      <summary>封装一个方法，该方法具有三个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`3.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`3.BeginInvoke(`0,`1,`2,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`3.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`3.Invoke(`0,`1,`2)"></member>
    <member name="T:System.Action`4">
      <summary>封装一个方法，该方法具有四个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`4.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`4.BeginInvoke(`0,`1,`2,`3,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`4.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`4.Invoke(`0,`1,`2,`3)"></member>
    <member name="T:System.Action`5">
      <summary>封装一个方法，该方法具有五个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`5.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`5.BeginInvoke(`0,`1,`2,`3,`4,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`5.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`5.Invoke(`0,`1,`2,`3,`4)"></member>
    <member name="T:System.Action`6">
      <summary>封装一个方法，该方法具有六个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`6.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`6.BeginInvoke(`0,`1,`2,`3,`4,`5,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`6.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`6.Invoke(`0,`1,`2,`3,`4,`5)"></member>
    <member name="T:System.Action`7">
      <summary>封装一个方法，该方法具有七个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`7.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`7.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`7.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`7.Invoke(`0,`1,`2,`3,`4,`5,`6)"></member>
    <member name="T:System.Action`8">
      <summary>封装一个方法，该方法具有八个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`8.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`8.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`8.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`8.Invoke(`0,`1,`2,`3,`4,`5,`6,`7)"></member>
    <member name="T:System.Action`9">
      <summary>封装一个方法，该方法具有九个参数并且不返回值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Action`9.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Action`9.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Action`9.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Action`9.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8)"></member>
    <member name="T:System.Activator">
      <summary>包含特定的方法，用以在本地或从远程创建对象类型，或获取对现有远程对象的引用。此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>使用无参数构造函数，创建指定泛型类型参数所指定类型的实例。</summary>
      <returns>对新创建对象的引用。</returns>
      <typeparam name="T">要创建的类型。</typeparam>
      <exception cref="T:System.MissingMethodException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.MissingMemberException" />, 、 相反。为 <paramref name="T" /> 指定的类型没有无参数构造函数。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>使用指定类型的默认构造函数来创建该类型的实例。</summary>
      <returns>对新创建对象的引用。</returns>
      <param name="type">要创建的对象的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 RuntimeType。- 或 -<paramref name="type" /> 是一个开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性返回 true）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。- 或 - 不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型或者由这些类型组成的数组。- 或 -包含 <paramref name="type" /> 的程序集是动态程序集，使用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">被调用的构造函数引发异常。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.MemberAccessException" />, 、 相反。调用方没有调用此构造函数的权限。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 类型不是通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获得的。</exception>
      <exception cref="T:System.MissingMethodException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.MissingMemberException" />, 、 相反。找不到匹配的公共构造函数。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或被标识的类未注册。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的类型。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
      <returns>对新创建对象的引用。</returns>
      <param name="type">要创建的对象的类型。</param>
      <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。如果 <paramref name="args" /> 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 RuntimeType。- 或 -<paramref name="type" /> 是一个开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性返回 true）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。- 或 - 不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型或者由这些类型组成的数组。- 或 -包含 <paramref name="type" /> 的程序集是动态程序集，使用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建。- 或 -与 <paramref name="args" /> 匹配程度最高的构造函数具有 varargs 参数。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">被调用的构造函数引发异常。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.MemberAccessException" />, 、 相反。调用方没有调用此构造函数的权限。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者用后期绑定机制调用了该成员。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 类型不是通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获得的。</exception>
      <exception cref="T:System.MissingMethodException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.MissingMemberException" />, 、 相反。找不到匹配的公共构造函数。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或被标识的类未注册。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的类型。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, RemotingConfiguration" />
      </PermissionSet>
    </member>
    <member name="T:System.ArgumentException">
      <summary>当向方法提供的参数之一无效时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="paramName">导致当前异常的参数的名称。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定错误消息、参数名和对内部异常（为该异常根源）的引用来初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="paramName">导致当前异常的参数的名称。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>获取错误消息和参数名；如果未设置参数名，则仅获取错误消息。</summary>
      <returns>描述异常的详细信息的文本字符串。此属性的值采用以下两种形式之一：条件值<paramref name="paramName" /> 是空引用（在 Visual Basic 中为 Nothing）或长度为零。传递到构造函数的 <paramref name="message" /> 字符串。<paramref name="paramName" /> 不是空引用（在 Visual Basic 中为 Nothing）并且长度大于零。附有无效参数名的 <paramref name="message" /> 字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>获取导致该异常的参数的名称。</summary>
      <returns>参数名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>当将空引用（在 Visual Basic 中为 Nothing）传递给不接受它作为有效参数的方法时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentNullException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>使用导致此异常的参数的名称初始化 <see cref="T:System.ArgumentNullException" /> 类的新实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和引发此异常的异常初始化 <see cref="T:System.ArgumentNullException" /> 类的新实例。</summary>
      <param name="message">说明发生此异常的原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。 </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentNullException" /> 类的实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>当参数值超出调用的方法所定义的允许取值范围时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>使用导致此异常的参数的名称初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="paramName">导致此异常的参数的名称。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和引发此异常的异常初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="message">说明发生此异常的原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>使用指定的错误消息、参数名和参数值来初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
      <param name="actualValue">导致此异常的参数值。</param>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>获取导致此异常的参数值。</summary>
      <returns>Object，它包含导致当前 <see cref="T:System.Exception" /> 的参数的值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>获取错误消息和无效参数值的字符串表示形式；或者，如果该参数值为 null，则仅获取错误消息。</summary>
      <returns>此异常的文本消息。此属性的值采用以下两种形式之一。条件值<paramref name="actualValue" /> 为 null。传递到构造函数的 <paramref name="message" /> 字符串。<paramref name="actualValue" /> 不为null。附有无效参数值字符串表示形式的 <paramref name="message" /> 字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>因算术运算、类型转换或转换操作中的错误而引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>初始化 <see cref="T:System.ArithmeticException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.ArithmeticException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArithmeticException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.Array">
      <summary>提供一些方法，用于创建、处理、搜索数组并对数组进行排序，从而充当公共语言运行时中所有数组的基类。若要浏览此类型的.NET Framework 源代码，请参阅参考源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>使用由数组中每个元素和指定值实现的 <see cref="T:System.IComparable" /> 接口，在一维排序数组的某个范围中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的已排序一维 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。- 或 -<paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 没有实现 <see cref="T:System.IComparable" /> 接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>使用指定 <see cref="T:System.Collections.IComparer" /> 接口，在一维排序数组的某个元素范围中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的已排序一维 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。- 或 - 若为 null，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。- 或 -<paramref name="comparer" /> 是 null，而 <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，<paramref name="value" /> 没有实现 <see cref="T:System.IComparable" /> 接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>使用由数组中每个元素和指定对象实现的 <see cref="T:System.IComparable" /> 接口，在整个一维排序数组中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的已排序一维 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 没有实现 <see cref="T:System.IComparable" /> 接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>使用指定 <see cref="T:System.Collections.IComparer" /> 接口，在整个一维排序数组中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的已排序一维 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。- 或 - 若为 null，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 是 null，而 <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，<paramref name="value" /> 没有实现 <see cref="T:System.IComparable" /> 接口，并且搜索时遇到没有实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>使用由 <see cref="T:System.Array" /> 中每个元素和指定值实现的 <see cref="T:System.IComparable`1" /> 泛型接口，在一维排序数组的某个范围中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。- 或 -<paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> 未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，在一维排序数组的某个元素范围中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。- 或 - 若为 null，则使用每个元素的 <see cref="T:System.IComparable`1" /> 实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。- 或 -<paramref name="comparer" /> 是 null，而 <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，且 <paramref name="T" /> 未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>使用由 <see cref="T:System.Array" /> 中每个元素和指定对象实现的 <see cref="T:System.IComparable`1" /> 泛型接口，在整个一维排序数组中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> 未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，在整个一维排序数组中搜索值。</summary>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则为一个负数，该负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加 1）的按位求补。</returns>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。- 或 - 若为 null，则使用每个元素的 <see cref="T:System.IComparable`1" /> 实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 是 null，而 <paramref name="value" /> 是不与 <paramref name="array" /> 的元素兼容的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，且 <paramref name="T" /> 未实现 <see cref="T:System.IComparable`1" /> 泛型接口</exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>将数组中的某个范围的元素设置为每个元素类型的默认值。</summary>
      <param name="array">需要清除其元素的数组。</param>
      <param name="index">要清除的一系列元素的起始索引。</param>
      <param name="length">要清除的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。- 或 -<paramref name="length" /> 小于零。- 或 -<paramref name="index" /> 与 <paramref name="length" /> 之和大于 <paramref name="array" /> 的大小。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Clone">
      <summary>创建 <see cref="T:System.Array" /> 的浅表副本。</summary>
      <returns>
        <see cref="T:System.Array" /> 的浅表副本。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>从指定的源索引开始，复制 <see cref="T:System.Array" /> 中的一系列元素，将它们粘贴到另一 <see cref="T:System.Array" /> 中（从指定的目标索引开始）。保证在复制未成功完成的情况下撤消所有更改。</summary>
      <param name="sourceArray">
        <see cref="T:System.Array" />，它包含要复制的数据。</param>
      <param name="sourceIndex">一个 32 位整数，它表示 <paramref name="sourceArray" /> 中复制开始处的索引。</param>
      <param name="destinationArray">
        <see cref="T:System.Array" />，它接收数据。</param>
      <param name="destinationIndex">一个 32 位整数，它表示 <paramref name="destinationArray" /> 中存储开始处的索引。</param>
      <param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 为 null。- 或 -<paramref name="destinationArray" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的秩不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 类型不同于并且不是从 <paramref name="destinationArray" /> 类型派生的。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中的至少一个元素无法强制转换为 <paramref name="destinationArray" /> 类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 小于 <paramref name="sourceArray" /> 的第一维的下限。- 或 -<paramref name="destinationIndex" /> 小于 <paramref name="destinationArray" /> 的第一维的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大于从 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 末尾的元素数。- 或 -<paramref name="length" /> 大于从 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 末尾的元素数。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>从第一个元素开始复制 <see cref="T:System.Array" /> 中的一系列元素，将它们粘贴到另一 <see cref="T:System.Array" /> 中（从第一个元素开始）。长度指定为 32 位整数。</summary>
      <param name="sourceArray">
        <see cref="T:System.Array" />，它包含要复制的数据。</param>
      <param name="destinationArray">
        <see cref="T:System.Array" />，它接收数据。</param>
      <param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 为 null。- 或 -<paramref name="destinationArray" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的秩不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 是不兼容的类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中的至少一个元素无法强制转换为 <paramref name="destinationArray" /> 类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大于 <paramref name="sourceArray" /> 中的元素数。- 或 -<paramref name="length" /> 大于 <paramref name="destinationArray" /> 中的元素数。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>从指定的源索引开始，复制 <see cref="T:System.Array" /> 中的一系列元素，将它们粘贴到另一 <see cref="T:System.Array" /> 中（从指定的目标索引开始）。长度和索引指定为 32 位整数。</summary>
      <param name="sourceArray">
        <see cref="T:System.Array" />，它包含要复制的数据。</param>
      <param name="sourceIndex">一个 32 位整数，它表示 <paramref name="sourceArray" /> 中复制开始处的索引。</param>
      <param name="destinationArray">
        <see cref="T:System.Array" />，它接收数据。</param>
      <param name="destinationIndex">一个 32 位整数，它表示 <paramref name="destinationArray" /> 中存储开始处的索引。</param>
      <param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 为 null。- 或 -<paramref name="destinationArray" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的秩不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 是不兼容的类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中的至少一个元素无法强制转换为 <paramref name="destinationArray" /> 类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 小于 <paramref name="sourceArray" /> 的第一维的下限。- 或 -<paramref name="destinationIndex" /> 小于 <paramref name="destinationArray" /> 的第一维的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大于从 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 末尾的元素数。- 或 -<paramref name="length" /> 大于从 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 末尾的元素数。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>从指定的目标数组索引处开始，将当前一维数组的所有元素复制到指定的一维数组中。索引指定为 32 位整数。</summary>
      <param name="array">一维数组，它是从当前数组复制的元素的目标。</param>
      <param name="index">一个 32 位整数，它表示 <paramref name="array" /> 中复制开始处的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -源数组段中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾处的可用空间。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">源 <see cref="T:System.Array" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
      <exception cref="T:System.RankException">源数组是多维的。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Array" /> 中至少有一个元素无法强制转换为目标 <paramref name="array" /> 的类型。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>创建使用从零开始的索引、具有指定 <see cref="T:System.Type" /> 和长度的一维 <see cref="T:System.Array" />。</summary>
      <returns>使用从零开始的索引、具有指定 <see cref="T:System.Type" /> 和指定长度的新的一维 <see cref="T:System.Array" />。</returns>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="length">要创建的 <see cref="T:System.Array" /> 的大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。例如，不支持 <see cref="T:System.Void" />。- 或 -<paramref name="elementType" /> 是一个开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>创建使用从零开始的索引、具有指定 <see cref="T:System.Type" /> 和维长的多维 <see cref="T:System.Array" />。维的长度在一个 32 位整数数组中指定。</summary>
      <returns>使用从零开始的索引、具有指定 <see cref="T:System.Type" /> 的新的多维 <see cref="T:System.Array" />，其每个维度都为指定的长度。</returns>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">一个 32 位整数数组，它表示要创建的 <see cref="T:System.Array" /> 中每个维的大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 null。- 或 -<paramref name="lengths" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。- 或 -<paramref name="lengths" /> 数组包含的元素少于一个。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。例如，不支持 <see cref="T:System.Void" />。- 或 -<paramref name="elementType" /> 是一个开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中的任何值都小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>创建具有指定下限、指定 <see cref="T:System.Type" /> 和维长的多维 <see cref="T:System.Array" />。</summary>
      <returns>新的指定 <see cref="T:System.Type" /> 的多维 <see cref="T:System.Array" />，每个维度都有指定的长度和下限。</returns>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">一维数组，它包含要创建的 <see cref="T:System.Array" /> 的每个维度的大小。</param>
      <param name="lowerBounds">一维数组，它包含要创建的 <see cref="T:System.Array" /> 的每个维度的下限（起始索引）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 null。- 或 -<paramref name="lengths" /> 为 null。- 或 -<paramref name="lowerBounds" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。- 或 -<paramref name="lengths" /> 数组包含的元素少于一个。- 或 -<paramref name="lengths" /> 和 <paramref name="lowerBounds" /> 数组包含的元素数不同。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。例如，不支持 <see cref="T:System.Void" />。- 或 -<paramref name="elementType" /> 是一个开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中的任何值都小于零。- 或 -<paramref name="lowerBounds" /> 中的任意一个值都很大，因此，维的下限和长度的和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Empty``1">
      <summary>返回一个空数组。</summary>
      <returns>返回一个空<see cref="T:System.Array" />。</returns>
      <typeparam name="T">数组元素的类型。</typeparam>
    </member>
    <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
      <summary>确定指定数组包含的元素是否与指定谓词定义的条件匹配。</summary>
      <returns>如果 <paramref name="array" /> 包含一个或多个元素与指定谓词定义的条件匹配，则为 true；否则为 false。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中的第一个匹配元素。</summary>
      <returns>如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
      <param name="array">要搜索的从零开始的一维数组。</param>
      <param name="match">用于定义要搜索的元素的条件的谓词。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
      <summary>检索与指定谓词定义的条件匹配的所有元素。</summary>
      <returns>如果找到一个其中所有元素均与指定谓词定义的条件匹配的 <see cref="T:System.Array" />，则为该数组；否则为一个空 <see cref="T:System.Array" />。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的一个元素，并返回 <see cref="T:System.Array" /> 中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。- 或 -<paramref name="count" /> 小于零。- 或 -<paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Array" /> 中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中第一个匹配元素的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中的最后一个匹配元素。</summary>
      <returns>如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Array" /> 中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。- 或 -<paramref name="count" /> 小于零。- 或 -<paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜索与由指定谓词定义的条件相匹配的元素，并返回 <see cref="T:System.Array" /> 中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="match" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中最后一个匹配元素的从零开始的索引。</summary>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>返回 <see cref="T:System.Array" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Array" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>获取一个 32 位整数，该整数表示 <see cref="T:System.Array" /> 的指定维中的元素数。</summary>
      <returns>一个 32 位整数，它表示指定维中的元素数。</returns>
      <param name="dimension">
        <see cref="T:System.Array" /> 的从零开始的维度，其长度需要确定。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小于零。- 或 -<paramref name="dimension" /> 等于或大于 <see cref="P:System.Array.Rank" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>获取数组中指定维度第一个元素的索引。</summary>
      <returns>数组中指定维度第一个元素的索引。</returns>
      <param name="dimension">数组的从零开始的维度，其起始索引需要确定。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小于零。- 或 -<paramref name="dimension" /> 等于或大于 <see cref="P:System.Array.Rank" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>获取数组中指定维度最后一个元素的索引。</summary>
      <returns>数组中指定维度最后一个元素的索引，或 -1（如果指定维度为空）。 </returns>
      <param name="dimension">数组的从零开始的维度，其上限需要确定。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小于零。- 或 -<paramref name="dimension" /> 等于或大于 <see cref="P:System.Array.Rank" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>获取一维 <see cref="T:System.Array" /> 中指定位置的值。索引指定为 32 位整数。</summary>
      <returns>一维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <param name="index">一个 32 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有一维。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 超出当前 <see cref="T:System.Array" /> 的有效索引的范围。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>获取多维 <see cref="T:System.Array" /> 中指定位置的值。索引指定为一个 32 位整数数组。</summary>
      <returns>多维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <param name="indices">32 位整数的一维数组，它表示用于指定要获取的 <see cref="T:System.Array" /> 元素的位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">当前 <see cref="T:System.Array" /> 中的维数不等于 <paramref name="indices" /> 中的元素数。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任何元素都超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>在一个一维数组中搜索指定对象，并返回其首个匹配项的索引。</summary>
      <returns>第一个匹配项的索引<paramref name="value" />中<paramref name="array" />，如果找到，则否则的下限减 1 的数组。</returns>
      <param name="array">要搜索的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>在一个一维数组的一系列元素中搜索指定对象，然后返回其首个匹配项的索引。该元素系列的范围为从指定索引到该数组结尾。</summary>
      <returns>第一个匹配项的索引<paramref name="value" />，如果找到了），并让它在范围中的元素内<paramref name="array" />用于扩展从<paramref name="startIndex" />到最后一个元素 ；否则的下限减 1 的数组。</returns>
      <param name="array">要搜索的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">搜索的起始索引。空数组中 0（零）为有效值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>在一个一维数组的一系列元素中搜索指定对象，然后返回其首个匹配项的索引。该元素系列的范围从指定数量的元素的指定索引开始。</summary>
      <returns>第一个匹配项的索引<paramref name="value" />，如果它找到，则在<paramref name="array" />从索引<paramref name="startIndex" />到<paramref name="startIndex" />+ <paramref name="count" /> -1 ；否则的下限减 1 的数组。</returns>
      <param name="array">要搜索的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">搜索的起始索引。空数组中 0（零）为有效值。</param>
      <param name="count">要搜索的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。- 或 -<paramref name="count" /> 小于零。- 或 -<paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>在一个一维数组中搜索指定对象，并返回其首个匹配项的索引。</summary>
      <returns>第一个匹配项的从零开始的索引<paramref name="value" />在整个<paramref name="array" />，如果找到，则否则为 – 1。</returns>
      <param name="array">要搜索的从零开始的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>在一个一维数组的一系列元素中搜索指定对象，然后返回其首个匹配项的索引。该元素系列的范围为从指定索引到该数组结尾。</summary>
      <returns>如果在 <paramref name="array" /> 中从 <paramref name="startIndex" /> 到最后一个元素这部分元素中找到 <paramref name="value" /> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">从零开始的搜索的起始索引。空数组中 0（零）为有效值。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>在一个一维数组的一系列元素中搜索指定对象，然后返回其首个匹配项的索引。该元素系列的范围从指定数量的元素的指定索引开始。</summary>
      <returns>如果在 <paramref name="array" /> 中从 <paramref name="startIndex" /> 开始、包含 <paramref name="count" /> 所指定的元素个数的这部分元素中，找到 <paramref name="value" /> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">从零开始的搜索的起始索引。空数组中 0（零）为有效值。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。- 或 -<paramref name="count" /> 小于零。- 或 -<paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>通过调用值类型的默认构造函数，初始化值类型 <see cref="T:System.Array" /> 的每一个元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>搜索指定的对象，并返回整个一维 <see cref="T:System.Array" /> 中最后一个匹配项的索引。</summary>
      <returns>如果在整个 <paramref name="array" /> 中找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>搜索指定的对象，并返回一维 <see cref="T:System.Array" /> 中从第一个元素到指定索引这部分元素中最后一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中从第一个元素到 <paramref name="startIndex" /> 这部分元素中找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的起始索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>搜索指定的对象，并返回一维 <see cref="T:System.Array" /> 中到指定索引为止包含指定个元素的这部分元素中最后一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中到 <paramref name="startIndex" /> 为止并且包含的元素个数为在 <paramref name="count" /> 中指定的个数的这部分元素中找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。- 或 -<paramref name="count" /> 小于零。- 或 -<paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Array" /> 中最后一个匹配项的索引。</summary>
      <returns>如果在整个 <paramref name="array" /> 中找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Array" /> 中从第一个元素到指定索引这部分元素中最后一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中从第一个元素到 <paramref name="startIndex" /> 这部分元素中找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Array" /> 中到指定索引为止包含指定个元素的这部分元素中最后一个匹配项的索引。</summary>
      <returns>如果在 <paramref name="array" /> 中到 <paramref name="startIndex" /> 为止、包含 <paramref name="count" /> 所指定的元素个数的这部分元素中，找到 <paramref name="value" /> 的匹配项，则为最后一个匹配项的从零开始的索引；否则为 -1。</returns>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。- 或 -<paramref name="count" /> 小于零。- 或 -<paramref name="startIndex" /> 和 <paramref name="count" /> 指定的不是 <paramref name="array" /> 中的有效部分。</exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>获得一个 32 位整数，该整数表示 <see cref="T:System.Array" /> 的所有维数中元素的总数。</summary>
      <returns>一个 32 位整数，该整数表示 <see cref="T:System.Array" /> 的所有维数中的元素总数；如果数组中没有元素，则该值为零。</returns>
      <exception cref="T:System.OverflowException">数组是多维的，并且包括多于 <see cref="F:System.Int32.MaxValue" /> 个元素。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Array.Rank">
      <summary>获取 <see cref="T:System.Array" /> 的秩（维数）。例如，一维数组返回 1，二维数组返回 2，依次类推。</summary>
      <returns>该 <see cref="T:System.Array" /> 的秩（维数）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>将一维数组的元素数更改为指定的新大小。</summary>
      <param name="array">要调整大小的一维数组，该数组从零开始；如果为 null 则新建具有指定大小的数组。</param>
      <param name="newSize">新数组的大小。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> 小于零。</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>反转整个一维 <see cref="T:System.Array" /> 中元素的顺序。</summary>
      <param name="array">要反转的一维 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>反转一维 <see cref="T:System.Array" /> 中某部分元素的元素顺序。</summary>
      <param name="array">要反转的一维 <see cref="T:System.Array" />。</param>
      <param name="index">要反转的部分的起始索引。</param>
      <param name="length">要反转的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>将某值设置给一维 <see cref="T:System.Array" /> 中指定位置的元素。索引指定为 32 位整数。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index">一个 32 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有一维。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能强制转换为当前 <see cref="T:System.Array" /> 的元素类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 超出当前 <see cref="T:System.Array" /> 的有效索引的范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>将某值设置给多维 <see cref="T:System.Array" /> 中指定位置的元素。索引指定为一个 32 位整数数组。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="indices">32 位整数的一维数组，它表示用于指定要设置的元素的位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">当前 <see cref="T:System.Array" /> 中的维数不等于 <paramref name="indices" /> 中的元素数。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能强制转换为当前 <see cref="T:System.Array" /> 的元素类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任何元素都超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>使用 <see cref="T:System.Array" /> 中每个元素的 <see cref="T:System.IComparable" /> 实现，对整个一维 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的一维 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array)">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用每个关键字的 <see cref="T:System.IComparable" /> 实现，对两个一维 <see cref="T:System.Array" /> 对象（一个包含关键字，另一个包含对应的项）进行排序。</summary>
      <param name="keys">一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /><see cref="T:System.Array" /> 中每个键对应的项。- 或 -null 则只对 <paramref name="keys" /><see cref="T:System.Array" /> 进行排序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多维的。- 或 -<paramref name="items" /><see cref="T:System.Array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用指定的 <see cref="T:System.Collections.IComparer" />，对两个一维 <see cref="T:System.Array" /> 对象（一个包含关键字，另一个包含对应的项）进行排序。</summary>
      <param name="keys">一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /><see cref="T:System.Array" /> 中每个键对应的项。- 或 -null 则只对 <paramref name="keys" /><see cref="T:System.Array" /> 进行排序。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。- 或 -若为 null，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多维的。- 或 -<paramref name="items" /><see cref="T:System.Array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。- 或 -<paramref name="comparer" /> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，并且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一个或多个元素不实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用每个关键字的 <see cref="T:System.IComparable" /> 实现，对两个一维 <see cref="T:System.Array" /> 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。</summary>
      <param name="keys">一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /><see cref="T:System.Array" /> 中每个键对应的项。- 或 -null 则只对 <paramref name="keys" /><see cref="T:System.Array" /> 进行排序。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多维的。- 或 -<paramref name="items" /><see cref="T:System.Array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="keys" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。- 或 -<paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="keys" /><see cref="T:System.Array" /> 中的有效范围。- 或 -<paramref name="items" /> 不为 null，并且 <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用指定的 <see cref="T:System.Collections.IComparer" />，对两个一维 <see cref="T:System.Array" /> 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。</summary>
      <param name="keys">一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /><see cref="T:System.Array" /> 中每个键对应的项。- 或 -null 则只对 <paramref name="keys" /><see cref="T:System.Array" /> 进行排序。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。- 或 -若为 null，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多维的。- 或 -<paramref name="items" /><see cref="T:System.Array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="keys" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，且 <paramref name="keys" /> 的下限与 <paramref name="items" /> 的下限不匹配。- 或 -<paramref name="items" /> 不是 null，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。- 或 -<paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="keys" /><see cref="T:System.Array" /> 中的有效范围。- 或 -<paramref name="items" /> 不为 null，并且 <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效范围。- 或 -<paramref name="comparer" /> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，并且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一个或多个元素不实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，对一维 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的一维数组。</param>
      <param name="comparer">比较元素时要使用的实现。- 或 -若为 null，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，<paramref name="array" /> 中的一个或多个元素不实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 中每个元素的 <see cref="T:System.IComparable" /> 实现，对一维 <see cref="T:System.Array" /> 中某部分元素进行排序。</summary>
      <param name="array">要排序的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，对一维 <see cref="T:System.Array" /> 的部分元素进行排序。</summary>
      <param name="array">要排序的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。- 或 -若为 null，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。- 或 -<paramref name="comparer" /> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，<paramref name="array" /> 中的一个或多个元素不实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>使用 <see cref="T:System.Array" /> 的每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现，对整个 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，对 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" /></param>
      <param name="comparer">比较元素时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口实现；如果为 null，则使用每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，并且 <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>使用指定的 <see cref="T:System.Comparison`1" /> 对 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="comparison">比较元素时要使用的 <see cref="T:System.Comparison`1" />。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="comparison" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparison" /> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparison" /> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 的每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现，对 <see cref="T:System.Array" /> 中某个元素范围内的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，对 <see cref="T:System.Array" /> 中某个元素范围内的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <param name="comparer">比较元素时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口实现；如果为 null，则使用每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 不指定 <paramref name="array" /> 中的有效范围。- 或 -<paramref name="comparer" /> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，并且 <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用每个关键字的 <see cref="T:System.IComparable`1" /> 泛型接口实现，对两个 <see cref="T:System.Array" /> 对象（一个包含关键字，另一个包含对应的项）进行排序。</summary>
      <param name="keys">从零开始的一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">从零开始的一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /> 中的关键字对应的项；如果为 null，则只对 <paramref name="keys" /> 进行排序。</param>
      <typeparam name="TKey">关键字数组元素的类型。</typeparam>
      <typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，且 <paramref name="keys" /> 的下限与 <paramref name="items" /> 的下限不匹配。- 或 -<paramref name="items" /> 不是 null，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，对两个 <see cref="T:System.Array" /> 对象（一个包含关键字，另一个包含对应的项）进行排序。</summary>
      <param name="keys">从零开始的一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">从零开始的一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /> 中的关键字对应的项；如果为 null，则只对 <paramref name="keys" /> 进行排序。</param>
      <param name="comparer">比较元素时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口实现；如果为 null，则使用每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现。</param>
      <typeparam name="TKey">关键字数组元素的类型。</typeparam>
      <typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，且 <paramref name="keys" /> 的下限与 <paramref name="items" /> 的下限不匹配。- 或 -<paramref name="items" /> 不是 null，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。- 或 -<paramref name="comparer" /> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，并且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用每个关键字的 <see cref="T:System.IComparable`1" /> 泛型接口实现，对两个 <see cref="T:System.Array" /> 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。</summary>
      <param name="keys">从零开始的一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">从零开始的一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /> 中的关键字对应的项；如果为 null，则只对 <paramref name="keys" /> 进行排序。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <typeparam name="TKey">关键字数组元素的类型。</typeparam>
      <typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="keys" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，且 <paramref name="keys" /> 的下限与 <paramref name="items" /> 的下限不匹配。- 或 -<paramref name="items" /> 不是 null，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。- 或 -<paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="keys" /><see cref="T:System.Array" /> 中的有效范围。- 或 -<paramref name="items" /> 不为 null，并且 <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，对两个 <see cref="T:System.Array" /> 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。</summary>
      <param name="keys">从零开始的一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">从零开始的一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /> 中的关键字对应的项；如果为 null，则只对 <paramref name="keys" /> 进行排序。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <param name="comparer">比较元素时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口实现；如果为 null，则使用每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现。</param>
      <typeparam name="TKey">关键字数组元素的类型。</typeparam>
      <typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="keys" /> 的下限。- 或 -<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，且 <paramref name="keys" /> 的下限与 <paramref name="items" /> 的下限不匹配。- 或 -<paramref name="items" /> 不是 null，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。- 或 -<paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="keys" /><see cref="T:System.Array" /> 中的有效范围。- 或 -<paramref name="items" /> 不为 null，并且 <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效范围。- 或 -<paramref name="comparer" /> 的实现导致排序时出现错误。例如，将某个项与其自身进行比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 null，并且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>获取 <see cref="T:System.Array" /> 中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Array" /> 的访问是否同步（线程安全）。</summary>
      <returns>true if access to the <see cref="T:System.Array" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#SyncRoot">
      <summary>获取一个可用于同步对 <see cref="T:System.Array" /> 的访问的对象。</summary>
      <returns>一个可用于同步对 <see cref="T:System.Array" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>调用此方法始终会引发<see cref="T:System.NotSupportedException" />异常。</summary>
      <returns>不支持向数组添加值。不返回任何值。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>true if <paramref name="value" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">要在当前列表中定位的对象。要定位的元素对于引用类型可以是 null。</param>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为值的索引；否则为 -1。</returns>
      <param name="value">要在当前列表中定位的对象。</param>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Collections.IList" /> 中的指定索引处插入一个项。</summary>
      <param name="index">
        <paramref name="value" /> 将插入到的索引。</param>
      <param name="value">要插入的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。- 或 -<see cref="T:System.Collections.IList" /> 具有固定大小。 </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 在 <see cref="T:System.Collections.IList" /> 中是 null 引用。</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Array" /> 是否具有固定大小。</summary>
      <returns>true if the <see cref="T:System.Array" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Array.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Array" /> 是否为只读。</summary>
      <returns>true if the <see cref="T:System.Array" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获取或设置的元素的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ICollection.Count" />。</exception>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有一维。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。- 或 -<see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除位于指定索引处的 <see cref="T:System.Collections.IList" /> 项。</summary>
      <param name="index">要移除的元素的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">索引不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。- 或 -<see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>确定当前集合对象在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个指示当前集合对象与其他对象的关系的整数，如下表所示。返回值描述-1当前实例位于 <paramref name="other" /> 之前。0当前实例与 <paramref name="other" /> 位于同一位置。1当前实例位于 <paramref name="other" /> 之后。</returns>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个将当前对象与 <paramref name="other" /> 进行比较的对象。</param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>确定某个对象与当前实例是否相等。</summary>
      <returns>如果两个对象相等，则为 true；否则为 false。</returns>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个可确定当前实例与 <paramref name="other" /> 是否相等的对象。 </param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
      <param name="comparer">一个计算当前对象的哈希代码的对象。</param>
    </member>
    <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
      <summary>确定数组中的每个元素是否都与指定谓词定义的条件匹配。</summary>
      <returns>如果 <paramref name="array" /> 中的每个元素都与指定谓词定义的条件匹配，则为 true；否则为 false。如果数组中没有元素，则返回值为 true。</returns>
      <param name="array">要对照条件进行检查的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">用于定义检查元素时要对照的条件的谓词。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。- 或 -<paramref name="match" /> 为 null。</exception>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>分隔一维数组的一部分。</summary>
      <typeparam name="T">数组段中元素的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 结构的新实例，该结构用于分隔指定数组中的所有元素。</summary>
      <param name="array">要包装的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 结构的新结构，该结构用于分隔指定数组中指定的元素范围。</summary>
      <param name="array">包含要分隔的元素范围的数组。</param>
      <param name="offset">范围中第一个元素的从零开始的索引。</param>
      <param name="count">范围中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 不指定 <paramref name="array" /> 中的有效范围。</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>获取原始数组，其中包含数组段分隔的元素范围。</summary>
      <returns>传递到构造函数并且包含由 <see cref="T:System.ArraySegment`1" /> 分隔的范围的原始数组。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>获取由数组段分隔的范围中的元素个数。</summary>
      <returns>由 <see cref="T:System.ArraySegment`1" /> 分隔的范围中的元素个数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>确定指定的 <see cref="T:System.ArraySegment`1" /> 结构是否等于当前实例。</summary>
      <returns>如果指定的 <see cref="T:System.ArraySegment`1" /> 结构等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的结构。</param>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前实例。</summary>
      <returns>如果指定的对象为 <see cref="T:System.ArraySegment`1" /> 结构并且等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的对象。</param>
    </member>
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>获取由数组段分隔的范围中的第一个元素的位置（相对于原始数组的开始位置）。</summary>
      <returns>由 <see cref="T:System.ArraySegment`1" /> 分隔的范围中的第一个元素的位置（相对于原始数组的开始位置）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指示两个 <see cref="T:System.ArraySegment`1" /> 结构是否等同。</summary>
      <returns>如果 <paramref name="a" /> 等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">相等运算符左侧的结构。</param>
      <param name="b">相等运算符右侧的结构。</param>
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指示两个 <see cref="T:System.ArraySegment`1" /> 结构是否不相等。</summary>
      <returns>如果 <paramref name="a" /> 不等于 <paramref name="b" />，则为 true；否则为 false。</returns>
      <param name="a">不等运算符左侧的结构。</param>
      <param name="b">不等运算符右侧的结构。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>向数组段添加一项。</summary>
      <param name="item">要添加到数组段的对象。</param>
      <exception cref="T:System.NotSupportedException">数组段是只读的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>从数组段中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">数组段是只读的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>确定数组段是否包含特定值。</summary>
      <returns>如果在数组段中找到 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要在数组段中查找的对象。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>从指定的数组索引开始，将数组段的元素复制到一个数组中。</summary>
      <param name="array">作为从数组段复制的元素的目标数组的一维数组。该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -源数组段中的元素数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 的末尾的可用空间。- 或 -无法自动将类型 <paramref name="T" /> 强制转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示该数组段是否为只读。</summary>
      <returns>如果数组段为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>从数组段中移除特定对象的第一个匹配项。</summary>
      <returns>如果从数组段中成功移除了 <paramref name="item" />，则为 true；否则为 false。如果在数组段中找不到 <paramref name="item" />，此方法也会返回 false。</returns>
      <param name="item">要从数组段中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">数组段是只读的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回循环访问数组段的枚举器。</summary>
      <returns>一个枚举器，可用于循环访问数组段。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
      <summary>确定数组段中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
      <param name="item">要在数组段中查找的对象。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>将一个项插入数组段中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入数组段中的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是数组段中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">数组段是只读的。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.ArraySegment`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且数组段为只读。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除指定索引处的数组段。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是数组段中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">数组段是只读的。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>获取数组段的指定索引处的元素。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获取的元素的索引（索引从零开始）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.ArraySegment`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">已设置此属性。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问数组段的枚举器。</summary>
      <returns>一个枚举器，可用于循环访问数组段。</returns>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>当试图在数组中存储类型不正确的元素时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>初始化 <see cref="T:System.ArrayTypeMismatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.ArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>引用在相应异步操作完成时调用的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.AsyncCallback.BeginInvoke(System.IAsyncResult,System.AsyncCallback,System.Object)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.EndInvoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.AsyncCallback.Invoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Attribute">
      <summary>表示自定义属性的基类。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>初始化 <see cref="T:System.Attribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 等于此实例的类型和值，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Object" /> 或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>指定可以对它们应用特性的应用程序元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>可以对任何应用程序元素应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>可以对程序集应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>可以对类应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>可以对构造函数应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>可以对委托应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>可以对枚举应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>可以对事件应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>可以对字段应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>可以对泛型参数应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>可以对接口应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>可以对方法应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>可以对模块应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>可以对参数应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>可以对属性 (Property) 应用属性 (Attribute)。</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>可以对返回值应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>可以对结构应用属性，即值类型。</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>指定另一特性类的用法。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>用指定的 <see cref="T:System.AttributeTargets" />、<see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> 值和 <see cref="P:System.AttributeUsageAttribute.Inherited" /> 值列表初始化 <see cref="T:System.AttributeUsageAttribute" /> 类的新实例。</summary>
      <param name="validOn">使用按位"或"运算符组合的一组值，用于指示哪些程序元素是有效的。</param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>获取或设置一个布尔值，该值指示能否为一个程序元素指定多个指示属性实例。</summary>
      <returns>如果允许指定多个实例，则为 true；否则为 false。默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>获取或设置一个布尔值，该值指示指示的属性能否由派生类和重写成员继承。</summary>
      <returns>如果该属性可由派生类和重写成员继承，则为 true，否则为 false。默认值为 true。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>获取一组值，这组值标识指示的属性可应用到的程序元素。</summary>
      <returns>一个或多个 <see cref="T:System.AttributeTargets" /> 值。默认值为 All。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>当动态链接库 (DLL) 或可执行程序的文件映像无效时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>用指定的错误消息和文件名初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>获取导致该异常的文件的名称。</summary>
      <returns>带有无效图像的文件的名称，或一个空引用（如果未向当前实例的构造函数传递任何文件名）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>获取错误消息和引发此异常的文件的名称。</summary>
      <returns>包含错误消息和引发此异常的文件名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>返回该异常的完全限定名，还可能返回错误消息、内部异常的名称和堆栈跟踪。</summary>
      <returns>一个字符串，包含该异常的完全限定名，还可能包含错误信息、内部异常的名称和堆栈跟踪。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.Boolean">
      <summary>表示布尔值（true 或 false）。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>将此实例与指定的 <see cref="T:System.Boolean" /> 对象进行比较，返回一个指示二者关系的整数。</summary>
      <returns>一个有符号整数，它指示此实例和 <paramref name="value" /> 的相对值。返回值条件小于零此实例为 false 而 <paramref name="value" /> 为 true。零此实例与 <paramref name="value" /> 相等（或者都为 true，或者都为 false）。大于零此实例为 true 而 <paramref name="value" /> 为 false。</returns>
      <param name="value">要与此实例进行比较的 <see cref="T:System.Boolean" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Boolean" /> 对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 的值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Boolean" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Boolean" /> and has the same value as this instance; otherwise, false.</returns>
      <param name="obj">要与此实例进行比较的对象。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>将布尔值 false 表示为字符串。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Boolean" /> 的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>将逻辑值的指定字符串表示形式转换为其等效的 <see cref="T:System.Boolean" /> 值；如果该字符串不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 的值，则会引发异常。</summary>
      <returns>如果 <paramref name="value" /> 等于 <see cref="F:System.Boolean.TrueString" /> 字段的值，则为 true；如果 <paramref name="value" /> 等于 <see cref="F:System.Boolean.FalseString" /> 字段的值，则为 false。</returns>
      <param name="value">包含要转换的值的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 字段的值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="obj" /> 的相对顺序。返回值条件小于零此实例为 false 而 <paramref name="obj" /> 为 true。零此实例与 <paramref name="obj" /> 相等（或者都为 true，或者都为 false）。大于零此实例为 true 而 <paramref name="obj" /> 为 false。- 或 - <paramref name="obj" /> 为 null。</returns>
      <param name="obj">与此实例进行比较的 object，或 null。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>true 或 false。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>如果此实例的值为 true，则为 1；否则为 0。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">尝试将 <see cref="T:System.Boolean" /> 值转换为 <see cref="T:System.Char" /> 值。不支持此转换。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">尝试将 <see cref="T:System.Boolean" /> 值转换为 <see cref="T:System.DateTime" /> 值。不支持此转换。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>如果此实例为 true，则为 1；否则为 0。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>如果此实例为 true，则为 1；否则为 0。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>如果此实例为 true，则为 1；否则为 0。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>如果此实例为 true，则为 1；否则为 0。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>如果此实例为 true，则为 1；否则为 0。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>如果此实例为 true，则为 1；否则为 0。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>如果此实例为 true，则为 1；否则为 0。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToString(System.IFormatProvider)"></member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>一个指定类型的对象，其值与 Boolean 对象的值相等。</returns>
      <param name="type">所需类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的区域性特定信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">不支持所请求的类型转换。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>如果此实例为 true，则为 1；否则为 0。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>如果此实例为 true，则为 1；否则为 0。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>如果此实例为 true，则为 1；否则为 0。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>将此实例的值转换为其等效字符串表示形式（“True”或“False”）。</summary>
      <returns>如果此实例的值为 true，则为 <see cref="F:System.Boolean.TrueString" />；如果此实例的值为 false，则为 <see cref="F:System.Boolean.FalseString" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>将布尔值 true 表示为字符串。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>尝试将逻辑值的指定字符串表示形式转换为其等效的 <see cref="T:System.Boolean" /> 值。一个指示转换是否成功的返回值。</summary>
      <returns>如果 <paramref name="value" /> 成功转换，则为 true；否则为 false。</returns>
      <param name="value">包含要转换的值的字符串。</param>
      <param name="result">如果转换成功，当 <paramref name="value" /> 等于 <see cref="F:System.Boolean.TrueString" /> 时，此方法返回时将包含 true；当 <paramref name="value" /> 等于 <see cref="F:System.Boolean.FalseString" /> 时，将包含 false。如果转换失败，则包含 false。如果 <paramref name="value" /> 为 null 或者不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 字段的值，该转换将失败。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Buffer">
      <summary>操作基元类型的数组。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>将指定数目的字节从起始于特定偏移量的源数组复制到起始于特定偏移量的目标数组。</summary>
      <param name="src">源缓冲区。</param>
      <param name="srcOffset">
        <paramref name="src" /> 的字节偏移量，从零开始。</param>
      <param name="dst">目标缓冲区。</param>
      <param name="dstOffset">
        <paramref name="dst" /> 的字节偏移量，从零开始。</param>
      <param name="count">要复制的字节数。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> 或 <paramref name="dst" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> 或 <paramref name="dst" /> 不是基元数组。- 或 -<paramref name="src" /> 中的字节数小于 <paramref name="srcOffset" /> 和 <paramref name="count" />。- 或 -<paramref name="dst" /> 中的字节数小于 <paramref name="dstOffset" /> 和 <paramref name="count" />。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />、<paramref name="dstOffset" /> 或 <paramref name="count" /> 小于 0。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>返回指定数组中的字节数。</summary>
      <returns>数组中的字节数。</returns>
      <param name="array">一个数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是基元。 </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" />大于 2 GB。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>检索指定数组中指定位置的字节。</summary>
      <returns>返回数组中的 <paramref name="index" /> 字节。</returns>
      <param name="array">一个数组。</param>
      <param name="index">数组中的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是基元。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 为负或大于 <paramref name="array" /> 的长度。 </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" />大于 2 GB。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
      <summary>将复制为发件人在内存中的一个地址到另一个长整型值指定的字节数。</summary>
      <param name="source">要复制的字节的地址。</param>
      <param name="destination">目标地址。</param>
      <param name="destinationSizeInBytes">可用的目标内存块中的字节数。</param>
      <param name="sourceBytesToCopy">要复制的字节数。  </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> 大于 <paramref name="destinationSizeInBytes" />。</exception>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
      <summary>一个指定为发件人在内存中的一个地址到另一个无符号长整型值的字节数的副本。</summary>
      <param name="source">要复制的字节的地址。</param>
      <param name="destination">目标地址。</param>
      <param name="destinationSizeInBytes">可用的目标内存块中的字节数。</param>
      <param name="sourceBytesToCopy">要复制的字节数。   </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> 大于 <paramref name="destinationSizeInBytes" />。</exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>将指定的值分配给指定数组中特定位置处的字节。</summary>
      <param name="array">一个数组。</param>
      <param name="index">数组中的位置。</param>
      <param name="value">要分配的值。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是基元。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 为负或大于 <paramref name="array" /> 的长度。 </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" />大于 2 GB。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Byte">
      <summary>表示一个 8 位无符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>将此实例与指定的 8 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比较的 8 位无符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Byte" /> 对象是否表示相同的值。</summary>
      <returns>如果 true 与此实例相等，则为 <paramref name="obj" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Byte" />；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象，或为 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Byte" /> 的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>表示 <see cref="T:System.Byte" /> 的最大可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>表示 <see cref="T:System.Byte" /> 的最小可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" /> 表示形式。</summary>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <param name="s">包含要转换的数字的字符串。该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" />。</summary>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" />。</summary>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，用于提供有关 <paramref name="s" /> 格式的区域性特定信息。如果 <paramref name="provider" /> 为 null，则使用当前区域性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字字符串表示形式转换为它的等效 <see cref="T:System.Byte" />。</summary>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <param name="s">包含要转换的数字的字符串。该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <param name="provider">一个对象，它提供有关 <paramref name="s" /> 的区域性特定分析信息。如果 <paramref name="provider" /> 为 null，则使用当前区域性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Description Less than zero This instance precedes <paramref name="value" /> in the sort order. Zero This instance occurs in the same position as <paramref name="value" /> in the sort order. Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Byte" />. </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Byte" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>将当前 <see cref="T:System.Byte" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>此对象的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含前导零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将当前 <see cref="T:System.Byte" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>此对象值的字符串表示形式，采用 <paramref name="provider" /> 参数所指定的格式。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>使用指定的格式将当前 <see cref="T:System.Byte" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>按照 <see cref="T:System.Byte" /> 参数指定的方式进行格式设置的当前 <paramref name="format" /> 对象的字符串表示形式。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier.Supported format specifiers are listed in the Remarks section.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.Byte" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>按照 <see cref="T:System.Byte" /> 和 <paramref name="format" /> 参数指定的方式进行格式设置的当前 <paramref name="provider" /> 对象的字符串表示形式。</returns>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier.Supported format specifiers are listed in the Remarks section.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.Byte" /> 中所包含的数字等效的 <paramref name="s" /> 值；如果转换失败，则包含零。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" />。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。如果 <paramref name="provider" /> 为 null，则使用当前区域性。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 8 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Char">
      <summary>将字符表示为 UTF-16 代码单位。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>将此实例与指定的 <see cref="T:System.Char" /> 对象进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Char" /> 对象之前、之后还是与其出现在同一位置。</summary>
      <returns>一个有符号数字，指示此实例在排序顺序中相对于 <paramref name="value" /> 参数的位置。返回值 描述 小于零 此实例位于 <paramref name="value" /> 之前。零 此实例在排序顺序中的位置与 <paramref name="value" /> 相同。大于零 此实例位于 <paramref name="value" /> 之后。</returns>
      <param name="value">要比较的 <see cref="T:System.Char" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.ConvertFromUtf32(System.Int32)">
      <summary>将指定的 Unicode 码位转换为 UTF-16 编码字符串。</summary>
      <returns>由一个 <see cref="T:System.Char" /> 对象或一个 <see cref="T:System.Char" /> 对象的代理项对组成的字符串，等效于 <paramref name="utf32" /> 参数所指定的码位。</returns>
      <param name="utf32">21 位 Unicode 码位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="utf32" /> 不是从 U+0 到 U+10FFFF 的有效的 21 位 Unicode 码位，不包括从 U+D800 到 U+DFFF 的代理项对。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.Char,System.Char)">
      <summary>将 UTF-16 编码的代理项对的值转换为 Unicode 码位。</summary>
      <returns>
        <paramref name="highSurrogate" /> 和 <paramref name="lowSurrogate" /> 参数表示的 21 位 Unicode 码位。</returns>
      <param name="highSurrogate">高代理项代码单位（即代码单位从 U+D800 到 U+DBFF）。</param>
      <param name="lowSurrogate">低代理项代码单位（即代码单位从 U+DC00 到 U+DFFF）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> 不在 U+D800 到 U+DBFF 的范围内，或 <paramref name="lowSurrogate" /> 不在 U+DC00 到 U+DFFF 的范围内。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.String,System.Int32)">
      <summary>将字符串中指定位置的 UTF-16 编码字符或代理项对的值转换为 Unicode 码位。</summary>
      <returns>字符或代理项对表示的 21 位 Unicode 码位，该字符或代理项对在 <paramref name="s" /> 参数中的位置由 <paramref name="index" /> 参数指定。</returns>
      <param name="s">包含字符或代理项对的字符串。</param>
      <param name="index">字符或代理项对在 <paramref name="s" /> 中的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 中的位置。</exception>
      <exception cref="T:System.ArgumentException">指定的索引位置包含一个代理项对，并且该代理项对中的第一个字符不是有效的高代理项，或该对中的第二个字符不是有效的低代理项。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Char" /> 对象相等。</summary>
      <returns>如果 true 参数与此实例的值相等，则为 <paramref name="obj" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Char" />；否则为 false。</returns>
      <param name="obj">要与此示例比较的对象，或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>将指定的数字 Unicode 字符转换为双精度浮点数。</summary>
      <returns>如果该字符表示数字，则数值为 <paramref name="c" />；否则为 -1.0。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>将指定字符串中位于指定位置的数字 Unicode 字符转换为双精度浮点数。</summary>
      <returns>如果 <paramref name="index" /> 中位于 <paramref name="s" /> 处的字符表示数字，则为该字符的数值；否则为 -1。</returns>
      <param name="s">
        <see cref="T:System.String" />。</param>
      <param name="index">
        <paramref name="s" /> 中的字符位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于控制字符类别。</summary>
      <returns>如果 true 是控制字符，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于控制字符类别。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是一个控制字符，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于十进制数字类别。</summary>
      <returns>如果 true 是十进制数，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于十进制数字类别。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是一个十进制数，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.Char)">
      <summary>指示指定的 <see cref="T:System.Char" /> 对象是否是一个高代理项。</summary>
      <returns>如果 true 参数的数值范围是从 U+D800 到 U+DBFF，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.String,System.Int32)">
      <summary>指示字符串中指定位置处的 <see cref="T:System.Char" /> 对象是否为高代理项。</summary>
      <returns>如果 true 中指定字符的数值范围是从 U+D800 到 U+DBFF，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 中的位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于 Unicode 字母类别。</summary>
      <returns>如果 true 是一个字母，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的指定字符串是否属于 Unicode 字母类别。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是一个字母，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于字母或十进制数字类别。</summary>
      <returns>如果 true 是字母或十进制数，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于字母或十进制数字类别。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是一个字母或十进制数，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于小写字母类别。</summary>
      <returns>如果 true 是一个小写字母，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于小写字母类别。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是一个小写字母，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.Char)">
      <summary>指示指定的 <see cref="T:System.Char" /> 对象是否是一个低代理项。</summary>
      <returns>如果 true 参数的数值范围是从 U+DC00 到 U+DFFF，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.String,System.Int32)">
      <summary>指示字符串中指定位置处的 <see cref="T:System.Char" /> 对象是否为低代理项。</summary>
      <returns>如果 true 中指定字符的数值范围是从 U+DC00 到 U+DFFF，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 中的位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于数字类别。</summary>
      <returns>如果 true 是一个数字，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置的字符是否属于数字类别。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是一个数字，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于标点符号类别。</summary>
      <returns>如果 true 是一个标点符号，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于标点符号类别。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是一个标点符号，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于分隔符类别。</summary>
      <returns>如果 true 是分隔符，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于分隔符类别。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是一个分隔符，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>指示指定的字符是否具有指定的代理项代码单位。</summary>
      <returns>如果 true 为高代理项或低代理项，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置的字符是否具有代理项代码单位。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是一个高代理项或低代理项，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>指示两个指定的 <see cref="T:System.Char" /> 对象是否形成一个代理项对。</summary>
      <returns>如果 true 参数的数值范围是从 U+D800 到 U+DBFF，且 <paramref name="highSurrogate" /> 参数的数值是从 U+DC00 到 U+DFFF，则为 <paramref name="lowSurrogate" />；否则为 false。</returns>
      <param name="highSurrogate">要作为代理项对的高代理项进行计算的字符。</param>
      <param name="lowSurrogate">要作为代理项对的低代理项进行计算的字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>指示字符串中指定位置处的两个相邻 <see cref="T:System.Char" /> 对象是否形成一个代理项对。</summary>
      <returns>如果 true 参数包括 <paramref name="s" /> 和 <paramref name="index" /> + 1 位置处的相邻字符，并且 <paramref name="index" /> 位置处字符的数值范围从 U+D800 到 U+DBFF，<paramref name="index" />+1 位置处字符的数值范围从 U+DC00 到 U+DFFF，则为 <paramref name="index" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符对的开始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 中的位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于符号字符类别。</summary>
      <returns>如果 true 是符号字符，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于符号字符类别。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是一个符号字符，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于大写字母类别。</summary>
      <returns>如果 true 是一个大写字母，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于大写字母类别。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是一个大写字母，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于空格类别。</summary>
      <returns>如果 true 是空格，则为 <paramref name="c" />；否则为 false。</returns>
      <param name="c">要计算的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于空格类别。</summary>
      <returns>如果 true 中位于 <paramref name="index" /> 的字符是空格，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中的最后一个位置。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>表示 <see cref="T:System.Char" /> 的最大可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>表示 <see cref="T:System.Char" /> 的最小可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.Parse(System.String)">
      <summary>将指定字符串的值转换为它的等效 Unicode 字符。</summary>
      <returns>一个等效于 <paramref name="s" /> 中唯一字符的 Unicode 字符。</returns>
      <param name="s">包含单个字符的字符串，或 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的长度不是 1。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例在排序顺序中相对于 <paramref name="value" /> 参数的位置。返回值 描述 小于零 此实例在排序顺序中位于 <paramref name="value" /> 之前。零 此实例在排序顺序中的位置与 <paramref name="value" /> 相同。大于零 此实例在排序顺序中位于 <paramref name="value" /> 之后。- 或 - <paramref name="value" /> 为 null。</returns>
      <param name="value">要与此实例比较的对象，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Char" /> 对象。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>注意   不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.Char" /> 对象的值未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>注意   不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>注意   不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>注意   不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary> 有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary> 有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary> 有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>注意   不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToString(System.IFormatProvider)"></member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>指定类型的对象。</returns>
      <param name="type">一个 <see cref="T:System.Type" /> 对象。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">无法将当前 <see cref="T:System.Char" /> 对象的值转换为由 <paramref name="type" /> 参数指定的类型。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 对象。（由于 null 参数已被忽略，因此指定 <paramref name="provider" />。）</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 对象。（由于 null 参数已被忽略，因此指定 <paramref name="provider" />。）</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 对象。（由于 null 参数已被忽略，因此指定 <paramref name="provider" />。）</param>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>将 Unicode 字符的值转换为它的小写等效项。</summary>
      <returns>
        <paramref name="c" /> 的小写等效项，或者，如果 <paramref name="c" /> 已经是小写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
      <summary>使用固定区域性的大小写规则，将 Unicode 字符的值转换为其小写等效项。</summary>
      <returns>
        <paramref name="c" /> 参数的小写等效项，或者，如果 <paramref name="c" /> 已经是小写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToString">
      <summary>将此实例的值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>将指定的 Unicode 字符转换为它的等效字符串表示形式。</summary>
      <returns>
        <paramref name="c" /> 值的字符串表示形式。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>将 Unicode 字符的值转换为它的大写等效项。</summary>
      <returns>
        <paramref name="c" /> 的大写等效项，或者，如果 <paramref name="c" /> 已经是大写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
      <summary>使用固定区域性的大小写规则，将 Unicode 字符的值转换为其大写等效项。</summary>
      <returns>
        <paramref name="c" /> 参数的小写等效项，或者，如果 <paramref name="c" /> 已经是大写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <param name="c">要转换的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>将指定字符串的值转换为它的等效 Unicode 字符。一个指示转换是成功还是失败的返回代码。</summary>
      <returns>如果 true 参数成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含单个字符的字符串，或 null。</param>
      <param name="result">此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中的唯一字符等效的 Unicode 字符；如果转换失败，则包含未定义的值。如果 <paramref name="s" /> 参数为 null 或 <paramref name="s" /> 的长度不为 1，则转换失败。此参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>指示程序元素是否符合公共语言规范 (CLS)。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>用布尔值初始化 <see cref="T:System.CLSCompliantAttribute" /> 类的实例，该值指示所指示的程序元素是否符合 CLS。</summary>
      <param name="isCompliant">如果程序元素符合 CLS，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>获取指示所指示的程序元素是否符合 CLS 的布尔值。</summary>
      <returns>如果程序元素符合 CLS，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Comparison`1">
      <summary>表示比较同一类型的两个对象的方法。</summary>
      <typeparam name="T">要比较的对象的类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Comparison`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Comparison`1.BeginInvoke(`0,`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Comparison`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Comparison`1.Invoke(`0,`0)"></member>
    <member name="T:System.DateTime">
      <summary>表示时间上的一刻，通常以日期和当天的时间表示。若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月和日。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。- 或 - <paramref name="month" /> 是小于 1 或大于 12。- 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月、日、小时、分钟和秒。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。- 或 - <paramref name="month" /> 是小于 1 或大于 12。- 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。- 或 - <paramref name="hour" /> 为小于 0 或大于 23。- 或 - <paramref name="minute" /> 为小于 0 或大于 59。- 或 - <paramref name="second" /> 为小于 0 或大于 59。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定年、月、日、小时、分钟、秒和协调世界时 (UTC) 或本地时间。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="kind">枚举值之一，该值指示 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。- 或 - <paramref name="month" /> 是小于 1 或大于 12。- 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。- 或 - <paramref name="hour" /> 为小于 0 或大于 23。- 或 - <paramref name="minute" /> 为小于 0 或大于 59。- 或 - <paramref name="second" /> 为小于 0 或大于 59。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月、日、小时、分钟、秒和毫秒。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。- 或 - <paramref name="month" /> 是小于 1 或大于 12。- 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。- 或 - <paramref name="hour" /> 为小于 0 或大于 23。- 或 - <paramref name="minute" /> 为小于 0 或大于 59。- 或 - <paramref name="second" /> 为小于 0 或大于 59。- 或 - <paramref name="millisecond" /> 为小于 0 或大于 999。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定年、月、日、小时、分钟、秒、毫秒和协调世界时 (UTC) 或本地时间。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <param name="kind">枚举值之一，该值指示 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />, <paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="millisecond" /> 指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。- 或 - <paramref name="month" /> 是小于 1 或大于 12。- 或 - <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。- 或 - <paramref name="hour" /> 为小于 0 或大于 23。- 或 - <paramref name="minute" /> 为小于 0 或大于 59。- 或 - <paramref name="second" /> 为小于 0 或大于 59。- 或 - <paramref name="millisecond" /> 为小于 0 或大于 999。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的刻度数。</summary>
      <param name="ticks">一个日期和时间，以公历 0001 年 1 月 1 日 00:00:00.000 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的计时周期数以及协调世界时 (UTC) 或本地时间。</summary>
      <param name="ticks">一个日期和时间，以公历 0001 年 1 月 1 日 00:00:00.000 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
      <param name="kind">枚举值之一，该值指示 <paramref name="ticks" /> 是指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定 <see cref="T:System.TimeSpan" /> 的值添加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的时间间隔之和。</returns>
      <param name="value">正或负时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的天数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的天数之和。</returns>
      <param name="value">由整数和小数部分组成的天数。<paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的小时数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的小时数之和。</returns>
      <param name="value">由整数和小数部分组成的小时数。<paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的毫秒数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的毫秒数之和。</returns>
      <param name="value">由整数和小数部分组成的毫秒数。<paramref name="value" /> 参数可以是负数也可以是正数。请注意，该值被舍入到最近的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的分钟数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的分钟数之和。</returns>
      <param name="value">由整数和小数部分组成的分钟数。<paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的月数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="months" /> 所表示的时间之和。</returns>
      <param name="months">月份数。<paramref name="months" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。- 或 - <paramref name="months" /> 小于-120,000 或大于 120000。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的秒数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的秒数之和。</returns>
      <param name="value">由整数和小数部分组成的秒数。<paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的刻度数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的时间之和。</returns>
      <param name="value">以 100 纳秒为单位的计时周期数。<paramref name="value" /> 参数可以是正数也可以是负数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的年份数加到此实例的值上。</summary>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的年份数之和。</returns>
      <param name="value">年份数。<paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 或得到的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>对两个 <see cref="T:System.DateTime" /> 的实例进行比较，并返回一个指示第一个实例是早于、等于还是晚于第二个实例的整数。</summary>
      <returns>有符号数字，指示 <paramref name="t1" /> 和 <paramref name="t2" /> 的相对值。值类型 条件 小于零 <paramref name="t1" /> 早于 <paramref name="t2" />。零 <paramref name="t1" /> 与 <paramref name="t2" /> 相同。大于零 <paramref name="t1" /> 晚于 <paramref name="t2" />。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>将此实例的值与指定的 <see cref="T:System.DateTime" /> 值相比较，并返回一个整数，该整数指示此实例是早于、等于还是晚于指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <returns>有符号数字，指示此实例和 <paramref name="value" /> 参数的相对值。值 描述 小于零 此实例早于 <paramref name="value" />。零 此实例与 <paramref name="value" /> 相同。大于零 此实例晚于 <paramref name="value" />。</returns>
      <param name="value">要与当前类型进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>获取此实例的日期部分。</summary>
      <returns>一个新对象，其日期与此实例相同，时间值设置为午夜 12:00:00 (00:00:00)。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>获取此实例所表示的日期为该月中的第几天。</summary>
      <returns>日组成部分，表示为 1 和 31 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>获取此实例所表示的日期是星期几。</summary>
      <returns>一个枚举常量，指示此 <see cref="T:System.DateTime" /> 值是星期几。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>获取此实例所表示的日期是该年中的第几天。</summary>
      <returns>该年中的第几天，表示为 1 和 366 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>返回指定年和月中的天数。</summary>
      <returns>指定 <paramref name="month" /> 中 <paramref name="year" /> 中的天数。例如，如果 <paramref name="month" /> 等于 2（表示二月），则返回值为 28 或 29，具体取决于 <paramref name="year" /> 是否为闰年。</returns>
      <param name="year">年。</param>
      <param name="month">月（介于 1 到 12 之间的一个数字）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 是小于 1 或大于 12。- 或 -<paramref name="year" /> 是小于 1 或大于 9999。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>返回一个值，该值指示此实例的值是否等于指定 <see cref="T:System.DateTime" /> 实例的值。</summary>
      <returns>如果 true 参数与此实例的值相等，则为 <paramref name="value" />；否则为 false。</returns>
      <param name="value">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>返回一个值，该值指示的两个 <see cref="T:System.DateTime" /> 实例是否具有同一个日期和时间值。</summary>
      <returns>如果两个值相等，则为，true；否则为 false。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 true 是 <paramref name="value" /> 的实例并且等于此实例的值，则为 <see cref="T:System.DateTime" />；否则为 false。</returns>
      <param name="value">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
      <summary>反序列化一个 64 位二进制值，并重新创建序列化的 <see cref="T:System.DateTime" /> 初始对象。</summary>
      <returns>一个对象，它等效于由 <see cref="T:System.DateTime" /> 方法序列化的 <see cref="M:System.DateTime.ToBinary" /> 对象。</returns>
      <param name="dateData">64 位带符号整数，它对 2 位字段的 <see cref="P:System.DateTime.Kind" /> 属性以及 62 位字段的 <see cref="P:System.DateTime.Ticks" /> 属性进行了编码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateData" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>将指定的 Windows 文件时间转换为等效的本地时间。</summary>
      <returns>一个表示本地时间的对象，等效于由 <paramref name="fileTime" /> 参数表示的日期和时间。</returns>
      <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小于 0 或表示大于 <see cref="F:System.DateTime.MaxValue" /> 的时间。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>将指定的 Windows 文件时间转换为等效的 UTC 时间。</summary>
      <returns>一个表示 UTC 时间的对象，等效于由 <paramref name="fileTime" /> 参数表示的日期和时间。</returns>
      <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小于 0 或表示大于 <see cref="F:System.DateTime.MaxValue" /> 的时间。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>将此实例的值转换为标准日期和时间格式说明符支持的所有字符串表示形式。</summary>
      <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>将此实例的值转换为指定的标准日期和时间格式说明符支持的所有字符串表示形式。</summary>
      <returns>符串数组，其中每个元素都表示此实例的以 <paramref name="format" /> 标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
      <param name="format">标准日期和时间格式字符串（请参见注解）。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的标准日期和时间格式说明符。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>将此实例的值转换为指定的标准日期和时间格式说明符和区域性特定格式信息支持的所有字符串表示形式。</summary>
      <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
      <param name="format">日期和时间格式字符串（请参见注解）。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的标准日期和时间格式说明符。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>将此实例的值转换为标准日期和时间格式说明符和指定的区域性特定格式信息支持的所有字符串表示形式。</summary>
      <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>获取此实例所表示日期的小时部分。</summary>
      <returns>小时组成部分，表示为 0 和 23 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>指示此 <see cref="T:System.DateTime" /> 实例是否在当前时区的夏时制范围内。</summary>
      <returns>如果 true 属性的值为 <see cref="P:System.DateTime.Kind" /> 或 <see cref="F:System.DateTimeKind.Local" />，并且 <see cref="F:System.DateTimeKind.Unspecified" /> 的此实例的值在当前时区的夏时制范围内，则为 <see cref="T:System.DateTime" />；如果 false 为 <see cref="P:System.DateTime.Kind" />，则为 <see cref="F:System.DateTimeKind.Utc" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>返回指定的年份是否为闰年的指示。</summary>
      <returns>如果 true 是闰年，则为 <paramref name="year" />；否则为 false。</returns>
      <param name="year">四位数年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 是小于 1 或大于 9999。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>获取一个值，该值指示由此实例表示的时间是基于本地时间、协调世界时 (UTC)，还是两者皆否。</summary>
      <returns>用于指示当前时间表示的含义的枚举值之一。默认值为 <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>表示 <see cref="T:System.DateTime" /> 的最大可能值。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>获取此实例所表示日期的毫秒部分。</summary>
      <returns>毫秒组成部分，表示为 0 和 999 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>获取此实例所表示日期的分钟部分。</summary>
      <returns>分钟组成部分，表示为 0 和 59 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>表示 <see cref="T:System.DateTime" /> 的最小可能值。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>获取此实例所表示日期的月份部分。</summary>
      <returns>月组成部分，表示为 1 和 12 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>获取一个 <see cref="T:System.DateTime" /> 对象，该对象设置为此计算机上的当前日期和时间，表示为本地时间。</summary>
      <returns>其值为当前日期和时间的对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>将指定的时间间隔加到指定的日期和时间以生成新的日期和时间。</summary>
      <returns>一个对象，它是 <paramref name="d" /> 和 <paramref name="t" /> 值的和。</returns>
      <param name="d">要添加的日期和时间值。</param>
      <param name="t">待添加的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>确定 <see cref="T:System.DateTime" /> 的两个指定的实例是否相等。</summary>
      <returns>如果 true 和 <paramref name="d1" /> 表示同一日期和时间，则为 <paramref name="d2" />；否则为 false。</returns>
      <param name="d1">要比较的第一个对象。</param>
      <param name="d2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>确定指定的 <see cref="T:System.DateTime" /> 是否晚于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 true 晚于 <paramref name="t1" />，则为 <paramref name="t2" />；否则为 false。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>确定一个指定的 <see cref="T:System.DateTime" /> 表示的日期和时间等于还是晚于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 true 等于或晚于 <paramref name="t1" />，则为 <paramref name="t2" />；否则为 false。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>确定 <see cref="T:System.DateTime" /> 的两个指定的实例是否不等。</summary>
      <returns>如果 true 和 <paramref name="d1" /> 不表示同一日期和时间，则为 <paramref name="d2" />；否则为 false。</returns>
      <param name="d1">要比较的第一个对象。</param>
      <param name="d2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>确定指定的 <see cref="T:System.DateTime" /> 是否早于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 true 早于 <paramref name="t1" />，则为 <paramref name="t2" />；否则为 false。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>确定一个指定的 <see cref="T:System.DateTime" /> 表示的日期和时间等于还是早于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 true 等于或晚于 <paramref name="t1" />，则为 <paramref name="t2" />；否则为 false。</returns>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>将指定的日期和时间与另一个指定的日期和时间相减，返回一个时间间隔。</summary>
      <returns>
        <paramref name="d1" /> 和 <paramref name="d2" /> 之间的时间间隔；即 <paramref name="d1" /> 减去 <paramref name="d2" />。</returns>
      <param name="d1">要从中减去的日期和时间值（被减数）。</param>
      <param name="d2">要减去的日期和时间值（减数）。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>从指定的日期和时间减去指定的时间间隔，返回新的日期和时间。</summary>
      <returns>一个对象，其值为 <paramref name="d" /> 的值减去 <paramref name="t" /> 的值。</returns>
      <param name="d">要从其中减去的日期和时间值。</param>
      <param name="t">待减去的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>将日期和时间的字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 中不包含有效的日期和时间的字符串表示形式。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将日期和时间的字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="provider" /> 指定。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 中不包含有效的日期和时间的字符串表示形式。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的区域性特定格式设置信息和格式类型，将日期和时间的字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="provider" /> 和 <paramref name="styles" /> 指定。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的按位组合，用于指示 <paramref name="s" /> 成功执行分析操作所需的样式元素以及定义如何根据当前时区或当前日期解释已分析日期的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 中不包含有效的日期和时间的字符串表示形式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的无效组合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="s" /> 格式的格式说明符。有关详细信息，请参阅“备注”部分。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是空字符串。- 或 - <paramref name="s" /> 不包含与 <paramref name="format" /> 中指定的模式相对应的日期和时间。- 或 -<paramref name="s" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。字符串表示形式的格式必须与指定的格式完全匹配，否则会引发异常。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="format" />、<paramref name="provider" /> 和 <paramref name="style" /> 指定。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="s" /> 格式的格式说明符。有关详细信息，请参阅“备注”部分。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="style">枚举值的按位组合，提供有关以下内容的附加信息：<paramref name="s" />、可能出现在 <paramref name="s" /> 中的样式元素或从 <paramref name="s" /> 到 <see cref="T:System.DateTime" /> 值的转换。要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是空字符串。- 或 - <paramref name="s" /> 不包含与 <paramref name="format" /> 中指定的模式相对应的日期和时间。- 或 -<paramref name="s" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的无效组合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。字符串表示形式的格式必须至少与指定的格式之一完全匹配，否则会引发异常。</summary>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="formats" />、<paramref name="provider" /> 和 <paramref name="style" /> 指定。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="formats">
        <paramref name="s" /> 的允许格式的数组。有关详细信息，请参阅“备注”部分。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="formats" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 是一个空字符串。- 或 - <paramref name="formats" /> 的一个元素是空字符串。- 或 - <paramref name="s" /> 不包含与 <paramref name="formats" /> 中的任何元素对应的日期和时间。- 或 -<paramref name="s" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的无效组合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>获取此实例所表示日期的秒部分。</summary>
      <returns>秒组成部分，表示为 0 和 59 之间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>创建新的 <see cref="T:System.DateTime" /> 对象，该对象具有与指定的 <see cref="T:System.DateTime" /> 相同的刻度数，但是根据指定的 <see cref="T:System.DateTimeKind" /> 值的指示，指定为本地时间或协调世界时 (UTC)，或者两者皆否。</summary>
      <returns>一个新对象，它与由 <paramref name="value" /> 参数和由 <see cref="T:System.DateTimeKind" /> 参数指定的 <paramref name="kind" /> 值代表的对象具有相同刻度数。</returns>
      <param name="value">日期和时间。</param>
      <param name="kind">枚举值之一，该值指示新对象是表示本地时间、UTC，还是两者皆否。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>从此实例中减去指定的日期和时间。</summary>
      <returns>一个时间间隔，它等于此实例所表示的日期和时间减去 <paramref name="value" /> 所表示的日期和时间。</returns>
      <param name="value">要减去的日期和时间值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">结果小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>从此实例中减去指定持续时间。</summary>
      <returns>一个对象，它等于此实例所表示的日期和时间减去 <paramref name="value" /> 所表示的时间间隔。</returns>
      <param name="value">待减去的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">结果小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.System#IComparable#CompareTo(System.Object)">
      <summary>将实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对顺序。值 描述 小于零 此实例在排序顺序中位于 <paramref name="value" /> 之前。零 此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。大于零 此实例按排序顺序遵循 <paramref name="value" /> 或 <paramref name="value" /> 为 null。</returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.DateTime" />。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>返回当前 <see cref="T:System.DateTime" /> 对象。</summary>
      <returns>当前对象。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象转换为指定类型的对象。</summary>
      <returns>由 <paramref name="type" /> 参数指定的类型的对象，其值与当前 <see cref="T:System.DateTime" /> 对象等效。</returns>
      <param name="type">所需类型。</param>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DateTime" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>未使用此成员的返回值。</returns>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。（未使用此参数；指定 null。）</param>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>获取表示此实例的日期和时间的计时周期数。</summary>
      <returns>表示此实例的日期和时间的计时周期数。该值介于 DateTime.MinValue.Ticks 和 DateTime.MaxValue.Ticks 之间。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>获取此实例的当天的时间。</summary>
      <returns>一个时间间隔，它表示当天自午夜以来已经过时间的部分。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToBinary">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象序列化为一个 64 位二进制值，该值随后可用于重新创建 <see cref="T:System.DateTime" /> 对象。</summary>
      <returns>64 位有符号整数，它对 <see cref="P:System.DateTime.Kind" /> 和 <see cref="P:System.DateTime.Ticks" /> 属性进行了编码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>获取当前日期。</summary>
      <returns>一个对象，设置为当天日期，其时间组成部分设置为 00:00:00。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为 Windows 文件时间。</summary>
      <returns>表示为 Windows 文件时间的当前 <see cref="T:System.DateTime" /> 对象的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时公元 1601 年 1 月 1 日午夜 12:00 之前的日期和时间。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为 Windows 文件时间。</summary>
      <returns>表示为 Windows 文件时间的当前 <see cref="T:System.DateTime" /> 对象的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时公元 1601 年 1 月 1 日午夜 12:00 之前的日期和时间。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为本地时间。</summary>
      <returns>一个对象，其 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />，并且其值为等效于当前 <see cref="T:System.DateTime" /> 对象的值的本地时间；如果经转换的值过大以至于不能由 <see cref="F:System.DateTime.MaxValue" /> 对象表示，则为 <see cref="T:System.DateTime" />，或者，如果经转换的值过小以至于不能表示为 <see cref="F:System.DateTime.MinValue" /> 对象，则为 <see cref="T:System.DateTime" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.DateTime" /> 对象的值的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">当前区域性所使用的日历支持的日期范围之外的日期和时间。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>由 <see cref="T:System.DateTime" /> 指定的当前 <paramref name="provider" /> 对象的值的字符串表示形式。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="provider" /> 使用的日历支持的日期范围之外。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>使用指定的格式将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>由 <see cref="T:System.DateTime" /> 指定的当前 <paramref name="format" /> 对象的值的字符串表示形式。</returns>
      <param name="format">标准或自定义日期和时间格式字符串（请参见“备注”）。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度是 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的格式说明符之一。- 或 - <paramref name="format" /> 中不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前区域性所使用的日历支持的日期范围之外的日期和时间。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>由 <see cref="T:System.DateTime" /> 和 <paramref name="format" /> 指定的当前 <paramref name="provider" /> 对象的值的字符串表示形式。</returns>
      <param name="format">标准或自定义日期和时间格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度是 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的格式说明符之一。- 或 - <paramref name="format" /> 中不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="provider" /> 使用的日历支持的日期范围之外。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为协调世界时 (UTC)。</summary>
      <returns>一个对象，其 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Utc" />，并且其值为等效于当前 <see cref="T:System.DateTime" /> 对象的值的 UTC；如果经转换的值过大以至于不能由 <see cref="F:System.DateTime.MaxValue" /> 对象表示，则为 <see cref="T:System.DateTime" />，或者，如果经转换的值过小以至于不能表示为 <see cref="F:System.DateTime.MinValue" /> 对象，则为 <see cref="T:System.DateTime" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 true 参数成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 参数为 null，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败。此参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的区域性特定格式信息和格式设置样式，将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 true 参数成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 参数为 null，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败。此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。- 或 -<paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的无效组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> 是一个非特定区域性并且无法在分析操作中使用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。字符串表示形式的格式必须与指定的格式完全匹配。该方法返回一个指示转换是否成功的值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="format">所需的 <paramref name="s" /> 格式。有关详细信息，请参阅备注部分。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="style">一个或多个枚举值的按位组合，指示 <paramref name="s" /> 允许使用的格式。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 或 <paramref name="format" /> 参数为 null，或者为空字符串，或者未包含对应于 <paramref name="format" /> 中指定的模式的日期和时间，则转换失败。此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。- 或 -<paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的无效组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。字符串表示形式的格式必须至少与指定的格式之一完全匹配。该方法返回一个指示转换是否成功的值。</summary>
      <returns>如果 true 参数成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="formats">
        <paramref name="s" /> 的允许格式的数组。有关详细信息，请参阅备注部分。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 或 <paramref name="formats" /> 为 null，<paramref name="s" /> 或 <paramref name="formats" /> 的某个元素为空字符串， 或者 <paramref name="s" /> 的格式与 <paramref name="formats" /> 中的格式模式所指定的格式都不完全匹配，则转换失败。此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。- 或 -<paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的无效组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>获取一个 <see cref="T:System.DateTime" /> 对象，该对象设置为此计算机上的当前日期和时间，表示为协调通用时间 (UTC)。</summary>
      <returns>其值为当前 UTC 日期和时间的对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>获取此实例所表示日期的年份部分。</summary>
      <returns>年份（介于 1 和 9999 之间）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>指定 <see cref="T:System.DateTime" /> 对象是表示本地时间、协调通用时间 (UTC)，还是既不指定为本地时间，也不指定为 UTC。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>表示的时间为本地时间。</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>表示的时间既未指定为本地时间，也未指定为协调通用时间 (UTC)。</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>表示的时间为 UTC。</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>表示一个时间点，通常以相对于协调世界时 (UTC) 的日期和时间来表示。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="dateTime">日期和时间。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量所产生的协调世界时 (UTC) 的日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -通过应用偏移量所产生的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="dateTime">日期和时间。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> 等于 <see cref="F:System.DateTimeKind.Utc" />，<paramref name="offset" /> 不等于零。- 或 -<paramref name="dateTime.Kind" /> 等于 <see cref="F:System.DateTimeKind.Local" />，<paramref name="offset" /> 不等于系统的本地时区的偏移量。- 或 -未采用整分钟数指定 <paramref name="offset" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 -14 小时或大于 14 小时。- 或 -<see cref="P:System.DateTimeOffset.UtcDateTime" /> 小于 <see cref="F:System.DateTimeOffset.MinValue" /> 或大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、小时、分钟、秒、毫秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 并不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。- 或 -<paramref name="month" /> 小于 1 或大于 12。- 或 -<paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。- 或 -<paramref name="hour" /> 小于零或大于 23。- 或 -<paramref name="minute" /> 小于 0 或大于 59。- 或 -<paramref name="second" /> 小于 0 或大于 59。- 或 -<paramref name="millisecond" /> 小于 0 或大于 999。- 或 -<paramref name="offset" /> 小于 -14 或大于 14。- 或 -<see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、小时、分钟、秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 并不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。- 或 -<paramref name="month" /> 小于 1 或大于 12。- 或 -<paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。- 或 -<paramref name="hour" /> 小于零或大于 23。- 或 -<paramref name="minute" /> 小于 0 或大于 59。- 或 -<paramref name="second" /> 小于 0 或大于 59。- 或 -<paramref name="offset" /> 小于 -14 小时或大于 14 小时。- 或 -<see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>使用指定的计时周期数和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="ticks">一个日期和时间，以 0001 年 1 月 1 日午夜 12:00:00 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">未采用整分钟数指定 <paramref name="offset" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。- 或 -<paramref name="ticks" /> 小于 DateTimeOffset.MinValue.Ticks 或大于 DateTimeOffset.MaxValue.Ticks。- 或 -<paramref name="Offset" /> 小于 -14 小时或大于 14 小时。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>返回一个新<see cref="T:System.DateTimeOffset" />将此实例的值加上指定的时间间隔的对象。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="timeSpan" /> 所表示的时间间隔之和。</returns>
      <param name="timeSpan">一个 <see cref="T:System.TimeSpan" /> 对象，表示正时间间隔或负时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>返回一个新<see cref="T:System.DateTimeOffset" />将指定的天数整数和小数部分添加到此实例的值的对象。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="days" /> 所表示的天数之和。</returns>
      <param name="days">由整数和小数部分组成的天数。此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>返回一个新<see cref="T:System.DateTimeOffset" />将指定的整数和小数的小时数添加到此实例的值的对象。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="hours" /> 所表示的小时数之和。</returns>
      <param name="hours">由整数和小数部分组成的小时数。此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>返回一个新<see cref="T:System.DateTimeOffset" />将指定的毫秒数添加到此实例的值的对象。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="milliseconds" /> 所表示的整毫秒数之和。</returns>
      <param name="milliseconds">由整数和小数部分组成的毫秒数。此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>返回一个新<see cref="T:System.DateTimeOffset" />将指定的整数和小数的分钟数添加到此实例的值的对象。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="minutes" /> 所表示的分钟数之和。</returns>
      <param name="minutes">由整数和小数部分组成的分钟数。此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>返回一个新<see cref="T:System.DateTimeOffset" />将指定的月数添加到此实例的值的对象。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="months" /> 所表示的月份数之和。</returns>
      <param name="months">整月份数。此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>返回一个新<see cref="T:System.DateTimeOffset" />将指定的整数和小数秒数添加到此实例的值的对象。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="seconds" /> 所表示的秒数之和。</returns>
      <param name="seconds">由整数和小数部分组成的秒数。此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>返回一个新<see cref="T:System.DateTimeOffset" />将指定的刻度数添加到此实例的值的对象。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="ticks" /> 所表示的计时周期数之和。</returns>
      <param name="ticks">以 100 纳秒为单位的计时周期数。此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>返回一个新<see cref="T:System.DateTimeOffset" />将指定的年数添加到此实例的值的对象。</summary>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="years" /> 所表示的年数之和。</returns>
      <param name="years">年份数。此数值可以是负数也可以是正数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>对两个 <see cref="T:System.DateTimeOffset" /> 对象进行比较，并指明第一个对象是早于、等于还是晚于第二个对象。</summary>
      <returns>一个有符号的整数，它表示 <paramref name="first" /> 参数的值是早于、晚于还是等于 <paramref name="second" /> 参数的值，如下表所示。返回值含义小于零<paramref name="first" /> 早于 <paramref name="second" />。零<paramref name="first" /> 等于 <paramref name="second" />。大于零<paramref name="first" /> 晚于 <paramref name="second" />。</returns>
      <param name="first">要比较的第一个对象。</param>
      <param name="second">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象与指定的 <see cref="T:System.DateTimeOffset" /> 对象进行比较，并指明当前对象是早于、等于还是晚于另一个 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>一个有符号的整数，它指明了当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 之间的关系，如下表所示。返回值描述小于零当前的 <see cref="T:System.DateTimeOffset" /> 对象早于 <paramref name="other" />。零当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 相同。大于零。当前的 <see cref="T:System.DateTimeOffset" /> 对象晚于 <paramref name="other" />。</returns>
      <param name="other">将与当前的 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期组成部分。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期组成部分。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</summary>
      <returns>当前的 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的月中的某一天。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的日组成部分，以 1 到 31 之间的一个值来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的周中的某一天。</summary>
      <returns>用于指示当前 <see cref="T:System.DateTimeOffset" /> 对象的星期几的枚举值之一。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的年中的某一天。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的年中的某一天，以 1 到 366 之间的一个值来表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>确定当前的 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的 <see cref="T:System.DateTimeOffset" /> 对象表示同一时间点。</summary>
      <returns>如果两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。   </param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间点。</summary>
      <returns>如果这两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="first">要比较的第一个对象。</param>
      <param name="second">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>确定 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的对象表示同一时间点。</summary>
      <returns>如果 <paramref name="obj" /> 参数是 <see cref="T:System.DateTimeOffset" /> 对象，并且与当前的 <see cref="T:System.DateTimeOffset" /> 对象表示同一时间点，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>确定当前的 <see cref="T:System.DateTimeOffset" /> 对象与指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间并且是否具有相同的偏移量。</summary>
      <returns>如果当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 具有相同的日期和时间值以及相同的 <see cref="P:System.DateTimeOffset.Offset" /> 值，则为 true；否则为 false。</returns>
      <param name="other">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。 </param>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>将指定的 Windows 文件时间转换为等效的本地时间。</summary>
      <returns>一个对象，表示偏移量被设置为本地时间偏移量的 <paramref name="fileTime" /> 的日期和时间。</returns>
      <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> 小于零。- 或 -<paramref name="filetime" /> 大于 DateTimeOffset.MaxValue.Ticks。</exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)">
      <summary>将表示为自 1970 年 1 经过的毫秒数 Unix 时间转换为-01-到 01T00:00:00Z<see cref="T:System.DateTimeOffset" />值。</summary>
      <returns>日期和时间值，该值表示为 Unix 时间的时间在同一时刻。 </returns>
      <param name="milliseconds">一个 Unix 时间，它表示为从 1970-01-01T00:00:00Z（1970 年 1 月 1 日，UTC 时间上午 12:00）开始已经过的毫秒数。对于在此日期之前的 Unix 时间，其值为负数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> 小于 -62,135,596,800,000。- 或 -<paramref name="milliseconds" /> 大于 253,402,300,799,999。</exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)">
      <summary>将 Unix 时间表示为自 1970 年 1 已过去的秒数转换-01-到 01T00:00:00Z<see cref="T:System.DateTimeOffset" />值。</summary>
      <returns>日期和时间值，该值表示为 Unix 时间的时间在同一时刻。 </returns>
      <param name="seconds">一个 Unix 时间，它表示为从 1970-01-01T00:00:00Z（1970 年 1 月 1 日，UTC 时间上午 12:00）开始已经过的秒数。对于在此日期之前的 Unix 时间，其值为负数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> 小于 -62,135,596,800。- 或 -<paramref name="seconds" /> 大于 253,402,300,799。</exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>返回当前 <see cref="T:System.DateTimeOffset" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的小时组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的小时组成部分。此属性使用 24 小时制；值介于 0 到 23 之间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的本地日期和时间。</summary>
      <returns>当前的 <see cref="T:System.DateTimeOffset" /> 对象的本地日期和时间。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>表示 <see cref="T:System.DateTimeOffset" /> 的最大可能值。此字段为只读。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> 位于当前或指定区域性的默认日历的范围之外。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的毫秒组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的毫秒组成部分，以 0 到 999 之间的一个整数来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的分钟组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的分钟组成部分，以 0 到 59 之间的一个整数来表示。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>表示可能的最早 <see cref="T:System.DateTimeOffset" /> 值。此字段为只读。</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期的月份组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的月份组成部分，以 1 到 12 之间的一个整数来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>获取一个 <see cref="T:System.DateTimeOffset" /> 对象，该对象设置为当前计算机上的当前日期和时间，偏移量设置为本地时间与协调世界时 (UTC) 之间的偏移量。</summary>
      <returns>一个 <see cref="T:System.DateTimeOffset" /> 对象，其日期和时间为当前的本地时间，其偏移量为本地时区与协调世界时 (UTC) 之间的偏移量。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>获取与协调世界时 (UTC) 之间的时间偏移量。</summary>
      <returns>当前的 <see cref="T:System.DateTimeOffset" /> 对象的时间值与协调世界时 (UTC) 之差。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>将指定的时间间隔与具有指定的日期和时间的 <see cref="T:System.DateTimeOffset" /> 对象相加，产生一个具有新的日期和时间的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>一个对象，其值为 <paramref name="dateTimeTz" /> 与 <paramref name="timeSpan" /> 的值之和。</returns>
      <param name="dateTimeOffset">要向其加上时间间隔的对象。</param>
      <param name="timeSpan">待添加的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间点。</summary>
      <returns>如果两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否大于（或晚于）另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值晚于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是大于还是等于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值等于或晚于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>定义从 <see cref="T:System.DateTime" /> 对象到 <see cref="T:System.DateTimeOffset" /> 对象的隐式转换。</summary>
      <returns>被转换的对象。</returns>
      <param name="dateTime">要转换的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量所产生的协调世界时 (UTC) 的日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -通过应用偏移量所产生的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示不同的时间点。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>从一个 <see cref="T:System.DateTimeOffset" /> 对象中减去另一个对象并生成时间间隔。</summary>
      <returns>一个表示 <paramref name="left" /> 与 <paramref name="right" /> 之差的对象。</returns>
      <param name="left">被减数。</param>
      <param name="right">减数。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>从指定的日期和时间减去指定的时间间隔，并生成新的日期和时间。</summary>
      <returns>一个对象，它等于 <paramref name="dateTimeOffset" /> 减 <paramref name="timeSpan" /> 的值。</returns>
      <param name="dateTimeOffset">要从其减去的日期和时间对象。</param>
      <param name="timeSpan">待减去的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" /> 或大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>将日期、时间和偏移量的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 中不包含有效的日期和时间的字符串表示形式。- 或 -<paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="formatProvider" /> 指定。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式信息。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 中不包含有效的日期和时间的字符串表示形式。- 或 -<paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的区域性特定格式信息和格式设置样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。- 或 -<paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。- 或 -<paramref name="styles" /> 包括不受支持的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。- 或 -<paramref name="styles" /> 包括不能在一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 中不包含有效的日期和时间的字符串表示形式。- 或 -<paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。- 或 -<paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 为空字符串 ("")。- 或 -<paramref name="input" /> 中不包含有效的日期和时间的字符串表示形式。- 或 -<paramref name="format" /> 是空字符串。- 或 -<paramref name="input" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。- 或 -<paramref name="styles" /> 参数包括不受支持的值。- 或 -<paramref name="styles" /> 参数包含不能在一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。- 或 -<paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 为空字符串 ("")。- 或 -<paramref name="input" /> 中不包含有效的日期和时间的字符串表示形式。- 或 -<paramref name="format" /> 是空字符串。- 或 -<paramref name="input" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、区域性特定格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formats">一个由格式说明符组成的数组，格式说明符用于定义 <paramref name="input" /> 的所需格式。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。- 或 -<paramref name="styles" /> 包括不受支持的值。- 或 -<paramref name="styles" /> 参数包含不能在一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 为空字符串 ("")。- 或 -<paramref name="input" /> 中不包含有效的日期和时间的字符串表示形式。- 或 -<paramref name="formats" /> 的元素不包含有效的格式说明符。- 或 -<paramref name="input" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时钟时间的秒组成部分。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 对象的秒组成部分，以 0 到 59 之间的一个整数值来表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去表示特定日期和时间的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>一个指定两个 <see cref="T:System.DateTimeOffset" /> 对象之间的间隔的对象。</returns>
      <param name="value">一个对象，表示要减去的值。</param>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去指定的时间间隔。</summary>
      <returns>一个对象，它等于当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间减去 <paramref name="value" /> 所表示的时间间隔。</returns>
      <param name="value">待减去的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值与相同类型的另一个对象进行比较。</summary>
      <returns>一个 32 位带符号整数，它指示当前的 <see cref="T:System.DateTimeOffset" /> 对象是小于、等于还是大于 <paramref name="obj" />。此方法的返回值的说明如下：返回值描述小于零当前的 <see cref="T:System.DateTimeOffset" /> 对象小于（早于）<paramref name="obj" />。零当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="obj" /> 相等（表示同一时间点）。大于零当前的 <see cref="T:System.DateTimeOffset" /> 对象大于（晚于）<paramref name="obj" />。</returns>
      <param name="obj">与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>获取计时周期数，此计时周期数表示时钟时间中当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 对象的时钟时间中的计时周期数。</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>获取当前 <see cref="T:System.DateTimeOffset" /> 对象的日时。</summary>
      <returns>表示当前日期自午夜以来的时间间隔。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为 Windows 文件时间。</summary>
      <returns>用 Windows 文件时间来表示的当前 <see cref="T:System.DateTimeOffset" /> 对象的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时 (UTC) 公元 1601 年 1 月 1 日午夜之前的日期和时间协调世界时 (UTC)。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象转换为表示本地时间的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>一个对象，表示当前的 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间，已转换为本地时间。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为偏移量值所指定的日期和时间。</summary>
      <returns>一个对象，它等于原始的 <see cref="T:System.DateTimeOffset" /> 对象（也就是说，它们的 <see cref="M:System.DateTimeOffset.ToUniversalTime" /> 方法返回的时间点相同），但其 <see cref="P:System.DateTimeOffset.Offset" /> 属性设置为 <paramref name="offset" />。</returns>
      <param name="offset">
        <see cref="T:System.DateTimeOffset" /> 值所转换成的偏移量。</param>
      <exception cref="T:System.ArgumentException">所生成的 <see cref="T:System.DateTimeOffset" /> 对象的值 <see cref="P:System.DateTimeOffset.DateTime" /> 值早于 <see cref="F:System.DateTimeOffset.MinValue" />。- 或 -所生成的 <see cref="T:System.DateTimeOffset" /> 对象的 <see cref="P:System.DateTimeOffset.DateTime" /> 值晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 -14 小时。- 或 -<paramref name="offset" /> 大于 14 小时。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>一个 <see cref="T:System.DateTimeOffset" /> 对象的字符串表示形式，并在字符串末尾追加了偏移量。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">当前区域性所使用的日历支持的日期范围之外的日期和时间。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>由 <paramref name="formatProvider" /> 指定的当前 <see cref="T:System.DateTimeOffset" /> 对象的值的字符串表示形式。</returns>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="formatProvider" /> 使用的日历支持的日期范围之外。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>使用指定的格式将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" />.</returns>
      <param name="format">一个格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度是 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的标准格式说明符之一。- 或 -<paramref name="format" /> 中不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前区域性所使用的日历支持的日期范围之外的日期和时间。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>由 <paramref name="format" /> 和 <paramref name="provider" /> 指定的当前 <see cref="T:System.DateTimeOffset" /> 对象的值的字符串表示形式。</returns>
      <param name="format">一个格式字符串。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度是 1，并且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的标准格式说明符之一。- 或 -<paramref name="format" /> 中不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间处于由 <paramref name="formatProvider" /> 使用的日历支持的日期范围之外。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象转换为一个表示协调世界时 (UTC) 的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>一个对象，它表示转换为协调世界时 (UTC) 的当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeMilliseconds">
      <summary>返回自 1970 年 1 经过的毫秒数-01-01T00:00:00.000Z。</summary>
      <returns>自 1970 年 1 经过的毫秒数-01-01T00:00:00.000Z。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeSeconds">
      <summary>返回自 1970 年 1 已过去的秒数-01-01T00:00:00Z。</summary>
      <returns>自 1970 年 1 已过去的秒数-01-01T00:00:00Z。</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>尝试将日期和时间的指定字符串表示形式转换为它的等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 参数为 null，或者不包含日期和时间的有效字符串表示形式，则转换失败。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>尝试将日期和时间的指定字符串表示形式转换为它的等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" /> 值，如果转换失败，则为 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 参数为 null，或者不包含日期和时间的有效字符串表示形式，则转换失败。此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。- 或 -不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。- 或 -<paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示输入所允许的格式。要指定的一个典型值为 None。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 参数为 null，或者该参数不包含 <paramref name="format" /> 和 <paramref name="provider" /> 所定义的所需格式的日期和时间的有效字符串表示形式，则转换失败。此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。- 或 -不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。- 或 -<paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formats">一个用于定义 <paramref name="input" /> 的所需格式的数组。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示输入所允许的格式。要指定的一个典型值为 None。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式，或者不包含 <paramref name="format" /> 所定义的所需格式的日期和时间，或者 <paramref name="formats" /> 为 null，则转换失败。此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。- 或 -不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。- 或 -<paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>获取一个 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>获取一个 <see cref="T:System.DateTimeOffset" /> 对象，其日期和时间设置为当前的协调世界时 (UTC) 日期和时间，其偏移量为 <see cref="F:System.TimeSpan.Zero" />。</summary>
      <returns>一个对象，其日期和时间为当前的协调世界时 (UTC)，其偏移量为 <see cref="F:System.TimeSpan.Zero" />。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>获取表示当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间的计时周期数。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 中的计时周期数。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期的年份组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的年份组成部分，以 0 到 9999 之间的一个整数值来表示。</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>指定一周的某天。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>表示星期五。</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>表示星期一。</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>表示星期六。</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>表示星期日。</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>表示星期四。</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>表示星期二。</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>表示星期三。</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>表示十进制数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的双精度浮点数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.-or- <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 32 位有符号整数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>用指定实例构成部分的参数来初始化 <see cref="T:System.Decimal" /> 的新实例。</summary>
      <param name="lo">96 位整数的低 32 位。</param>
      <param name="mid">96 位整数的中间 32 位。</param>
      <param name="hi">96 位整数的高 32 位。</param>
      <param name="isNegative">若要指示负数，则为 true；若要指示正数，则为 false。</param>
      <param name="scale">10 的指数（0 到 28 之间）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> is greater than 28. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为以二进制表示的、包含在指定数组中的十进制值。</summary>
      <param name="bits">包含十进制值表示形式的 32 位有符号整数的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="bits" /> is not 4.-or- The representation of the decimal value in <paramref name="bits" /> is not valid. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 64 位有符号整数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的单精度浮点数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.-or- <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 32 位无符号整数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 64 位无符号整数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>将两个指定的 <see cref="T:System.Decimal" /> 值相加。</summary>
      <returns>
        <paramref name="d1" /> 与 <paramref name="d2" /> 的和。</returns>
      <param name="d1">要相加的第一个值。</param>
      <param name="d2">要相加的第二个值。</param>
      <exception cref="T:System.OverflowException">The sum of <paramref name="d1" /> and <paramref name="d2" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>返回大于或等于指定的十进制数的最小整数值。</summary>
      <returns>大于或等于 <paramref name="d" /> 参数的最小整数值。请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。</returns>
      <param name="d">十进制数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>比较两个指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>有符号数字，指示 <paramref name="d1" /> 和 <paramref name="d2" /> 的相对值。Return value Meaning Less than zero <paramref name="d1" /> is less than <paramref name="d2" />. Zero <paramref name="d1" /> and <paramref name="d2" /> are equal. Greater than zero <paramref name="d1" /> is greater than <paramref name="d2" />. </returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>将此实例与指定的 <see cref="T:System.Decimal" /> 对象进行比较并返回一个对二者的相对值的比较。</summary>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。Return value Meaning Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">与该实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>将两个指定的 <see cref="T:System.Decimal" /> 值相除。</summary>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 的结果。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value (that is, the quotient) is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Decimal" /> 对象是否表示相同的值。</summary>
      <returns>如果 true 与此实例相等，则为 <paramref name="value" />；否则为 false。</returns>
      <param name="value">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示 <see cref="T:System.Decimal" /> 的两个指定实例是否表示同一个值。</summary>
      <returns>如果 true 和 <paramref name="d1" /> 相等，则为 <paramref name="d2" />；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Object" /> 是否表示相同的类型和值。</summary>
      <returns>如果 <paramref name="value" /> 是一个 <see cref="T:System.Decimal" /> 且与此实例相等，则为 true；否则为 false。</returns>
      <param name="value">与该实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 数字向负无穷方向舍入为最接近的整数。</summary>
      <returns>如果 <paramref name="d" /> 有小数部分，则为负无穷方向上小于 <paramref name="d" /> 的下一个整 <see cref="T:System.Decimal" /> 数字。- 或 - 如果 <paramref name="d" /> 没有小数部分，则 <paramref name="d" /> 原样返回。请注意，该方法将返回 <see cref="T:System.Decimal" /> 类型的整数值。</returns>
      <param name="d">要舍入的值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>将 <see cref="T:System.Decimal" /> 的指定实例的值转换为其等效的二进制表示形式。</summary>
      <returns>包含 <paramref name="d" /> 二进制表示形式、由四个元素组成的 32 位有符号整数数组。</returns>
      <param name="d">要转换的值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>表示 <see cref="T:System.Decimal" /> 的最大可能值。该字段是常数且为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>表示数字负一 (-1)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>表示 <see cref="T:System.Decimal" /> 的最小可能值。该字段是常数且为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>两个指定的 <see cref="T:System.Decimal" /> 值相乘。</summary>
      <returns>
        <paramref name="d1" /> 与 <paramref name="d2" /> 相乘的结果。</returns>
      <param name="d1">被乘数。</param>
      <param name="d2">乘数。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>返回指定的 <see cref="T:System.Decimal" /> 值乘以 -1 的结果。</summary>
      <returns>具有 <paramref name="d" /> 的值，但符号相反的十进制数。- 或 - 如果 <paramref name="d" /> 为零，则为零。</returns>
      <param name="d">要求反的值。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.One">
      <summary>表示数字一 (1)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>将两个指定的 <see cref="T:System.Decimal" /> 值相加。</summary>
      <returns>
        <paramref name="d1" /> 与 <paramref name="d2" /> 相加的结果。</returns>
      <param name="d1">要相加的第一个值。</param>
      <param name="d2">要相加的第二个值。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 操作数减 1。</summary>
      <returns>
        <paramref name="d" /> 减 1 所得的值。</returns>
      <param name="d">要递减的值。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>将两个指定的 <see cref="T:System.Decimal" /> 值相除。</summary>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 的结果。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Decimal" /> 值是否相等。</summary>
      <returns>如果 true 和 <paramref name="d1" /> 相等，则为 <paramref name="d2" />；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 8 位有符号整数的显式转换。</summary>
      <returns>8 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 64 位有符号整数的显式转换。</summary>
      <returns>64 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 16 位无符号整数的显式转换。</summary>
      <returns>16 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 64 位无符号整数的显式转换。</summary>
      <returns>64 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 32 位无符号整数的显式转换。</summary>
      <returns>32 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 32 位有符号整数的显式转换。</summary>
      <returns>32 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>定义从 Unicode 字符到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>表示转换后的 <see cref="T:System.Decimal" /> 的 Unicode 字符。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 8 位无符号整数的显式转换。</summary>
      <returns>8 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>定义从 <see cref="T:System.Decimal" /> 到单精度浮点数的显式转换。</summary>
      <returns>单精度浮点数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 16 位有符号整数的显式转换。</summary>
      <returns>16 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>定义从 <see cref="T:System.Decimal" /> 到双精度浮点数的显式转换。</summary>
      <returns>双精度浮点数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要转换的值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>定义从双精度浮点数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>已转换的双精度浮点数。</returns>
      <param name="value">要转换的双精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.-or- <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>定义从单精度浮点数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>已转换的单精度浮点数。</returns>
      <param name="value">要转换的单精度浮点数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.-or- <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是否大于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 true 大于 <paramref name="d1" />，则为 <paramref name="d2" />；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是否大于等于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 大于等于 <paramref name="d2" />，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>定义从 8 位无符号整数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>已转换的 8 位无符号整数。</returns>
      <param name="value">要转换的 8 位无符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>定义从 Unicode 字符到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>转换后的 Unicode 字符。</returns>
      <param name="value">要转换的 Unicode 字符。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>定义从 16 位有符号整数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>转换后的 16 位有符号整数。</returns>
      <param name="value">要转换的 16 位有符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>定义从 32 位有符号整数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>转换后的 32 位有符号整数。</returns>
      <param name="value">要转换的 32 位带符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>定义从 64 位有符号整数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>转换后的 64 位有符号整数。</returns>
      <param name="value">要转换的 64 位带符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>定义从 8 位有符号整数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>转换后的 8 位有符号整数。</returns>
      <param name="value">要转换的 8 位带符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>定义从 16 位无符号整数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>已转换的 16 位无符号整数。</returns>
      <param name="value">要转换的 16 位无符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>定义从 32 位无符号整数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>已转换的 32 位无符号整数。</returns>
      <param name="value">要转换的 32 位无符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>定义从 64 位无符号整数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <returns>已转换的 64 位无符号整数。</returns>
      <param name="value">要转换的 64 位无符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>将 <see cref="T:System.Decimal" /> 操作数增加 1。</summary>
      <returns>
        <paramref name="d" /> 增加 1 后的值。</returns>
      <param name="d">要递增的值。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Decimal" /> 对象是否具有不同的值。</summary>
      <returns>如果 true 和 <paramref name="d1" /> 不相等，则为 <paramref name="d2" />；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是否小于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 小于 <paramref name="d2" />，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是小于还是等于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 小于等于 <paramref name="d2" />，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>返回两个指定 <see cref="T:System.Decimal" /> 值相除所得的余数。</summary>
      <returns>该余数是由 <paramref name="d1" /> 除以 <paramref name="d2" /> 所得。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>两个指定的 <see cref="T:System.Decimal" /> 值相乘。</summary>
      <returns>
        <paramref name="d1" /> 与 <paramref name="d2" /> 相乘的结果。</returns>
      <param name="d1">要相乘的第一个值。</param>
      <param name="d2">要相乘的第二个值。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>将两个指定的 <see cref="T:System.Decimal" /> 值相减。</summary>
      <returns>
        <paramref name="d2" /> 减 <paramref name="d1" /> 所得的结果。</returns>
      <param name="d1">被减数。</param>
      <param name="d2">减数。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>对指定 <see cref="T:System.Decimal" /> 操作数的值求反。</summary>
      <returns>
        <paramref name="d" /> 乘以负一 (-1) 的结果。</returns>
      <param name="d">要求反的值。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>返回 <see cref="T:System.Decimal" /> 操作数的值（操作数符号不变）。</summary>
      <returns>操作数 <paramref name="d" /> 的值。</returns>
      <param name="d">要返回的操作数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal" /> 表示形式。</summary>
      <returns>
        <paramref name="s" /> 中包含的数字的等效值。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 数，它与 <paramref name="style" /> 所指定的 <paramref name="s" /> 中包含的数字等效。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>使用指定样式和区域性特定格式将数字的字符串表示形式转换为其 <see cref="T:System.Decimal" /> 等效项。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 数，它与 <paramref name="style" /> 和 <paramref name="provider" /> 所指定的 <paramref name="s" /> 中包含的数字等效。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 对象，用于提供有关 <paramref name="s" /> 格式的区域性特定信息。</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息将数字的字符串表示形式转换为其 <see cref="T:System.Decimal" /> 等效项。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 数，它与由 <paramref name="provider" /> 所指定的 <paramref name="s" /> 中包含的数字等效。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定分析信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>计算两个 <see cref="T:System.Decimal" /> 值相除后的余数。</summary>
      <returns>将 <paramref name="d1" /> 除以 <paramref name="d2" /> 后的余数。</returns>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>从一个 <see cref="T:System.Decimal" /> 值中减去指定的另一个值。</summary>
      <returns>
        <paramref name="d2" /> 减 <paramref name="d1" /> 所得的结果。</returns>
      <param name="d1">被减数。</param>
      <param name="d2">减数。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">要与此实例进行比较的对象，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Decimal" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>无。不支持此转换。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>无。不支持此转换。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
      <param name="type">要将此 <see cref="T:System.Decimal" /> 实例的值转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的区域性特定信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 8 位无符号整数。</summary>
      <returns>等效于 <paramref name="value" /> 的 8 位无符号整数。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的双精度浮点数。</summary>
      <returns>与 <paramref name="d" /> 等效的双精度浮点数。</returns>
      <param name="d">要转换的十进制数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 16 位有符号整数。</summary>
      <returns>等效于 <paramref name="value" /> 的 16 位有符号整数。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 32 位有符号整数。</summary>
      <returns>与 <paramref name="d" /> 的值等效的 32 位有符号整数。</returns>
      <param name="d">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 64 位有符号整数。</summary>
      <returns>与 <paramref name="d" /> 的值等效的 64 位有符号整数。</returns>
      <param name="d">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 8 位有符号整数。</summary>
      <returns>等效于 <paramref name="value" /> 的 8 位有符号整数。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的单精度浮点数。</summary>
      <returns>等效于 <paramref name="d" /> 的值的单精度浮点数字。</returns>
      <param name="d">要转换的十进制数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>表示此实例的值的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">标准或自定义的数值格式字符串（请参见“备注”）。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">数值格式字符串（请参见“备注”）。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 16 位无符号整数。</summary>
      <returns>与 <paramref name="value" /> 的值等效的 16 位无符号整数。</returns>
      <param name="value">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 32 位无符号整数。</summary>
      <returns>与 <paramref name="d" /> 的值等效的 32 位无符号整数。</returns>
      <param name="d">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 64 位无符号整数。</summary>
      <returns>与 <paramref name="d" /> 的值等效的 64 位无符号整数。</returns>
      <param name="d">要转换的十进制数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>返回指定的 <see cref="T:System.Decimal" /> 的整数位，所有小数位均被放弃。</summary>
      <returns>
        <paramref name="d" /> 向零舍入为最接近的整数后的结果。</returns>
      <param name="d">要截断的十进制数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal" /> 表示形式。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含数值等效的 <see cref="T:System.Decimal" /> 数；如果转换失败，则为零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>使用指定样式和区域性特定格式将数字的字符串表示形式转换为其 <see cref="T:System.Decimal" /> 等效项。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">一个对象，它提供有关 <paramref name="s" /> 的区域性特定分析信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含数值等效的 <see cref="T:System.Decimal" /> 数；如果转换失败，则为零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>表示数字零 (0)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Delegate">
      <summary>表示委托，委托是一种数据结构，它引用静态方法或引用类实例及该类的实例方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>将两个委托的调用列表连接在一起。</summary>
      <returns>新的委托，它的调用列表将 <paramref name="a" /> 和 <paramref name="b" /> 的调用列表按该顺序连接在一起。如果 <paramref name="b" /> 为 null，则返回 <paramref name="a" />，如果 <paramref name="a" /> 为空引用，则返回 <paramref name="b" />，如果 <paramref name="a" /> 和 <paramref name="b" /> 均为空引用，则返回空引用。</returns>
      <param name="a">最先出现其调用列表的委托。</param>
      <param name="b">最后出现其调用列表的委托。</param>
      <exception cref="T:System.ArgumentException">Both <paramref name="a" /> and <paramref name="b" /> are not null, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>将委托数组的调用列表连接在一起。</summary>
      <returns>新的委托，该委托的调用列表将 <paramref name="delegates" /> 数组中的委托的调用列表连接在一起。如果 <paramref name="delegates" /> 为 null，<paramref name="delegates" /> 包含零个元素，或 <paramref name="delegates" /> 中的每项均为 null，则返回 null。</returns>
      <param name="delegates">要组合的委托数组。</param>
      <exception cref="T:System.ArgumentException">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>动态调用（后期绑定）由当前委托所表示的方法。</summary>
      <returns>委托所表示的方法返回的对象。</returns>
      <param name="args">作为参数传递给当前委托所表示的方法的对象数组。- 或 - 
如果当前委托所表示的方法不需要参数，则为 null。</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).-or- The number, order, or type of parameters listed in <paramref name="args" /> is invalid. </exception>
      <exception cref="T:System.ArgumentException">The method represented by the delegate is invoked on an object or a class that does not support it. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The method represented by the delegate is an instance method and the target object is null.-or- One of the encapsulated methods throws an exception. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>确定指定的对象和当前委托的类型是否相同，是否共享相同的目标、方法和调用列表。</summary>
      <returns>如果 <paramref name="obj" /> 和当前委托有相同的目标、方法和调用列表，则为 true；否则为 false。</returns>
      <param name="obj">要与当前委托进行比较的对象。 </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>返回委托的哈希代码。</summary>
      <returns>委托的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>返回委托的调用列表。</summary>
      <returns>委托构成的数组，表示当前委托的调用列表。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>确定指定的委托是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 等于 <paramref name="d2" />，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个委托。</param>
      <param name="d2">要比较的第二个委托。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>确定指定的委托是否不相等。</summary>
      <returns>如果 <paramref name="d1" /> 不等于 <paramref name="d2" />，则为 true；否则为 false。</returns>
      <param name="d1">要比较的第一个委托。</param>
      <param name="d2">要比较的第二个委托。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>从一个委托的调用列表中移除另一个委托的最后一个调用列表。</summary>
      <returns>一个新委托，其调用列表的构成方法为：获取 <paramref name="source" /> 的调用列表，如果在 <paramref name="source" /> 的调用列表中找到了 <paramref name="value" /> 的调用列表，则从中移除 <paramref name="value" /> 的最后一个调用列表。如果 <paramref name="value" /> 为 null，或在 <paramref name="source" /> 的调用列表中没有找到 <paramref name="value" /> 的调用列表，则返回 <paramref name="source" />。如果 <paramref name="value" /> 的调用列表等于 <paramref name="source" /> 的调用列表，或 <paramref name="source" /> 为空引用，则返回空引用。</returns>
      <param name="source">委托，将从中移除 <paramref name="value" /> 的调用列表。</param>
      <param name="value">委托，它提供将从其中移除 <paramref name="source" /> 的调用列表的调用列表。</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
      <summary>从一个委托的调用列表中移除另一个委托的所有调用列表。</summary>
      <returns>一个新委托，其调用列表的构成方法为：获取 <paramref name="source" /> 的调用列表，如果在 <paramref name="source" /> 的调用列表中找到了 <paramref name="value" /> 的调用列表，则从中移除 <paramref name="value" /> 的所有调用列表。如果 <paramref name="value" /> 为 null，或在 <paramref name="source" /> 的调用列表中没有找到 <paramref name="value" /> 的调用列表，则返回 <paramref name="source" />。如果 <paramref name="value" /> 的调用列表等于 <paramref name="source" /> 的调用列表，如果 <paramref name="source" /> 只包含等于 <paramref name="value" /> 的调用列表的一系列调用列表，或者如果 <paramref name="source" /> 为空引用，则返回空引用。</returns>
      <param name="source">委托，将从中移除 <paramref name="value" /> 的调用列表。</param>
      <param name="value">委托，它提供将从其中移除 <paramref name="source" /> 的调用列表的调用列表。</param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>获取类实例，当前委托将对其调用实例方法。</summary>
      <returns>如果委托表示实例方法，则为当前委托对其调用实例方法的对象；如果委托表示静态方法，则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>试图用零除整数值或十进制数值时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>初始化 <see cref="T:System.DivideByZeroException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.DivideByZeroException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.DivideByZeroException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Double">
      <summary>表示一个双精度浮点数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>将此实例与指定的双精度浮点数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定双精度浮点数的值。</summary>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />). </returns>
      <param name="value">要比较的双精度浮点数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>表示大于零的最小正 <see cref="T:System.Double" /> 值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Double" /> 对象是否表示相同的值。</summary>
      <returns>如果 true 与此实例相等，则为 <paramref name="obj" />；否则为 false。</returns>
      <param name="obj">要与此示例比较的 <see cref="T:System.Double" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Double" />；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>返回一个值，该值指示指定数字是计算为负无穷大还是正无穷大。 </summary>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，则为 true；否则为 false。</returns>
      <param name="d">一个双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>返回一个值，该值指示指定的值是否不为数字 (<see cref="F:System.Double.NaN" />)。</summary>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.NaN" />，则为 true；否则为 false。</returns>
      <param name="d">一个双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>返回一个值，通过该值指示指定数字是否计算为负无穷大。</summary>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.NegativeInfinity" />，则为 true；否则为 false。</returns>
      <param name="d">一个双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>返回一个值，通过该值指示指定数字是否计算为正无穷大。</summary>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.PositiveInfinity" />，则为 true；否则为 false。</returns>
      <param name="d">一个双精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>表示 <see cref="T:System.Double" /> 的最大可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>表示 <see cref="T:System.Double" /> 的最小可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.NaN">
      <summary>表示不是数字 (NaN) 的值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>表示负无穷。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.op_Equality(System.Double,System.Double)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Double" /> 值是否相等。</summary>
      <returns>如果 true 和 <paramref name="left" /> 相等，则为 <paramref name="right" />；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.op_GreaterThan(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否大于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 true 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否大于或等于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大于等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.op_Inequality(System.Double,System.Double)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Double" /> 值是否不相等。</summary>
      <returns>如果 true 和 <paramref name="left" /> 不相等，则为 <paramref name="right" />；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.op_LessThan(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否小于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否小于或等于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>表示正无穷。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Double" />. </exception>
    </member>
    <member name="M:System.Double.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Double" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的区域性特定信息。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">忽略此参数。  </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Double.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>将数字的字符串表示形式转换为它的等效双精度浮点数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 参数等效的双精度浮点数；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示 <paramref name="s" /> 的允许格式。一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数值或符号等效的双精度浮点数；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />、表示的数字小于<see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />，或者 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 枚举的常数的有效组合，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Enum">
      <summary>为枚举提供基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>初始化 <see cref="T:System.Enum" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <returns>一个有符号数字，用于指示此实例和 <paramref name="target" /> 的相对值。值含义小于零此实例的值小于 <paramref name="target" /> 的值。零此实例的值等于 <paramref name="target" /> 的值。大于零此实例的值大于 <paramref name="target" /> 的值。- 或 - <paramref name="target" /> 为 null。</returns>
      <param name="target">要比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> and this instance are not the same type. </exception>
      <exception cref="T:System.InvalidOperationException">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是相同类型的枚举值并且使用的基础值与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象，或为 null。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>根据指定格式将指定枚举类型的指定值转换为其等效的字符串表示形式。</summary>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <param name="enumType">要转换的值的枚举类型。</param>
      <param name="value">要转换的值。</param>
      <param name="format">要使用的输出格式。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.-or- The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.-or- The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />. </exception>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter contains an invalid value. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>返回该实例的值的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>在指定枚举中检索具有指定值的常数的名称。</summary>
      <returns>一个字符串，其中包含 <paramref name="enumType" /> 中值为 <paramref name="value" /> 的枚举常数的名称；如果没有找到这样的常数，则为 null。</returns>
      <param name="enumType">枚举类型。</param>
      <param name="value">特定枚举常数的值（根据其基础类型）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>检索指定枚举中常数名称的数组。</summary>
      <returns>
        <paramref name="enumType" /> 的常数名称的字符串数组。</returns>
      <param name="enumType">枚举类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>返回指定枚举的基础类型。</summary>
      <returns>
        <paramref name="enumType" /> 的基础类型。</returns>
      <param name="enumType">基础类型将被检索的枚举。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>检索指定枚举中常数值的数组。</summary>
      <returns>一个数组，其中包含 <paramref name="enumType" /> 中常数的值。</returns>
      <param name="enumType">枚举类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />. </exception>
      <exception cref="T:System.InvalidOperationException">The method is invoked by reflection in a reflection-only context, -or-<paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
      <summary>确定当前实例中是否设置了一个或多个位域。</summary>
      <returns>如果在 <paramref name="flag" /> 中设置的位域也在当前实例中进行了设置，则为 true；否则为 false。</returns>
      <param name="flag">一个枚举值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> is a different type than the current instance.</exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>返回指定枚举中是否存在具有指定值的常数的指示。</summary>
      <returns>如果 <paramref name="enumType" /> 的某个常数具有等于 <paramref name="value" /> 的值，则为 true；否则为 false。</returns>
      <param name="enumType">枚举类型。</param>
      <param name="value">
        <paramref name="enumType" /> 的常数的值或名称。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an Enum.-or- The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.-or- The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。</summary>
      <returns>
        <paramref name="enumType" /> 类型的对象，其值由 <paramref name="value" /> 表示。</returns>
      <param name="enumType">枚举类型。</param>
      <param name="value">包含要转换的值或名称的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is either an empty string or only contains white space.-or- <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。一个参数指定该操作是否不区分大小写。</summary>
      <returns>
        <paramref name="enumType" /> 类型的对象，其值由 <paramref name="value" /> 表示。</returns>
      <param name="enumType">枚举类型。</param>
      <param name="value">包含要转换的值或名称的字符串。 </param>
      <param name="ignoreCase">true 为忽略大小写；false 为考虑大小写。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is either an empty string ("") or only contains white space.-or- <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为布尔值。</summary>
      <returns>此成员总是引发异常。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 8 位无符号整数。</summary>
      <returns>转换后的值。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 Unicode 字符。</summary>
      <returns>此成员总是引发异常。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 <see cref="T:System.DateTime" />。</summary>
      <returns>此成员总是引发异常。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 <see cref="T:System.Decimal" />。</summary>
      <returns>此成员总是引发异常。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为双精度浮点数。</summary>
      <returns>此成员总是引发异常。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 16 位有符号整数。</summary>
      <returns>转换后的值。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 32 位有符号整数。</summary>
      <returns>转换后的值。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 64 位有符号整数。</summary>
      <returns>转换后的值。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 8 位有符号整数。</summary>
      <returns>转换后的值。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为单精度浮点数。</summary>
      <returns>此成员总是引发异常。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为字符串。</summary>
      <returns>转换后的值。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为指定类型。</summary>
      <returns>转换后的值。</returns>
      <param name="type">要转换为的类型。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 16 位无符号整数。</summary>
      <returns>转换后的值。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 32 位无符号整数。</summary>
      <returns>转换后的值。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 64 位无符号整数。</summary>
      <returns>转换后的值。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
    </member>
    <member name="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>此方法重载已过时；请使用 <see cref="M:System.Enum.ToString(System.String)" />。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">格式规范。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> does not contain a valid format specification. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>将具有整数值的指定对象转换为枚举成员。</summary>
      <returns>值为 <paramref name="value" /> 的枚举对象。</returns>
      <param name="enumType">要返回的枚举类型。</param>
      <param name="value">要转换为枚举成员的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>将此实例的值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>使用指定格式将此实例的值转换成其等效的字符串表示。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> contains an invalid specification. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> equals "X", but the enumeration type is unknown.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。一个参数指定该操作是否区分大小写。用于指示转换是否成功的返回值。</summary>
      <returns>如果 <paramref name="value" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="value">要转换的枚举名称或基础值的字符串表示形式。</param>
      <param name="ignoreCase">true 表示不区分大小写；false 表示区分大小写。</param>
      <param name="result">当此方法返回时，如果分析操作成功，<paramref name="result" /> 将包含值由 <paramref name="value" /> 表示的 <paramref name="TEnum" /> 类型的对象。如果分析操作失败，<paramref name="result" /> 将包含 <paramref name="TEnum" />的基础类型的默认值。请注意，此值不需要是 <paramref name="TEnum" /> 枚举的成员。此参数未经初始化即被传递。</param>
      <typeparam name="TEnum">要将 <paramref name="value" /> 转换为的枚举类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。用于指示转换是否成功的返回值。</summary>
      <returns>如果 <paramref name="value" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="value">要转换的枚举名称或基础值的字符串表示形式。</param>
      <param name="result">当此方法返回时，如果分析操作成功，<paramref name="result" /> 将包含值由 <paramref name="value" /> 表示的 <paramref name="TEnum" /> 类型的对象。如果分析操作失败，<paramref name="result" /> 将包含 <paramref name="TEnum" />的基础类型的默认值。请注意，此值不需要是 <paramref name="TEnum" /> 枚举的成员。此参数未经初始化即被传递。</param>
      <typeparam name="TEnum">要将 <paramref name="value" /> 转换为的枚举类型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> is not an enumeration type.</exception>
    </member>
    <member name="T:System.EventArgs">
      <summary>表示包含事件数据的类的基类，并提供要用于不包含事件数据的事件的值。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>初始化 <see cref="T:System.EventArgs" /> 类的新实例。</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>提供要用于没有事件数据的事件的值。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.EventHandler">
      <summary>表示将处理不包含事件数据的事件的方法。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventHandler.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.EventHandler.BeginInvoke(System.Object,System.EventArgs,System.AsyncCallback,System.Object)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.EventHandler.EndInvoke(System.IAsyncResult)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.EventHandler.Invoke(System.Object,System.EventArgs)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>表示将在事件提供数据时处理该事件的方法。</summary>
      <typeparam name="TEventArgs">由该事件生成的事件数据的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.EventHandler`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.EventHandler`1.BeginInvoke(System.Object,`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.EventHandler`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.EventHandler`1.Invoke(System.Object,`0)"></member>
    <member name="T:System.Exception">
      <summary>表示在应用程序执行过程中发生的错误。若要浏览此类型的 .NET Framework 源代码，请参阅引用源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>获取提供有关异常的其他用户定义信息的键/值对集合。</summary>
      <returns>一个对象，它实现 <see cref="T:System.Collections.IDictionary" /> 接口并包含用户定义的键/值对的集合。默认值为空集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>当在派生类中重写时，返回 <see cref="T:System.Exception" />，它是一个或多个并发的异常的根源。</summary>
      <returns>异常链中第一个被引发的异常。如果当前异常的 <see cref="P:System.Exception.InnerException" /> 属性是 null 引用（Visual Basic 中为 Nothing），则此属性返回当前异常。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>获取或设置指向与此异常关联的帮助文件链接。</summary>
      <returns>统一资源名称 (URN) 或统一资源定位器 (URL)。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>获取或设置 HRESULT（一个分配给特定异常的编码数字值）。</summary>
      <returns>HRESULT 值。</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>获取导致当前异常的 <see cref="T:System.Exception" /> 实例。</summary>
      <returns>描述导致当前异常的错误的一个对象。<see cref="P:System.Exception.InnerException" /> 属性返回的值与传递到 <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> 构造函数中的值相同，如果没有向构造函数提供内部异常值，则为 null。此属性是只读的。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Exception.Message">
      <summary>获取描述当前异常的消息。</summary>
      <returns>解释异常原因的错误消息或空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Exception.Source">
      <summary>获取或设置导致错误的应用程序或对象的名称。</summary>
      <returns>导致错误的应用程序或对象的名称。</returns>
      <exception cref="T:System.ArgumentException">The object must be a runtime <see cref="N:System.Reflection" /> object</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>获取调用堆栈上的即时框架字符串表示形式。</summary>
      <returns>用于描述调用堆栈的直接帧的字符串。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>创建并返回当前异常的字符串表示形式。</summary>
      <returns>当前异常的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>当试图非法访问类中的私有字段或受保护字段时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.FieldAccessException.#ctor">
      <summary>初始化 <see cref="T:System.FieldAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.FieldAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.FieldAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>指示可以将枚举作为位域（即一组标志）处理。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.FlagsAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>当一个参数的格式无效时，或当  复合格式字符串  格式不良时，会引发此异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.FormattableString">
      <summary>表示一个复合格式字符串，以及使用要设置格式的参数中。</summary>
    </member>
    <member name="M:System.FormattableString.#ctor">
      <summary>实例化 <see cref="T:System.FormattableString" /> 类的新实例。</summary>
    </member>
    <member name="P:System.FormattableString.ArgumentCount">
      <summary>获取要设置格式的参数的数目。</summary>
      <returns>要设置格式的参数的数目。</returns>
    </member>
    <member name="P:System.FormattableString.Format">
      <summary>返回的复合格式字符串。</summary>
      <returns>复合格式字符串中。</returns>
    </member>
    <member name="M:System.FormattableString.GetArgument(System.Int32)">
      <summary>返回指定的索引位置处的参数。</summary>
      <returns>参数。</returns>
      <param name="index">参数的索引。其值可以介于 0 到减 1 所得的值<see cref="P:System.FormattableString.ArgumentCount" />。</param>
    </member>
    <member name="M:System.FormattableString.GetArguments">
      <summary>返回一个对象数组，包含一个或多个要设置格式的对象。</summary>
      <returns>一个对象数组，包含一个或多个要设置格式的对象。</returns>
    </member>
    <member name="M:System.FormattableString.Invariant(System.FormattableString)">
      <summary>返回参数使用固定区域性的约定的格式的结果字符串。</summary>
      <returns>使用固定区域性的约定设置格式的当前实例字符串。</returns>
      <param name="formattable">要转换到结果字符串的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formattable" /> 为 null。</exception>
    </member>
    <member name="M:System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>返回使用指定区域性格式设置约定设置格式字符串格式以及其参数而生成的字符串。</summary>
      <returns>使用的约定设置格式的字符串<paramref name="formatProvider" />参数。</returns>
      <param name="ignored">一个字符串。此参数忽略。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
    </member>
    <member name="M:System.FormattableString.ToString">
      <summary>返回使用当前区域性的格式设置约定设置格式沿其参数的复合格式字符串而得出的字符串。</summary>
      <returns>使用当前区域性的约定设置格式的一个结果字符串。</returns>
    </member>
    <member name="M:System.FormattableString.ToString(System.IFormatProvider)">
      <summary>返回使用指定区域性格式设置约定设置复合格式字符串格式以及其参数而生成的字符串。</summary>
      <returns>结果字符串设置格式的使用的约定<paramref name="formatProvider" />。</returns>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
    </member>
    <member name="T:System.Func`1">
      <summary>封装一个不具有参数但却返回 <paramref name="TResult" /> 参数指定的类型值的方法。</summary>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Func`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`1.BeginInvoke(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`1.Invoke"></member>
    <member name="T:System.Func`10">
      <summary>封装一个方法，该方法具有九个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`10.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`10.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`10.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`10.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8)"></member>
    <member name="T:System.Func`11">
      <summary>封装一个方法，该方法具有 10 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`11.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`11.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`11.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`11.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)"></member>
    <member name="T:System.Func`12">
      <summary>封装一个方法，该方法具有 11 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`12.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`12.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`12.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`12.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)"></member>
    <member name="T:System.Func`13">
      <summary>封装一个方法，该方法具有 12 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`13.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`13.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`13.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`13.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)"></member>
    <member name="T:System.Func`14">
      <summary>封装一个方法，该方法具有 13 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`14.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`14.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`14.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`14.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)"></member>
    <member name="T:System.Func`15">
      <summary>封装一个方法，该方法具有 14 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`15.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`15.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`15.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`15.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)"></member>
    <member name="T:System.Func`16">
      <summary>封装一个方法，该方法具有 15 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`16.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`16.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`16.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`16.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)"></member>
    <member name="T:System.Func`17">
      <summary>封装一个方法，该方法具有 16 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`17.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`17.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`17.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`17.Invoke(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)"></member>
    <member name="T:System.Func`2">
      <summary>封装一个具有一个参数并返回 <paramref name="TResult" /> 参数指定的类型值的方法。若要浏览此类型的 .NET Framework 源代码，请参阅引用源。</summary>
      <typeparam name="T">此委托封装的方法的参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`2.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`2.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`2.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`2.Invoke(`0)"></member>
    <member name="T:System.Func`3">
      <summary>封装一个具有两个参数并返回 <paramref name="TResult" /> 参数指定的类型值的方法。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`3.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`3.BeginInvoke(`0,`1,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`3.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`3.Invoke(`0,`1)"></member>
    <member name="T:System.Func`4">
      <summary>封装一个具有三个参数并返回 <paramref name="TResult" /> 参数指定的类型值的方法。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`4.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`4.BeginInvoke(`0,`1,`2,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`4.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`4.Invoke(`0,`1,`2)"></member>
    <member name="T:System.Func`5">
      <summary>封装一个具有四个参数并返回 <paramref name="TResult" /> 参数指定的类型值的方法。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`5.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`5.BeginInvoke(`0,`1,`2,`3,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`5.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`5.Invoke(`0,`1,`2,`3)"></member>
    <member name="T:System.Func`6">
      <summary>封装一个方法，该方法具有五个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`6.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`6.BeginInvoke(`0,`1,`2,`3,`4,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`6.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`6.Invoke(`0,`1,`2,`3,`4)"></member>
    <member name="T:System.Func`7">
      <summary>封装一个方法，该方法有六个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`7.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`7.BeginInvoke(`0,`1,`2,`3,`4,`5,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`7.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`7.Invoke(`0,`1,`2,`3,`4,`5)"></member>
    <member name="T:System.Func`8">
      <summary>封装一个函数，该方法具有三个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`8.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`8.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`8.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`8.Invoke(`0,`1,`2,`3,`4,`5,`6)"></member>
    <member name="T:System.Func`9">
      <summary>封装一个方法，该方法具有八个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <typeparam name="T1">此委托封装的方法的第一个参数类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Func`9.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Func`9.BeginInvoke(`0,`1,`2,`3,`4,`5,`6,`7,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Func`9.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Func`9.Invoke(`0,`1,`2,`3,`4,`5,`6,`7)"></member>
    <member name="T:System.GC">
      <summary>控制系统垃圾回收器（一种自动回收未使用内存的服务）。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.GC.AddMemoryPressure(System.Int64)">
      <summary>通知运行时在安排垃圾回收时应考虑分配大量的非托管内存。</summary>
      <param name="bytesAllocated">已分配的非托管内存的增量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> 小于或等于 0。- 或 -在 32 位的计算机上，<paramref name="bytesAllocated" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.GC.Collect">
      <summary>强制对所有代进行即时垃圾回收。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>强制对 0 代到指定代进行即时垃圾回收。</summary>
      <param name="generation">最后一代进行垃圾回收次数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode)">
      <summary>强制在 <see cref="T:System.GCCollectionMode" /> 值所指定的时间对 0 代到指定代进行垃圾回收。</summary>
      <param name="generation">最后一代进行垃圾回收次数。</param>
      <param name="mode">一个枚举值，指定垃圾回收是强制进行（<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />）还是优化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 无效。- 或 -<paramref name="mode" /> 不是 <see cref="T:System.GCCollectionMode" /> 值之一。</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
      <summary>在由 <see cref="T:System.GCCollectionMode" /> 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收是否应该为阻碍性。</summary>
      <param name="generation">最后一代进行垃圾回收次数。</param>
      <param name="mode">一个枚举值，指定垃圾回收是强制进行（<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />）还是优化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</param>
      <param name="blocking">true 执行阻碍性垃圾回收；false 在可能的情况下执行后台垃圾回收。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 无效。- 或 -<paramref name="mode" /> 不是 <see cref="T:System.GCCollectionMode" /> 值之一。</exception>
    </member>
    <member name="M:System.GC.CollectionCount(System.Int32)">
      <summary>返回已经对对象的指定代进行的垃圾回收次数。</summary>
      <returns>自启动进程以来已经对指定代进行的垃圾回收次数。</returns>
      <param name="generation">对象的代，将针对此代确定垃圾回收计数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 小于 0。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.GetGeneration(System.Object)">
      <summary>返回指定对象的当前代数。</summary>
      <returns>
        <paramref name="obj" /> 的当前代数。</returns>
      <param name="obj">检索其代信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>检索当前认为要分配的字节数。一个参数，指示此方法是否可以等待较短间隔再返回，以便系统回收垃圾和终结对象。</summary>
      <returns>一个数字，它是托管内存中当前所分配字节数的可用的最佳近似值。</returns>
      <param name="forceFullCollection">如果此方法可以在返回之前等待垃圾回收发生，则为 true；否则为 false。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>引用指定对象，使其从当前例程开始到调用此方法的那一刻为止均不符合进行垃圾回收的条件。</summary>
      <param name="obj">要引用的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>获取系统当前支持的最大代数。</summary>
      <returns>从零到所支持的最大代数间的一个值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.RemoveMemoryPressure(System.Int64)">
      <summary>通知运行时已释放非托管内存，在安排垃圾回收时不需要再考虑它。</summary>
      <param name="bytesAllocated">已释放的非托管内存量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> 小于或等于 0。- 或 - 在 32 位的计算机上，<paramref name="bytesAllocated" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>请求系统调用指定对象的终结器，此前已为该对象调用 <see cref="M:System.GC.SuppressFinalize(System.Object)" />。</summary>
      <param name="obj">必须为其调用终结器的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>请求公共语言运行时不要调用指定对象的终结器。</summary>
      <param name="obj">不得执行其终结器的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>挂起当前线程，直到处理终结器队列的线程清空该队列为止。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.GCCollectionMode">
      <summary>指定强制执行的垃圾回收的行为。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.GCCollectionMode.Default">
      <summary>此枚举的默认设置，它当前为 <see cref="F:System.GCCollectionMode.Forced" />。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Forced">
      <summary>强制立即执行垃圾回收。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Optimized">
      <summary>使垃圾回收器可以确定当前时间是否是回收对象的最佳时间。</summary>
    </member>
    <member name="T:System.Guid">
      <summary>表示全局唯一标识符 (GUID)。若要浏览此类型的.NET Framework 源代码，请参阅参考源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>使用指定的字节数组初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="b">包含用于初始化 GUID 的值的 16 元素字节数组。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> 的长度不是 16 个字节。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的整数和字节初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="a">GUID 的前 4 个字节。</param>
      <param name="b">GUID 的下两个字节。</param>
      <param name="c">GUID 的下两个字节。</param>
      <param name="d">GUID 的下一个字节。</param>
      <param name="e">GUID 的下一个字节。</param>
      <param name="f">GUID 的下一个字节。</param>
      <param name="g">GUID 的下一个字节。</param>
      <param name="h">GUID 的下一个字节。</param>
      <param name="i">GUID 的下一个字节。</param>
      <param name="j">GUID 的下一个字节。</param>
      <param name="k">GUID 的下一个字节。</param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>使用指定的整数和字节数组初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="a">GUID 的前 4 个字节。</param>
      <param name="b">GUID 的下两个字节。</param>
      <param name="c">GUID 的下两个字节。</param>
      <param name="d">GUID 的其余 8 个字节。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。 </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 的长度不是 8 个字节。 </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>使用指定字符串所表示的值初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="g">包含下面任一格式的 GUID 的字符串（“d”表示忽略大小写的十六进制数字）：32 个连续的数字：dddddddddddddddddddddddddddddddd- 或 -8、4、4、4 和 12 位数字的分组，各组之间有连线符。也可以用一对大括号或者圆括号将整个 GUID 括起来：dddddddd-dddd-dddd-dddd-dddddddddddd- 或 -{dddddddd-dddd-dddd-dddd-dddddddddddd}- 或 -(dddddddd-dddd-dddd-dddd-dddddddddddd)- 或 -8、4 和 4 位数字的分组，和一个 8 组 2 位数字的子集，每组都带有前缀“0x”或“0X”，以逗号分隔。整个 GUID 和子集用大括号括起来：{0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}所有大括号、逗号和“0x”前缀都是必需的。所有内置的空格都将被忽略。组中的所有前导零都将被忽略。组中显示的数字为可在该组显示的有意义数字的最大数目。你可以指定从 1 到为组显示的位数。指定的位数被认为是该组低序位的位数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="g" /> 的格式无效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="g" /> 的格式无效。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的无符号整数和字节初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="a">GUID 的前 4 个字节。</param>
      <param name="b">GUID 的下两个字节。</param>
      <param name="c">GUID 的下两个字节。</param>
      <param name="d">GUID 的下一个字节。</param>
      <param name="e">GUID 的下一个字节。</param>
      <param name="f">GUID 的下一个字节。</param>
      <param name="g">GUID 的下一个字节。</param>
      <param name="h">GUID 的下一个字节。</param>
      <param name="i">GUID 的下一个字节。</param>
      <param name="j">GUID 的下一个字节。</param>
      <param name="k">GUID 的下一个字节。</param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>将此实例与指定 <see cref="T:System.Guid" /> 对象进行比较并返回对其相对值的指示。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。返回值描述负整数此实例小于 <paramref name="value" />。零此实例等于 <paramref name="value" />。正整数此实例大于 <paramref name="value" />。</returns>
      <param name="value">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>
        <see cref="T:System.Guid" /> 结构的只读实例，其值均为零。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Guid" /> 对象是否表示相同的值。</summary>
      <returns>true if <paramref name="g" /> is equal to this instance; otherwise, false.</returns>
      <param name="g">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <returns>如果 <paramref name="o" /> 是值与此实例相等的 <see cref="T:System.Guid" />，则为 true；否则为 false。</returns>
      <param name="o">与该实例进行比较的对象。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>初始化 <see cref="T:System.Guid" /> 结构的新实例。</summary>
      <returns>一个新的 GUID 对象。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>指示两个指定的 <see cref="T:System.Guid" /> 对象的值是否相等。</summary>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 相等，则为 true；否则为 false。</returns>
      <param name="a">要比较的第一个对象。</param>
      <param name="b">要比较的第二个对象。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>指示两个指定的 <see cref="T:System.Guid" /> 对象的值是否不相等。</summary>
      <returns>true if <paramref name="a" /> and <paramref name="b" /> are not equal; otherwise, false.</returns>
      <param name="a">要比较的第一个对象。</param>
      <param name="b">要比较的第二个对象。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Guid.Parse(System.String)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构。</summary>
      <returns>一个包含已分析的值的结构。</returns>
      <param name="input">要转换的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式无法识别。</exception>
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构，前提是该字符串采用的是指定格式。</summary>
      <returns>一个包含已分析的值的结构。</returns>
      <param name="input">要转换的 GUID。</param>
      <param name="format">下列说明符之一，指示当解释 <paramref name="input" /> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" />不在指定的格式<paramref name="format" />。</exception>
    </member>
    <member name="M:System.Guid.System#IComparable#CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <returns>一个有符号数字，指示此实例和 <paramref name="value" /> 的相对值。返回值描述负整数此实例小于 <paramref name="value" />。零此实例等于 <paramref name="value" />。正整数此实例大于 <paramref name="value" />，或 <paramref name="value" /> 为 null。 </returns>
      <param name="value">要比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Guid" />。</exception>
    </member>
    <member name="M:System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>根据所提供的格式说明符，返回此实例值的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Guid" /> 的值，用一系列指定格式的小写十六进制位表示。</returns>
      <param name="format">一个单格式说明符，它指示如何格式化此 <see cref="T:System.Guid" /> 的值。<paramref name="format" /> 参数可以是“N”、“D”、“B”、“P”或“X”。如果 <paramref name="format" /> 为 null 或空字符串 ("")，则使用“D”。</param>
      <param name="provider">（保留）一个对象，用于提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的值不是 null，一个空字符串 ("")，或者下列格式说明符之一：“N”、“D”、“B”、“P”或“X”。</exception>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>返回包含此实例的值的 16 元素字节数组。</summary>
      <returns>16 元素字节数组。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>返回注册表格式的此实例值的字符串表示形式。</summary>
      <returns>这 <see cref="T:System.Guid" />的值，格式化通过使用“D”格式说明符如下所示: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 其中 GUID 的值表示为一系列小写的十六进制位，这些十六进制位分别以 8 个、4 个、4 个、4 个和 12 个位为一组并由连字符分隔开。例如，返回值可以是“382c74c3-721d-4f34-80e5-57657b6cbc27”。若要将从 a 到 f 的十六进制数转换为大写，请对返回的字符串调用 <see cref="M:System.String.ToUpper" /> 方法。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>根据所提供的格式说明符，返回此 <see cref="T:System.Guid" /> 实例值的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Guid" /> 的值，用一系列指定格式的小写十六进制位表示。</returns>
      <param name="format">一个单格式说明符，它指示如何格式化此 <see cref="T:System.Guid" /> 的值。<paramref name="format" /> 参数可以是“N”、“D”、“B”、“P”或“X”。如果 <paramref name="format" /> 为 null 或空字符串 ("")，则使用“D”。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的值不为 null、空字符串 ("")、"N"、"D"、"B"、"P" 或 "X"。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构。</summary>
      <returns>如果分析操作成功，则为 true；否则为 false。</returns>
      <param name="input">要转换的 GUID。</param>
      <param name="result">将包含已分析的值的结构。如果此方法返回 true，<paramref name="result" /> 将包含有效的 <see cref="T:System.Guid" />。如果 <paramref name="result" /> 等于 <see cref="F:System.Guid.Empty" />，则此方法将返回 false。</param>
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构，前提是该字符串采用的是指定格式。</summary>
      <returns>如果分析操作成功，则为 true；否则为 false。</returns>
      <param name="input">要转换的 GUID。</param>
      <param name="format">下列说明符之一，指示当解释 <paramref name="input" /> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”。</param>
      <param name="result">将包含已分析的值的结构。如果此方法返回 true，<paramref name="result" /> 将包含有效的 <see cref="T:System.Guid" />。如果 <paramref name="result" /> 等于 <see cref="F:System.Guid.Empty" />，则此方法将返回 false。</param>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>表示异步操作的状态。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>获取用户定义的对象，它限定或包含关于异步操作的信息。</summary>
      <returns>用户定义的对象，它限定或包含关于异步操作的信息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>获取用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>获取一个值，该值指示异步操作是否同步完成。</summary>
      <returns>如果异步操作同步完成，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>获取一个值，该值指示异步操作是否已完成。</summary>
      <returns>如果操作完成则为 true，否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IComparable">
      <summary>定义一种特定于类型的通用比较方法，值类型或类通过实现此方法对其实例进行排序。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个值，指示要比较的对象的相对顺序。返回值的含义如下：值含义小于零此实例在排序顺序中位于 <paramref name="obj" /> 之前。零此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。大于零此实例在排序顺序中位于 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不具有与此实例相同的类型。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IComparable`1">
      <summary>定义由值类型或类实现的通用比较方法，以为排序实例创建类型特定的比较方法。</summary>
      <typeparam name="T">要比较的对象的类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个值，指示要比较的对象的相对顺序。返回值的含义如下：值含义小于零此实例在排序顺序中位于 <paramref name="other" /> 之前。零此实例在排序顺序中的位置与 <paramref name="other" /> 相同。大于零此实例在排序顺序中位于 <paramref name="other" /> 之后。 </returns>
      <param name="other">与此实例进行比较的对象。</param>
    </member>
    <member name="T:System.IConvertible">
      <summary>定义特定的方法，这些方法将实现引用或值类型的值转换为具有等效值的公共语言运行时类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>返回此实例的 <see cref="T:System.TypeCode" />。</summary>
      <returns>枚举常数，它是实现该接口的类或值类型的 <see cref="T:System.TypeCode" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 Boolean 值。</summary>
      <returns>与此实例的值等效的 Boolean 值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 8 位无符号整数。</summary>
      <returns>与该实例的值等效的 8 位无符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 Unicode 字符。</summary>
      <returns>与此实例的值等效的 Unicode 字符。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.DateTime" />。</summary>
      <returns>与此实例的值等效的 <see cref="T:System.DateTime" /> 实例。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.Decimal" /> 数字。</summary>
      <returns>与此实例的值等效的 <see cref="T:System.Decimal" /> 数字。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的双精度浮点数字。</summary>
      <returns>与此实例的值等效的双精度浮点数字。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 16 位有符号整数。</summary>
      <returns>与此实例的值等效的 16 位有符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 32 位有符号整数。</summary>
      <returns>与此实例的值等效的 32 位有符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 64 位有符号整数。</summary>
      <returns>与此实例的值等效的 64 位有符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 8 位有符号整数。</summary>
      <returns>与此实例的值等效的 8 位有符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的单精度浮点数字。</summary>
      <returns>与此实例的值等效的单精度浮点数字。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.String" />。</summary>
      <returns>与此实例的值等效的 <see cref="T:System.String" /> 实例。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为具有等效值的指定 <see cref="T:System.Type" /> 的 <see cref="T:System.Object" />。</summary>
      <returns>其值与此实例值等效的 <paramref name="conversionType" /> 类型的 <see cref="T:System.Object" /> 实例。</returns>
      <param name="conversionType">要将此实例的值转换为的 <see cref="T:System.Type" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 16 位无符号整数。</summary>
      <returns>与该实例的值等效的 16 位无符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 32 位无符号整数。</summary>
      <returns>与该实例的值等效的 32 位无符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 64 位无符号整数。</summary>
      <returns>与该实例的值等效的 64 位无符号整数。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>定义一种方法，它支持自定义设置对象的值的格式。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式设置信息将指定对象的值转换为等效的字符串表示形式。</summary>
      <returns>
        <paramref name="arg" /> 的值的字符串表示形式，按照 <paramref name="format" /> 和 <paramref name="formatProvider" /> 的指定来进行格式设置。</returns>
      <param name="format">包含格式规范的格式字符串。</param>
      <param name="arg">要设置格式的对象。</param>
      <param name="formatProvider">一个对象，它提供有关当前实例的格式信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IDisposable">
      <summary>提供一种用于释放非托管资源的机制。若要浏览此类型的 .NET Framework 源代码，请参阅引用源。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>执行与释放或重置非托管资源关联的应用程序定义的任务。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>定义一个通用的方法，由值类型或类实现以创建类型特定的方法，用于确定实例间的相等性。</summary>
      <typeparam name="T">要比较的对象的类型。</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
      <returns>如果当前对象等于 <paramref name="other" /> 参数，则为 true；否则为 false。</returns>
      <param name="other">与此对象进行比较的对象。</param>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>提供用于检索控制格式化的对象的机制。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>返回一个对象，该对象为指定类型提供格式设置服务。</summary>
      <returns>如果 <see cref="T:System.IFormatProvider" /> 实现能够提供该类型的对象，则为 <paramref name="formatType" /> 所指定对象的实例；否则为 null。</returns>
      <param name="formatType">一个对象，该对象指定要返回的格式对象的类型。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IFormattable">
      <summary>提供将对象的值格式化为字符串表示形式的功能。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式格式化当前实例的值。</summary>
      <returns>使用指定格式的当前实例的值。</returns>
      <param name="format">要使用的格式。- 或 -null 引用（Visual Basic 中为 Nothing）将使用为 <see cref="T:System.IFormattable" /> 实现的类型所定义的默认格式。</param>
      <param name="formatProvider">要用于设置值格式的提供程序。- 或 -null 引用（Visual Basic 中为 Nothing）将从操作系统的当前区域设置中获取数字格式信息。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>试图访问索引超出界限的数组或集合的元素时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.InsufficientExecutionStackException">
      <summary>执行堆栈不足，大多数方法无法执行时所引发的异常。</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor">
      <summary>初始化 <see cref="T:System.InsufficientExecutionStackException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.InsufficientExecutionStackException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InsufficientExecutionStackException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Int16">
      <summary>表示 16 位有符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>将此实例与指定的 16 位有符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定的 16 位有符号整数的值。</summary>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比较的整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.Int16" /> 值。</summary>
      <returns>如果 true 的值与此实例相同，则为 <paramref name="obj" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Int16" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Int16" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>表示 <see cref="T:System.Int16" /> 的最大可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>表示 <see cref="T:System.Int16" /> 的最小可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 16 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位带符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位带符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位带符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Int16" />. </exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Int16" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的信息。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和范围从 0 到 9 且没有前导零的数字序列组成。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供区域性特定的格式设置信息。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为其等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位有符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含数字等效的 16 位有符号整数值；如果转换失败，则为零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>将数字的字符串表示形式转换为它的等效 16 位有符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含数字等效的 16 位有符号整数值；如果转换失败，则为零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Int32">
      <summary>表示 32 位有符号整数。若要浏览此类型的 .NET Framework 源代码，请参阅引用源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>将此实例与指定的 32 位有符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比较的整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.Int32" /> 值。</summary>
      <returns>如果 true 的值与此实例相同，则为 <paramref name="obj" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Int32" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Int32" />；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>表示 <see cref="T:System.Int32" /> 的最大可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>表示 <see cref="T:System.Int32" /> 的最小可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 32 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位带符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位带符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，用于提供有关 <paramref name="s" /> 格式的区域性特定信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位带符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int32" />. </exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Int32" /> 值要转换为的类型。</param>
      <param name="provider">一个对象，用于提供有关返回值格式的信息。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位有符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 32 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>将数字的字符串表示形式转换为它的等效 32 位有符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 32 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Int64">
      <summary>表示 64 位有符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>将此实例与指定的 64 位有符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比较的整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.Int64" /> 值。</summary>
      <returns>如果 true 的值与此实例相同，则为 <paramref name="obj" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Int64" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Int64" />；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>表示 Int64 的最大可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>表示 Int64 的最小可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 64 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位带符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示 <paramref name="s" /> 的允许格式。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.-or-<paramref name="style" /> supports fractional digits but <paramref name="s" /> includes non-zero fractional digits. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位带符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. -or-<paramref name="style" /> supports fractional digits, but <paramref name="s" /> includes non-zero fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位带符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int64" />. </exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Int64" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值的格式的信息。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和范围从 0 到 9 且没有前导零的数字序列组成。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供区域性特定的格式设置信息。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位有符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 64 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>将数字的字符串表示形式转换为它的等效 64 位有符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 64 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.IntPtr">
      <summary>用于表示指针或句柄的平台特定类型。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>使用指定的 32 位指针或句柄初始化 <see cref="T:System.IntPtr" /> 的新实例。</summary>
      <param name="value">32 位有符号的整数中包含的指针或句柄。</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>使用指定的 64 位指针初始化 <see cref="T:System.IntPtr" /> 的新实例。</summary>
      <param name="value">64 位有符号的整数中包含的指针或句柄。</param>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大或太小，无法表示为 <see cref="T:System.IntPtr" />。</exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>使用指定的指向未指定类型的指针来初始化 <see cref="T:System.IntPtr" /> 的新实例。</summary>
      <param name="value">指向未指定类型的指针。</param>
    </member>
    <member name="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
      <summary>为指针值增加偏移量。</summary>
      <returns>一个新指针，它反映了为 <paramref name="pointer" /> 增加 <paramref name="offset" />。</returns>
      <param name="pointer">要为其增加偏移量的指针。</param>
      <param name="offset">要增加的偏移量。</param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.IntPtr" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象或为 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
      <summary>为指针值增加偏移量。</summary>
      <returns>一个新指针，它反映了为 <paramref name="pointer" /> 增加 <paramref name="offset" />。</returns>
      <param name="pointer">要为其增加偏移量的指针。</param>
      <param name="offset">要增加的偏移量。</param>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>确定 <see cref="T:System.IntPtr" /> 的两个指定的实例是否相等。</summary>
      <returns>如果 <paramref name="value1" /> 等于 <paramref name="value2" />，则为 true；否则为 false。</returns>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>将 32 位有符号的整数值转换成 <see cref="T:System.IntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 新实例。</returns>
      <param name="value">32 位带符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>将 64 位有符号的整数值转换成 <see cref="T:System.IntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 新实例。</returns>
      <param name="value">64 位的有符号整数。</param>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大，无法表示为一个 <see cref="T:System.IntPtr" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>将指定的 <see cref="T:System.IntPtr" /> 的值转换为 64 位有符号整数。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>将指定的 <see cref="T:System.IntPtr" /> 的值转换为指向未指定的类型的指针。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>将指定的 <see cref="T:System.IntPtr" /> 的值转换为 32 位有符号整数。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <exception cref="T:System.OverflowException">在 64 位平台上，<paramref name="value" /> 的值太大，无法表示为一个 32 位有符号整数。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>将指向未指定类型的指定指针转换为 <see cref="T:System.IntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 新实例。</returns>
      <param name="value">指向未指定类型的指针。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>确定 <see cref="T:System.IntPtr" /> 的两个指定的实例是否不等。</summary>
      <returns>如果 <paramref name="value1" /> 不等于 <paramref name="value2" />，则为 true；否则为 false。</returns>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
      <summary>从指针值中减去偏移量。</summary>
      <returns>一个新指针，它反映了从 <paramref name="pointer" /> 减去 <paramref name="offset" />。</returns>
      <param name="pointer">要从中减去偏移量的指针。</param>
      <param name="offset">要减去的偏移量。</param>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>获得此实例的大小。</summary>
      <returns>此进程中的指针或句柄的大小，按字节计。此属性的值在 32 位进程中为 4，在 64 位进程中为 8。通过 C# 和 Visual Basic 编译器编译代码时，可以通过设置 /platform 开关定义该进程类型。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
      <summary>从指针值中减去偏移量。</summary>
      <returns>一个新指针，它反映了从 <paramref name="pointer" /> 减去 <paramref name="offset" />。</returns>
      <param name="pointer">要从中减去偏移量的指针。</param>
      <param name="offset">要减去的偏移量。</param>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>将此实例的值转换为 32 位有符号整数。</summary>
      <returns>与此实例的值相等的 32 位有符号整数。</returns>
      <exception cref="T:System.OverflowException">在 64 位平台上，此实例的值太大或太小，无法表示为一个 32 位有符号的整数。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>将此实例的值转换为 64 位有符号的整数。</summary>
      <returns>与此实例的值相等的 64 位有符号整数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>将此实例的值转换为指向未指定的类型的指针。</summary>
      <returns>指向 <see cref="T:System.Void" /> 的指针，即是说，该指针所指向的内存包含有未指定的类型的数据。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>将当前 <see cref="T:System.IntPtr" /> 对象的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IntPtr.ToString(System.String)">
      <summary>将当前 <see cref="T:System.IntPtr" /> 对象的数值转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.IntPtr" /> 对象的值的字符串表示形式。</returns>
      <param name="format">格式规范，控制当前 <see cref="T:System.IntPtr" /> 对象的转换方式。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>一个只读字段，代表已初始化为零的指针或句柄。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>因无效类型转换或显式转换引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Int32)">
      <summary>使用指定的消息和错误代码初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
      <param name="message">指示所发生异常的原因的消息。</param>
      <param name="errorCode">与异常关联的错误代码 (HRESULT) 值。</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>当方法调用对于对象的当前状态无效时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>当程序包含无效的 Microsoft 中间语言 (MSIL) 或元数据时引发的异常。这通常表示生成程序的编译器中有 bug。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.InvalidProgramException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.InvalidProgramException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidProgramException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>时区信息无效时引发的异常。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>使用系统提供的消息初始化 <see cref="T:System.InvalidTimeZoneException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>使用指定的消息字符串初始化 <see cref="T:System.InvalidTimeZoneException" /> 类的新实例。</summary>
      <param name="message">描述异常的字符串。</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.InvalidTimeZoneException" /> 类的新实例。</summary>
      <param name="message">描述异常的字符串。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.IObservable`1">
      <summary>定义基于推送的通知的提供程序。</summary>
      <typeparam name="T">提供通知信息的对象。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
    </member>
    <member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
      <summary>通知提供程序：某观察程序将要接收通知。</summary>
      <returns>对允许观察者在提供程序发送完通知前停止接收这些通知的接口的引用。</returns>
      <param name="observer">要接收通知的对象。</param>
    </member>
    <member name="T:System.IObserver`1">
      <summary>提供用于接收基于推送的通知的机制。</summary>
      <typeparam name="T">提供通知信息的对象。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
    </member>
    <member name="M:System.IObserver`1.OnCompleted">
      <summary>通知观察者，提供程序已完成发送基于推送的通知。</summary>
    </member>
    <member name="M:System.IObserver`1.OnError(System.Exception)">
      <summary>通知观察者，提供程序遇到错误情况。</summary>
      <param name="error">一个提供有关错误的附加信息的对象。</param>
    </member>
    <member name="M:System.IObserver`1.OnNext(`0)">
      <summary>向观察者提供新数据。</summary>
      <param name="value">当前的通知信息。</param>
    </member>
    <member name="T:System.IProgress`1">
      <summary>定义进度更新的提供程序。</summary>
      <typeparam name="T">进度更新值的类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
    </member>
    <member name="M:System.IProgress`1.Report(`0)">
      <summary>报告进度更新。</summary>
      <param name="value">进度更新之后的值。</param>
    </member>
    <member name="T:System.Lazy`1">
      <summary>提供对延迟初始化的支持。</summary>
      <typeparam name="T">被延迟初始化的对象的类型。</typeparam>
    </member>
    <member name="M:System.Lazy`1.#ctor">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。发生延迟初始化时，使用目标类型的默认构造函数。</summary>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。发生延迟初始化时，使用目标类型的默认构造函数和指定的初始化模式。</summary>
      <param name="isThreadSafe">true 表示此示例可由多个线程同时使用；false 表示此实例一次只能由一个线程使用。</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。发生延迟初始化时，使用指定的初始化函数。</summary>
      <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 为 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。发生延迟初始化时，使用指定的初始化函数和初始化模式。</summary>
      <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
      <param name="isThreadSafe">true 表示此示例可由多个线程同时使用；false 表示此实例一次只能由一个线程使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 为 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，其中使用指定的初始化函数和线程安全性模式。</summary>
      <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
      <param name="mode">指定线程安全模式的枚举值之一。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 为 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，其中使用 <paramref name="T" /> 的默认构造函数和指定的线程安全性模式。</summary>
      <param name="mode">指定线程安全模式的枚举值之一。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含无效值。</exception>
    </member>
    <member name="P:System.Lazy`1.IsValueCreated">
      <summary>获取一个值，该值指示是否已为此 <see cref="T:System.Lazy`1" /> 实例创建一个值。</summary>
      <returns>如果已为此 <see cref="T:System.Lazy`1" /> 实例创建了一个值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Lazy`1.ToString">
      <summary>创建并返回此实例的 <see cref="P:System.Lazy`1.Value" /> 属性的字符串表示形式。</summary>
      <returns>如果已创建该值（即，如果 <see cref="P:System.Lazy`1.IsValueCreated" /> 属性返回 true），则为对此实例的 <see cref="P:System.Lazy`1.Value" /> 属性调用 <see cref="M:System.Object.ToString" /> 方法所获得的结果。否则为一个指示尚未创建该值的字符串。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="P:System.Lazy`1.Value" /> 属性为 null。</exception>
    </member>
    <member name="P:System.Lazy`1.Value">
      <summary>获取当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</summary>
      <returns>当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</returns>
      <exception cref="T:System.MemberAccessException">
        <see cref="T:System.Lazy`1" /> 实例初始化为使用正在延迟初始化的类型的默认构造函数，并且缺少访问该构造函数的权限。</exception>
      <exception cref="T:System.MissingMemberException">
        <see cref="T:System.Lazy`1" /> 实例初始化为使用正在惰性初始化的类型的默认构造函数，并且该类型没有无参数的公共构造函数。</exception>
      <exception cref="T:System.InvalidOperationException">初始化函数尝试访问此实例上的 <see cref="P:System.Lazy`1.Value" />。</exception>
    </member>
    <member name="T:System.Lazy`2">
      <summary>提供对对象及其关联的元数据的延迟间接引用，以供 Managed Extensibility Framework 使用。</summary>
      <typeparam name="T">所引用对象的类型。</typeparam>
      <typeparam name="TMetadata">元数据的类型。</typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
      <summary>使用指定的元数据初始化 <see cref="T:System.Lazy`2" /> 类的新实例，该实例使用指定函数来获取所引用对象。</summary>
      <param name="valueFactory">返回所引用对象的函数。</param>
      <param name="metadata">与引用的对象关联的元数据。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
      <summary>使用指定的元数据和线程安全值初始化 <see cref="T:System.Lazy`2" /> 类的新实例，该实例使用指定函数来获取所引用对象。</summary>
      <param name="valueFactory">返回所引用对象的函数。</param>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="isThreadSafe">指示创建的 <see cref="T:System.Lazy`2" /> 对象是否是线程安全的。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
      <summary>使用指定的元数据和线程同步模式初始化 <see cref="T:System.Lazy`2" /> 类的新实例，该实例使用指定函数来获取所引用对象。</summary>
      <param name="valueFactory">返回所引用对象的函数</param>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="mode">线程同步模式</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1)">
      <summary>使用指定的元数据初始化 <see cref="T:System.Lazy`2" /> 类的新实例。</summary>
      <param name="metadata">与引用的对象关联的元数据。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
      <summary>使用指定的元数据和线程安全值初始化 <see cref="T:System.Lazy`2" /> 类的新实例。</summary>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="isThreadSafe">指示创建的 <see cref="T:System.Lazy`2" /> 对象是否是线程安全的。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
      <summary>使用指定的元数据和线程同步模式初始化 <see cref="T:System.Lazy`2" /> 类的新实例。</summary>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="mode">线程同步模式。</param>
    </member>
    <member name="P:System.Lazy`2.Metadata">
      <summary>获取与引用的对象关联的元数据。</summary>
      <returns>与引用的对象关联的元数据。</returns>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>访问类成员的尝试失败时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>初始化 <see cref="T:System.MemberAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.MemberAccessException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MemberAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>存在想要访问某个方法（如访问部分可信代码中的私有方法）的无效尝试时，所引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>初始化 <see cref="T:System.MethodAccessException" /> 类的新实例，将新实例的 <see cref="P:System.Exception.Message" /> 属性设置为系统提供的描述错误的消息，如“试图访问该方法时失败”。此消息将考虑当前系统区域性。</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.MethodAccessException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MethodAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>试图动态访问不存在的字段时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>初始化 <see cref="T:System.MissingFieldException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.MissingFieldException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MissingFieldException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>获取显示缺少字段的签名、类名和字段名的文本字符串。此属性为只读。</summary>
      <returns>错误消息字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>试图动态访问不存在的类成员时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>初始化 <see cref="T:System.MissingMemberException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.MissingMemberException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息以及对内部异常（为该异常的根源）的引用来初始化 <see cref="T:System.MissingMemberException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前 Exception 的 <see cref="T:System.Exception" /> 的实例。如果 <paramref name="inner" /> 不是空引用（在 Visual Basic 中为 Nothing），则在处理 <paramref name="inner" /> 的 catch 块中引发当前的 Exception。</param>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>获取显示类名、成员名和缺少成员签名的文本字符串。</summary>
      <returns>错误消息字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>试图动态访问不存在的方法时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>初始化 <see cref="T:System.MissingMethodException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.MissingMethodException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MissingMethodException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>获取显示类名、方法名称和缺少方法签名的文本字符串。此属性为只读。</summary>
      <returns>错误消息字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.MTAThreadAttribute">
      <summary>指示应用程序的 COM 线程模型为多线程单元 (MTA)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.MTAThreadAttribute.#ctor">
      <summary>初始化 <see cref="T:System.MTAThreadAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>表示多路广播委托；即，其调用列表中可以拥有多个元素的委托。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>确定此多路广播委托和指定的对象是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 和此实例具有相同的调用列表，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。 </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>按照调用顺序返回此多路广播委托的调用列表。</summary>
      <returns>一个委托数组，这些委托的调用列表合起来与此实例的调用列表一致。</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>确定两个 <see cref="T:System.MulticastDelegate" /> 对象是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 具有相同的调用列表，则为 true；否则为 false。</returns>
      <param name="d1">左操作数。</param>
      <param name="d2">右操作数。 </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>确定两个 <see cref="T:System.MulticastDelegate" /> 对象是否不相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 不具有相同的调用列表，则为 true；否则为 false。</returns>
      <param name="d1">左操作数。</param>
      <param name="d2">右操作数。 </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>在无法实现请求的方法或操作时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.NotImplementedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.NotImplementedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NotImplementedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>当调用的方法不受支持，或试图读取、查找或写入不支持调用功能的流时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>初始化 <see cref="T:System.NotSupportedException" /> 类的新实例，将新实例的 <see cref="P:System.Exception.Message" /> 属性设置为系统提供的描述错误的消息。此消息将考虑当前系统区域性。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.NotSupportedException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.Nullable">
      <summary>支持可分配有 null 的值类型。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>比较两个 <see cref="T:System.Nullable`1" /> 对象的相对值。</summary>
      <returns>一个整数，指示 <paramref name="n1" /> 和 <paramref name="n2" /> 参数的相对值。返回值描述小于零<paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，<paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true。- 或 -<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值小于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。零<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false。- 或 -<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值等于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。大于零<paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false。- 或 -<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值大于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。</returns>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> 对象。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> 对象。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 参数的基础值类型。</typeparam>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>指示两个指定的 <see cref="T:System.Nullable`1" /> 对象是否相等。</summary>
      <returns>如果 <paramref name="n1" /> 参数等于 <paramref name="n2" /> 参数，则为 true；否则为 false。返回值取决于所比较的两个参数的 <see cref="P:System.Nullable`1.HasValue" /> 和 <see cref="P:System.Nullable`1.Value" /> 属性。返回值描述true<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false。- 或 -<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且参数的 <see cref="P:System.Nullable`1.Value" /> 属性相等。false一个参数的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，另一个参数的该属性为 false。- 或 -<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且参数的 <see cref="P:System.Nullable`1.Value" /> 属性不相等。</returns>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> 对象。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> 对象。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 参数的基础值类型。</typeparam>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>返回指定可以为 null 的类型的基础类型参数。</summary>
      <returns>如果 <paramref name="nullableType" /> 参数为关闭的泛型可以为 null 的类型，则为 <paramref name="nullableType" /> 参数的类型变量；否则为 null。</returns>
      <param name="nullableType">一个 <see cref="T:System.Type" /> 对象，描述关闭的泛型可以为 null 的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> 为 null。</exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>表示可分配有 null 的值类型。</summary>
      <typeparam name="T">
        <see cref="T:System.Nullable`1" /> 泛型类型的基础值类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>将 <see cref="T:System.Nullable`1" /> 结构的新实例初始化为指定值。</summary>
      <param name="value">一个值类型。</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>指示当前 <see cref="T:System.Nullable`1" /> 对象是否与指定的对象相等。</summary>
      <returns>如果 <paramref name="other" /> 参数等于当前的 <see cref="T:System.Nullable`1" /> 对象，则为 true；否则为 false。此表描述如何定义所比较值的相等性： 返回值描述true<see cref="P:System.Nullable`1.HasValue" /> 属性为 false，并且 <paramref name="other" /> 参数为 null。即，根据定义，两个 null 值相等。- 或 -<see cref="P:System.Nullable`1.HasValue" /> 属性为 true，并且 <see cref="P:System.Nullable`1.Value" /> 属性返回的值等于 <paramref name="other" /> 参数。false当前 <see cref="P:System.Nullable`1.HasValue" /> 结构的 <see cref="T:System.Nullable`1" /> 属性为 true，并且 <paramref name="other" /> 参数为 null。- 或 -当前 <see cref="P:System.Nullable`1.HasValue" /> 结构的 <see cref="T:System.Nullable`1" /> 属性为 false，并且 <paramref name="other" /> 参数不为 null。- 或 -当前 <see cref="P:System.Nullable`1.HasValue" /> 结构的 <see cref="T:System.Nullable`1" /> 属性为 true，并且 <see cref="P:System.Nullable`1.Value" /> 属性返回的值不等于 <paramref name="other" /> 参数。</returns>
      <param name="other">一个对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>检索由 <see cref="P:System.Nullable`1.Value" /> 属性返回的对象的哈希代码。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，则为 <see cref="P:System.Nullable`1.Value" /> 属性返回的对象的哈希代码；如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，则为零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>检索当前 <see cref="T:System.Nullable`1" /> 对象的值，或该对象的默认值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，则为 <see cref="P:System.Nullable`1.Value" /> 属性的值；否则为当前 <see cref="T:System.Nullable`1" /> 对象的默认值。默认值的类型为当前 <see cref="T:System.Nullable`1" /> 对象的类型参数，而默认值的值中只包含二进制零。</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>检索当前 <see cref="T:System.Nullable`1" /> 对象的值或指定的默认值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，则为 <see cref="P:System.Nullable`1.Value" /> 属性的值；否则为 <paramref name="defaultValue" /> 参数。</returns>
      <param name="defaultValue">如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，则为一个返回值。</param>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>获取一个值，该值指示 <see cref="T:System.Nullable`1" /> 对象是否具有基础类型的有效值。</summary>
      <returns>如果当前的 true 对象具有值，则为 <see cref="T:System.Nullable`1" />；如果当前的 <see cref="T:System.Nullable`1" /> 对象没有值，则为 false。</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0">
      <summary>定义 <see cref="T:System.Nullable`1" /> 实例到其基础值的显式转换。</summary>
      <returns>
        <paramref name="value" /> 参数的 <see cref="P:System.Nullable`1.Value" /> 属性的值。</returns>
      <param name="value">可以为 Null 的值。</param>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}">
      <summary>创建一个新的 <see cref="T:System.Nullable`1" /> 对象，并将其初始化为指定的值。</summary>
      <returns>一个 <see cref="T:System.Nullable`1" /> 对象，其 <see cref="P:System.Nullable`1.Value" /> 属性使用 <paramref name="value" /> 参数进行初始化。</returns>
      <param name="value">一个值类型。</param>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>返回当前 <see cref="T:System.Nullable`1" /> 对象的值的文本表示形式。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，则是当前 <see cref="T:System.Nullable`1" /> 对象的值的文本表示形式；如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，则是一个空字符串 ("")。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>获取当前 <see cref="T:System.Nullable`1" /> 对象的值，如果它已被分配了有效的基础值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 true，则为当前 <see cref="T:System.Nullable`1" /> 对象的值。如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 false，则将引发异常。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Nullable`1.HasValue" /> 属性为 false。</exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>尝试取消引用空对象引用时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>初始化 <see cref="T:System.NullReferenceException" /> 类的新实例，将新实例的 <see cref="P:System.Exception.Message" /> 属性设置为系统提供的描述错误的消息，如“在需要对象实例的地方找到了值‘null’。”。此消息将考虑当前系统区域性。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.NullReferenceException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NullReferenceException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Object">
      <summary>支持 .NET Framework 类层次结构中的所有类，并为派生类提供低级别服务。这是 .NET Framework 中所有类的最终基类；它是类型层次结构的根。若要浏览此类型的 .NET Framework 源代码，请参阅引用源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>初始化 <see cref="T:System.Object" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <returns>如果指定的对象等于当前的对象，则为 true；否则为 false。</returns>
      <param name="obj">将与当前对象进行比较的对象。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>确定指定的对象实例是否被视为相等。</summary>
      <returns>如果认为对象相等，则为 true；否则为 false。如果 <paramref name="objA" /> 和 <paramref name="objB" /> 均为 null，此方法将返回 true。</returns>
      <param name="objA">要比较的第一个对象。</param>
      <param name="objB">要比较的第二个对象。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>作为默认哈希函数。</summary>
      <returns>当前对象的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>创建当前 <see cref="T:System.Object" /> 的浅表副本。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的浅表副本。</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 实例是否是相同的实例。</summary>
      <returns>如果 <paramref name="objA" /> 是与 <paramref name="objB" /> 相同的实例，或如果两者均为 null，则为 true；否则，为 false。</returns>
      <param name="objA">要比较的第一个对象。</param>
      <param name="objB">要比较的第二个对象。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Object.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>对已释放的对象执行操作时所引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>使用包含已释放对象的名称的字符串初始化 <see cref="T:System.ObjectDisposedException" /> 类的新实例。</summary>
      <param name="objectName">包含已释放对象的名称的字符串。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ObjectDisposedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 不为 null，则将在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary> 使用指定的对象名称和消息初始化 <see cref="T:System.ObjectDisposedException" /> 类的新实例。</summary>
      <param name="objectName">已释放对象的名称。</param>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>获取描述错误的消息。</summary>
      <returns>描述错误的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>获取已释放对象的名称。</summary>
      <returns>包含已释放对象的名称的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>标记不再使用的程序元素。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.ObsoleteAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>使用指定的变通方法消息初始化 <see cref="T:System.ObsoleteAttribute" /> 类的新实例。</summary>
      <param name="message">描述可选的变通方法的文本字符串。</param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>使用变通方法消息和布尔值初始化 <see cref="T:System.ObsoleteAttribute" /> 类的新实例，该布尔值指示是否将使用已过时的元素视为错误。</summary>
      <param name="message">描述可选的变通方法的文本字符串。</param>
      <param name="error">指示是否将使用已过时的元素视为错误的布尔值。</param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>获取指示编译器是否将使用已过时的程序元素视为错误的布尔值。</summary>
      <returns>如果将使用已过时的元素视为错误，则为 true；否则为 false。默认值为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>获取变通方法消息，包括对可选程序元素的说明。</summary>
      <returns>变通方法文本字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>没有足够的内存继续执行程序时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.OverflowException">
      <summary>在选中的上下文中所进行的算术运算、类型转换或转换操作导致溢出时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>初始化 <see cref="T:System.OverflowException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.OverflowException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.OverflowException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>指示方法在调用中将允许参数的数目可变。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.ParamArrayAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>当功能未在特定平台上运行时所引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.PlatformNotSupportedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.PlatformNotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的文本消息。</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.PlatformNotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>表示定义一组条件并确定指定对象是否符合这些条件的方法。</summary>
      <typeparam name="T">要比较的对象的类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Predicate`1.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Predicate`1.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Predicate`1.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Predicate`1.Invoke(`0)"></member>
    <member name="T:System.RankException">
      <summary>将维数错误的数组传递给方法时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>初始化 <see cref="T:System.RankException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.RankException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.RankException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>使用内部元数据标记表示一个字段。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>指示当前实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.RuntimeFieldHandle" /> 且与当前实例的值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>指示当前实例是否等于指定的 <see cref="T:System.RuntimeFieldHandle" />。</summary>
      <returns>如果 <paramref name="handle" /> 的值等于当前实例的值，则为 true；否则为 false。</returns>
      <param name="handle">要与当前实例进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeFieldHandle" /> 结构是否等同。</summary>
      <returns>如果 <paramref name="left" /> 等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeFieldHandle" /> 结构是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 不等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> 是方法的内部元数据表示形式的句柄。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>指示此实例是否与指定对象相等。</summary>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.RuntimeMethodHandle" /> 且与此实例的值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Object" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>指示此实例是否与指定的 <see cref="T:System.RuntimeMethodHandle" /> 相等。</summary>
      <returns>如果 <paramref name="handle" /> 等于此实例的值，则为 true；否则，为 false。</returns>
      <param name="handle">要与此实例进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeMethodHandle" /> 实例是否相等。</summary>
      <returns>如果 <paramref name="left" /> 的值等于 <paramref name="right" /> 的值，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeMethodHandle" /> 实例是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 的值与 <paramref name="right" /> 的值不相等，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>表示使用内部元数据标记的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>指示指定的对象是否等于当前的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 结构并且与此实例的值相等，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>指示指定的 <see cref="T:System.RuntimeTypeHandle" /> 结构是否等于当前的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</summary>
      <returns>如果 <paramref name="handle" /> 的值等于此实例的值，则为 true；否则为 false。</returns>
      <param name="handle">要与当前实例进行比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)">
      <summary>指示某个对象与 <see cref="T:System.RuntimeTypeHandle" /> 结构是否相等。</summary>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 结构并且与 <paramref name="right" /> 相等，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 比较的对象。</param>
      <param name="right">要与 <paramref name="left" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>指示 <see cref="T:System.RuntimeTypeHandle" /> 结构与某个对象是否相等。</summary>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 并且与 <paramref name="left" /> 相等，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <param name="right">要与 <paramref name="left" /> 比较的对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)">
      <summary>指示某个对象与 <see cref="T:System.RuntimeTypeHandle" /> 结构是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 并且与 <paramref name="right" /> 相等，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 比较的对象。</param>
      <param name="right">要与 <paramref name="left" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>指示 <see cref="T:System.RuntimeTypeHandle" /> 结构与某个对象是否不相等。</summary>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 结构并且它与 <paramref name="left" /> 不相等，则为 true；否则为 false。</returns>
      <param name="left">要与 <paramref name="right" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <param name="right">要与 <paramref name="left" /> 比较的对象。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="T:System.SByte">
      <summary>表示 8 位有符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>将此实例与指定的 8 位有符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比较的 8 位有符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.SByte" />；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.SByte" /> 值。</summary>
      <returns>如果 true 的值与此实例相同，则为 <paramref name="obj" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.SByte" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>表示 <see cref="T:System.SByte" /> 的最大可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>表示 <see cref="T:System.SByte" /> 的最小可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 8 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 参数中包含的数字等效的 8 位有符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 8 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 8 位有符号整数。</returns>
      <param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 8 位有符号数值。</summary>
      <returns>与 <paramref name="s" /> 参数中指定的数字等效的 8 位有符号字节值。</returns>
      <param name="s">包含要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。如果 <paramref name="provider" /> 为 null，则使用当前区域性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.-or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.-or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 8 位有符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 8 位有符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。如果 <paramref name="provider" /> 为 null，则使用当前区域性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="obj">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.SByte" />. </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
      <param name="provider">未使用此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
      <param name="provider">未使用此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>无。不支持此转换。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">未使用此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>转换为 <paramref name="type" /> 类型对象的当前实例的值。</returns>
      <param name="type">此 <see cref="T:System.Type" /> 值要转换为的 <see cref="T:System.SByte" />。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值的格式的信息。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>尝试将指定样式和区域性特定格式的数字的字符串表示形式转换为其 <see cref="T:System.SByte" /> 等效项，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含数字等效的 8 位有符号整数值；如果转换失败，则为零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.SByte" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 8 位有符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Single">
      <summary>表示一个单精度浮点数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>将此实例与指定的单精度浮点数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定单精度浮点数的值。</summary>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />). </returns>
      <param name="value">要比较的单精度浮点数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>表示大于零的最小正 <see cref="T:System.Single" /> 值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Single" />；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Single" /> 对象是否表示相同的值。</summary>
      <returns>如果 true 与此实例相等，则为 <paramref name="obj" />；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>返回一个值，该值指示指定数字是计算为负无穷大还是正无穷大。</summary>
      <returns>如果 <paramref name="f" /> 的计算结果为 <see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />，则为 true；否则为 false。</returns>
      <param name="f">单精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>返回一个值，该值指示指定的值是否不为数字 (<see cref="F:System.Single.NaN" />)。</summary>
      <returns>如果 <paramref name="f" /> 计算为非数字 (<see cref="F:System.Single.NaN" />)，则为 true；否则为 false。</returns>
      <param name="f">单精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>返回一个值，通过该值指示指定数字是否计算为负无穷大。</summary>
      <returns>如果 <paramref name="f" /> 的计算结果为 <see cref="F:System.Single.NegativeInfinity" />，则为 true；否则为 false。</returns>
      <param name="f">单精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>返回一个值，通过该值指示指定数字是否计算为正无穷大。</summary>
      <returns>如果 <paramref name="f" /> 的计算结果为 <see cref="F:System.Single.PositiveInfinity" />，则为 true；否则为 false。</returns>
      <param name="f">单精度浮点数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>表示 <see cref="T:System.Single" /> 的最大可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>表示 <see cref="T:System.Single" /> 的最小可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.NaN">
      <summary>表示非数字 (NaN)。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>表示负无穷。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.op_Equality(System.Single,System.Single)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Single" /> 值是否相等。</summary>
      <returns>如果 true 和 <paramref name="left" /> 相等，则为 <paramref name="right" />；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.op_GreaterThan(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否大于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 true 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否大于或等于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大于等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.op_Inequality(System.Single,System.Single)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Single" /> 值是否不相等。</summary>
      <returns>如果 true 和 <paramref name="left" /> 不相等，则为 <paramref name="right" />；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.op_LessThan(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否小于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否小于或等于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 true；否则为 false。</returns>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效单精度浮点数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将具有指定样式的数字的字符串表示形式转换为它的等效单精度浮点数。</summary>
      <returns>与在 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>将具有指定区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>表示正无穷。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Single" />. </exception>
    </member>
    <member name="M:System.Single.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.Single" /> 值要转换为的类型。</param>
      <param name="provider">提供有关返回值格式信息的对象。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.Single.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数值或符号等效的单精度浮点数字；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />、表示的数字小于<see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" />，或者 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 枚举的常数的有效组合，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>将数字的字符串表示形式转换为它的等效单精度浮点数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数值或符号等效的单精度浮点数字；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>指示应用程序的 COM 线程模型是单线程单元 (STA)。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>初始化 <see cref="T:System.STAThreadAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.String">
      <summary>将文本表示为一系列 Unicode 字符。若要浏览此类型的 .NET Framework 源代码，请参阅引用源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值。</summary>
      <param name="value">指向以 null 终止的 Unicode 字符数组的指针。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current process does not have read access to all the addressed characters.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> specifies an address less than 64000.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值、该数组内的起始字符位置和一个长度指示的值。</summary>
      <param name="value">指向 Unicode 字符数组的指针。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <param name="length">要使用的 <paramref name="value" /> 内的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero, <paramref name="value" /> + <paramref name="startIndex" /> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> + <paramref name="startIndex" /> specifies an address less than 64000.</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由重复指定次数的指定 Unicode 字符指示的值。</summary>
      <param name="c">一个 Unicode 字符。</param>
      <param name="count">
        <paramref name="c" /> 出现的次数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由 Unicode 字符数组指示的值。</summary>
      <param name="value">Unicode 字符的数组。</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由 Unicode 字符数组、该数组内的起始字符位置和一个长度指示的值。</summary>
      <param name="value">Unicode 字符的数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <param name="length">要使用的 <paramref name="value" /> 内的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or- The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />. </exception>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>获取当前 <see cref="T:System.Char" /> 对象中位于指定位置的 <see cref="T:System.String" /> 对象。</summary>
      <returns>位于 <paramref name="index" /> 位置的对象。</returns>
      <param name="index">当前的字符串中的位置。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is greater than or equal to the length of this object or less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>比较两个指定的 <see cref="T:System.String" /> 对象的子字符串，并返回一个指示二者在排序顺序中的相对位置的整数。</summary>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。Value Condition Less than zero The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order. Zero The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero. Greater than zero The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串的位置。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串的位置。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. -or-Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>使用指定的规则比较两个指定的 <see cref="T:System.String" /> 对象的子字符串，并返回一个整数，指示二者在排序顺序中的相对位置。</summary>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。Value Condition Less than zero The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.Zero The substrings occur in the same position in the sort order, or the <paramref name="length" /> parameter is zero. Greater than zero The substring in <paramref name="strA" /> follllows the substring in <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串的位置。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串的位置。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. -or-Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个指示二者在排序顺序中的相对位置的整数。</summary>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。Value Condition Less than zero <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order. Zero <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order. Greater than zero <paramref name="strA" /> follows <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
      <summary>比较两个指定的 <see cref="T:System.String" /> 对象（其中忽略或考虑其大小写），并返回一个整数，指示二者在排序顺序中的相对位置。</summary>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。Value Condition Less than zero <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order. Zero <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order. Greater than zero <paramref name="strA" /> follows <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <param name="ignoreCase">若要在比较过程中忽略大小写，则为 true；否则为 false。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>使用指定的规则比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个整数，指示二者在排序顺序中的相对位置。</summary>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。Value Condition Less than zero <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order. Zero <paramref name="strA" /> is in the same position as <paramref name="strB" /> in the sort order. Greater than zero <paramref name="strA" /> follows <paramref name="strB" /> in the sort order. </returns>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.StringComparison" /> is not supported.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>通过计算每个子字符串中相应 <see cref="T:System.String" /> 对象的数值来比较两个指定的 <see cref="T:System.Char" /> 对象的子字符串。</summary>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。ValueCondition Less than zero The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />. Zero The substrings are equal, or <paramref name="length" /> is zero. Greater than zero The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. </returns>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串的起始索引。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串的起始索引。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="strA" /> is not null and <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="strB" /> is not null and<paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>通过计算每个字符串中相应 <see cref="T:System.String" /> 对象的数值来比较两个指定的 <see cref="T:System.Char" /> 对象。</summary>
      <returns>一个整数，指示两个比较字之间的词法关系。ValueCondition Less than zero <paramref name="strA" /> is less than <paramref name="strB" />. Zero <paramref name="strA" /> and <paramref name="strB" /> are equal. Greater than zero <paramref name="strA" /> is greater than <paramref name="strB" />. </returns>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>将此实例与指定的 <see cref="T:System.String" /> 对象进行比较，并指示此实例在排序顺序中是位于指定的字符串之前、之后还是与其出现在同一位置。</summary>
      <returns>一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <paramref name="strB" /> 参数之前、之后还是与其出现在同一位置。Value Condition Less than zero This instance precedes <paramref name="strB" />. Zero This instance has the same position in the sort order as <paramref name="strB" />. Greater than zero This instance follows <paramref name="strB" />.-or- <paramref name="strB" /> is null. </returns>
      <param name="strB">要与此实例进行比较的字符串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
      <summary>串联类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" /> 构造集合的成员。</summary>
      <returns>
        <paramref name="values" /> 中的串联字符串。</returns>
      <param name="values">一个集合对象，该对象实现 <see cref="T:System.Collections.Generic.IEnumerable`1" />，且其泛型类型参数为 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>串联 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实现的成员。</summary>
      <returns>
        <paramref name="values" /> 中的串联成员。</returns>
      <param name="values">一个实现 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 接口的集合对象。</param>
      <typeparam name="T">
        <paramref name="values" /> 成员的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>创建指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="arg0" /> 的值的字符串表示形式，如果 <see cref="F:System.String.Empty" /> 为 <paramref name="arg0" />，则为 null。</returns>
      <param name="arg0">要表示的对象，或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>连接两个指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="arg0" /> 和 <paramref name="arg1" /> 的值的串联字符串表示形式。</returns>
      <param name="arg0">要连接的第一个对象。</param>
      <param name="arg1">要连接的第二个对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>连接三个指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的值的串联字符串表示形式。</returns>
      <param name="arg0">要连接的第一个对象。</param>
      <param name="arg1">要连接的第二个对象。</param>
      <param name="arg2">要连接的第三个对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>连接指定 <see cref="T:System.Object" /> 数组中的元素的字符串表示形式。</summary>
      <returns>
        <paramref name="args" /> 中元素的值的串联字符串表示形式。</returns>
      <param name="args">一个对象数组，其中包含要连接的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> is null. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>连接 <see cref="T:System.String" /> 的两个指定实例。</summary>
      <returns>
        <paramref name="str0" /> 和 <paramref name="str1" /> 的串联。</returns>
      <param name="str0">要串联的第一个字符串。</param>
      <param name="str1">要串联的第二个字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>连接 <see cref="T:System.String" /> 的三个指定实例。</summary>
      <returns>
        <paramref name="str0" />、<paramref name="str1" /> 和 <paramref name="str2" /> 的串联。</returns>
      <param name="str0">要串联的第一个字符串。</param>
      <param name="str1">要串联的第二个字符串。</param>
      <param name="str2">要比较的第三个字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>连接 <see cref="T:System.String" /> 的四个指定实例。</summary>
      <returns>
        <paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" /> 和 <paramref name="str3" /> 的串联。</returns>
      <param name="str0">要串联的第一个字符串。</param>
      <param name="str1">要串联的第二个字符串。</param>
      <param name="str2">要比较的第三个字符串。</param>
      <param name="str3">要比较的第四个字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>连接指定的 <see cref="T:System.String" /> 数组的元素。</summary>
      <returns>
        <paramref name="values" /> 的串联元素。</returns>
      <param name="values">字符串实例的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>返回一个值，该值指示指定的子串是否出现在此字符串中。</summary>
      <returns>如果 true 参数出现在此字符串中，或者 <paramref name="value" /> 为空字符串 ("")，则为 <paramref name="value" />；否则为 false。</returns>
      <param name="value">要搜寻的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>将指定数目的字符从此实例中的指定位置复制到 Unicode 字符数组中的指定位置。</summary>
      <param name="sourceIndex">要复制的此实例中第一个字符的索引。</param>
      <param name="destination">此实例中的字符所复制到的 Unicode 字符数组。</param>
      <param name="destinationIndex">
        <paramref name="destination" /> 中的索引，在此处开始复制操作。</param>
      <param name="count">此实例中要复制到 <paramref name="destination" /> 的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative -or- <paramref name="sourceIndex" /> does not identify a position in the current instance. -or-<paramref name="destinationIndex" /> does not identify a valid index in the <paramref name="destination" /> array. -or-<paramref name="count" /> is greater than the length of the substring from <paramref name="startIndex" /> to the end of this instance -or- <paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of the <paramref name="destination" /> array. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.String.Empty">
      <summary>表示空字符串。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>确定此字符串实例的结尾是否与指定的字符串匹配。</summary>
      <returns>如果 true 与此实例的末尾匹配，则为 <paramref name="value" />；否则为 false。</returns>
      <param name="value">要与此实例末尾的子字符串进行比较的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配。</summary>
      <returns>如果 true 参数与此字符串的末尾匹配，则为 <paramref name="value" />；否则为 false。</returns>
      <param name="value">要与此实例末尾的子字符串进行比较的字符串。</param>
      <param name="comparisonType">枚举值之一，用于确定如何比较此字符串与 <paramref name="value" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>确定此实例是否与指定的对象（也必须是 <see cref="T:System.String" /> 对象）具有相同的值。</summary>
      <returns>如果 true 是一个 <paramref name="obj" /> 且其值与此实例相等，则为 <see cref="T:System.String" />；否则为 false。如果 <paramref name="obj" /> 为 null，则此方法返回 false。</returns>
      <param name="obj">要与此实例进行比较的字符串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>确定此实例是否与另一个指定的 <see cref="T:System.String" /> 对象具有相同的值。</summary>
      <returns>如果 true 参数的值与此实例的值相同，则为 <paramref name="value" />；否则为 false。如果 <paramref name="value" /> 为 null，则此方法返回 false。</returns>
      <param name="value">要与此实例进行比较的字符串。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>确定两个指定的 <see cref="T:System.String" /> 对象是否具有相同的值。</summary>
      <returns>如果 true 的值与 <paramref name="a" /> 的值相同，则为 <paramref name="b" />；否则为 false。如果 <paramref name="a" /> 和 <paramref name="b" /> 均为 null，此方法将返回 true。</returns>
      <param name="a">要比较的第一个字符串，或 null。</param>
      <param name="b">要比较的第二个字符串，或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>确定两个指定的 <see cref="T:System.String" /> 对象是否具有相同的值。参数指定区域性、大小写以及比较所用的排序规则。</summary>
      <returns>如果 true 参数的值与 <paramref name="a" /> 参数的值相同，则为 <paramref name="b" />；否则为 false。</returns>
      <param name="a">要比较的第一个字符串，或 null。</param>
      <param name="b">要比较的第二个字符串，或 null。</param>
      <param name="comparisonType">枚举值之一，用于指定比较的规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>确定此字符串是否与另一个指定的 <see cref="T:System.String" /> 对象具有相同的值。参数指定区域性、大小写以及比较所用的排序规则。</summary>
      <returns>如果 true 参数的值与此字符串相同，则为 <paramref name="value" />；否则为 false。</returns>
      <param name="value">要与此实例进行比较的字符串。</param>
      <param name="comparisonType">枚举值之一，用于指定如何比较字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
      <summary>将指定字符串中的一个或多个格式项替换为对应对象的字符串表示形式。参数提供区域性特定的格式设置信息。</summary>
      <returns>
        <paramref name="format" /> 的副本，其中的一个或多个格式项已替换为 <paramref name="arg0" /> 的字符串表示形式。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="arg0" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to one. </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>将指定字符串中的格式项替换为两个指定对象的字符串表示形式。参数提供区域性特定的格式设置信息。</summary>
      <returns>
        <paramref name="format" /> 的副本，其中的格式项替换为 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字符串表示形式。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />, <paramref name="arg0" />, or <paramref name="arg1" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to two. </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>将指定字符串中的格式项替换为三个指定对象的字符串表示形式。参数提供区域性特定的格式设置信息。</summary>
      <returns>
        <paramref name="format" /> 的副本，其中的格式项已替换为 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字符串表示形式。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <param name="arg2">要设置格式的第三个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />, <paramref name="arg0" />, <paramref name="arg1" />, or <paramref name="arg2" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to three. </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。参数提供区域性特定的格式设置信息。</summary>
      <returns>
        <paramref name="format" /> 的副本，其中格式项已替换为 <paramref name="args" /> 中相应对象的字符串表示形式。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>将指定字符串中的一个或多个格式项替换为指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="format" /> 的副本，其中的任何格式项均替换为 <paramref name="arg0" /> 的字符串表示形式。</returns>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">The format item in <paramref name="format" /> is invalid.-or- The index of a format item is not zero. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>将指定字符串中的格式项替换为两个指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="format" /> 的副本，其中的格式项替换为 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字符串表示形式。</returns>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is not zero or one. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>将指定字符串中的格式项替换为三个指定对象的字符串表示形式。</summary>
      <returns>
        <paramref name="format" /> 的副本，其中的格式项已替换为 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字符串表示形式。</returns>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <param name="arg2">要设置格式的第三个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than two. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。</summary>
      <returns>
        <paramref name="format" /> 的副本，其中格式项已替换为 <paramref name="args" /> 中相应对象的字符串表示形式。</returns>
      <param name="format">复合格式字符串。</param>
      <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>返回该字符串的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。该搜索从指定字符位置开始。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of the string. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>报告指定字符在此实例中的第一个匹配项的从零开始的索引。搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this string.-or-<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 0。</returns>
      <param name="value">要搜寻的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>报告指定字符串在此实例中的第一个匹配项的从零开始的索引。该搜索从指定字符位置开始。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>报告指定字符串在此实例中的第一个匹配项的从零开始的索引。搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this string.-or-<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。参数指定当前字符串中的起始搜索位置、要搜索的当前字符串中的字符数量，以及要用于指定字符串的搜索类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this instance.-or-<paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。一个参数指定要用于指定字符串的搜索类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 0。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</summary>
      <returns>在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。该搜索从指定字符位置开始。</summary>
      <returns>在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the number of characters in this instance. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
      <returns>在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>返回一个新的字符串，在此实例中的指定的索引位置插入指定的字符串。</summary>
      <returns>与此实例等效的一个新字符串，但在该字符串的 <paramref name="value" /> 位置处插入了 <paramref name="startIndex" />。</returns>
      <param name="startIndex">插入的从零开始的索引位置。</param>
      <param name="value">要插入的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative or greater than the length of this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>指示指定的字符串是 null 还是 <see cref="F:System.String.Empty" /> 字符串。</summary>
      <returns>如果 true 参数为 <paramref name="value" /> 或空字符串 ("")，则为 null；否则为 false。</returns>
      <param name="value">要测试的字符串。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
      <summary>指示指定的字符串是 null、空还是仅由空白字符组成。</summary>
      <returns>如果 true 参数为 <paramref name="value" /> 或 null，或者如果 <see cref="F:System.String.Empty" /> 仅由空白字符组成，则为 <paramref name="value" />。</returns>
      <param name="value">要测试的字符串。</param>
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>串联类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" /> 构造集合的成员，其中在每个成员之间使用指定的分隔符。</summary>
      <returns>一个由 <paramref name="values" /> 的成员组成的字符串，这些成员以 <paramref name="separator" /> 字符串分隔。如果 <paramref name="values" /> 没有成员，则该方法返回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要用作分隔符的字符串。只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="values" /> 才包括在返回的字符串中。</param>
      <param name="values">一个包含要串联的字符串的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>串联集合的成员，其中在每个成员之间使用指定的分隔符。</summary>
      <returns>一个由 <paramref name="values" /> 的成员组成的字符串，这些成员以 <paramref name="separator" /> 字符串分隔。如果 <paramref name="values" /> 没有成员，则该方法返回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要用作分隔符的字符串。只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="values" /> 才包括在返回的字符串中。</param>
      <param name="values">一个包含要串联的对象的集合。</param>
      <typeparam name="T">
        <paramref name="values" /> 成员的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
      <summary>串联对象数组的各个元素，其中在每个元素之间使用指定的分隔符。</summary>
      <returns>一个由 <paramref name="values" /> 的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。如果 <paramref name="values" /> 为空数组，该方法将返回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要用作分隔符的字符串。只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="values" /> 才包括在返回的字符串中。</param>
      <param name="values">一个数组，其中包含要连接的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>串联字符串数组的所有元素，其中在每个元素之间使用指定的分隔符。</summary>
      <returns>一个由 <paramref name="value" /> 中的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。如果 <paramref name="value" /> 为空数组，该方法将返回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要用作分隔符的字符串。只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="value" /> 才包括在返回的字符串中。</param>
      <param name="value">一个数组，其中包含要连接的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>串联字符串数组的指定元素，其中在每个元素之间使用指定的分隔符。</summary>
      <returns>由 <paramref name="value" /> 中的字符串组成的字符串，这些字符串以 <paramref name="separator" /> 字符串分隔。- 或 -如果 <see cref="F:System.String.Empty" /> 为零，<paramref name="count" /> 没有元素，或 <paramref name="value" /> 以及 <paramref name="separator" /> 的全部元素均为 <paramref name="value" />，则为 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要用作分隔符的字符串。只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="value" /> 才包括在返回的字符串中。</param>
      <param name="value">一个数组，其中包含要连接的元素。</param>
      <param name="startIndex">
        <paramref name="value" /> 中要使用的第一个元素。</param>
      <param name="count">要使用的 <paramref name="value" /> 的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than 0.-or- <paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索的起始位置。从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>报告指定的 Unicode 字符在此实例内的子字符串中的最后一个匹配项的从零开始的索引的位置。搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</summary>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</returns>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索的起始位置。从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" />
                 - <paramref name="count" /> + 1 is less than zero.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为此实例中的最后一个索引位置。</returns>
      <param name="value">要搜寻的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance. -or-The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and  <paramref name="startIndex" /> is negative.-or- The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" />
                 - <paramref name="count" /> + 1 specifies a position that is not within this instance. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。搜索在所指定的字符位置的数目的字符串开始时，开始指定字符和其后面的位置。一个参数指定要执行搜索指定字符串的比较类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.-or- The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.-or-The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> specifies a position that is not within this instance. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero. -or-The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>报告指定字符串在当前 <see cref="T:System.String" /> 对象中最后一个匹配项的从零开始的索引。在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。一个参数指定要执行搜索指定字符串的比较类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance. -or-The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>报告指定字符串在当前 <see cref="T:System.String" /> 对象中最后一个匹配项的从零开始的索引。一个参数指定要用于指定字符串的搜索类型。</summary>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串，则为 -1。如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为此实例中的最后一个索引位置。</returns>
      <param name="value">要搜寻的字符串。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</summary>
      <returns>最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</summary>
      <returns>最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符或者当前实例等于<see cref="F:System.String.Empty" />，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> specifies a position that is not within this instance. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</summary>
      <returns>最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符或者当前实例等于<see cref="F:System.String.Empty" />，则为 -1。</returns>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> minus <paramref name="count" /> + 1 is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.String.Length">
      <summary>获取当前 <see cref="T:System.String" /> 对象中的字符数。</summary>
      <returns>当前字符串中字符的数量。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>确定两个指定的字符串是否具有相同的值。</summary>
      <returns>如果 true 的值与 <paramref name="a" /> 的值相同，则为 <paramref name="b" />；否则为 false。</returns>
      <param name="a">要比较的第一个字符串，或 null。</param>
      <param name="b">要比较的第二个字符串，或 null。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>确定两个指定的字符串是否具有不同的值。</summary>
      <returns>如果 true 的值与 <paramref name="a" /> 的值不同，则为 <paramref name="b" />；否则为 false。</returns>
      <param name="a">要比较的第一个字符串，或 null。</param>
      <param name="b">要比较的第二个字符串，或 null。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>返回一个新字符串，该字符串通过在此实例中的字符左侧填充空格来达到指定的总长度，从而实现右对齐。</summary>
      <returns>与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的空格，使长度达到 <paramref name="totalWidth" />。但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>返回一个新字符串，该字符串通过在此实例中的字符左侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符右对齐。</summary>
      <returns>与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的 <paramref name="paddingChar" /> 字符，使长度达到 <paramref name="totalWidth" />。但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <param name="paddingChar">Unicode 填充字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>返回一个新字符串，该字符串通过在此字符串中的字符右侧填充空格来达到指定的总长度，从而使这些字符左对齐。</summary>
      <returns>与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的空格，使长度达到 <paramref name="totalWidth" />。但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>返回一个新字符串，该字符串通过在此字符串中的字符右侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符左对齐。</summary>
      <returns>与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的 <paramref name="paddingChar" /> 字符，使长度达到 <paramref name="totalWidth" />。但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <param name="paddingChar">Unicode 填充字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>返回当前实例中从指定位置到最后位置的所有以删除的字符的新字符串。</summary>
      <returns>一个新字符串，除所删除的字符之外，该字符串与此字符串等效。</returns>
      <param name="startIndex">开始删除字符的从零开始的位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero.-or- <paramref name="startIndex" /> specifies a position that is not within this string. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>返回指定数量字符在当前这个实例起始点在已删除的指定的位置的新字符串。</summary>
      <returns>一个新字符串，除所删除的字符之外，该字符串与此实例等效。</returns>
      <param name="startIndex">开始删除字符的从零开始的位置。</param>
      <param name="count">要删除的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>返回一个新字符串，其中此实例中出现的所有指定 Unicode 字符都替换为另一个指定的 Unicode 字符。</summary>
      <returns>等效于此实例（除了 <paramref name="oldChar" /> 的所有实例都已替换为 <paramref name="newChar" /> 外）的字符串。如果在当前实例中找不到 <paramref name="oldChar" />，此方法返回未更改的当前实例。</returns>
      <param name="oldChar">要替换的 Unicode 字符。</param>
      <param name="newChar">要替换出现的所有 <paramref name="oldChar" /> 的 Unicode 字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>返回一个新字符串，其中当前实例中出现的所有指定字符串都替换为另一个指定的字符串。</summary>
      <returns>等效于当前字符串（除了 <paramref name="oldValue" /> 的所有实例都已替换为 <paramref name="newValue" /> 外）的字符串。如果在当前实例中找不到 <paramref name="oldValue" />，此方法返回未更改的当前实例。</returns>
      <param name="oldValue">要替换的字符串。</param>
      <param name="newValue">要替换 <paramref name="oldValue" /> 的所有匹配项的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> is the empty string (""). </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>返回的字符串数组包含此实例中的子字符串（由指定 Unicode 字符数组的元素分隔）。</summary>
      <returns>一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。有关详细信息，请参阅“备注”部分。</returns>
      <param name="separator">分隔此实例中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>返回的字符串数组包含此实例中的子字符串（由指定 Unicode 字符数组的元素分隔）。参数指定返回的子字符串的最大数量。</summary>
      <returns>一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。有关详细信息，请参阅“备注”部分。</returns>
      <param name="separator">分隔此实例中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。</param>
      <param name="count">要返回的子字符串的最大数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
      <summary>返回的字符串数组包含此字符串中的子字符串（由指定 Unicode 字符数组的元素分隔）。参数指定要返回子字符串的最大数量，以及是否返回空数组元素。</summary>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。有关详细信息，请参阅“备注”部分。</returns>
      <param name="separator">分隔此字符串中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。</param>
      <param name="count">要返回的子字符串的最大数量。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>返回的字符串数组包含此字符串中的子字符串（由指定 Unicode 字符数组的元素分隔）。参数指定是否返回空数组元素。</summary>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。有关详细信息，请参阅“备注”部分。</returns>
      <param name="separator">分隔此字符串中子字符串的 Unicode 字符数组、不包含分隔符的空数组或 null。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
      <summary>返回的字符串数组包含此字符串中的子字符串（由指定字符串数组的元素分隔）。参数指定要返回子字符串的最大数量，以及是否返回空数组元素。</summary>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符串分隔。有关详细信息，请参阅“备注”部分。</returns>
      <param name="separator">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 null。</param>
      <param name="count">要返回的子字符串的最大数量。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>返回的字符串数组包含此字符串中的子字符串（由指定字符串数组的元素分隔）。参数指定是否返回空数组元素。</summary>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符串分隔。有关详细信息，请参阅“备注”部分。</returns>
      <param name="separator">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 null。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>确定此字符串实例的开头是否与指定的字符串匹配。</summary>
      <returns>如果 true 与此字符串的开头匹配，则为 <paramref name="value" />；否则为 false。</returns>
      <param name="value">要比较的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配。</summary>
      <returns>如果此实例以 true 开头，则为 <paramref name="value" />；否则为 false。</returns>
      <param name="value">要比较的字符串。</param>
      <param name="comparisonType">枚举值之一，用于确定如何比较此字符串与 <paramref name="value" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>从此实例检索子字符串。子字符串在指定的字符位置开始并一直到该字符串的末尾。</summary>
      <returns>与此实例中在 <paramref name="startIndex" /> 处开头的子字符串等效的一个字符串；如果 <see cref="F:System.String.Empty" /> 等于此实例的长度，则为 <paramref name="startIndex" />。</returns>
      <param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>从此实例检索子字符串。子字符串从指定的字符位置开始且具有指定的长度。</summary>
      <returns>与此实例中在 <paramref name="length" /> 处开头、长度为 <paramref name="startIndex" /> 的子字符串等效的一个字符串；如果 <see cref="F:System.String.Empty" /> 等于此实例的长度且 <paramref name="startIndex" /> 为零，则为 <paramref name="length" />。</returns>
      <param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。</param>
      <param name="length">子字符串中的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.-or- <paramref name="startIndex" /> or <paramref name="length" /> is less than zero. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回循环访问当前 <see cref="T:System.String" /> 对象的枚举数。</summary>
      <returns>类型 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 的 <see cref="T:System.Char" />，可用于循环访问当前的 <see cref="T:System.String" /> 对象。</returns>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问当前 <see cref="T:System.String" /> 对象的枚举数。</summary>
      <returns>一个枚举器，可用于循环访问当前的字符串。</returns>
    </member>
    <member name="M:System.String.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.String" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前字符串的值为 true，则为 <see cref="F:System.Boolean.TrueString" />；如果当前字符串的值为 false，则为 <see cref="F:System.Boolean.FalseString" />。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.FormatException">The value of the current string is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象中索引 0 处的字符。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToString(System.IFormatProvider)"></member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="type">返回对象的类型。</param>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>将此实例中的字符复制到 Unicode 字符数组。</summary>
      <returns>元素为此实例的各字符的 Unicode 字符数组。如果此实例是空字符串，则返回的数组为空且长度为零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>将此实例中的指定子字符串内的字符复制到 Unicode 字符数组。</summary>
      <returns>元素为此实例中从字符位置 <paramref name="length" /> 开始的 <paramref name="startIndex" /> 字符数的 Unicode 字符数组。</returns>
      <param name="startIndex">此实例内子字符串的起始位置。</param>
      <param name="length">此实例内子字符串的长度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="length" /> is greater than the length of this instance. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToLower">
      <summary>返回此字符串转换为小写形式的副本。</summary>
      <returns>一个小写字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <summary>返回此 <see cref="T:System.String" /> 对象的转换为小写形式的副本，返回时使用固定区域性的大小写规则。</summary>
      <returns>当前字符串的等效小写形式。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToString">
      <summary>返回 <see cref="T:System.String" /> 的此实例；不执行实际转换。</summary>
      <returns>当前的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>返回此字符串转换为大写形式的副本。</summary>
      <returns>当前字符串的大写形式。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <summary>返回此 <see cref="T:System.String" /> 对象的转换为大写形式的副本，返回时使用固定区域性的大小写规则。</summary>
      <returns>当前字符串的大写形式。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.String.Trim">
      <summary>从当前 <see cref="T:System.String" /> 对象移除所有前导空白字符和尾部空白字符。</summary>
      <returns>从当前字符串的开头和结尾删除所有空白字符后剩余的字符串。如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有前导匹配项和尾部匹配项。</summary>
      <returns>从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。如果 <paramref name="trimChars" /> 为 null 或空数组，则改为移除空白字符。如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
      <param name="trimChars">要删除的 Unicode 字符的数组，或 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有尾部匹配项。</summary>
      <returns>从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。如果 <paramref name="trimChars" /> 为 null 或空数组，则改为删除 Unicode 空白字符。如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
      <param name="trimChars">要删除的 Unicode 字符的数组，或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有前导匹配项。</summary>
      <returns>从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。如果 <paramref name="trimChars" /> 为 null 或空数组，则改为移除空白字符。</returns>
      <param name="trimChars">要删除的 Unicode 字符的数组，或 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.StringComparison">
      <summary>指定 <see cref="M:System.String.Compare(System.String,System.String)" /> 和 <see cref="M:System.String.Equals(System.Object)" /> 方法的某些重载要使用的区域、大小写和排序规则。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>使用区域敏感排序规则和当前区域比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>使用区域敏感排序规则、当前区域来比较字符串，同时忽略被比较字符串的大小写。</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>使用序号排序规则比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>使用序号排序规则并忽略被比较字符串的大小写，对字符串进行比较。</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>指定适用的 <see cref="Overload:System.String.Split" /> 方法重载包含还是省略返回值中的空子字符串。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>返回值包括含有空字符串的数组元素</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>返回值不包括含有空字符串的数组元素</summary>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>指示静态字段的值对于每个线程都是唯一的。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ThreadStaticAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>当为进程或操作分配的时间已过期时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>初始化 <see cref="T:System.TimeoutException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.TimeoutException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误信息和内部异常初始化 <see cref="T:System.TimeoutException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>表示一个时间间隔。若要浏览此类型的 .NET Framework 源代码，请参阅引用源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.TimeSpan" /> 结构的新实例初始化为指定的小时数、分钟数和秒数。</summary>
      <param name="hours">小时数。</param>
      <param name="minutes">分钟数。</param>
      <param name="seconds">秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.TimeSpan" /> 结构的新实例初始化为指定的天数、小时数、分钟数和秒数。</summary>
      <param name="days">天数。</param>
      <param name="hours">小时数。</param>
      <param name="minutes">分钟数。</param>
      <param name="seconds">秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.TimeSpan" /> 结构的新实例初始化为指定的天数、小时数、分钟数、秒数和毫秒数。</summary>
      <param name="days">天数。</param>
      <param name="hours">小时数。</param>
      <param name="minutes">分钟数。</param>
      <param name="seconds">秒数。</param>
      <param name="milliseconds">毫秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>将 <see cref="T:System.TimeSpan" /> 结构的新实例初始化为指定的刻度数。</summary>
      <param name="ticks">以 100 毫微秒为单位表示的时间段。</param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>返回一个新的 <see cref="T:System.TimeSpan" /> 对象，其值为指定的 <see cref="T:System.TimeSpan" /> 对象与此实例的值之和。</summary>
      <returns>一个新对象，表示此实例的值加 <paramref name="ts" /> 的值。</returns>
      <param name="ts">待添加的时间间隔。</param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>比较两个 <see cref="T:System.TimeSpan" /> 值，并返回一个整数，该整数指示第一个值是短于、等于还是长于第二个值。</summary>
      <returns>以下值之一。值描述 -1 <paramref name="t1" /> 短于 <paramref name="t2" />。 0 <paramref name="t1" /> 等于 <paramref name="t2" />。 1 <paramref name="t1" /> 长于 <paramref name="t2" />。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>将此实例与指定的 <see cref="T:System.TimeSpan" /> 对象进行比较，并返回一个整数，该整数指示此实例是短于、等于还是长于 <see cref="T:System.TimeSpan" /> 对象。</summary>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。值描述负整数此实例短于 <paramref name="value" />。零此实例等于 <paramref name="value" />。正整数此实例长于 <paramref name="value" />。</returns>
      <param name="value">要与此实例进行比较的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的天数部分。</summary>
      <returns>此实例的天数部分。返回值可以是正数也可以是负数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>返回新的 <see cref="T:System.TimeSpan" /> 对象，其值是当前 <see cref="T:System.TimeSpan" /> 对象的绝对值。</summary>
      <returns>一个新对象，其值是当前 <see cref="T:System.TimeSpan" /> 对象的绝对值。</returns>
      <exception cref="T:System.OverflowException">The value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="value" /> 是表示与当前 <see cref="T:System.TimeSpan" /> 结构具有相同时间间隔的 <see cref="T:System.TimeSpan" /> 对象，则为 true；否则为 false。</returns>
      <param name="value">与此实例进行比较的对象。 </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.TimeSpan" /> 相等。</summary>
      <returns>如果 <paramref name="obj" /> 表示的时间间隔与此实例相同，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。 </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>返回一个值，该值指示 <see cref="T:System.TimeSpan" /> 的两个指定实例是否相等。</summary>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值相等，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。 </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>返回表示指定天数的 <see cref="T:System.TimeSpan" />，其中对天数的指定精确到最接近的毫秒。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">天数，精确到最接近的毫秒。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. -or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>返回表示指定小时数的 <see cref="T:System.TimeSpan" />，其中对小时数的指定精确到最接近的毫秒。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">精确到最接近的毫秒的小时数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. -or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>返回表示指定毫秒数的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">毫秒数。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>返回表示指定分钟数的 <see cref="T:System.TimeSpan" />，其中对分钟数的指定精确到最接近的毫秒。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">分钟数，精确到最接近的毫秒。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>返回表示指定秒数的 <see cref="T:System.TimeSpan" />，其中对秒数的指定精确到最接近的毫秒。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">秒数，精确到最接近的毫秒。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>返回表示指定时间的 <see cref="T:System.TimeSpan" />，其中对时间的指定以刻度为单位。</summary>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <param name="value">表示时间的刻度数。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的小时数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的小时数部分。返回值的范围为 -23 到 23。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>表示最大的 <see cref="T:System.TimeSpan" /> 值。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的毫秒数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的毫秒数部分。返回值的范围为 -999 到 999。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的分钟数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的分钟数部分。返回值的范围为 -59 到 59。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>表示最小的 <see cref="T:System.TimeSpan" /> 值。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>返回一个新的 <see cref="T:System.TimeSpan" /> 对象，它的值为这个实例的相反值。</summary>
      <returns>一个新对象，它与此实例的数值相同但符号相反。</returns>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>添加两个指定的 <see cref="T:System.TimeSpan" /> 实例。</summary>
      <returns>一个对象，其值为 <paramref name="t1" /> 与 <paramref name="t2" /> 的值之和。</returns>
      <param name="t1">要添加的第一个时间间隔。</param>
      <param name="t2">要添加的第二个时间间隔。</param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>指示两个 <see cref="T:System.TimeSpan" /> 实例是否相等。</summary>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值相等，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否大于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值大于 <paramref name="t2" /> 的值，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否大于或等于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值大于或等于 <paramref name="t2" /> 的值，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>指示两个 <see cref="T:System.TimeSpan" /> 实例是否不相等。</summary>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值不相等，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否小于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值小于 <paramref name="t2" /> 的值，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否小于或等于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值小于或等于 <paramref name="t2" /> 的值，则为 true；否则为 false。</returns>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>从另一个指定的 <see cref="T:System.TimeSpan" /> 中减去指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>一个对象，其值是 <paramref name="t1" /> 的值减去 <paramref name="t2" /> 的值后所得的结果。</returns>
      <param name="t1">被减数。</param>
      <param name="t2">减数。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>返回一个 <see cref="T:System.TimeSpan" />，它的值为这个指定实例的相反值。</summary>
      <returns>与此实例的数值相同，但符号相反的对象。</returns>
      <param name="t">要求反的时间间隔。</param>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>返回指定的 <see cref="T:System.TimeSpan" /> 实例。</summary>
      <returns>
        <paramref name="t" /> 所指定的时间间隔。</returns>
      <param name="t">要返回的时间间隔。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>将时间间隔的字符串表示形式转换为等效的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>与 <paramref name="s" /> 对应的时间间隔。</returns>
      <param name="s">一个字符串，用于指定进行转换的时间间隔。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components is outside its valid range. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="formatProvider" /> 指定。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式设置信息，将时间间隔的字符串表示形式转换为等效的 <see cref="T:System.TimeSpan" />。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定的格式、区域性特定格式设置信息和样式，将时间间隔的字符串表示形式转换为等效的 <see cref="T:System.TimeSpan" />。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="styles">枚举值的按位组合，用于定义可出现在 <paramref name="input" /> 中的样式元素。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>使用指定的格式字符串数组和区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="formats" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定的格式、区域性特定格式设置信息和样式，将时间间隔的字符串表示形式转换为等效的 <see cref="T:System.TimeSpan" />。字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="styles">枚举值的按位组合，用于定义可出现在 input 中的样式元素。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> represents a number that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range. </exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的秒数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的秒数部分。返回值的范围为 -59 到 59。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>返回一个新的 <see cref="T:System.TimeSpan" /> 对象，其值为指定的 <see cref="T:System.TimeSpan" /> 对象和这个实例的差值。</summary>
      <returns>一个新的时间间隔，其值为此实例的值减去 <paramref name="ts" /> 的值所得的结果。</returns>
      <param name="ts">要减去的时间间隔。</param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。返回值含义小于零此实例在排序顺序中位于 <paramref name="value" /> 之前。零此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。大于零此实例在排序顺序中位于 <paramref name="value" /> 之后。- 或 - <paramref name="value" /> 为 null。 </returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.TimeSpan" /> object. </exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>获取表示当前 <see cref="T:System.TimeSpan" /> 结构的值的刻度数。</summary>
      <returns>此实例包含的刻度数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>表示一天中的刻度数。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>表示 1 小时的刻度数。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>表示 1 毫秒的刻度数。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>表示 1 分钟的刻度数。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>表示 1 秒的刻度数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>将当前 <see cref="T:System.TimeSpan" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
      <summary>使用指定的格式将当前 <see cref="T:System.TimeSpan" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 值的字符串表示形式，该值使用 <paramref name="format" /> 参数指定的格式。</returns>
      <param name="format">标准或自定义的 <see cref="T:System.TimeSpan" /> 格式字符串。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定的格式设置信息，将当前 <see cref="T:System.TimeSpan" /> 对象的值转换为其等效字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 值的字符串表示形式，格式由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <param name="format">标准或自定义的 <see cref="T:System.TimeSpan" /> 格式字符串。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>获取以整天数和天的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总天数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>获取以整小时数和小时的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总小时数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>获取以整毫秒数和毫秒的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总毫秒数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>获取以整分钟数和分钟的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总分钟数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>获取以整秒数和秒的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总秒数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的区域性特定格式设置信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 <paramref name="input" /> 成功转换，则为 true；否则为 false。如果 <paramref name="input" /> 参数为 null 或 <see cref="F:System.String.Empty" />，格式无效，表示的时间间隔小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />，或者天、小时、分钟或秒分量中至少有一个超出其有效范围，则此运算返回 false。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 <paramref name="s" /> 成功转换，则为 true；否则为 false。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />，格式无效，表示的时间间隔小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />，或者天、小时、分钟或秒分量中至少有一个超出其有效范围，则此运算返回 false。</returns>
      <param name="s">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="s" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。此参数未经初始化即被传递。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、区域性特定格式信息和样式，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>如果 <paramref name="input" /> 成功转换，则为 true；否则为 false。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="styles">用于指示 <paramref name="input" /> 的样式的一个或多个枚举值。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的区域性特定格式设置信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <returns>如果 <paramref name="input" /> 成功转换，则为 true；否则为 false。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、区域性特定格式信息和样式，将时间间隔的指定字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>如果 <paramref name="input" /> 成功转换，则为 true；否则为 false。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义可接受的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="styles">用于指示 <paramref name="input" /> 的样式的一个或多个枚举值。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的格式和区域性特定格式信息，将时间间隔的指定字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <returns>如果 <paramref name="input" /> 成功转换，则为 true；否则为 false。</returns>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义可接受的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。此参数未经初始化即被传递。</param>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>表示零 <see cref="T:System.TimeSpan" /> 值。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>表示世界上的任何时区。</summary>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>获取当前时区的标准时间与协调世界时 (UTC) 之间的时差。</summary>
      <returns>一个对象，指示当前时区的标准时间与协调世界时 (UTC) 之间的时差。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>将时间转换为特定时区的时间。</summary>
      <returns>目标时区的日期和时间。</returns>
      <param name="dateTime">要转换的日期和时间。</param>
      <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 参数值表示无效时间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 参数的值为 null。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
      <summary>将时间从一个时区转换为另一个时区。</summary>
      <returns>目标时区中与源时区中的 <paramref name="dateTime" /> 参数对应的日期和时间。</returns>
      <param name="dateTime">要转换的日期和时间。</param>
      <param name="sourceTimeZone">
        <paramref name="dateTime" /> 的时区。</param>
      <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 参数的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />，但 <paramref name="sourceTimeZone" /> 参数不等于 <see cref="F:System.DateTimeKind.Local" />。有关更多信息，请参见“备注”一节。- 或 -<paramref name="dateTime" /> 参数的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Utc" />，但 <paramref name="sourceTimeZone" /> 参数不等于 <see cref="P:System.TimeZoneInfo.Utc" />。- 或 -<paramref name="dateTime" /> 参数为无效时间（即，它表示因时区的调整规则而不存在的时间）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZone" /> 参数为 null。- 或 -<paramref name="destinationTimeZone" /> 参数为 null。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>将时间转换为特定时区的时间。</summary>
      <returns>目标时区的日期和时间。</returns>
      <param name="dateTimeOffset">要转换的日期和时间。</param>
      <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 参数的值为 null。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>获取当前时区的夏时制的显示名称。</summary>
      <returns>时区的夏时制的显示名称。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>获取表示时区的一般显示名称。</summary>
      <returns>时区的一般显示名称。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>确定当前的 <see cref="T:System.TimeZoneInfo" /> 对象和另一个 <see cref="T:System.TimeZoneInfo" /> 对象是否相等。</summary>
      <returns>如果两个 <see cref="T:System.TimeZoneInfo" /> 对象相等，则为 true；否则为 false。</returns>
      <param name="other">要与当前对象进行比较的另一个对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)">
      <summary>根据其标识符从注册表中检索 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
      <returns>一个对象，其标识符为 <paramref name="id" /> 参数的值。</returns>
      <param name="id">时区标识符，它对应于 <see cref="P:System.TimeZoneInfo.Id" /> 属性。</param>
      <exception cref="T:System.OutOfMemoryException">系统没有足够内存保留有关时区的信息。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 null。</exception>
      <exception cref="T:System.TimeZoneNotFoundException">未找到 <paramref name="id" /> 指定的时区标识符。这表示名称与 <paramref name="id" /> 匹配的注册表项不存在，或者该项存在但不包含任何时区数据。</exception>
      <exception cref="T:System.Security.SecurityException">进程没有读取包含时区信息的注册表项所需的权限。</exception>
      <exception cref="T:System.InvalidTimeZoneException">已找到时区标识符，但注册表数据已损坏。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>返回不明确的日期和时间可能映射到的日期和时间的相关信息。</summary>
      <returns>对象的数组，它表示特定日期和时间可以映射到的可能的协调世界时 (UTC) 偏移量。</returns>
      <param name="dateTime">日期和时间。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 是明确的时间。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>返回不明确的日期和时间可能映射到的日期和时间的相关信息。</summary>
      <returns>对象的数组，它表示特定日期和时间可以映射到的可能的协调世界时 (UTC) 偏移量。</returns>
      <param name="dateTimeOffset">日期和时间。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 是明确的时间。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>用作哈希算法的哈希函数和数据结构（如哈希表）。</summary>
      <returns>一个 32 位有符号整数，用作此 <see cref="T:System.TimeZoneInfo" /> 对象的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.GetSystemTimeZones">
      <summary>返回时区信息在本地系统上可用的所有时区的已排序集合。</summary>
      <returns>
        <see cref="T:System.TimeZoneInfo" /> 对象的只读集合。</returns>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法存储所有时区信息。</exception>
      <exception cref="T:System.Security.SecurityException">用户没有读取包含时区信息的注册表项所需的权限。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。</summary>
      <returns>一个对象，该对象指示两个时区之间的时差。</returns>
      <param name="dateTime">要为其确定偏移量的日期和时间。</param>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。</summary>
      <returns>一个对象，该对象指示协调世界时 (UTC) 与当前时区之间的时差。</returns>
      <param name="dateTimeOffset">要为其确定偏移量的日期和时间。</param>
    </member>
    <member name="P:System.TimeZoneInfo.Id">
      <summary>获取时区标识符。</summary>
      <returns>时区标识符。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。</summary>
      <returns>如果 <paramref name="dateTime" /> 参数不明确，则为 true；否则为 false。</returns>
      <param name="dateTime">日期和时间值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />，并且 <paramref name="dateTime" /> 为无效时间。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。</summary>
      <returns>如果 <paramref name="dateTimeOffset" /> 参数在当前时区中不明确，则为 true；否则为 false。</returns>
      <param name="dateTimeOffset">日期和时间。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>指示指定日期和时间是否处于当前 <see cref="T:System.TimeZoneInfo" /> 对象时区的夏时制范围内。</summary>
      <returns>如果 <paramref name="dateTime" /> 参数为夏时制，则为 true；否则为 false。</returns>
      <param name="dateTime">日期和时间值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />，并且 <paramref name="dateTime" /> 为无效时间。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>指示指定日期和时间是否处于当前 <see cref="T:System.TimeZoneInfo" /> 对象时区的夏时制范围内。</summary>
      <returns>如果 <paramref name="dateTimeOffset" /> 参数为夏时制，则为 true；否则为 false。</returns>
      <param name="dateTimeOffset">日期和时间值。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>指示特定日期和时间是否无效。</summary>
      <returns>如果 <paramref name="dateTime" /> 无效，则为 true；否则为 false。</returns>
      <param name="dateTime">日期和时间值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>获取表示本地时区的 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
      <returns>一个对象，表示本地时区。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>获取时区的标准时间的显示名称。</summary>
      <returns>时区的标准时间的显示名称。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>获取一个值，该值指示时区是否具有任何夏时制规则。</summary>
      <returns>如果时区支持夏时制，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>返回当前 <see cref="T:System.TimeZoneInfo" /> 对象的显示名称。</summary>
      <returns>当前 <see cref="T:System.TimeZoneInfo" /> 对象的 <see cref="P:System.TimeZoneInfo.DisplayName" /> 属性值。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>获取表示协调世界时 (UTC) 时区的 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
      <returns>一个对象，表示协调世界时 (UTC) 时区。</returns>
    </member>
    <member name="T:System.Tuple">
      <summary>提供用于创造元组对象的静态方法。若要浏览此类型的 .NET Framework 源代码，请参阅引用源。</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
      <summary>创建新的 1 元组，即单一实例。</summary>
      <returns>值为 (<paramref name="item1" />) 的元组。</returns>
      <param name="item1">元组仅有的分量的值。</param>
      <typeparam name="T1">元组的唯一一个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
      <summary>创建新的 2 元组，即二元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />) 的 2 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
      <summary>创建新的 3 元组，即三元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />) 的 3 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
      <summary>创建新的 4 元组，即四元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />) 的 4 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>创建新的 5 元组，即五元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />) 的 5 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>创建新的 6 元组，即六元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />) 的 6 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <param name="item6">此元组的第六个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>创建新的 7 元组，即七元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />)的 7 元组。</returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <param name="item6">此元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>创建新的 8 元组，即八元组。</summary>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />, <paramref name="item8" />) 的 8 元组（八元组）。 </returns>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <param name="item6">此元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
      <param name="item8">元组的第八个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
      <typeparam name="T8">元组的第八个分量的类型。</typeparam>
    </member>
    <member name="T:System.Tuple`1">
      <summary>表示 1 元组，即单一实例。</summary>
      <typeparam name="T1">元组的唯一一个分量的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.Tuple`1" /> 类的新实例。</summary>
      <param name="item1">元组的唯一一个分量的值。</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`1" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`1" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
      <summary>获取 <see cref="T:System.Tuple`1" /> 对象的单一分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`1" /> 对象的单一分量的值。</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`1" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="other" /> 之前。零此实例与 <paramref name="other" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`1" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`1" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`1" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`1" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`1" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="obj" /> 之前。零此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`1" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`1.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`1" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`1" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`2">
      <summary>表示 2 元组，即二元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
      <summary>初始化 <see cref="T:System.Tuple`2" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`2" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`2" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`2" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`2" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`2" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`2" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`2" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="other" /> 之前。零此实例与 <paramref name="other" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`2" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`2" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`2" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`2" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`2" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="obj" /> 之前。零此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`2" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`2.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`2" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`2" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`3">
      <summary>表示 3 元组，即三元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
      <summary>初始化 <see cref="T:System.Tuple`3" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`3" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`3" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`3" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`3" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`3" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`3" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`3" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`3" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`3" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="other" /> 之前。零此实例与 <paramref name="other" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`3" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`3" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`3" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`3" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`3" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="obj" /> 之前。零此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`3" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`3.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`3" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`3" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`4">
      <summary>表示 4 元组，即四元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
      <summary>初始化 <see cref="T:System.Tuple`4" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`4" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`4" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`4" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="other" /> 之前。零此实例与 <paramref name="other" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`4" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`4" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`4" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`4" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`4" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="obj" /> 之前。零此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`4" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`4.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`4" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`4" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`5">
      <summary>表示 5 元组，即五元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>初始化 <see cref="T:System.Tuple`5" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`5" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`5" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第五个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第五个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`5" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="other" /> 之前。零此实例与 <paramref name="other" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`5" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`5" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`5" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`5" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`5" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="obj" /> 之前。零此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`5" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`5.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`5" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`5" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`6">
      <summary>表示 6 元组，即六元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">元组的第六个分量的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>初始化 <see cref="T:System.Tuple`6" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
      <param name="item6">元组的第六个分量的值。</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.Tuple`6" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`6" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第五个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第六个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第六个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`6" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="other" /> 之前。零此实例与 <paramref name="other" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`6" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前 <see cref="T:System.Tuple`6" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`6" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`6" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`6" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="obj" /> 之前。零此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`6" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`6.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`6" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`6" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`7">
      <summary>表示 7 元组，即七元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>初始化 <see cref="T:System.Tuple`7" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
      <param name="item6">元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`7" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`7" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第五个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第六个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第六个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第七个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第七个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`7" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="other" /> 之前。零此实例与 <paramref name="other" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`7" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`7" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`7" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`7" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`7" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="obj" /> 之前。零此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`7" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`7.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`7" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`7" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`8">
      <summary>表示 n 元组，其中 n 为 8 或更大。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
      <typeparam name="TRest">任何常规 Tuple 对象，用于定义元组的剩余分量的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>初始化 <see cref="T:System.Tuple`8" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
      <param name="item6">元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
      <param name="rest">任何常规 Tuple 对象，其中包含元组的剩余分量的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> 不是泛型 Tuple 对象。</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`8" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="obj">与该实例进行比较的对象。</param>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
      <summary>计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第五个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第六个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第六个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第七个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第七个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的剩余分量。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的剩余分量的值。</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`8" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="other" /> 之前。零此实例与 <paramref name="other" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="other" /> 之后。</returns>
      <param name="other">与当前实例进行比较的对象。</param>
      <param name="comparer">一个对象，提供自定义比较规则。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`8" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`8" /> 对象是否与指定对象相等。</summary>
      <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，定义用于评估两个对象是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</param>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`8" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号整数，指示此实例与 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。值描述负整数此实例在 <paramref name="obj" /> 之前。零此实例与 <paramref name="obj" /> 在排序顺序中的位置相同。正整数此实例在 <paramref name="obj" /> 之后。</returns>
      <param name="obj">与当前实例进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`8" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`8.ToString">
      <summary>返回一个字符串，该字符串表示此 <see cref="T:System.Tuple`8" /> 实例的值。</summary>
      <returns>此 <see cref="T:System.Tuple`8" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Type">
      <summary>表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。若要浏览此类型的 .NET Framework 源代码，请参阅引用源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>获取类型的程序集限定名，其中包括从中加载 <see cref="T:System.Type" /> 的程序集的名称。</summary>
      <returns>
        <see cref="T:System.Type" /> 的程序集限定名，其中包括从中加载 <see cref="T:System.Type" /> 的程序集的名称；或者为 null（如果当前实例表示泛型类型参数）。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>获取用来声明当前的嵌套类型或泛型类型参数的类型。</summary>
      <returns>如果当前的类型是嵌套类型，则为表示封闭类型的 <see cref="T:System.Type" /> 对象；如果当前的类型是泛型类型的类型参数，则为泛型类型的定义；如果当前的类型是泛型方法的类型参数，则为用来声明泛型方法的类型；否则为 null。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>表示 <see cref="T:System.Type" /> 类型的空数组。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>确定当前 <see cref="T:System.Type" /> 的基础系统类型是否与指定 <see cref="T:System.Object" /> 的基础系统类型相同。</summary>
      <returns>如果 true 的基础系统类型与当前 <paramref name="o" /> 的基础系统类型相同，则为 <see cref="T:System.Type" />；否则为 false。如果 false 参数指定的对象不是 <paramref name="o" />，此方法也会返回 Type。</returns>
      <param name="o">该对象，其基础系统类型将与当前 <see cref="T:System.Type" /> 的基础系统类型相比较。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>确定当前 <see cref="T:System.Type" /> 的基础系统类型是否与指定 <see cref="T:System.Type" /> 的基础系统类型相同。</summary>
      <returns>如果 true 的基础系统类型与当前 <paramref name="o" /> 的基础系统类型相同，则为 <see cref="T:System.Type" />；否则为 false。</returns>
      <param name="o">该对象，其基础系统类型将与当前 <see cref="T:System.Type" /> 的基础系统类型相比较。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.FullName">
      <summary>获取该类型的完全限定名称，包括其命名空间，但不包括程序集。</summary>
      <returns>该类型的完全限定名，包括其命名空间，但不包括程序集；如果当前实例表示泛型类型参数、数组类型、指针类型或基于类型参数的 null 类型，或表示不属于泛型类型定义但包含无法解析的类型参数的泛型类型，则为 byref。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>当 <see cref="T:System.Type" /> 对象表示泛型类型或泛型方法的类型参数时，获取类型参数在声明它的泛型类型或方法的类型参数列表中的位置。</summary>
      <returns>类型参数在定义它的泛型类型或方法的类型参数列表中的位置。位置编号从 0 开始。</returns>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a type parameter.That is, <see cref="P:System.Type.IsGenericParameter" /> returns false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.GenericTypeArguments">
      <summary>获取此类型泛型类型参数的数组。</summary>
      <returns>此类型的泛型类型参数的数组。</returns>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>获取数组中的维数。</summary>
      <returns>包含当前类型中维数的整数。</returns>
      <exception cref="T:System.NotSupportedException">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead. </exception>
      <exception cref="T:System.ArgumentException">The current type is not an array. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>当在派生类中重写时，返回当前数组、指针或引用类型包含的或引用的对象的 <see cref="T:System.Type" />。</summary>
      <returns>当前数组、指针或引用类型包含或引用的对象的 <see cref="T:System.Type" />；如果当前 null 不是数组或指针，不是按引用传递，或者表示泛型类型或泛型方法的定义中的泛型类型或类型参数，则为 <see cref="T:System.Type" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>返回一个表示可用于构造当前泛型类型的泛型类型定义的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>表示可用于构造当前类型的泛型类型的 <see cref="T:System.Type" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">The current type is not a generic type.That is, <see cref="P:System.Type.IsGenericType" /> returns false.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.Derived classes must provide an implementation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Type" />，执行区分大小写的搜索。</summary>
      <returns>具有指定名称的类型（如果找到的话）；否则为 null。</returns>
      <param name="typeName">要获取的类型的程序集限定名称。请参阅<see cref="P:System.Type.AssemblyQualifiedName" />。如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>获取具有指定名称的 <see cref="T:System.Type" />，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。</summary>
      <returns>具有指定名称的类型。如果找不到该类型，则 <paramref name="throwOnError" /> 参数指定是返回 null 还是引发异常。在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError" /> 的值。请参见“异常”部分。</returns>
      <param name="typeName">要获取的类型的程序集限定名称。请参阅<see cref="P:System.Type.AssemblyQualifiedName" />。如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
      <param name="throwOnError">如果为 true，则在找不到该类型时引发异常；如果为 false，则返回 null。指定 false 还会取消某些其他异常条件，但并不取消所有条件。请参见“异常”部分。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. -or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> is an empty string.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> represents an array type with an invalid size. -or-<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid syntax.For example, "MyType[,*,]".-or- <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is true and the assembly or one of its dependencies was not found. </exception>
      <exception cref="T:System.IO.FileLoadException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>获取具有指定名称的 <see cref="T:System.Type" />，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。</summary>
      <returns>具有指定名称的类型。如果找不到该类型，则 <paramref name="throwOnError" /> 参数指定是返回 null 还是引发异常。在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError" /> 的值。请参见“异常”部分。</returns>
      <param name="typeName">要获取的类型的程序集限定名称。请参阅<see cref="P:System.Type.AssemblyQualifiedName" />。如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
      <param name="throwOnError">true 则引发异常（如果找不到类型）；false 则返回 null.Specifying false，也抑制了其他一些异常情况，但不是所有异常。请参见“异常”部分。</param>
      <param name="ignoreCase">对 true 执行的搜索不区分大小写，则为 <paramref name="typeName" />；对 false 执行的搜索区分大小写，则为 <paramref name="typeName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. -or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> is an empty string.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> represents an array type with an invalid size. -or-<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid syntax.For example, "MyType[,*,]".-or- <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is true and the assembly or one of its dependencies was not found. </exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>获取由指定类型句柄引用的类型。</summary>
      <returns>如果 <see cref="T:System.RuntimeTypeHandle" /> 的 null 属性为 <see cref="P:System.RuntimeTypeHandle.Value" />，则为由指定的 <paramref name="handle" /> 引用的类型，或者为 null。</returns>
      <param name="handle">引用类型的对象。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>获取一个值，通过该值指示当前 <see cref="T:System.Type" /> 是包含还是引用另一类型，即当前 <see cref="T:System.Type" /> 是数组、指针还是通过引用传递。</summary>
      <returns>如果 true 为数组、指针或按引用传递，则为 <see cref="T:System.Type" />；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>获取一个值，该值指示类型是否为数组。</summary>
      <returns>如果当前类型是数组，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>获取一个值，该值指示 <see cref="T:System.Type" /> 是否由引用传递。</summary>
      <returns>如果 true 按引用传递，则为 <see cref="T:System.Type" />；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsConstructedGenericType">
      <summary>获取指示此对象是否表示构造的泛型类型的值。你可以创建构造型泛型类型的实例。</summary>
      <returns>如果此对象表示构造泛型类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Type.IsGenericParameter">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Type" /> 是否表示泛型类型或方法的定义中的类型参数。</summary>
      <returns>如果 true 对象表示泛型类型定义或泛型方法定义的类型参数，则为 <see cref="T:System.Type" />；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsNested">
      <summary>获取一个指示当前 <see cref="T:System.Type" /> 对象是否表示其定义嵌套在另一个类型的定义之内的类型的值。</summary>
      <returns>如果 true 嵌套在另一个类型内，则为 <see cref="T:System.Type" />；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为指针。</summary>
      <returns>如果 true 是指针，则为 <see cref="T:System.Type" />；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>返回 <see cref="T:System.Type" /> 对象，该对象表示当前类型的一维数组（下限为零）。</summary>
      <returns>返回一个表示当前类型的一维数组（下限为零）的 <see cref="T:System.Type" /> 对象。</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.Derived classes must provide an implementation.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>返回 <see cref="T:System.Type" /> 对象，该对象表示一个具有指定维数的当前类型的数组。</summary>
      <returns>表示当前类型的指定维数的数组的对象。</returns>
      <param name="rank">数组的维数。此数字必须小于或等于 32。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is invalid.For example, 0 or negative.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.-or-<paramref name="rank" /> is greater than 32.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>返回表示作为 <see cref="T:System.Type" /> 参数（在 Visual Basic 中为 ref 参数）传递时的当前类型的 ByRef 对象。</summary>
      <returns>表示作为 <see cref="T:System.Type" /> 参数（在 Visual Basic 中为 ref 参数）传递时的当前类型的 ByRef 对象。</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>替代由当前泛型类型定义的类型参数组成的类型数组的元素，并返回表示结果构造类型的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>
        <see cref="T:System.Type" /> 表示的构造类型通过以下方式形成：用 <paramref name="typeArguments" /> 的元素取代当前泛型类型的类型参数。</returns>
      <param name="typeArguments">将代替当前泛型类型的类型参数的类型数组。</param>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a generic type definition.That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns false.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is null.-or- Any element of <paramref name="typeArguments" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.-or- Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. -or- <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns true), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns true), or <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>返回表示指向当前类型的指针的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>表示指向当前类型的指针的 <see cref="T:System.Type" /> 对象。</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
      <exception cref="T:System.TypeLoadException">The current type is <see cref="T:System.TypedReference" />.-or-The current type is a ByRef type.That is, <see cref="P:System.Type.IsByRef" /> returns true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Type.Missing">
      <summary>表示 <see cref="T:System.Type" /> 信息中的缺少值。此字段为只读。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Type.Name"></member>
    <member name="P:System.Type.Namespace">
      <summary>获取 <see cref="T:System.Type" /> 的命名空间。</summary>
      <returns>
        <see cref="T:System.Type" /> 的命名空间；如果当前实例没有命名空间或表示泛型参数，则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Type.ToString">
      <summary>返回表示当前 String 的名称的 Type。</summary>
      <returns>表示当前 <see cref="T:System.String" /> 的名称的 <see cref="T:System.Type" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>获取当前 <see cref="T:System.Type" /> 的句柄。</summary>
      <returns>当前 <see cref="T:System.Type" /> 的句柄。</returns>
      <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this property.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.TypeAccessException">
      <summary>当方法试图使用它无权访问的类型时引发的异常。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
      <summary>使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.TypeAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
      <summary>使用描述错误的指定消息初始化 <see cref="T:System.TypeAccessException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.TypeAccessException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.TypeCode">
      <summary>指定对象的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>简单类型，表示 true 或 false 的布尔值。</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>整型，表示值介于 0 到 255 之间的无符号 8 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>整型，表示值介于 0 到 65535 之间的无符号 16 位整数。<see cref="F:System.TypeCode.Char" /> 类型的可能值集与 Unicode 字符集相对应。</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>表示一个日期和时间值的类型。</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>简单类型，表示从 1.0 x 10 -28 到大约 7.9 x 10 28 且有效位数为 28 到 29 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>浮点型，表示从大约 5.0 x 10 -324 到 1.7 x 10 308 且精度为 15 到 16 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>空引用。</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>整型，表示值介于 -32768 到 32767 之间的有符号 16 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>整型，表示值介于 -2147483648 到 2147483647 之间的有符号 32 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>整型，表示值介于 -9223372036854775808 到 9223372036854775807 之间的有符号 64 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>常规类型，表示不会由另一个 TypeCode 显式表示的任何引用或值类型。</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>整型，表示值介于 -128 到 127 之间的有符号 8 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>浮点型，表示从大约 1.5 x 10 -45 到 3.4 x 10 38 且精度为 7 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>密封类类型，表示 Unicode 字符串。</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>整型，表示值介于 0 到 65535 之间的无符号 16 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>整型，表示值介于 0 到 4294967295 之间的无符号 32 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>整型，表示值介于 0 到 18446744073709551615 之间的无符号 64 位整数。</summary>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>作为类初始值设定项引发的异常的包装器而引发的异常。此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>用默认错误消息、指定的类型名称和对内部异常（为该异常的根源）的引用来初始化 <see cref="T:System.TypeInitializationException" /> 类的新实例。</summary>
      <param name="fullTypeName">未能初始化类型的完全限定名。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>获取未能初始化类型的完全限定名。</summary>
      <returns>未能初始化类型的完全限定名。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>类型加载失败发生时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>初始化 <see cref="T:System.TypeLoadException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>使用指定的错误信息初始化 <see cref="T:System.TypeLoadException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.TypeLoadException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>获取此异常的错误消息。</summary>
      <returns>错误消息字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>获取导致异常的类型的完全限定名。</summary>
      <returns>完全限定的类型名。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.UInt16">
      <summary>表示 16 位无符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>将此实例与指定的 16 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比较的无符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.UInt16" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.UInt16" /> 值。</summary>
      <returns>如果 true 的值与此实例相同，则为 <paramref name="obj" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 16 位无符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>表示 <see cref="T:System.UInt16" /> 的最大可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>表示 <see cref="T:System.UInt16" /> 的最小可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 16 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s" /> 所允许的格式。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>将指定区域性特定格式的数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt16" /> object. </exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>转换为 <see cref="T:System.Decimal" /> 的该实例的当前值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>转换为 <see cref="T:System.Double" /> 的该实例的当前值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>转换为 <see cref="T:System.Int16" /> 的该实例的当前值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>转换为 <see cref="T:System.Int32" /> 的该实例的值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>转换为 <see cref="T:System.Int64" /> 的该实例的当前值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>转换为 <see cref="T:System.SByte" /> 的该实例的当前值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>转换为 <see cref="T:System.Single" /> 的该实例的当前值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>转换为 <paramref name="type" /> 的该实例的当前值。</returns>
      <param name="type">此 <see cref="T:System.UInt16" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的信息。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>该实例的当前值（未更改）。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>转换为 <see cref="T:System.UInt32" /> 的该实例的当前值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>转换为 <see cref="T:System.UInt64" /> 的该实例的当前值。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由范围从 0 到 9 的数字序列组成，不包含符号或前导零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由范围从 0 到 9 的数字序列组成，不包含符号或前导零。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 16 位无符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 16 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>尝试将数字的字符串表示形式转换为等效的 16 位无符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 16 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" /> 的格式不正确，则转换失败。，或者表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UInt32">
      <summary>表示 32 位无符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>将此实例与指定的 32 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。Return value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比较的无符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.UInt32" />；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.UInt32" /> 相等。</summary>
      <returns>如果 true 的值与此实例相同，则为 <paramref name="obj" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>表示 <see cref="T:System.UInt32" /> 的最大可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>表示 <see cref="T:System.UInt32" /> 的最小可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 32 位无符号整数。</returns>
      <param name="s">一个字符串，表示要转换的数字。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位无符号整数。</returns>
      <param name="s">一个字符串，表示要转换的数字。该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s" /> 所允许的格式。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位无符号整数。</returns>
      <param name="s">一个字符串，表示要转换的数字。该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>将指定区域性特定格式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct style. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt32" /> object. </exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.UInt32" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的区域性特定信息。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由范围从 0 到 9 的数字序列组成，不包含符号或前导零。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 32 位无符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 32 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>尝试将数字的字符串表示形式转换为等效的 32 位无符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 32 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UInt64">
      <summary>表示 64 位无符号整数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>将此实例与指定的 64 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">要比较的无符号整数。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 true 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.UInt64" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.UInt64" /> 值。</summary>
      <returns>如果 true 的值与此实例相同，则为 <paramref name="obj" />；否则为 false。</returns>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.UInt64" /> 值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>表示 <see cref="T:System.UInt64" /> 的最大可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>表示 <see cref="T:System.UInt64" /> 的最小可能值。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 64 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s" /> 所允许的格式。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>将指定区域性特定格式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位无符号整数。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct style. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。Return value Meaning Less than zero This instance precedes <paramref name="value" /> in the sort order.Zero This instance occurs in the same position as <paramref name="value" /> in the sort order.Greater than zero This instance follows <paramref name="value" /> in the sort order.-or- <paramref name="value" /> is null. </returns>
      <param name="value">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt64" /> object. </exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#GetTypeCode"></member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果当前实例的值不为零，则为 true；否则为 false。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支持此转换。不返回任何值。</returns>
      <param name="provider">忽略此参数。</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
      <param name="type">此 <see cref="T:System.UInt64" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的信息。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>当前实例的值，未更改。</returns>
      <param name="provider">忽略此参数。</param>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由范围从 0 到 9 的数字序列组成，不包含符号或前导零。 </returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 64 位无符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 64 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>尝试将数字的字符串表示形式转换为等效的 64 位无符号整数。一个指示转换是否成功的返回值。</summary>
      <returns>如果 true 成功转换，则为 <paramref name="s" />；否则为 false。</returns>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 64 位无符号整数值；如果转换失败，则包含零。如果 <paramref name="s" /> 参数为 null 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />，则转换失败。此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UIntPtr">
      <summary>用于表示指针或句柄的平台特定类型。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>使用指定的 32 位指针或句柄初始化 <see cref="T:System.UIntPtr" /> 的新实例。</summary>
      <param name="value">包含于 32 位无符号整数中的指针或句柄。</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>使用指定的 64 位指针或句柄初始化 <see cref="T:System.UIntPtr" /> 的新实例。</summary>
      <param name="value">包含于 64 位无符号整数中的指针或句柄。</param>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大，无法表示为一个 <see cref="T:System.UIntPtr" />。</exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>使用指定的指向未指定类型的指针来初始化 <see cref="T:System.UIntPtr" /> 的新实例。</summary>
      <param name="value">指向未指定类型的指针。</param>
    </member>
    <member name="M:System.UIntPtr.Add(System.UIntPtr,System.Int32)">
      <summary>为无符号指针的值增加偏移量。</summary>
      <returns>新的无符号指针，反映向 <paramref name="pointer" /> 增加 <paramref name="offset" /> 的结果。</returns>
      <param name="pointer">要为其增加偏移量的无符号指针。</param>
      <param name="offset">要增加的偏移量。</param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.UIntPtr" /> 的实例并且等于此实例的值，则为 true；否则为 false。</returns>
      <param name="obj">与此实例进行比较的对象或为 null。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)">
      <summary>为无符号指针的值增加偏移量。</summary>
      <returns>新的无符号指针，反映向 <paramref name="pointer" /> 增加 <paramref name="offset" /> 的结果。</returns>
      <param name="pointer">要为其增加偏移量的无符号指针。</param>
      <param name="offset">要增加的偏移量。</param>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>确定 <see cref="T:System.UIntPtr" /> 的两个指定的实例是否相等。</summary>
      <returns>如果 <paramref name="value1" /> 等于 <paramref name="value2" />，则为 true；否则为 false。</returns>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>将 32 位无符号整数的值转换成 <see cref="T:System.UIntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 新实例。</returns>
      <param name="value">32 位无符号整数。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>将 64 位无符号整数的值转换成 <see cref="T:System.UIntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 新实例。</returns>
      <param name="value">64 位无符号整数。</param>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大，无法表示为一个 <see cref="T:System.UIntPtr" />。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>将指定的 <see cref="T:System.UIntPtr" /> 的值转换为 64 位无符号整数。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>将指定的 <see cref="T:System.UIntPtr" /> 的值转换为指向未指定的类型的指针。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>将指定的 <see cref="T:System.UIntPtr" /> 的值转换为 32 位无符号整数。</summary>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <param name="value">要转换的指针或句柄。</param>
      <exception cref="T:System.OverflowException">在 64 位平台上，<paramref name="value" /> 的值太大，无法表示为 32 位无符号整数。</exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>将指定的指向未指定类型的指针转换为 <see cref="T:System.UIntPtr" />。</summary>
      <returns>初始化为 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 新实例。</returns>
      <param name="value">指向未指定类型的指针。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>确定 <see cref="T:System.UIntPtr" /> 的两个指定的实例是否不等。</summary>
      <returns>如果 <paramref name="value1" /> 不等于 <paramref name="value2" />，则为 true；否则为 false。</returns>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)">
      <summary>从无符号指针的值中减去偏移量。</summary>
      <returns>新的无符号指针，反映从 <paramref name="pointer" /> 中减去 <paramref name="offset" /> 的结果。</returns>
      <param name="pointer">要从中减去偏移量的无符号指针。</param>
      <param name="offset">要减去的偏移量。</param>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>获得此实例的大小。</summary>
      <returns>此平台上的指针或句柄的大小，按字节计。此属性的值在 32 位平台上为 4，在 64 位平台上为 8。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)">
      <summary>从无符号指针的值中减去偏移量。</summary>
      <returns>新的无符号指针，反映从 <paramref name="pointer" /> 中减去 <paramref name="offset" /> 的结果。</returns>
      <param name="pointer">要从中减去偏移量的无符号指针。</param>
      <param name="offset">要减去的偏移量。</param>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>将此实例的值转换为指向未指定的类型的指针。</summary>
      <returns>指向 <see cref="T:System.Void" /> 的指针，即是说，该指针所指向的内存包含有未指定的类型的数据。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>将此实例的值转换成 32 位无符号整数。</summary>
      <returns>等于此实例的值的 32 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">在 64 位平台上，此实例的值太大，无法表示为 32 位无符号整数。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>将此实例的值转换成 64 位无符号整数。</summary>
      <returns>等于此实例的值的 64 位无符号整数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>一个只读字段，代表已初始化为零的指针或句柄。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>当操作系统因 I/O 错误或指定类型的安全错误而拒绝访问时所引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>初始化 <see cref="T:System.UnauthorizedAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.UnauthorizedAccessException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.UnauthorizedAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不是空引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="T:System.Uri">
      <summary>提供统一资源标识符 (URI) 的对象表示形式和对 URI 各部分的轻松访问。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>用指定的 URI 初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="uriString">一个 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。<paramref name="uriString" /> 为空。- 或 - <paramref name="uriString" /> 中指定的方案形式不正确。请参阅 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。- 或 - <paramref name="uriString" /> 包含太多斜杠。- 或 - <paramref name="uriString" /> 中指定的密码无效。- 或 - <paramref name="uriString" /> 中指定的主机名无效。- 或 - <paramref name="uriString" /> 中指定的文件名无效。- 或 - <paramref name="uriString" /> 中指定的用户名无效。- 或 - <paramref name="uriString" /> 中指定的主机名或证书颁发机构名不能以反斜杠结尾。- 或 - <paramref name="uriString" /> 中指定的端口号无效或无法分析。- 或 - 长度 <paramref name="uriString" /> 超过 65519 个字符。- 或 - <paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。- 或 - <paramref name="uriString" /> 中存在无效的字符序列。- 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>用指定的 URI 初始化 <see cref="T:System.Uri" /> 类的新实例。此构造函数允许指定 URI 字符串是相对 URI、绝对 URI 还是不确定。</summary>
      <param name="uriString">标识将由 <see cref="T:System.Uri" /> 实例表示的资源的字符串。</param>
      <param name="uriKind">指定 URI 字符串是相对 URI、绝对 URI 还是不确定。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。<paramref name="uriString" /> 包含相对 URI，而 <paramref name="uriKind" /> 为 <see cref="F:System.UriKind.Absolute" />。或<paramref name="uriString" /> 包含绝对 URI，而 <paramref name="uriKind" /> 为 <see cref="F:System.UriKind.Relative" />。或<paramref name="uriString" /> 为空。- 或 - <paramref name="uriString" /> 中指定的方案形式不正确。请参阅 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。- 或 - <paramref name="uriString" /> 包含太多斜杠。- 或 - <paramref name="uriString" /> 中指定的密码无效。- 或 - <paramref name="uriString" /> 中指定的主机名无效。- 或 - <paramref name="uriString" /> 中指定的文件名无效。- 或 - <paramref name="uriString" /> 中指定的用户名无效。- 或 - <paramref name="uriString" /> 中指定的主机名或证书颁发机构名不能以反斜杠结尾。- 或 - <paramref name="uriString" /> 中指定的端口号无效或无法分析。- 或 - 长度 <paramref name="uriString" /> 超过 65519 个字符。- 或 - <paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。- 或 - <paramref name="uriString" /> 中存在无效的字符序列。- 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>根据指定的基 URI 和相对 URI 字符串，初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="baseUri">基 URI。</param>
      <param name="relativeUri">要添加到基 URI 的相对 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。<paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 是空的或只包含空格。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案无效。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合所形成的 URI 包含太多的斜杠。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的密码无效。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名无效。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的文件名无效。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的用户名无效。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名或证书颁发机构名不能以反斜杠结尾。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的端口号无效或无法分析。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 的长度超过 65519 个字符。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案的长度超过 1023 个字符。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中存在无效的字符序列。- 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>根据指定的基 <see cref="T:System.Uri" /> 实例和相对 <see cref="T:System.Uri" /> 实例的组合，初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="baseUri">作为新 <see cref="T:System.Uri" /> 实例的基的绝对 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">与 <see cref="T:System.Uri" /> 组合的相对 <paramref name="baseUri" /> 实例。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。<paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 是空的或只包含空格。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案无效。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合所形成的 URI 包含太多的斜杠。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的密码无效。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名无效。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的文件名无效。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的用户名无效。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的主机名或证书颁发机构名不能以反斜杠结尾。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的端口号无效或无法分析。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 的长度超过 65519 个字符。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中指定的方案的长度超过 1023 个字符。- 或 - <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 组合形成的 URI 中存在无效的字符序列。- 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>获取 URI 的绝对路径。</summary>
      <returns>包含资源的绝对路径的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>获取绝对 URI。</summary>
      <returns>包含整个 URI 的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>获取服务器的域名系统 (DNS) 主机名或 IP 地址和端口号。</summary>
      <returns>包含此实例所表示的 URI 的证书颁发机构部分的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>确定指定的主机名是否为有效的 DNS 名称。</summary>
      <returns>指示主机名类型的 <see cref="T:System.UriHostNameType" />。如果无法确定主机名的类型，或者主机名为 null 或零长度字符串，则此方法返回 <see cref="F:System.UriHostNameType.Unknown" />。</returns>
      <param name="name">要验证的主机名。可以是 IPv4 或 IPv6 地址或 Internet 主机名。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>确定指定的方案名是否有效。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果方案名有效，则该值为 true；否则为 false。</returns>
      <param name="schemeName">要验证的方案名。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>使用指定的比较规则比较两个 URI 的指定部分。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，指示进行比较的 <see cref="T:System.Uri" /> 部分之间的词法关系。值含义小于零<paramref name="uri1" /> 小于 <paramref name="uri2" />。零<paramref name="uri1" /> 等于 <paramref name="uri2" />。大于零<paramref name="uri1" /> 大于 <paramref name="uri2" />。</returns>
      <param name="uri1">第一个 <see cref="T:System.Uri" />。</param>
      <param name="uri2">第二个 <see cref="T:System.Uri" />。</param>
      <param name="partsToCompare">
        <see cref="T:System.UriComponents" /> 值的按位组合，它指定要比较的 <paramref name="uri1" /> 和 <paramref name="uri2" /> 的部分。</param>
      <param name="compareFormat">
        <see cref="T:System.UriFormat" /> 值中的一个，它指定在比较 URI 部分时使用的字符转义。</param>
      <param name="comparisonType">
        <see cref="T:System.StringComparison" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>获得可安全用于 DNS 解析的未转义主机名。</summary>
      <returns>一个包含适用于 DNS 解析的未转义 URI 主机部分的 <see cref="T:System.String" />；或者，如果原始的未转义主机字符串已适用于解析，则为原始的未转义主机字符串。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>比较两个 <see cref="T:System.Uri" /> 实例是否相等。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果两个实例表示相同的 URI，则该值为 true；否则为 false。</returns>
      <param name="comparand">与当前实例相比较的 <see cref="T:System.Uri" /> 实例或 URI 标识符。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>将字符串转换为它的转义表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的转义表示形式。</returns>
      <param name="stringToEscape">要转义的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。长度 <paramref name="stringToEscape" /> 超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>将 URI 字符串转换为它的转义表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的转义表示形式。</returns>
      <param name="stringToEscape">要转义的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, 、 相反。长度 <paramref name="stringToEscape" /> 超过 32766 个字符。</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>获取转义 URI 片段。</summary>
      <returns>一个包含任意 URI 片段信息的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>使用特殊字符的指定转义，获取当前实例的指定部分。</summary>
      <returns>一个包含这些部分的 <see cref="T:System.String" />。</returns>
      <param name="components">
        <see cref="T:System.UriComponents" /> 值的按位组合，它指定当前实例中要返回到调用方的部分。</param>
      <param name="format">
        <see cref="T:System.UriFormat" /> 值中的一个，它控制如何转义特殊字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> 不是有效 <see cref="T:System.UriComponents" /> 值的组合。</exception>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Uri" /> 不是绝对 URI。相对 URI 不能和此方法一起使用。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>获取 URI 的哈希代码。</summary>
      <returns>一个 <see cref="T:System.Int32" />，其中包含为此 URI 生成的哈希值。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Host">
      <summary>获取此实例的主机部分。</summary>
      <returns>一个包含主机名的 <see cref="T:System.String" />。这通常是服务器的 DNS 主机名或 IP 地址。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>获取 URI 中指定的主机名的类型。</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> 枚举的一个成员。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IdnHost">
      <summary>RFC 3490 根据需要使用 Punycode，符合主机的国际域名要求。</summary>
      <returns>根据 IDN 标准，返回采用 Punycode 格式的主机名。<see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>获取一个值，该值指示 <see cref="T:System.Uri" /> 实例是否为绝对 URI。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 true 实例是绝对 URI，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>确定当前的 <see cref="T:System.Uri" /> 实例是否为指定 <see cref="T:System.Uri" /> 实例的基。</summary>
      <returns>如果当前 true 实例是 <see cref="T:System.Uri" /> 的基，则为 <paramref name="uri" />；否则，为 false。</returns>
      <param name="uri">要测试的指定 <see cref="T:System.Uri" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>获取一个值，该值指示 URI 的端口值是否为此方案的默认值。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 true 属性中的值是此方案的默认端口，则该值为 <see cref="P:System.Uri.Port" />；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否为文件 URI。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 true 是文件 URI，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否引用了本地主机。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果此 true 引用了本地主机，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否为统一命名约定 (UNC) 路径。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 true 是 UNC 路径，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>指示用于构造此 <see cref="T:System.Uri" /> 的字符串是否格式良好，以及它是否不需要进一步转义。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果该字符串格式正确，则该值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>通过尝试用字符串构造一个 URI 来指示字符串是否为格式良好的，并确保字符串不需要进一步转义。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果该字符串格式正确，则该值为 true ；否则为 false。</returns>
      <param name="uriString">用于尝试构造 <see cref="T:System.Uri" /> 的字符串。</param>
      <param name="uriKind">
        <see cref="T:System.Uri" /> 中的 <paramref name="uriString" /> 的类型。</param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>获取文件名的本地操作系统表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含文件名的本地操作系统表示形式。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例之间的差异。</summary>
      <returns>如果此 URI 实例与 <paramref name="uri" /> 的主机名和方案相同，则此方法返回一个相对 <see cref="T:System.Uri" />。若将此相对 URI 追加到当前 URI 实例，就可以得到 <paramref name="uri" />。如果主机名或方案不同，则此方法返回一个表示 <see cref="T:System.Uri" /> 参数的 <paramref name="uri" />。</returns>
      <param name="uri">与当前 URI 进行比较的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例是否具有相同的值。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果这两个 true 实例是等效的，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <param name="uri1">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri2" /> 实例。</param>
      <param name="uri2">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri1" /> 实例。</param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例是否具有不同的值。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果两个 true 实例不相等，则该值为 <see cref="T:System.Uri" />；否则为 false。如果两者中任意一个参数为 null，则此方法返回 true。</returns>
      <param name="uri1">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri2" /> 实例。</param>
      <param name="uri2">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri1" /> 实例。</param>
      <filterpriority>3</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>获取传递给 <see cref="T:System.Uri" /> 构造函数的原始 URI 字符串。</summary>
      <returns>包含构造此实例时指定的同一 URI，则为 <see cref="T:System.String" />；否则，为 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>获取用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 属性。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 属性。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Port">
      <summary>获取此 URI 的端口号。</summary>
      <returns>一个包含此 URI 的端口号的 <see cref="T:System.Int32" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Query">
      <summary>获取指定 URI 中包括的任何查询信息。</summary>
      <returns>一个<see cref="T:System.String" />，包含指定 URI 中包括的任何查询信息。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>获取此 URI 的方案名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含此 URI 的方案（已转换为小写形式）。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>获取包含构成指定 URI 的路径段的数组。</summary>
      <returns>一个 <see cref="T:System.String" /> 数组，包含构成指定 URI 的路径段。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>获取指定的 <see cref="T:System.Uri" /> 实例的规范化字符串表示形式。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含 <see cref="T:System.Uri" /> 实例的非转义规范化表示形式。除了 #、? 和 %，所有字符均为非转义字符。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>使用指定的 <see cref="T:System.Uri" /> 实例和 <see cref="T:System.String" /> 创建一个新的 <see cref="T:System.UriKind" />。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 true，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <param name="uriString">表示 <see cref="T:System.String" /> 的 <see cref="T:System.Uri" />。</param>
      <param name="uriKind">URI 的类型。</param>
      <param name="result">此方法返回时，包含构造的 <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>使用指定基和相对 <see cref="T:System.Uri" /> 实例创建一个新的 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 true，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <param name="baseUri">基 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">要添加到基 <see cref="T:System.Uri" /> 的相对 <see cref="T:System.String" />（表示为 <see cref="T:System.Uri" />）。</param>
      <param name="result">此方法返回时，包含从 <see cref="T:System.Uri" /> 和 <paramref name="baseUri" /> 构造的 <paramref name="relativeUri" />。此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>使用指定基和相对 <see cref="T:System.Uri" /> 实例创建一个新的 <see cref="T:System.Uri" />。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 true，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <param name="baseUri">基 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">要添加到基 <see cref="T:System.Uri" /> 的相对 <see cref="T:System.Uri" />。</param>
      <param name="result">此方法返回时，包含从 <see cref="T:System.Uri" /> 和 <paramref name="baseUri" /> 构造的 <paramref name="relativeUri" />。此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>将字符串转换为它的非转义表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToUnescape" /> 的非转义表示形式。</returns>
      <param name="stringToUnescape">要恢复原义的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> 为 null。</exception>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>指示 URI 字符串在创建 <see cref="T:System.Uri" /> 实例之前已被完全转义。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果在创建 true 实例时 <paramref name="dontEscape" /> 参数设置为 true，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>获取用户名、密码或其他与指定 URI 关联的特定于用户的信息。</summary>
      <returns>一个 <see cref="T:System.String" />，包含与该 URI 关联的用户信息。返回值不包括“@”字符，该字符是一个保留字符，用于分隔 URI 的用户信息部分。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.UriComponents">
      <summary>指定 <see cref="T:System.Uri" /> 的各个部分。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、<see cref="P:System.Uri.Query" /> 和 <see cref="P:System.Uri.Fragment" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
        <see cref="P:System.Uri.Fragment" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
        <see cref="P:System.Uri.Host" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
        <see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。如果在 Uri 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme" /> 分配了一个默认端口，则返回该默认端口。如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>指定应包含分隔符。</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>
        <see cref="P:System.Uri.Host" /> 的规范化形式。</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 数据。另外，请参见 <see cref="P:System.Uri.PathAndQuery" />。</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
        <see cref="P:System.Uri.Port" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
        <see cref="P:System.Uri.Query" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
        <see cref="P:System.Uri.Scheme" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>URI 序列化程序所需的完整 <see cref="T:System.Uri" /> 上下文。此上下文包括 IPv6 范围。</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
        <see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。如果在 <see cref="T:System.Uri" /> 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme" /> 分配了一个默认端口，则返回该默认端口。如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
        <see cref="P:System.Uri.Port" /> 数据。如果在 <see cref="T:System.Uri" /> 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme" /> 分配了一个默认端口，则返回该默认端口。如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
        <see cref="P:System.Uri.UserInfo" /> 数据。</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>控制 URI 信息的转义方式。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>在请求的 URI 组成部分中具有保留意义的字符将仍然进行转义。所有其他字符不进行转义。请参阅“备注”。</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>未执行任何转义。</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>根据 RFC 2396 中的规则执行转义。</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>当检测到无效的统一资源标识符 (URI) 时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>用指定消息初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
      <param name="textString">错误消息字符串。</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
      <param name="textString">描述该异常的消息。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="e">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>为 <see cref="M:System.Uri.CheckHostName(System.String)" /> 方法定义主机名类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>设置主机，但无法确定类型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>主机名是域名系统 (DNS) 样式主机名。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>主机名是网际协议 (IP) 第 4 版主机地址。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>主机名是网际协议 (IP) 第 6 版主机地址。</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>不提供主机名的类型。</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>定义 <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" /> 的 <see cref="T:System.Uri" /> 的类型和几种 <see cref="Overload:System.Uri.#ctor" /> 方法。</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>此 Uri 是绝对 Uri。</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>此 Uri 是相对 Uri。</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>此 Uri 的类型不确定。</summary>
    </member>
    <member name="T:System.ValueType">
      <summary>提供值类型的基类。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>初始化 <see cref="T:System.ValueType" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 和该实例具有相同的类型并表示相同的值，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>一个 32 位有符号整数，它是该实例的哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>返回该实例的完全限定类型名。</summary>
      <returns>包含完全限定类型名的 <see cref="T:System.String" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Version">
      <summary>表示程序集、操作系统或公共语言运行时的版本号。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>使用指定的主要版本号值和次要版本号值初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="major">主版本号。</param>
      <param name="minor">次版本号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> or <paramref name="minor" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主要版本号、次要版本号和内部版本号值初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="major">主版本号。</param>
      <param name="minor">次版本号。</param>
      <param name="build">内部版本号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, or <paramref name="build" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主版本号、次版本号、内部版本号和修订号初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="major">主版本号。</param>
      <param name="minor">次版本号。</param>
      <param name="build">内部版本号。</param>
      <param name="revision">修订号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, <paramref name="build" />, or <paramref name="revision" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="version">一个包含主要版本号、次要版本号、内部版本号和修订号的字符串，其中的各个号之间以句点字符（“.”）分隔。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> has fewer than two components or more than four components. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A major, minor, build, or revision component is less than zero. </exception>
      <exception cref="T:System.FormatException">At least one component of <paramref name="version" /> does not parse to an integer. </exception>
      <exception cref="T:System.OverflowException">At least one component of <paramref name="version" /> represents a number greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的内部版本号部分的值。</summary>
      <returns>内部版本号或 -1（如果未定义内部版本号）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>将当前 <see cref="T:System.Version" /> 对象与指定的 <see cref="T:System.Version" /> 对象进行比较，并返回二者相对值的一个指示。</summary>
      <returns>一个有符号整数，它指示两个对象的相对值，如下表所示。返回值含义小于零当前 <see cref="T:System.Version" /> 对象是 <paramref name="value" /> 之前的一个版本。零当前 <see cref="T:System.Version" /> 对象是与 <paramref name="value" /> 相同的版本。大于零当前 <see cref="T:System.Version" /> 对象是 <paramref name="value" /> 之后的一个版本。- 或 -<paramref name="value" /> 为 null。</returns>
      <param name="value">要与当前的 <see cref="T:System.Version" /> 对象进行比较的 <see cref="T:System.Version" /> 对象，或者为 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.Version" /> 对象是否等于指定的对象。。</summary>
      <returns>如果当前的 <see cref="T:System.Version" /> 对象和 <paramref name="obj" /> 都为 <see cref="T:System.Version" /> 对象，并且当前 <see cref="T:System.Version" /> 对象的每个部分都与 <paramref name="obj" /> 的相应部分匹配，则为 true；否则为 false。</returns>
      <param name="obj">要与当前 <see cref="T:System.Version" /> 对象进行比较的对象，或者为 null。 </param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.Version" /> 对象与指定 <see cref="T:System.Version" /> 对象是否表示同一个值。</summary>
      <returns>如果当前 <see cref="T:System.Version" /> 对象的每个部分都与 <paramref name="obj" /> 参数的相应部分匹配，则为 true；否则为 false。</returns>
      <param name="obj">要与当前的 <see cref="T:System.Version" /> 对象进行比较的 <see cref="T:System.Version" /> 对象，或者为 null。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>返回当前 <see cref="T:System.Version" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Version.Major">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的主要版本号部分的值。</summary>
      <returns>主版本号。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Version.MajorRevision">
      <summary>获取修订号的高 16 位。</summary>
      <returns>16 位带符号整数。</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的次要版本号部分的值。</summary>
      <returns>次版本号。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Version.MinorRevision">
      <summary>获取修订号的低 16 位。</summary>
      <returns>16 位带符号整数。</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>确定两个指定 <see cref="T:System.Version" /> 对象是否相等。</summary>
      <returns>如果 <paramref name="v1" /> 等于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否大于指定的第二个 <see cref="T:System.Version" /> 对象。</summary>
      <returns>如果 <paramref name="v1" /> 大于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否大于等于指定的第二个 <see cref="T:System.Version" /> 对象。</summary>
      <returns>如果 <paramref name="v1" /> 大于等于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>确定两个指定的 <see cref="T:System.Version" /> 对象是否不相等。</summary>
      <returns>如果 <paramref name="v1" /> 不等于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。 </param>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否小于指定的第二个 <see cref="T:System.Version" /> 对象。</summary>
      <returns>如果 <paramref name="v1" /> 小于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否小于或等于第二个 <see cref="T:System.Version" /> 对象。</summary>
      <returns>如果 <paramref name="v1" /> 小于等于 <paramref name="v2" />，则为 true；否则为 false。</returns>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. </exception>
      <filterpriority>3</filterpriority>
    </member>
    <member name="M:System.Version.Parse(System.String)">
      <summary>将版本号的字符串表示形式转换为等效的 <see cref="T:System.Version" /> 对象。</summary>
      <returns>一个等效于 <paramref name="input" /> 参数中指定的版本号的对象。</returns>
      <param name="input">包含要转换的版本号的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> has fewer than two or more than four version components.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">At least one component in <paramref name="input" /> is less than zero.</exception>
      <exception cref="T:System.FormatException">At least one component in <paramref name="input" /> is not an integer.</exception>
      <exception cref="T:System.OverflowException">At least one component in <paramref name="input" /> represents a number that is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的修订号部分的值。</summary>
      <returns>修订号或为 -1（如果未定义修订号）。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.System#IComparable#CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。返回值含义小于零此实例在排序顺序中位于 <paramref name="value" /> 之前。零此实例与 <paramref name="value" /> 按排序顺序中出现的位置相同。大于零此实例在排序顺序中位于 <paramref name="value" /> 之后。- 或 - <paramref name="value" /> 为 null。 </returns>
      <param name="version">与此实例进行比较的对象，或为 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Version" /> object. </exception>
    </member>
    <member name="M:System.Version.ToString">
      <summary>将当前 <see cref="T:System.Version" /> 对象的值转换为其等效的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的主要版本号、次要版本号、内部版本号和修订号部分的值的 <see cref="T:System.Version" /> 表示形式（遵循下面所示格式）。各部分之间由句点字符（“.”）分隔。方括号（“[”和“]”）指示在返回值中不会出现的部分（如果未定义该部分）：主要版本号.次要版本号[.内部版本号[.修订号]]例如，如果使用构造函数 Version(1,1) 创建 <see cref="T:System.Version" /> 对象，则返回的字符串为“1.1”。如果使用构造函数 Version(1,3,4,2) 创建 <see cref="T:System.Version" /> 对象，则返回的字符串为“1.3.4.2”。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>将当前 <see cref="T:System.Version" /> 对象的值转换为其等效的 <see cref="T:System.String" /> 表示形式。指定的计数指示要返回的部分数。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的主要版本号、次要版本号、内部版本号和修订号部分的值的 <see cref="T:System.Version" /> 表示形式，各部分之间用句点字符（“.”）分隔。<paramref name="fieldCount" /> 参数确定返回多少个部分。fieldCount返回值0 空字符串 ("")。1 主要版本号2 主要版本号.次要版本号3 主要版本号.次要版本号.内部版本号4 主要版本号.次要版本号.内部版本号.修订号例如，如果使用构造函数 Version(1,3,5) 创建 <see cref="T:System.Version" /> 对象，则 ToString(2) 返回“1.3”，并且 ToString(4) 引发异常。</returns>
      <param name="fieldCount">要返回的部分数。<paramref name="fieldCount" /> 的范围是从 0 到 4。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> is less than 0, or more than 4.-or- <paramref name="fieldCount" /> is more than the number of components defined in the current <see cref="T:System.Version" /> object. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
      <summary>尝试将版本号的字符串表示形式转换为等效的 <see cref="T:System.Version" /> 对象，并返回一个指示转换是否成功的值。</summary>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 true；否则为 false。</returns>
      <param name="input">包含要转换的版本号的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 中所含编号等效的 <see cref="T:System.Version" />；如果转换失败，则包含主版本号和次版本号都为 0 的 <see cref="T:System.Version" /> 对象。如果 <paramref name="input" /> 为 null 或 <see cref="F:System.String.Empty" />，则当该方法返回时，<paramref name="result" /> 为 null。</param>
    </member>
    <member name="T:System.Void">
      <summary>为不返回值的方法指定返回值类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.WeakReference">
      <summary>表示弱引用，即在引用对象的同时仍然允许通过垃圾回收来回收该对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>引用指定的对象初始化 <see cref="T:System.WeakReference" /> 类的新实例。</summary>
      <param name="target">要跟踪的对象或为 null。</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>初始化 <see cref="T:System.WeakReference" /> 类的新实例，引用指定的对象并使用指定的复活跟踪。</summary>
      <param name="target">要跟踪的对象。</param>
      <param name="trackResurrection">指示何时停止跟踪对象。如果为 true，则在终结后跟踪对象；如果为 false，则仅在终结前跟踪对象。</param>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>丢弃对当前 <see cref="T:System.WeakReference" /> 对象表示的目标的引用。</summary>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>获取当前 <see cref="T:System.WeakReference" /> 对象引用的对象是否已被垃圾回收的指示。</summary>
      <returns>如果当前 <see cref="T:System.WeakReference" /> 对象引用的对象尚未被垃圾回收且仍然可访问，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>获取或设置当前 <see cref="T:System.WeakReference" /> 对象引用的对象（目标）。</summary>
      <returns>如果当前 <see cref="T:System.WeakReference" /> 对象引用的对象已被垃圾回收，则为 null；否则为对该对象（当前 <see cref="T:System.WeakReference" /> 对象引用的对象）的引用。</returns>
      <exception cref="T:System.InvalidOperationException">对目标对象的引用无效。如果值为 null 引用或者已经在设置操作过程中完成对象，则设置该属性时可能引发此异常。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>获取当前 <see cref="T:System.WeakReference" /> 对象引用的对象在终止后是否会被跟踪的指示。</summary>
      <returns>如果当前 <see cref="T:System.WeakReference" /> 对象引用的对象在终止后会被跟踪，则为 true；否则，如果该对象仅在终止前被跟踪，则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.WeakReference`1">
      <summary>表示类型化弱引用，即在引用对象的同时仍然允许垃圾回收来回收该对象。</summary>
      <typeparam name="T">所引用对象的类型。</typeparam>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0)">
      <summary>初始化引用指定对象的 <see cref="T:System.WeakReference`1" /> 类的新实例。</summary>
      <param name="target">要引用的对象或为 null。</param>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
      <summary>初始化 <see cref="T:System.WeakReference`1" /> 类的新实例，该类引用指定的对象并使用指定的复活跟踪。</summary>
      <param name="target">要引用的对象或为 null。</param>
      <param name="trackResurrection">若要在终结后跟踪对象，则为 true；若要仅在终结前跟踪对象，则为 false。</param>
    </member>
    <member name="M:System.WeakReference`1.Finalize">
      <summary>丢弃对当前 <see cref="T:System.WeakReference`1" /> 对象表示的目标的引用。</summary>
    </member>
    <member name="M:System.WeakReference`1.SetTarget(`0)">
      <summary>设置 <see cref="T:System.WeakReference`1" /> 对象引用的目标对象。</summary>
      <param name="target">新目标对象。</param>
    </member>
    <member name="M:System.WeakReference`1.TryGetTarget(`0@)">
      <summary>尝试检索当前 <see cref="T:System.WeakReference`1" /> 对象引用的目标对象。</summary>
      <returns>如果该目标已检索，则为 true；否则为 false。</returns>
      <param name="target">当此方法返回时，包含目标对象（可用时）。该参数未经初始化即被处理。</param>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>定义可设置或检索的字典键/值对。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>使用指定的键和值初始化 <see cref="T:System.Collections.DictionaryEntry" /> 类型的实例。</summary>
      <param name="key">每个键/值对中定义的对象。</param>
      <param name="value">与 <paramref name="key" /> 相关联的定义。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null，并且 .NET Framework 版本为 1.0 或 1.1。</exception>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>获取或设置键/值对中的键。</summary>
      <returns>键/值对中的键。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>获取或设置键/值对中的值。</summary>
      <returns>键/值对中的值。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>定义所有非泛型集合的大小、枚举数和同步方法。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -源 <see cref="T:System.Collections.ICollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。- 或 -源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素个数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>公开一种比较两个对象的方法。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>比较两个对象并返回一个值，该值指示一个对象小于、等于还是大于另一个对象。</summary>
      <returns>一个有符号整数，指示 <paramref name="x" /> 与 <paramref name="y" /> 的相对值，如下表所示。值含义小于零<paramref name="x" /> 小于 <paramref name="y" />。零<paramref name="x" /> 等于 <paramref name="y" />。大于零<paramref name="x" /> 大于 <paramref name="y" />。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 都不实现 <see cref="T:System.IComparable" /> 接口。- 或 -<paramref name="x" /> 和 <paramref name="y" /> 的类型不同，它们都无法处理与另一个进行的比较。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>表示键/值对的非通用集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>在 <see cref="T:System.Collections.IDictionary" /> 对象中添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <param name="value">用作要添加的元素的值的 <see cref="T:System.Object" />。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.IDictionary" /> 对象中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 为只读。- 或 -<see cref="T:System.Collections.IDictionary" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 对象中移除所有元素。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 对象是只读的。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IDictionary" /> 对象是否包含具有指定键的元素。</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.</returns>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 对象中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>返回一个用于 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>一个用于 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否为只读。</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>具有指定键的元素，如果该键不存在，则为 null。</returns>
      <param name="key">要获取或设置的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.IDictionary" /> 对象为只读。- 或 -设置该属性，集合中不存在 <paramref name="key" />，而且 <see cref="T:System.Collections.IDictionary" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 对象中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 对象是只读的。- 或 -<see cref="T:System.Collections.IDictionary" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象中的值。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象中的值。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>枚举非泛型字典的元素。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>同时获取当前字典项的键和值。</summary>
      <returns>同时包含当前字典项的键和值的 <see cref="T:System.Collections.DictionaryEntry" />。</returns>
      <exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator" /> 定位于字典的第一项之前或最后一项之后。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>获取当前字典项的键。</summary>
      <returns>当前枚举元素的键。</returns>
      <exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator" /> 定位于字典的第一项之前或最后一项之后。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>获取当前字典项的值。</summary>
      <returns>当前枚举元素的值。</returns>
      <exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator" /> 定位于字典的第一项之前或最后一项之后。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>公开枚举数，该枚举数支持在非泛型集合上进行简单迭代。若要浏览此类型的 .NET Framework 源代码，请参阅引用源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>支持对非泛型集合的简单迭代。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>定义方法以支持对象的相等比较。</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>确定指定的对象是否相等。</summary>
      <returns>如果指定的对象相等，则为 true；否则为 false。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 的类型不同，它们都无法处理与另一个进行的比较。</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>返回指定对象的哈希代码。</summary>
      <returns>指定对象的哈希代码。</returns>
      <param name="obj">
        <see cref="T:System.Object" />，将为其返回哈希代码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>表示可按照索引单独访问的对象的非泛型集合。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>新元素所插入到的位置，或为 -1 以指示未将该项插入到集合中。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。- 或 -<see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中定位的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中定位的对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。- 或 -<see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 在 <see cref="T:System.Collections.IList" /> 中是 null 引用。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.IList" /> 为只读。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。- 或 -<see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Collections.IList" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。- 或 -<see cref="T:System.Collections.IList" /> 具有固定大小。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>支持集合对象的结构比较。</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>确定当前集合对象在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <returns>一个指示当前集合对象与 <paramref name="other" /> 的关系的整数，如下表所示。返回值说明-1当前实例位于 <paramref name="other" /> 之前。0当前实例与 <paramref name="other" /> 位于同一位置。1当前实例位于 <paramref name="other" /> 之后。</returns>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个将当前集合对象的成员与 <paramref name="other" /> 的对应成员进行比较的对象。</param>
      <exception cref="T:System.ArgumentException">此实例与 <paramref name="other" /> 不是同一类型。</exception>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>定义方法以支持对象的结构相等性比较。</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>确定某个对象与当前实例在结构上是否相等。</summary>
      <returns>如果两个对象相等，则为 true；否则为 false。</returns>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个可确定当前实例与 <paramref name="other" /> 是否相等的对象。</param>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
      <param name="comparer">一个计算当前对象的哈希代码的对象。</param>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>定义操作泛型集合的方法。</summary>
      <typeparam name="T">集合中元素的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。</param>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素数目大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素个数。</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。</summary>
      <returns>如果已从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中成功移除 <paramref name="item" />，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.Generic.ICollection`1" /> 中没有找到 <paramref name="item" />，该方法也会返回 false。</returns>
      <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>定义类型为比较两个对象而实现的方法。</summary>
      <typeparam name="T">要比较的对象的类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>比较两个对象并返回一个值，该值指示一个对象小于、等于还是大于另一个对象。</summary>
      <returns>一个有符号整数，指示 <paramref name="x" /> 与 <paramref name="y" /> 的相对值，如下表所示。值含义小于零<paramref name="x" /> 小于 <paramref name="y" />。零<paramref name="x" /> 等于 <paramref name="y" />。大于零<paramref name="x" /> 大于 <paramref name="y" />。</returns>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>表示键/值对的泛型集合。</summary>
      <typeparam name="TKey">字典中键的类型。</typeparam>
      <typeparam name="TValue">字典中值的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">用作要添加的元素的值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否包含具有指定键的元素。</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>带有指定键的元素。</returns>
      <param name="key">要获取或设置的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">检索了属性但没有找到 <paramref name="key" />。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中移除带有指定键的元素。</summary>
      <returns>如果该元素已成功移除，则为 true；否则为 false。This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>获取与指定键关联的值。</summary>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 true；否则，为 false。</returns>
      <param name="key">要获取其值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>公开枚举数，该枚举数支持在指定类型的集合上进行简单迭代。若要浏览此类型的.NET Framework 源代码，请参阅参考源。</summary>
      <typeparam name="T">要枚举的对象的类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>支持在泛型集合上进行简单迭代。</summary>
      <typeparam name="T">要枚举的对象的类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>获取集合中位于枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>定义方法以支持对象的相等比较。</summary>
      <typeparam name="T">要比较的对象的类型。此类型参数是逆变。即可以使用指定的类型或派生程度更低的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>确定指定的对象是否相等。</summary>
      <returns>如果指定的对象相等，则为 true；否则为 false。</returns>
      <param name="x">要比较的第一个类型为 <paramref name="T" /> 的对象。</param>
      <param name="y">要比较的第二个类型为 <paramref name="T" /> 的对象。</param>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>返回指定对象的哈希代码。</summary>
      <returns>指定对象的哈希代码。</returns>
      <param name="obj">
        <see cref="T:System.Object" />，将为其返回哈希代码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>表示可按照索引单独访问的一组对象。</summary>
      <typeparam name="T">列表中元素的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.IList`1" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.IList`1" /> 中定位的对象。</param>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.Generic.IList`1" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入到 <see cref="T:System.Collections.Generic.IList`1" /> 中的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.Generic.IList`1" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Collections.Generic.IList`1" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 为只读。</exception>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
      <summary>表示元素的强类型的只读集合。</summary>
      <typeparam name="T">元素的类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
      <summary>获取集合中的元素数。</summary>
      <returns>集合中的元素数。</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
      <summary>表示键/值对的泛型只读集合。</summary>
      <typeparam name="TKey">只读字典中的键的类型。</typeparam>
      <typeparam name="TValue">只读字典中的值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>确定只读字典是否包含具有指定键的元素。</summary>
      <returns>如果该只读词典包含一具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
      <summary>获取在只读目录中有指定键的元素。</summary>
      <returns>在只读目录中有指定键的元素。</returns>
      <param name="key">要定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">检索了属性但没有找到 <paramref name="key" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
      <summary>获取包含只读字典中的密钥的可枚举集合。</summary>
      <returns>包含只读字典中的密钥的可枚举集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>获取与指定的键关联的值。</summary>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 接口的对象包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要定位的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。该参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
      <summary>获取包含只读字典中的值的可枚举集合。</summary>
      <returns>包含只读字典中的值的可枚举集合。</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyList`1">
      <summary>表示可按照索引访问的元素的只读集合。</summary>
      <typeparam name="T">只读列表中元素的类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
      <summary>获取位于只读列表中指定索引处的元素。</summary>
      <returns>在只读列表中指定索引处的元素。</returns>
      <param name="index">要获取的元素的索引（索引从零开始）。</param>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>提供用于集的抽象的基接口。</summary>
      <typeparam name="T">集内元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <returns>如果该元素已添加到集内，则为 true；如果该元素已在集内，则为 false。</returns>
      <param name="item">要添加到集中的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前集内移除指定集合中的所有元素。</summary>
      <param name="other">要从集内移除的项的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含也存在在指定集合中的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的真（严格）子集。</summary>
      <returns>如果当前集是 <paramref name="other" /> 的正确子集，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的真（严格）超集。</summary>
      <returns>如果当前集是 <paramref name="other" /> 的正确超集，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定一个集是否为指定集合的子集。</summary>
      <returns>如果当前集是 <paramref name="other" /> 的子集，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的超集。</summary>
      <returns>如果当前集是 <paramref name="other" /> 的超集，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否与指定的集合重叠。</summary>
      <returns>如果当前集与 <paramref name="other" /> 至少共享一个通用元素，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集与指定的集合是否包含相同的元素。</summary>
      <returns>如果当前集等于 <paramref name="other" />，则为 true；否则为 false。</returns>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集包含存在于当前集、指定集合或两者中的所有元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>指定用于访问集合中元素的键与集合中的任何键都不匹配时所引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>使用默认属性值初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>定义可设置或检索的键/值对。</summary>
      <typeparam name="TKey">键的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>用指定的键和值初始化 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构的新实例。</summary>
      <param name="key">每个键/值对中定义的对象。</param>
      <param name="value">与 <paramref name="key" /> 相关联的定义。</param>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>获取键/值对中的键。</summary>
      <returns>一个 <paramref name="TKey" />，它是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的键。</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>使用键和值的字符串表示形式返回 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字符串表示形式，它包括键和值的字符串表示形式。</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>获取键/值对中的值。</summary>
      <returns>一个 <paramref name="TValue" />，它是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的值。</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>提供泛型集合的基类。</summary>
      <typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>初始化为空的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>将 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 类的新实例初始化为指定列表的包装。</summary>
      <param name="list">由新的集合包装的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的结尾处。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的末尾处的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中找到 <paramref name="item" />，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中定位的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 复制的元素的目标位置的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>获取 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中实际包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中实际包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中第一个匹配项的从零开始的索引。</summary>
      <returns>如果在整个 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>将元素插入 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>将元素插入 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="item" />。</param>
      <param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>获取 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 周围的 <see cref="T:System.Collections.Generic.IList`1" /> 包装。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 周围的 <see cref="T:System.Collections.Generic.IList`1" /> 包装。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除特定对象的第一个匹配项。</summary>
      <returns>如果成功移除 <paramref name="item" />，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中没有找到 <paramref name="item" />，此方法也会返回 false。</returns>
      <param name="item">要从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>替换指定索引处的元素。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">位于指定索引处的元素的新值。对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="array" /> 没有从零开始的索引。- 或 -源 <see cref="T:System.Collections.ICollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。- 或 -源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将某项插入 <see cref="T:System.Collections.IList" /> 中指定的索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 中的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置位于指定索引处的元素。</summary>
      <returns>位于指定索引处的元素。</returns>
      <param name="index">要获得或设置的元素从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">已设置属性，且 <paramref name="value" /> 属于不能对 <see cref="T:System.Collections.IList" /> 赋值的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>提供泛型只读集合的基类。</summary>
      <typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类的新实例，该实例是围绕指定列表的只读包装。</summary>
      <param name="list">要包装的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中找到 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中定位的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 复制的元素的目标的一维 <see cref="T:System.Array" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>获取 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 实例中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 实例中包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中第一个匹配项的从零开始的索引。</summary>
      <returns>如果在整个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>获取指定索引处的元素。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获取的元素的索引（索引从零开始）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" />. </exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>返回 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包装的 <see cref="T:System.Collections.Generic.IList`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包装的 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 true。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>如果从 <see cref="T:System.Collections.Generic.ICollection`1" /> 成功移除了 <paramref name="value" />，则为 true；否则为 false。</returns>
      <param name="value">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的对象。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.Generic.IList`1" />。此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入 <see cref="T:System.Collections.Generic.IList`1" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>获取指定索引处的元素。如果您尝试设置指定索引处的项，则会发生 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获取的元素的索引（索引从零开始）。</param>
      <exception cref="T:System.NotSupportedException">Always thrown if the property is set.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Collections.Generic.IList`1" /> 项。此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Array" /> 索引处开始，将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此索引处开始进行复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>新元素的插入位置。</returns>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到了 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中查找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of the type specified for the generic type parameter <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一个项插入指定索引处的 <see cref="T:System.Collections.IList" />。此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中插入的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 具有固定大小，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取指定索引处的元素。如果您尝试设置指定索引处的项，则会发生 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>指定索引处的元素。</returns>
      <param name="index">要获取的元素的索引（索引从零开始）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">Always thrown if the property is set.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的 <see cref="T:System.Collections.IList" /> 项。此实现总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>指定属性的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>使用 <see cref="T:System.Boolean" /> 值初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.Boolean" />，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>使用 8 位无符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">8 位无符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>使用 Unicode 字符初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">Unicode 字符，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>使用双精度浮点数字初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">双精度浮点数字，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>使用 16 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的实例。</summary>
      <param name="value">16 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>使用 32 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的实例。</summary>
      <param name="value">32 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>使用 64 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的实例。</summary>
      <param name="value">64 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">表示默认值的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>使用单精度浮点数字初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">单精度浮点数字，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>使用 <see cref="T:System.String" /> 初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.String" />，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例，将指定的值转换为指定的类型，并将固定区域性作为翻译上下文。</summary>
      <param name="type">表示要将值转换为的类型的 <see cref="T:System.Type" />。</param>
      <param name="value">可以通过该类型的 <see cref="T:System.ComponentModel.TypeConverter" /> 和美国英语转换为该类型的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultValueAttribute" />。</summary>
      <returns>如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>获取此属性 (Attribute) 绑定到的属性 (Property) 的默认值。</summary>
      <returns>表示此属性 (Attribute) 绑定到的属性 (Property) 的默认值的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>指定某一属性或方法在编辑器中可见。此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>使用 <see cref="T:System.ComponentModel.EditorBrowsableState" /> 初始化 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 类的新实例。</summary>
      <param name="state">要将 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> 设置成的 <see cref="T:System.ComponentModel.EditorBrowsableState" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />。</summary>
      <returns>如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
      <param name="obj">要进行值的相等性测试的对象。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>获取属性或方法的可浏览状态。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EditorBrowsableState" />，它是属性或方法的可浏览状态。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>在编辑器中指定属性或方法的可浏览状态。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>该属性或方法是只有高级用户才可以看到的功能。编辑器可以显示或隐藏这些属性。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>该属性或方法在编辑器中始终是可浏览的。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>该属性或方法始终不能在编辑器中浏览。</summary>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>指示编译器应忽略方法调用或属性，除非已定义指定的条件编译符号。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 类的新实例。</summary>
      <param name="conditionString">一个字符串，它指定与此属性关联的区分大小写的条件编译符号。</param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>获取与 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 属性相关的条件编译符号。</summary>
      <returns>一个字符串，它指定与 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 属性关联的区分大小写的条件编译符号。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>修改运行库实时 (JIT) 调试的代码生成。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>使用为实时 (JIT) 编译器指定的调试模式来初始化 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 类的新实例。</summary>
      <param name="modes">
        <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> 值的按位组合，它指定 JIT 编译器的调试模式。</param>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>指定实时 (JIT) 编译器的调试模式。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>指示实时 (JIT) 编译器使用其默认行为，包括启用优化、禁用“编辑并继续”支持以及使用符号存储区序列点（如果存在）。在 .NET Framework 2.0 版本中，始终生成 JIT 跟踪信息，即方法中本机代码偏移量的 Microsoft 中间语言 (MSIL) 偏移量。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>禁用编译器为使输出文件更小、更快、更有效而执行的优化。优化会导致输出文件中的代码重排，这会增加调试的难度。通常在调试时应禁用优化。在 2.0 或更高版本中，将这个值与 Default (Default | DisableOptimizations) 组合在一起可启用 JIT 跟踪和禁用优化。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>启用“编辑并继续”。借助“编辑并继续”，你可以在程序处于中断模式时对源代码进行更改。“编辑并继续”的能力取决于编译器。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>使用隐式 MSIL 序列点，而非程序数据库 (PDB) 序列点。符号信息中的每个源行通常至少包含一个 Microsoft 中间语言 (MSIL) 偏移量。当实时 (JIT) 编译器要编译方法时，它会请求分析服务提供应保留的 MSIL 偏移量列表。这些 MSIL 偏移量称为序列点。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>在 .NET Framework 2.0 版本中，始终生成 JIT 跟踪信息，并且此标志与 <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />（<see cref="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled" /> 属性为 false 除外）具有相同效果，这在 2.0 版本中没有任何意义。</summary>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>定义一些格式设置选项，这些选项可自定义许多日期和时间分析方法的字符串分析方法。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>以协调世界时 (UTC) 形式返回日期和时间。如果输入字符串表示本地时间（通过时区说明符或 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />），则会将日期和时间从本地时间转换为 UTC。如果输入字符串表示 UTC 时间（通过时区说明符或 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />），则不进行任何转换。如果输入字符串不表示本地时间或 UTC 时间，则不进行任何转换，并且生成的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Unspecified" />。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>在分析期间必须忽略字符串中间的多余空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>在分析期间必须忽略前导空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>在分析期间必须忽略尾随空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>在分析期间必须忽略字符串任意位置的多余空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。该值是 <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> 值的组合。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>如果分析的字符串中未指定任何时区，则假定该字符串表示本地时间。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>如果分析的字符串中未指定任何时区，则假定该字符串表示 UTC。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>如果分析的字符串只包含时间而不包含日期，则分析方法会假定以下公历日期：年 = 1、月 = 1 并且日 = 1。如果没有使用此值，则假定为当前日期。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>必须使用默认格式设置选项。此值表示 <see cref="M:System.DateTime.Parse(System.String)" />、 <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> 和 <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> 方法的默认样式。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>在使用“o”或“r”标准格式说明符将 <see cref="T:System.DateTime" /> 对象先转换为字符串，然后再将该字符串转换回 <see cref="T:System.DateTime" /> 对象时，将保留日期的 <see cref="T:System.DateTimeKind" /> 字段。</summary>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>确定数字字符串参数中允许的样式，这些参数已传递到整数和浮点数类型的 Parse 和 TryParse 方法。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>指示数字字符串可包含货币符号。有效的货币符号由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>指示数字字符串可以具有小数点。如果 <see cref="T:System.Globalization.NumberStyles" /> 值包括 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 标志，分析的字符串包括货币符号，则小数分隔符字符由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> 属性确定。否则，小数分隔符由 <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" /> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>指示数字字符串用于指数符号中。该 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 标志允许分析的字符串包含以“E”或“e”字符开始并且后接可选的正号或负号以及整数的指数。换句话说，它成功地分析 nnnExx， nnnE +xx，以及 nnnE-xx 格式的字符串。它不允许有效位数或尾数中有小数分隔符或小数符号；若要允许分析字符串中的这些元素，请使用 <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 标志，或使用包含各个标志的组合样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>指示数值字符串表示一个十六进制值。有效的十六进制值包括数字 0-9 和十六进制数字 A-F 和 a-f。使用此样式分析的字符串不能带有“0x”或“&amp;h”前缀。使用 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 样式分析的字符串总是被解释为一个十六进制值。可与 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 组合的标志只有 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />。<see cref="T:System.Globalization.NumberStyles" /> 枚举包括由这三个标识组成的复合样式 <see cref="F:System.Globalization.NumberStyles.HexNumber" />。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>指示数字字符串可以具有前导符号。有效的前导符号字符由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>指示所分析的字符串中可以存在前导空白字符。有效的空白字符具有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。请注意，这是 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法针对其返回 true 的字符的子集。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>指示数字字符串可以具有一对将数字括起来的括号。括号指示要分析的字符串表示一个负数。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>指示数字字符串可以具有组分隔符，例如将百位与千位分隔开来的符号。如果 <see cref="T:System.Globalization.NumberStyles" /> 值包括 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 标志，要分析的字符串包括货币符号，则有效组分隔符字符由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> 属性确定，且每个组中的位数由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> 属性确定。否则，有效的组分隔符字符由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> 属性确定，每组的位数由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" /> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>指示数字字符串可以具有结尾符号。有效的结尾符号字符由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>指示所分析的字符串中可以存在结尾空白字符。有效的空白字符具有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。请注意，这是 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法针对其返回 true 的字符的子集。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>指示使用除 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 以外的所有样式。这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>指示使用除 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 以外的所有样式。这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 样式。这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 样式。这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 样式。这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>指示没有样式元素（比如前导或尾随空白、千位分隔符或小数分隔符）可出现在分析的字符串中。要分析的字符串只能包含整型小数位数。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 样式。这是复合数字样式。</summary>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
      <summary>定义一些格式设置选项，这些选项可自定义 <see cref="Overload:System.TimeSpan.ParseExact" /> 和 <see cref="Overload:System.TimeSpan.TryParseExact" /> 方法的字符串分析方法。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
      <summary>指示输入始终解释为一个负时间间隔。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
      <summary>指示仅当存在一个负号时输入解释为一个负时间间隔。</summary>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
      <summary>当找不到文件或目录的一部分时所引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 类的新实例，使其消息字符串设置为系统提供的消息，其 HRESULT 设置为 COR_E_DIRECTORYNOTFOUND。</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />，其 HRESULT 设置为 COR_E_DIRECTORYNOTFOUND。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.IO.FileLoadException">
      <summary>当找到托管程序集却不能加载它时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor">
      <summary>初始化 <see cref="T:System.IO.FileLoadException" /> 类的新实例，将新实例的 <see cref="P:System.Exception.Message" /> 属性设置为描述错误的系统提供的消息（如“无法加载指定文件”）。此消息将考虑当前系统区域性。</summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IO.FileLoadException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.FileLoadException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String)">
      <summary>使用指定错误信息和不能加载的文件的名称来初始化 <see cref="T:System.IO.FileLoadException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="fileName">一个 <see cref="T:System.String" />，它包含未加载的文件的名称。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的错误信息、不能加载的文件的名称和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.FileLoadException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="fileName">一个 <see cref="T:System.String" />，它包含未加载的文件的名称。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="P:System.IO.FileLoadException.FileName">
      <summary>获取导致该异常的文件的名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含具有无效图像的文件的名称；或者，如果没有将文件名传递给当前实例的构造函数，则为空引用。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
      <summary>获取错误消息和引发此异常的文件的名称。</summary>
      <returns>包含错误消息和引发此异常的文件名称的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
      <summary>返回当前异常的完全限定名，还可能返回错误信息、内部异常的名称和堆栈跟踪。</summary>
      <returns>一个字符串，它包含此异常的完全限定名，还可能包含错误信息、内部异常的名称和堆栈跟踪（取决于所使用的 <see cref="T:System.IO.FileLoadException" /> 构造函数）。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>尝试访问磁盘上不存在的文件失败时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例，使其消息字符串设置为系统所提供的消息，其 HRESULT 设置为 COR_E_FILENOTFOUND。</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />，其 HRESULT 设置为 COR_E_FILENOTFOUND。</summary>
      <param name="message">错误说明。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例。</summary>
      <param name="message">错误说明。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />（用于指定无法找到的文件名），其 HRESULT 设置为 COR_E_FILENOTFOUND。</summary>
      <param name="message">错误说明。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.FileName">
      <summary>获取无法找到的文件的名称。</summary>
      <returns>文件的名称，如果没有将文件名传递给此实例的构造函数，则为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message">
      <summary>获取解释异常原因的错误消息。</summary>
      <returns>错误消息。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>返回该异常的完全限定名，还可能返回错误消息、内部异常的名称和堆栈跟踪。</summary>
      <returns>此异常的完全限定名，还可能包含错误消息、内部异常的名称和堆栈跟踪。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.IO.IOException">
      <summary>发生 I/O 错误时引发的异常。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>初始化 <see cref="T:System.IO.IOException" /> 类的新实例，使其消息字符串设置为空字符串 ("")，其 HRESULT 设置为 COR_E_IO，而其内部异常设置为空引用。</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.IOException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />，其 HRESULT 设置为 COR_E_IO，而其内部异常设置为 null。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.IOException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.IO.IOException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />，而其 HRESULT 由用户定义。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="hresult">标识已发生的错误的整数。</param>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>当路径名或文件名长度超过系统定义的最大长度时引发的异常。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>初始化 <see cref="T:System.IO.PathTooLongException" /> 类的新实例，使其 HRESULT 设置为 COR_E_PATHTOOLONG。</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.PathTooLongException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />，而其 HRESULT 设置为 COR_E_PATHTOOLONG。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.PathTooLongException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。<paramref name="message" /> 的内容被设计为人可理解的形式。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>定义程序集清单的公司名称自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> 类的新实例。</summary>
      <param name="company">公司名称信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>获取公司名称信息。</summary>
      <returns>包含公司名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>为程序集指定生成配置，例如发布或调试。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> 类的新实例。</summary>
      <param name="configuration">程序集配置。</param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>获取程序集配置信息。</summary>
      <returns>包含程序集配置信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>定义程序集清单的版权自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> 类的新实例。</summary>
      <param name="copyright">版权信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>获取版权信息。</summary>
      <returns>包含版权信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>指定程序集支持哪个区域性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>用正在属性化的程序集支持的区域性初始化 <see cref="T:System.Reflection.AssemblyCultureAttribute" /> 类的新实例。</summary>
      <param name="culture">属性化程序集支持的区域性。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>获取属性化程序集支持的区域性。</summary>
      <returns>包含受支持区域性的名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>定义程序集清单的友好默认别名。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> 类的新实例。</summary>
      <param name="defaultAlias">程序集默认别名信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>获取默认别名信息。</summary>
      <returns>包含默认别名信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>指定程序集在创建时未完全签名。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDelaySignAttribute" /> 类的新实例。</summary>
      <param name="delaySign">如果此属性表示的功能被激活，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>获取指示该属性状态的值。</summary>
      <returns>如果此程序集已采用延迟签名方式生成，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>提供程序集的文本说明。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">程序集说明。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>获取程序集说明信息。</summary>
      <returns>包含程序集说明的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>指示编译器使用 Win32 文件版本资源的特定版本号。不要求 Win32 文件版本与程序集的版本号相同。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> 类的新实例，指定文件版本。</summary>
      <param name="version">文件版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 为 null。</exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>获取 Win32 文件版本资源名称。</summary>
      <returns>包含文件版本资源名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>为程序集指定 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的按位组合，从而描述实时 (JIT) 编译器选项，该程序集是否可重定目标以及是否有完整或已标记化的公钥。此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>使用 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的指定组合初始化 <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> 类的新实例。</summary>
      <param name="assemblyFlags">
        <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的按位组合，表示实时 (JIT) 编译器选项、寿命、程序集是否可重定目标以及是否有完整或已标记化的公钥。</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>获取一个整数值，该值表示在创建此属性实例时指定的 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的组合。</summary>
      <returns>一个整数值，表示 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的按位组合。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>定义程序集清单的其他版本信息。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> 类的新实例。</summary>
      <param name="informationalVersion">程序集版本信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>获取版本信息。</summary>
      <returns>包含版本信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>指定包含用于生成强名称的密钥对的文件名称。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>使用文件的名称初始化 AssemblyKeyFileAttribute 类的新实例，该文件包含为正在属性化的程序集生成强名称的密钥对。</summary>
      <param name="keyFile">包含密钥对的文件的名称。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>获取文件的名称，该文件包含用于为属性化程序集生成强名称的密钥对。</summary>
      <returns>包含密钥对所在文件的名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>指定 CSP 内某密钥容器的名称，该密钥容器包含用于生成强名称的密钥对。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>使用某容器的名称（该容器保存用于为正在属性化的程序集生成强名称的密钥对）来初始化 <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> 类的新实例。</summary>
      <param name="keyName">包含密钥对的容器的名称。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>获取容器的名称，该容器包含用于为属性化程序集生成强名称的密钥对。</summary>
      <returns>一个字符串，它包含带有相关密钥对的容器的名称。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyMetadataAttribute">
      <summary>定义密钥/值将数据用于装饰的程序集配对。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyMetadataAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的元数据密钥和值初始化 <see cref="T:System.Reflection.AssemblyMetadataAttribute" /> 类的新实例。</summary>
      <param name="key">元数据密钥。</param>
      <param name="value">元数据的值。</param>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Key">
      <summary>获取元数据密钥。</summary>
      <returns>元数据密钥。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Value">
      <summary>获取元数据值。</summary>
      <returns>元数据的值。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>提供有关 <see cref="T:System.Reflection.Assembly" /> 引用的信息。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>指定没有有效标志。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>指定公钥基于完整公钥而不是公钥标记构成。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>指定可以在运行时将程序集重定向到来自其他发行者的程序集。此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>定义程序集清单的产品名称自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyProductAttribute" /> 类的新实例。</summary>
      <param name="product">产品名称信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>获取产品名称信息。</summary>
      <returns>包含产品名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblySignatureKeyAttribute">
      <summary>提供从更早、更简单的名称键值到更大、散列值算法更安全的键值的迁移。</summary>
    </member>
    <member name="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的公钥和副署创建 <see cref="T:System.Reflection.AssemblySignatureKeyAttribute" /> 类的新实例。</summary>
      <param name="publicKey">公开或标识密钥。</param>
      <param name="countersignature">强名称密钥的签名密钥的副署。</param>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
      <summary>获取此程序集强名称的副署。</summary>
      <returns>此签名密钥的副署。</returns>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey">
      <summary>获取用于签名程序集的强名称的公钥。</summary>
      <returns>此程序集的公钥。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>指定程序集的说明。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTitleAttribute" /> 类的新实例。</summary>
      <param name="title">程序集标题。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>获取程序集标题信息。</summary>
      <returns>程序集标题。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>定义程序集清单的商标自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> 类的新实例。</summary>
      <param name="trademark">商标信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>获取商标信息。</summary>
      <returns>包含商标信息的 String。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>指定正在属性化的程序集的版本。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>使用正在属性化的程序集的版本号来初始化 AssemblyVersionAttribute 类的新实例。</summary>
      <param name="version">属性化程序集的版本号。</param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>获取属性化程序集的版本号。</summary>
      <returns>包含程序集的版本号的字符串。</returns>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>定义某类型的成员，该成员是 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 使用的默认成员。</summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 类的新实例。</summary>
      <param name="memberName">包含要调用的成员名称的 String。这可能是一个构造函数、方法、属性或字段。在调用成员时必须指定合适的调用属性。通过传递一个空 String 作为成员名称，可以指定类的默认成员。类型的默认成员由 DefaultMemberAttribute 自定义属性标记，或按通常的方法在 COM 中标记。</param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>从属性中获取名称。</summary>
      <returns>表示成员名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.ProcessorArchitecture">
      <summary>标识可执行文件的目标平台的处理器和每字位数。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Amd64">
      <summary>仅 64 位 AMD 处理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Arm">
      <summary>ARM 预处理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.IA64">
      <summary>仅 64 位 Intel 处理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.MSIL">
      <summary>不特定于处理器和每字位数。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.None">
      <summary>未知或未指定的处理器和每字位数的组合。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.X86">
      <summary>32 位 Intel 处理器，位于本机上或位于 64 位平台（WOW64）的 Windows on Windows 环境中。</summary>
    </member>
    <member name="T:System.Runtime.GCLargeObjectHeapCompactionMode">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]指示下一个阻塞垃圾回收是否压缩大型对象堆 (LOH)。</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce">
      <summary>下一次阻止第 2 代垃圾回收期间将压缩大型对象堆 (LOH)。</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.Default">
      <summary>不压缩大型对象堆 (LOH)。</summary>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>调整垃圾收集器侵入应用程序的时间。  </summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>在批调用中禁用垃圾回收并发，并回收对象。这是最高级别的侵入模式。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>在应用程序运行时启用垃圾回收并发，并回收对象。这是工作站上垃圾回收的默认模式，并且较 <see cref="F:System.Runtime.GCLatencyMode.Batch" /> 少受侵入。它可以平衡响应性和吞吐量。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>启用回收对象时比较保守的垃圾回收。仅在系统遇到内存压力时才发生完全回收，而通常情况下发生 0 代和 1 代回收</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.SustainedLowLatency">
      <summary>启用尝试减少延长时期的延迟的垃圾回收。回收器尝试只执行生成 0、生成 1，以及并发只生成 2 个集合。如果系统处于内存压力之下，则完整的阻碍性回收还是会出现。</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>指定当前进程的垃圾回收设置。</summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>获取一个值，该值指示是否启用了服务器垃圾回收。</summary>
      <returns>如果启用了服务器垃圾回收，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]获取或设置指示完全阻止垃圾回收是否压缩大型对象堆 (LOH) 的值。</summary>
      <returns>指示完全阻止垃圾回收是否压缩 LOH 的枚举值之一。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>获取或设置垃圾收集的当前滞后时间模式。</summary>
      <returns>指定滞后时间模式的枚举值之一。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Runtime.GCSettings.LatencyMode" />属性设置为无效值。- 或 -<see cref="P:System.Runtime.GCSettings.LatencyMode" />属性不能设置为<see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" />。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>指定访问属性化字段的属性的名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>使用用于访问属性化字段的属性的名称初始化 AccessedThroughPropertyAttribute 类的新实例。</summary>
      <param name="propertyName">用于访问属性化字段的属性的名称。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>获取用于访问属性化字段的属性的名称。</summary>
      <returns>用于访问属性化字段的属性的名称。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute">
      <summary>指示是否使用 Async (Visual Basic) 或 async（C# 参考） 修饰符标记方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute" /> 类的新实例。</summary>
      <param name="stateMachineType">用于实现状态机方法的基础状态机类型的类型对象。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
      <summary>允许您获取包含该调用者源文件的完整路径。这是在编译时的文件路径。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerFilePathAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
      <summary>允许您获取调用了方法的源文件的行号。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerLineNumberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
      <summary>允许您获取该方法的调用者方法或属性名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>控制由公共语言运行时的实时 (JIT) 编译器生成的代码的严格性。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>使用指定的编译松弛法初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> 类的新实例。</summary>
      <param name="relaxations">编译松弛法。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>获取构造当前对象时指定的编译松弛法。</summary>
      <returns>构造当前对象时指定的编译松弛法。将 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 枚举与 <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> 属性一起使用。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>区分编译器生成的元素与用户生成的元素。此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
      <summary>使编译器可以将对象字段动态附加到托管对象。</summary>
      <typeparam name="TKey">字段所附加到的引用类型。</typeparam>
      <typeparam name="TValue">字段的类型。此类型必须是引用类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
      <summary>将键添加到表中。</summary>
      <param name="key">要添加的键。<paramref name="key" /> 表示属性所附加到的对象。</param>
      <param name="value">该键的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 已存在。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize">
      <summary>确保释放资源并在垃圾回收器回收时执行其他清理操作<see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" />对象。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
      <summary>以原子方式在表中搜索指定键，并返回对应的值。如果表中不存在该键，此方法将调用表示表值的类的默认构造函数，以创建绑定到指定键的值。</summary>
      <returns>如果表中已存在 <paramref name="key" />，则为对应于 <paramref name="key" /> 的值；否则为 <paramref name="TValue" /> 范型类型参数定义的类的默认构造函数创建的新值。</returns>
      <param name="key">要搜索的键。<paramref name="key" /> 表示属性所附加到的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.MissingMethodException">在 .NET for Windows Store 应用程序 或 可移植类库 中，请改为捕获基类异常 <see cref="T:System.MissingMemberException" />。表示表中值的类未定义默认构造函数。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
      <summary>以原子方式在表中搜索指定键，并返回对应的值。如果表中不存在该键，此方法将调用一个回调方法来创建绑定到指定键的值。</summary>
      <returns>如果表中已存在 <paramref name="key" />，则为附加到 <paramref name="key" /> 的值；否则为 <paramref name="createValueCallback" /> 委托返回的新值。</returns>
      <param name="key">要搜索的键。<paramref name="key" /> 表示属性所附加到的对象。</param>
      <param name="createValueCallback">可以为给定 <paramref name="key" /> 创建值的方法的委托。它只有一个 <paramref name="TKey" /> 类型的参数，并返回一个 <paramref name="TValue" /> 类型的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="createValueCallback" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
      <summary>从表中移除某个键及其值。</summary>
      <returns>如果找到并移除该键，则为 true；否则为 false。</returns>
      <param name="key">要移除的键。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
      <summary>获取指定键的值。</summary>
      <returns>如果找到 <paramref name="key" />，则为 true；否则为 false。</returns>
      <param name="key">一个键，表示具有所附加的属性的对象。</param>
      <param name="value">此方法返回时，将包含所附加的属性值。如果找不到 <paramref name="key" />，则 <paramref name="value" /> 包含默认值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
      <summary>表示一个方法，该方法用于创建非默认值以将其作为键/值对组成部分添加到 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 对象。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.#ctor(System.Object,System.IntPtr)"></member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.BeginInvoke(`0,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.EndInvoke(System.IAsyncResult)"></member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback.Invoke(`0)"></member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>定义一个编译器可以为字段或方法参数永久保存的常数值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>获取该属性存储的常数值。</summary>
      <returns>该属性存储的常数值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>为字段或参数永久保存一个 8 字节的 <see cref="T:System.DateTime" /> 常数。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>用表示此实例日期和时间的以 100 毫微秒为单位的数字初始化 DateTimeConstantAttribute 类的新实例。</summary>
      <param name="ticks">表示此实例日期和时间的以 100 毫微秒为单位的数字。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>获取表示此实例日期和时间的以 100 毫微秒为单位的数字。</summary>
      <returns>表示此实例日期和时间的以 100 毫微秒为单位的数字。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>在元数据中存储 <see cref="T:System.Decimal" /> 常数的值。此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的有符号整数值初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 类的新实例。</summary>
      <param name="scale">比例因子（10 的幂），它指示小数点右边的数字位数。有效值为从 0 到 28（含）。</param>
      <param name="sign">值 0 指示正值，值 1 指示负值。</param>
      <param name="hi">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的高 32 位。</param>
      <param name="mid">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中间 32 位。</param>
      <param name="low">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的低 32 位。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>使用指定的无符号整数值初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 类的新实例。</summary>
      <param name="scale">比例因子（10 的幂），它指示小数点右边的数字位数。有效值为从 0 到 28（含）。</param>
      <param name="sign">值 0 指示正值，值 1 指示负值。</param>
      <param name="hi">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的高 32 位。</param>
      <param name="mid">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中间 32 位。</param>
      <param name="low">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的低 32 位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> &gt; 28.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>获取存储在此属性中的十进制常数。</summary>
      <returns>存储在此属性中的十进制常数。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute">
      <summary>表示程序集的类型中包含任何私有成员不可供反射。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute.#ctor">
      <summary>初始化的新实例<see cref="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute" />类。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>指示某个方法为扩展方法，或某个类或程序集包含扩展方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>指示字段应被视为包含指定基元类型的固定数目的元素。此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> 类的新实例。</summary>
      <param name="elementType">缓冲区中包含的元素的类型。</param>
      <param name="length">缓冲区中元素的数目。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>获取固定缓冲区中包含的元素的类型。</summary>
      <returns>元素的类型。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>获取缓冲区中元素的数目。</summary>
      <returns>固定缓冲区中元素的数目。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.FormattableStringFactory">
      <summary>提供一个静态方法，用于从复合格式字符串及其参数创建 <see cref="T:System.FormattableString" /> 对象。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FormattableStringFactory.Create(System.String,System.Object[])">
      <summary>从复合格式字符串及其参数创建 <see cref="T:System.FormattableString" /> 实例。</summary>
      <returns>表示复合格式字符串及其参数的对象。</returns>
      <param name="format">复合格式字符串。</param>
      <param name="arguments">要在结果字符串中插入其字符串表示形式的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。- 或 -<paramref name="arguments" /> 为 null。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>指示使索引器在不直接支持索引器的编程语言中已知的名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> 类的新实例。</summary>
      <param name="indexerName">显示给其他语言的索引器名称。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>指定通常仅在当前程序集中可见的类型对指定程序集可见。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>用指定的友元程序集的名称初始化 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> 类的新实例。</summary>
      <param name="assemblyName">友元程序集的名称。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>获取友元程序集的名称，采用 internal 关键字标记的所有类型和类型成员对该程序集均为可见。</summary>
      <returns>一个表示友元程序集名称的字符串。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsConst">
      <summary>指示修饰的类型有一个 const 修饰符。此类不能被继承。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>定义一个用于访问某个对象引用的值的属性。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>获取或设置某个对象引用的值。</summary>
      <returns>该对象引用的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>将字段标记为易失。此类不能被继承。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute">
      <summary>指示是否使用 Iterator 修饰符标记 Visual Basic 中的方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute" /> 类的新实例。</summary>
      <param name="stateMachineType">用于实现状态机方法的基础状态机类型的类型对象。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>指定如何实现某方法的详细信息。此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值初始化 <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> 类的新实例。</summary>
      <param name="methodImplOptions">一个 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，该值指定属性化方法的属性。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>获取描述属性化方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</summary>
      <returns>描述特性化方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>定义如何实现某方法的详细信息。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining">
      <summary>此方法应内联（如果可能）。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>不能内联该方法。内联是用方法主体代替方法调用的优化。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>调试可能的代码生成问题时优化该方法不是实时 (JIT) 编译器和本机代码生成（请参见 Ngen.exe）。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>此方法签名完全按声明的样子导出。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
      <summary>将程序集标识为包含元数据但不包含可执行代码的引用程序集。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
      <summary>使用指定的说明初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> 类的新实例。</summary>
      <param name="description">引用程序集的说明。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
      <summary>获取引用程序集的说明。</summary>
      <returns>引用程序集的说明。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>指定是否使用 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象包装不是从 <see cref="T:System.Exception" /> 类派生的异常。此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>获取或设置一个值，该值指示是否使用 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象包装不是从 <see cref="T:System.Exception" /> 类派生的异常。</summary>
      <returns>如果不是从 <see cref="T:System.Exception" /> 类派生的异常应包装在 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象中，则返回 true；否则为 false。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>提供一组为编译器提供支持的静态方法和属性。此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack">
      <summary>确保剩余的堆栈空间足够大，可以执行一般的 .NET Framework 函数。</summary>
      <exception cref="T:System.InsufficientExecutionStackException">可用堆栈空间足以执行一般的 .NET Framework 函数。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>用作特定对象的哈希函数，适合在使用哈希代码的算法和数据结构（如哈希表）中使用。</summary>
      <returns>
        <paramref name="o" /> 参数标识的对象的哈希代码。</returns>
      <param name="o">要检索其哈希代码的对象。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>将值类型装箱。</summary>
      <returns>如果 <paramref name="obj" /> 是一个值类，则返回其装箱的副本；否则返回 <paramref name="obj" /> 本身。</returns>
      <param name="obj">要装箱的值类型。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>提供从存储在模块中的数据初始化数组的快速方法。</summary>
      <param name="array">要初始化的数组。</param>
      <param name="fldHandle">一个字段句柄，它指定用于初始化数组的数据的位置。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>获取给定字符串中数据的偏移量（以字节为单位）。</summary>
      <returns>字节偏移量，从 <see cref="T:System.String" /> 对象的起始位置到字符串中的第一个字符。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>运行指定的类构造函数方法。</summary>
      <param name="type">一个用于指定要运行的类构造函数方法的类型句柄。</param>
      <exception cref="T:System.TypeInitializationException">在类初始值设定项引发异常。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.StateMachineAttribute">
      <summary>允许您确定一个方法是否为状态机方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.StateMachineAttribute" /> 类的新实例。</summary>
      <param name="stateMachineType">这用于执行状态计算机方法生成的编译器基础状态的计算机的类型对象。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType">
      <summary>返回编译器生成的实现状态机方法的基础状态机类型的类型对象。</summary>
      <returns>获取这用于执行状态计算机方法生成的编译器基础状态的计算机的类型对象。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>保存对某个值的引用。</summary>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值的类型。</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>初始化一个在引用调用中使用时可以接收值的新 StrongBox。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>使用提供的值初始化 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 类的一个新实例。</summary>
      <param name="value">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 将引用的值。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>获取或设置 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>表示 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>指定另一个程序集中的源 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" /> 类的新实例。</summary>
      <param name="assemblyFullName">另一个程序集中的源 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFullName" /> 为 null 或为空。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>获取源类型的程序集限定名称。</summary>
      <returns>源类型的程序集限定名称。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>指定另一个程序集中的目标 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>初始化指定目标 <see cref="T:System.Type" /> 的 <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> 类的新实例。</summary>
      <param name="destination">另一个程序集中的目标 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>获取另一个程序集中的目标 <see cref="T:System.Type" />。</summary>
      <returns>另一个程序集中的目标 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>指定某个类型包含可能溢出的非托管数组。此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
      <summary>表示异常，其状态在特定代码点捕获。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
      <summary>创建 <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> 对象，此对象在代码当前点表示指定异常。</summary>
      <returns>表示代码中当前点的指定异常的对象。</returns>
      <param name="source">由一个返回的对象表示且状态被捕获的异常。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
      <summary>获取被当前实例表示的异常。</summary>
      <returns>被当前实例表示的异常。</returns>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
      <summary>恢复捕获异常时保存的状态后，引发由当前 <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> 对象表示的异常。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>规定封送字符串应使用何种字符集。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>以多字节字符串的形式封送字符串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>以 Unicode 2 字节字符的形式封送字符串。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>控制程序集中个别托管类型、成员或所有类型对 COM 的可访问性。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>初始化 ComVisibleAttribute 类的新实例。</summary>
      <param name="visibility">true 指示该类型对 COM 可见；否则为 false。默认值为 true。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>获取一个值，该值指示 COM 类型是否可见。</summary>
      <returns>如果该类型可见，则为 true；否则为 false。默认值为 true。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>指示字段在类或结构的非托管表示形式内的物理位置。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>使用结构内到字段开始的偏移量初始化 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> 类的新实例。</summary>
      <param name="offset">从结构开始处到字段开始处的偏移量（以字节为单位）。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>获取从结构开始到字段开始的偏移量。</summary>
      <returns>从结构开始到字段开始的偏移量。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>控制当导出到非托管代码时对象的布局。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>运行库自动为非托管内存中的对象的成员选择适当的布局。使用此枚举成员定义的对象不能在托管代码的外部公开。尝试这样做将引发异常。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>在未管理内存中的每一个对象成员的精确位置是被显式控制的，服从于 <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> 字段的设置。每个成员必须使用 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> 指示该字段在类型中的位置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>对象的成员按照它们在被导出到非托管内存时出现的顺序依次布局。这些成员根据在 <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> 中指定的封装进行布局，并且可以是不连续的。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>指示应将数据从被调用方封送回调用方。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.OutAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>允许你控制内存中类或结构的数据字段的物理布局。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>用指定的 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 类的新实例。</summary>
      <param name="layoutKind">枚举值之一，指定应该如何排列类或结构。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>指示在默认情况下是否应将类中的字符串数据字段作为 LPWSTR 或 LPSTR 进行封送处理。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>控制类或结构的数据字段在内存中的对齐方式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>指示类或结构的绝对大小。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值，该值指定如何排列类或结构。</summary>
      <returns>枚举值之一，指定如何排列类或结构。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
      <summary>标识某个特定程序集编译时针对 .NET Framework 的版本。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
      <summary>通过指定一个程序集在生成时针对的 .NET Framework 版本，初始化 <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" /> 类的实例。</summary>
      <param name="frameworkName">生成该程序集时针对的 .NET Framework 的版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> 为 null。</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
      <summary>获取生成某个程序集时针对的 .NET Framework 版本的显示名称。</summary>
      <returns>.NET Framework 版本的显示名称。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
      <summary>获取编译某个特定程序集时针对的 .NET Framework 版本的名称。</summary>
      <returns>编译该程序集时针对的 .NET Framework 版本的名称。</returns>
    </member>
    <member name="T:System.Security.AllowPartiallyTrustedCallersAttribute">
      <summary>允许部分受信任的代码调用某个程序集。如果没有此声明，则只有完全受信任的调用方才可以使用该程序集。此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
      <summary>指定代码或程序集执行安全性关键型操作。</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityCriticalAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>检测到安全性错误时引发的异常。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常。如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>返回当前 <see cref="T:System.Security.SecurityException" /> 的表示形式。</summary>
      <returns>当前 <see cref="T:System.Security.SecurityException" /> 的字符串表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
      <summary>将类型或成员标识为安全关键并且可供透明代码安全访问。</summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecuritySafeCriticalAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
      <summary>指定程序集无法引起特权提升。</summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityTransparentAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>在以下情况引发的异常：安全策略要求代码为类型安全的代码，并且验证过程无法验证该代码是否为类型安全的代码。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Security.VerificationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>用说明性消息初始化 <see cref="T:System.Security.VerificationException" /> 类的新实例。</summary>
      <param name="message">一条指示异常发生原因的消息。</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.VerificationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="innerException">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>表示可变字符字符串。此类不能被继承。若要浏览此类型的.NET Framework 源代码，请参阅参考源。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>使用指定的容量初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="capacity">此实例的建议起始大小。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例，该类起始于指定容量并且可增长到指定的最大容量。</summary>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 的建议起始大小。</param>
      <param name="maxCapacity">当前字符串可包含的最大字符数。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> 小于一，<paramref name="capacity" /> 小于零，或 <paramref name="capacity" /> 大于 <paramref name="maxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="value">用于初始化实例值的字符串。如果 <paramref name="value" /> 为 null，则新的 <see cref="T:System.Text.StringBuilder" /> 将包含空字符串（即包含 <see cref="F:System.String.Empty" />）。</param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>使用指定的字符串和容量初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="value">用于初始化实例值的字符串。如果 <paramref name="value" /> 为 null，则新的 <see cref="T:System.Text.StringBuilder" /> 将包含空字符串（即包含 <see cref="F:System.String.Empty" />）。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 的建议起始大小。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>用指定的子字符串和容量初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="value">字符串包含用于初始化此实例值的子字符串。如果 <paramref name="value" /> 为 null，则新的 <see cref="T:System.Text.StringBuilder" /> 将包含空字符串（即包含 <see cref="F:System.String.Empty" />）。</param>
      <param name="startIndex">
        <paramref name="value" /> 中子字符串开始的位置。</param>
      <param name="length">子字符串中的字符数。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 的建议起始大小。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。- 或 - <paramref name="startIndex" /> 加上 <paramref name="length" /> 不是 <paramref name="value" /> 中的位置。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>向此实例追加指定的布尔值的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的布尔值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>向此实例追加指定的 8 位无符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>向此实例追加指定 Unicode 字符的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的 Unicode 字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char*,System.Int32)">
      <summary>将追加到此实例的指定地址处开始的 Unicode 字符的数组。</summary>
      <returns>完成追加操作后对此实例的引用。 </returns>
      <param name="value">指向一个字符数组的指针。</param>
      <param name="valueCount">数组中的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> 小于零。- 或 -增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。 </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" />为 null 指针。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>向此实例追加 Unicode 字符的字符串表示形式指定数目的副本。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的字符。</param>
      <param name="repeatCount">追加 <paramref name="value" /> 的次数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> 小于零。- 或 -增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>向此实例追加指定数组中的 Unicode 字符的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的字符数组。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>向此实例追加指定的 Unicode 字符子数组的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">字符数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 中的起始位置。</param>
      <param name="charCount">要追加的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null，并且 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不为零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小于零。- 或 - <paramref name="startIndex" /> 小于零。- 或 - <paramref name="startIndex" /> + <paramref name="charCount" /> 大于 <paramref name="value" /> 的长度。- 或 -增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>向此实例追加指定的十进制数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>向此实例追加指定的双精度浮点数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>向此实例追加指定的 16 位有符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>向此实例追加指定的 32 位有符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>向此实例追加指定的 64 位有符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>向此实例追加指定对象的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>向此实例追加指定的 8 位有符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>向此实例追加指定的单精度浮点数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>向此实例追加指定字符串的副本。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>向此实例追加指定子字符串的副本。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">包含要追加的子字符串的字符串。</param>
      <param name="startIndex">
        <paramref name="value" /> 中子字符串开始的位置。</param>
      <param name="count">
        <paramref name="value" /> 中要追加的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null，并且 <paramref name="startIndex" /> 和 <paramref name="count" /> 不为零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。- 或 - <paramref name="startIndex" /> 小于零。- 或 - <paramref name="startIndex" /> + <paramref name="count" /> 大于 <paramref name="value" /> 的长度。- 或 -增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>向此实例追加指定的 16 位无符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>向此实例追加指定的 32 位无符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>向此实例追加指定的 64 位无符号整数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。每个格式项都使用指定的格式提供程序替换为单个参数的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。追加操作后，此实例包含执行操作，加上后缀的副本之前已存在的任何数据<paramref name="format" />规范由字符串表示形式中的任何格式的替换<paramref name="arg0" />。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串（请参见“备注”）。</param>
      <param name="arg0">要设置格式的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 -格式项的索引小于 0 （零），或者大于或等于一 (1)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。每个格式项都使用指定的格式提供程序替换为两个参数中任一个的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 <paramref name="format" /> 的副本作为后缀，其中任何格式规范都由相应对象参数的字符串表示形式替换。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串（请参见“备注”）。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 -格式项的索引小于 0 （零），或者大于或等于 2 （两个）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。每个格式项都使用指定的格式提供程序替换为三个参数中任一个的字符串表示形式。</summary>
      <returns>完成追加操作后对此实例的引用。完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 <paramref name="format" /> 的副本作为后缀，其中任何格式规范都由相应对象参数的字符串表示形式替换。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串（请参见“备注”）。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <param name="arg2">要设置格式的第三个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 -格式项的索引小于 0 （零），或者大于或等于 3 （三个）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。每个格式项都使用指定的格式提供程序由参数数组中相应参数的字符串表示形式替换。</summary>
      <returns>完成追加操作后对此实例的引用。完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 <paramref name="format" /> 的副本作为后缀，其中任何格式规范都由相应对象参数的字符串表示形式替换。</returns>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串（请参见“备注”）。</param>
      <param name="args">要设置其格式的对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 -格式项的索引小于 0（零）或大于等于 <paramref name="args" /> 数组的长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。每个格式项都替换为一个参数的字符串表示形式。</summary>
      <returns>对追加了 <paramref name="format" /> 的此实例的引用。<paramref name="format" /> 中的每个格式项都替换为 <paramref name="arg0" /> 的字符串表示形式。</returns>
      <param name="format">复合格式字符串（请参见“备注”）。</param>
      <param name="arg0">要设置其格式的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 -格式项的索引小于 0（零），或大于或等于 1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。每个格式项都替换为这两个参数中任意一个参数的字符串表示形式。</summary>
      <returns>对追加了 <paramref name="format" /> 的此实例的引用。<paramref name="format" /> 中的每个格式项都由相应的对象参数的字符串表示形式替换。</returns>
      <param name="format">复合格式字符串（请参见“备注”）。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 -格式项的索引小于 0（零），或大于或等于 2。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。每个格式项都替换为这三个参数中任意一个参数的字符串表示形式。</summary>
      <returns>对追加了 <paramref name="format" /> 的此实例的引用。<paramref name="format" /> 中的每个格式项都由相应的对象参数的字符串表示形式替换。</returns>
      <param name="format">复合格式字符串（请参见“备注”）。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <param name="arg2">要设置格式的第三个对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 -格式项的索引小于 0（零），或大于或等于 3。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。每个格式项都由参数数组中相应参数的字符串表示形式替换。</summary>
      <returns>对追加了 <paramref name="format" /> 的此实例的引用。<paramref name="format" /> 中的每个格式项都由相应的对象参数的字符串表示形式替换。</returns>
      <param name="format">复合格式字符串（请参见“备注”）。</param>
      <param name="args">要设置其格式的对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 为 null。 </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 -格式项的索引小于 0（零）或大于等于 <paramref name="args" /> 数组的长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>将默认的行终止符追加到当前 <see cref="T:System.Text.StringBuilder" /> 对象的末尾。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>将后面跟有默认行终止符的指定字符串的副本追加到当前 <see cref="T:System.Text.StringBuilder" /> 对象的末尾。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <param name="value">要追加的字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>获取或设置可包含在当前实例所分配的内存中的最大字符数。</summary>
      <returns>可包含在当前实例所分配的内存中的最大字符数。其值可以介于<see cref="P:System.Text.StringBuilder.Length" />到<see cref="P:System.Text.StringBuilder.MaxCapacity" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于此实例的当前长度。- 或 -为设置操作指定的值大于最大容量。 </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>获取或设置此实例中指定字符位置处的字符。</summary>
      <returns>
        <paramref name="index" /> 位置处的 Unicode 字符。</returns>
      <param name="index">字符的位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">在设置一个字符时 <paramref name="index" /> 在此实例的范围之外。 </exception>
      <exception cref="T:System.IndexOutOfRangeException">在获取一个字符时 <paramref name="index" /> 在此实例的范围之外。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>从当前 <see cref="T:System.Text.StringBuilder" /> 实例中移除所有字符。</summary>
      <returns>其 <see cref="P:System.Text.StringBuilder.Length" /> 为 0（零）的对象。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>将此实例的指定段中的字符复制到目标 <see cref="T:System.Char" /> 数组的指定段中。</summary>
      <param name="sourceIndex">此实例中开始复制字符的位置。索引是从零开始的。</param>
      <param name="destination">将从中复制字符的数组。</param>
      <param name="destinationIndex">
        <paramref name="destination" /> 中将从其开始复制字符的起始位置。索引是从零开始的。</param>
      <param name="count">要复制的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" />，小于零。- 或 -<paramref name="sourceIndex" /> 大于此实例的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> + <paramref name="count" /> 大于此实例的长度。- 或 -<paramref name="destinationIndex" /> + <paramref name="count" /> 大于 <paramref name="destination" /> 的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>确保 <see cref="T:System.Text.StringBuilder" /> 的此实例的容量至少是指定值。</summary>
      <returns>此实例的新容量。</returns>
      <param name="capacity">要确保的最小容量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。- 或 -增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <returns>如果此实例和 <paramref name="sb" /> 具有相等的字符串、<see cref="P:System.Text.StringBuilder.Capacity" /> 和 <see cref="P:System.Text.StringBuilder.MaxCapacity" /> 值，则为 true；否则，为 false。</returns>
      <param name="sb">与此实例进行比较的 object，或 null。 </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>将布尔值的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>将指定的 8 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>将指定的 Unicode 字符的字符串表示形式插入到此实例中的指定位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。- 或 -增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。 </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>将指定的 Unicode 字符数组的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的字符数组。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。- 或 -增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>将指定的 Unicode 字符子数组的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">字符数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始索引。</param>
      <param name="charCount">要插入的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null，并且 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不为零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />、<paramref name="startIndex" /> 或 <paramref name="charCount" /> 小于零。- 或 - <paramref name="index" /> 大于此实例的长度。- 或 - <paramref name="startIndex" /> 加上 <paramref name="charCount" /> 不是 <paramref name="value" /> 中的位置。- 或 -增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>将十进制数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>将双精度浮点数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>将指定的 16 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>将指定的 32 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>将 64 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>将对象的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的对象或 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>将指定的 8 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>将单精度浮点数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>将字符串插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的当前长度。- 或 -此 <see cref="T:System.Text.StringBuilder" /> 对象的当前长度加上 <paramref name="value" /> 的长度超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>将指定字符串的一个或更多副本插入到此实例中的指定字符位置。</summary>
      <returns>完成插入后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的字符串。</param>
      <param name="count">插入 <paramref name="value" /> 的次数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的当前长度。- 或 - <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.OutOfMemoryException">此 <see cref="T:System.Text.StringBuilder" /> 对象的当前长度加上 <paramref name="value" /> 的长度乘以 <paramref name="count" /> 的值超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>将 16 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>将 32 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>将 64 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <returns>完成插入操作后对此实例的引用。</returns>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>获取或设置当前 <see cref="T:System.Text.StringBuilder" /> 对象的长度。</summary>
      <returns>此实例的长度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于零或大于 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>获取此实例的最大容量。</summary>
      <returns>此实例可容纳的最大字符数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>将指定范围的字符从此实例中移除。</summary>
      <returns>切除操作完成后对此实例的引用。</returns>
      <param name="startIndex">此实例中开始移除操作的从零开始的位置。</param>
      <param name="length">要删除的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">如果 <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零，或者 <paramref name="startIndex" />+<paramref name="length" /> 大于此实例的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>将此实例中出现的所有指定字符替换为其他指定字符。</summary>
      <returns>对此实例的引用，其中 <paramref name="oldChar" /> 被 <paramref name="newChar" /> 替换。</returns>
      <param name="oldChar">要替换的字符。</param>
      <param name="newChar">替换 <paramref name="oldChar" /> 的字符。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>将此实例的子字符串中出现的所有指定字符替换为其他指定字符。</summary>
      <returns>对此实例的引用，其中从 <paramref name="startIndex" /> 到 <paramref name="startIndex" /> + <paramref name="count" /> -1 范围内的 <paramref name="oldChar" /> 被 <paramref name="newChar" /> 替换。</returns>
      <param name="oldChar">要替换的字符。</param>
      <param name="newChar">替换 <paramref name="oldChar" /> 的字符。</param>
      <param name="startIndex">此实例中子字符串开始的位置。</param>
      <param name="count">子字符串的长度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />+<paramref name="count" /> 大于此实例值的长度。- 或 - <paramref name="startIndex" /> 或 <paramref name="count" /> 小于零。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>将此实例中出现的所有指定字符串的替换为其他指定字符串。</summary>
      <returns>对此实例的引用，其中 <paramref name="oldValue" /> 的所有实例被 <paramref name="newValue" /> 替换。</returns>
      <param name="oldValue">要替换的字符串。</param>
      <param name="newValue">替换 <paramref name="oldValue" /> 的字符串或 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 的长度为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>将此实例的子字符串中出现的所有指定字符串替换为其他指定字符串。</summary>
      <returns>对此实例的引用，其中从 <paramref name="startIndex" /> 到 <paramref name="startIndex" />+<paramref name="count" />- 1 的范围内 <paramref name="oldValue" /> 的所有实例被 <paramref name="newValue" /> 替换。</returns>
      <param name="oldValue">要替换的字符串。</param>
      <param name="newValue">替换 <paramref name="oldValue" /> 的字符串或 null。</param>
      <param name="startIndex">此实例中子字符串开始的位置。</param>
      <param name="count">子字符串的长度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 的长度为零。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小于零。- 或 - <paramref name="startIndex" /> 与 <paramref name="count" /> 之和指示一个不在此实例内的字符位置。- 或 -增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>将此实例的值转换为 <see cref="T:System.String" />。</summary>
      <returns>其值与此实例相同的字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>将此实例中子字符串的值转换为 <see cref="T:System.String" />。</summary>
      <returns>一个字符串，其值与此实例的指定子字符串相同。</returns>
      <param name="startIndex">此实例内子字符串的起始位置。</param>
      <param name="length">子字符串的长度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。- 或 -<paramref name="startIndex" /> 与 <paramref name="length" /> 的和大于当前实例的长度。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>指定 <see cref="T:System.Lazy`1" /> 实例如何同步多个线程间的访问。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>使用锁来确保只有一个线程可以在线程安全的方式下初始化 <see cref="T:System.Lazy`1" /> 实例。如果初始化方法（如果没有初始化方法，则为默认构造函数）在内部使用锁，则可能会发生死锁。如果使用指定初始化方法（<paramref name="valueFactory" /> 参数）的 <see cref="T:System.Lazy`1" /> 构造函数，并且如果此初始化方法在您首次调用 <see cref="P:System.Lazy`1.Value" /> 属性时引发了一个异常（或无法处理异常），则会缓存该异常并在随后调用 <see cref="P:System.Lazy`1.Value" /> 属性时再次引发该异常。如果您使用不指定初始化方法的 <see cref="T:System.Lazy`1" /> 构造函数，则不会缓存 <paramref name="T" /> 默认构造函数引发的异常。在此情况下，对 <see cref="P:System.Lazy`1.Value" /> 属性进行后续调用可成功初始化 <see cref="T:System.Lazy`1" /> 实例。如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则引发 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>
        <see cref="T:System.Lazy`1" /> 实例不是线程安全的；如果从多个线程访问该实例，则其行为不确定。仅应在高性能至关重要并且保证决不会从多个线程初始化 <see cref="T:System.Lazy`1" /> 实例时才使用该模式。如果使用指定初始化方法（<paramref name="valueFactory" /> 参数）的 <see cref="T:System.Lazy`1" /> 构造函数，并且如果此初始化方法在您首次调用 <see cref="P:System.Lazy`1.Value" /> 属性时引发了一个异常（或无法处理异常），则会缓存该异常并在随后调用 <see cref="P:System.Lazy`1.Value" /> 属性时再次引发该异常。如果您使用不指定初始化方法的 <see cref="T:System.Lazy`1" /> 构造函数，则不会缓存 <paramref name="T" /> 默认构造函数引发的异常。在此情况下，对 <see cref="P:System.Lazy`1.Value" /> 属性进行后续调用可成功初始化 <see cref="T:System.Lazy`1" /> 实例。如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则引发 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>当多个线程尝试同时初始化一个 <see cref="T:System.Lazy`1" /> 实例时，允许所有线程都运行初始化方法（如果没有初始化方法，则为默认构造函数）。完成初始化的第一个线程设置 <see cref="T:System.Lazy`1" /> 实例的值。该值将返回给同时运行初始化方法的所有其他线程，除非该初始化方法对这些线程引发异常。争用线程创建的任何 <paramref name="T" /> 实例都将被丢弃。如果初始化方法对任何线程引发异常，则该异常会从该线程上的 <see cref="P:System.Lazy`1.Value" /> 属性传播出去。不缓存该异常。<see cref="P:System.Lazy`1.IsValueCreated" /> 属性的值仍然为 false，并且随后通过其中引发异常的线程或通过其他线程对 <see cref="P:System.Lazy`1.Value" /> 属性的调用会导致初始化方法再次运行。如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则不会引发异常。</summary>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>包含指定无限期超时间隔的常数。此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>一个用于指定无限长等待时间的常数，适用于接受 <see cref="T:System.Int32" /> 参数的线程处理方法。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:System.Threading.Timeout.InfiniteTimeSpan">
      <summary>用于指定无限等待期限的常数，接受 <see cref="T:System.TimeSpan" /> 参数的方法。</summary>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>封装等待对共享资源的独占访问的操作系统特定的对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>初始化 <see cref="T:System.Threading.WaitHandle" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>释放 <see cref="T:System.Threading.WaitHandle" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>当在派生类中重写时，释放 <see cref="T:System.Threading.WaitHandle" /> 使用的非托管资源，并且可选择释放托管资源。</summary>
      <param name="explicitDisposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>表示无效的本机操作系统句柄。此字段为只读。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>等待指定数组中的所有元素都收到信号。</summary>
      <returns>如果 true 中的每个元素都收到信号，则返回 <paramref name="waitHandles" />；否则该方法永不返回。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。此数组不能包含对同一对象的多个引用。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array are null. -or-<paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.Int32" /> 值指定时间间隔。</summary>
      <returns>如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 true；否则为 false。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。此数组不能包含对同一对象的多个引用（重复的元素）。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or- One or more of the objects in the <paramref name="waitHandles" /> array is null. -or-<paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 值指定时间间隔。</summary>
      <returns>如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 true；否则为 false。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。此数组不能包含对同一对象的多个引用。</param>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null. -or- One or more of the objects in the <paramref name="waitHandles" /> array is null. -or-<paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.DuplicateWaitObjectException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.The <paramref name="waitHandles" /> array contains elements that are duplicates. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.-or- The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait terminated because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>等待指定数组中的任一元素收到信号。</summary>
      <returns>满足等待的对象的数组索引。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>等待指定数组中的任意元素接收信号，同时使用 32 位有符号整数指定时间间隔。</summary>
      <returns>满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> 的时间间隔已过，则为 <paramref name="millisecondsTimeout" />。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等待指定数组中的任意元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</summary>
      <returns>满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="timeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <param name="waitHandles">一个 WaitHandle 数组，包含当前实例将等待的对象。</param>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="waitHandles" /> parameter is null.-or-One or more of the objects in the <paramref name="waitHandles" /> array is null. </exception>
      <exception cref="T:System.NotSupportedException">The number of objects in <paramref name="waitHandles" /> is greater than the system permits. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> is an array with no elements. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号。</summary>
      <returns>如果当前实例收到信号，则为 true。如果当前实例永不发出信号，则 <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> 永不返回。</returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号，同时使用 32 位带符号整数指定时间间隔（以毫秒为单位）。</summary>
      <returns>如果当前实例收到信号，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>阻止当前线程，直到当前实例收到信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</summary>
      <returns>如果当前实例收到信号，则为 true；否则为 false。</returns>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">The current instance has already been disposed. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.-or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
      <exception cref="T:System.Threading.AbandonedMutexException">The wait completed because a thread exited without releasing a mutex.This exception is not thrown on Windows 98 or Windows Millennium Edition.</exception>
      <exception cref="T:System.InvalidOperationException">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</exception>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>指示在任何等待句柄终止之前 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 操作已超时。此字段为常数。</summary>
      <filterpriority>1</filterpriority>
    </member>
  </members>
</doc>