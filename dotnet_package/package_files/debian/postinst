#!/bin/bash
# postinst script for dotnet package
#
# Installs a dnu via dnvm
# Restores a set of root project.json files (StdLib, driver, coreclr)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# Bring in Properties
source /usr/share/dotnet/config/config.shprops

# DNX/DNVM Configuration
DNX_HOME=$INSTALL_ROOT/dnx
DNX_USER_HOME=$DNX_HOME
DNX_GLOBAL_HOME=$DNX_HOME
DNVM_SOURCE="https://raw.githubusercontent.com/aspnet/Home/dev/dnvm.sh"


install_nuget_client(){
	# Currently Dnu is the nuget client
	install_dnu
}

install_dnu(){
	# Custom install of DNVM, this is currently the easiest way to get dnu
	mkdir -p "$DNX_HOME/dnvm"
	if [ -s "$DNX_HOME/dnvm/dnvm.sh" ]; then
	    echo "dnvm is already installed in $DNX_HOME/dnvm, trying to update"
	else
	    echo "Downloading dnvm as script to '$DNX_HOME/dnvm'"
	fi

	curl -s "$DNVM_SOURCE" -o "$DNX_HOME/dnvm/dnvm.sh" || {
		echo >&2 "Failed to download '$DNVM_SOURCE'.."
		return 1
	}

	source $DNX_HOME/dnvm/dnvm.sh

	# Install Latest dnx
	dnvm install latest -r coreclr -alias coreclr-latest
}

copy_runtime_and_native_nuget_assets(){
	if [ -z "$1" ] || [ -z "$2" ]; then
		echo "Usage: copy_runtime_and_native_nuget_assets {project.lock.json path} {output directory}"
	fi

	project_lock_json_path="$1"
	output_dir="$2"

	if [ ! -f $project_lock_json_path ]; then
		echo "Invalid project_lock_json path"
		exit 1
	fi

	if [ ! -d $output_dir ]; then
		echo "Invalid Output directory"
	fi

	assembly_paths=( $(/usr/bin/python ${INSTALL_ROOT}/scripts/resolve_nuget_assets.py -f "DNXCore,Version=v5.0" -r "ubuntu.14.04-x64" -n -p ${NUGET_PACKAGE_CACHE} ${project_lock_json_path}) )
		
	for assembly_path in "${assembly_paths[@]}"
	do
		echo $assembly_path
		if [ -f ${assembly_path} ]; then
			cp $assembly_path ${output_dir} 
		fi
	done
}

restore_project_json(){
	if [ -z "$1" ] || [ ! -d "$1" ]; then
		echo "Usage: $1 path of root directory of project.json to restore"
		exit 1
	fi

	restore_dir="$1"

	source $DNX_HOME/dnvm/dnvm.sh
	dnvm use coreclr-latest
	
	dnu restore $restore_dir --packages $NUGET_PACKAGE_CACHE $(printf -- "-s %s " "${NUGET_PACKAGE_SOURCES[@]}")
}

#Restores Root and CoreCLR. Copies Assets for CoreCLR and Driver.
restore_and_resolve_install_packages(){
	restore_project_json $INSTALL_ROOT
	restore_project_json $INSTALL_ROOT/coreclr 
	
	copy_runtime_and_native_nuget_assets ${INSTALL_ROOT}/coreclr/project.lock.json ${INSTALL_ROOT}/coreclr
	
}

set_installed_files_permissions(){
	# Set Ownership to root, of everything
	chown -R root ${INSTALL_ROOT}
	chown root /usr/bin/dotnet

	# Read/Exec for Everyone, Write for Root
	chmod -R a+rx ${INSTALL_ROOT}
	chmod -R u+w ${INSTALL_ROOT}
}

do_install(){
	#Install Nuget Client and Restore Root packages
	install_nuget_client
	restore_and_resolve_install_packages
	set_installed_files_permissions


	#Set up symlink to dnu
	ln -s ${DNX_HOME}/runtimes/*/bin/dnu /usr/bin/dotnet_dnu
}



case "$1" in

	# Expecting a normal install procedure
    configure)
		do_install
    ;;

    # Something went wrong somewhere, expected to be in a clean Install State afterwards
    abort-upgrade|abort-remove|abort-deconfigure)
		do_install
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
